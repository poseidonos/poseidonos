R"AIR(

This configuration file is used as an AIR fundamental setting.
All of setting data would be interpreted at compile-time.
If this configuration syntax is invalid, it means build error may occur.

Paragraphs are organized within sqaure brackets at the beginning and end.
Sentences must be enclosed in double quotation marks.
In paragraph, several sentences could be exist. Here is an example.
[Paragraph1] "Sentence1" "Sentence2" "Sentence3" [/Paragraph2]
User should not change paragraphs.
User could change or add/remove sentences.


- DEFAULT paragraph contains default behavior.
  This paragraph must have only one sentence which has key:value pairs below.

  * AirBuild              {Mandatory key, Valid value: True/False}
  : False value means all AIR API do nothing and all the other options below is useless.
  So that target application might be built without AIR library at compile-time(depending on optimization).
  User can not control this option at run-time.
  
  * StreamingInterval     {Mandatory key, Valid value: 1~99 (seconds)}
  : AIR internally collects raw sampled data and calculates it to make statistics result.
  StreamingInterval key means periodic base time for calculating & saving the result.
  For example, when this value is set to 3, every 3 seconds, sampled data during 3 seconds will be calculated
  and the statistics result will be sent to the file(/tmp/air_yyyymmdd_pid.json).
  User can control this option by air_cli, air_tui at run-time.

  * FileWrite             {Mandatory key, Valid value: On/Off}
  : Off value means AIR do not write the statistics result to the file.
  User can control this option by air_cli at run-time.

  * RemainingFileCount    {Mandatory key, Valid value: 1~99 (files = days)}
  : If FileWrite value is On, AIR keeps the count of files in the latest date.
  This option could prevent it from being full of local disk.
  User can control this option by air_cli at run-time.

  * NodeBuild             {Mandatory key, Valid value: True/False}
  : False value means airlog(...) API do nothing but other AIR business logic works.
  If a sentence has not this option in GROUP and NODE paragraph, that follows DEFAULT paragraph's rule.
  User can not control this option at run-time.
  
  * NodeRun               {Mandatory, Valid value: On/Off}
  : Off value means airlog(...) API stop logging. On value means airlog(...) API keep logging.
  If a sentence has not this option in GROUP and NODE paragraph, that follows DEFAULT paragraph's rule.
  User can control this option by air_cli, air_tui at run-time.

  * NodeSamplingRatio     {Mandatory, Valid value: 1~99999 (probability = 1/N)}
  : Queue type of NODE sentences may effect this sampling rule. For example, when this value is set to 1000,
  airlog(...) API actually collect raw data once a thousand.
  User can control this option by air_cli, air_tui at run-time.
  
  * NodeIndexSize         {Mandatory, Valid value: 1~999}
  : NodeIndex could be used to profiling numerical separation for the same NODE sentence.
  For example, when NodeIndexSize value is set to 10, user can distinguish 10 maximum different(hashed)
  statistics data for the same NODE sentence. The range of the NodeIndex is the same as the range of uint64_t.
  When AIR build, NodeIndexSize is one of the factor to decide memory pool size.
  User can not control this option at run-time.

[DEFAULT]
    "AirBuild: True, StreamingInterval: 3, FileWrite: On, RemainingFileCount: 1,
    NodeBuild: False, NodeRun: Off, NodeSamplingRatio: 1000, NodeIndexSize : 100"
[/DEFAULT]


- GROUP paragraph defines group behavior.
  GROUP sentences may have node related behavior(NodeBuild, NodeRun, ...) such as DEFAULT sentence.
  However, it's not necessary but optional.
  If a GROUP sentence has a different value of NodeRun, group rule has more higher priority than default rule.
  So that, it follows GROUP sentence's NodeRun value. If not defined NodeRun, it follows default behavior.
  This paragraph could have several sentences which have key:value pairs below.
  
  * Group               {Mandatory, Valid value: unique string in GROUP paragraph}
  : Name of group, this value has to be unique in GROUP paragraph without space.
  User can not control this option at run-time.

  * NodeBuild           {Optional, Valid value: True/False}
  : Same as default rule

  * NodeRun             {Optional, Valid value: On/Off}
  : Same as default rule

  * NodeSamplingRatio   {Optional, Valid value: 1~99999 (probability = 1/N)}
  : Same as default rule

  * NodeIndexSize       {Optional, Valid value: 1~999}
  : Same as default rule

[GROUP]
    "Group: M9K,          NodeBuild: True, NodeRun: On, NodeIndexSize: 512"
    "Group: MFS"
    "Group: POS_IO"
    "Group: POS_GC"
    "Group: POS_RAID"
    "Group: BACKEND_TEST"
    "Group: TELEMETRY,    NodeBuild: True, NodeRun: On"
[/GROUP]


- FILTER paragraph defines semantic separation for the NODE sentence.
  This paragraph could have several sentences which have key:value pairs below.
  
  * Filter              {Mandatory, Valid value: unique enum name in target application}
  : Name of filter, this value is used as enum name in target application cause of C-style API extension.
  
  * Item                {Mandatory, Valid value: unique enumerator in target application}
  : This value is used as enumerator in target application. It's organized within round bracket.
  In round bracket, number of enumerators could be exist. Here is an example.
  (TYPE_A, TYPE_B, TYPE_C)
  Also, range expression with suffix(_#number) is possible. Here is an example.
  (TYPE_1 ... TYPE_30)

[FILTER]
    "Filter: Base,          Item: (base)"
    "Filter: IO,            Item: (read, write)"
    "Filter: DeviceIO,      Item: (unknown, journal, meta, flushmap, gc, host, flush, rebuild)"
    "Filter: RawIO,         Item: (user, internal)"
    "Filter: SimpleLat,     Item: (begin, end)"
    "Filter: Range,         Item: (flag_0 ... flag_5)"
    "Filter: AllocBlk,      Item: (buf_full_create_fail, alloc_fail, pass)"
    "Filter: Device,        Item: (nvram, ssd)"
    "Filter: Callback,      Item: (alloc, exe_begin, exe_end, free)"
    "Filter: CoreStatus,    Item: (idle, busy)"
[/FILTER]


- BUCKET paragraph defines histogram's bucket range, size and scale.
  Only histogram type NODE sentence can have and must have a Bucket option.
  Depending on Scale notation, each BUCKET sentence is distinguished a linear type or a exponential type.
  This paragraph could have several sentences which have key:value pairs below.

  * Bucket            {Mandatory, Valid value: unique string in BUCKET paragraph}
  : Name of bucket, this value has to be unique in BUCKET paragraph without space.
  User can not control this option at run-time.

  * Scale             {Mandatory, Valid value: unsigned integer or 2^~10^}
  : This value means range of each bucket.
  If this value includes circumflex symbol(^), it's exponential type. Or not, it's linear type.
  For example, "Bucket: BUCKET_1, Bounds: [0, 100), Scale: 10" is a linear type and bucket scope is 10.
  Bucket's ranges are 0 <= bucket[0] < 9, 10 <= bucket[1] < 20, ..., 90 <= bucket[9] < 100
  "Bucket: BUCKET_4, Bounds: [2^0, 2^10), Scale: 2^" is a exponential type and bucket scope is 2^.
  Bucket's ranges are 1 <= bucket[0] < 2, 2 <= bucket[1] < 4, ..., 512 <= bucket[9] < 1024
  "Bucket: BUCKET_6, Bounds: (-10^3, 10^5), Scale: 10^" is a exponential type and bucket scope is 10^.
  Bucket's ranges are -1000 < bucket[0] <= -100, -100 < bucket[1] <= -10, -10 < bucket[2] <= -1,
  0 <= bucket[3] <= 0, 1 <= bucket[4] < 10, ..., 10000 <= bucket[8] < 100000

  * Bounds            {Mandatory, Valid value: nations for intervals}
  : This value basically follows mathematics interval. (a, b] = {x -> integer(^exponent), a < x <= b}
  'a' is a lower boundary and 'b' is a upper boundary.
  In a linear type BUCKET sentence, notaion has to be '[ , )' so that it's easy to get bucket size.
  Bucket size is ((b - a) / scale). If bucket size exceed 20, syntax error will occur at compile-time.
  In a exponential type BUCKET sentence, if a > 0, notation has to be '[ , )',
  else if b < 0, notation has to be '( , ]', else notation has to be '( , )'.
  'a' and 'b' have to be defined scale_value^x.

[BUCKET]
    "Bucket: BUCKET_1, Bounds: [0, 100), Scale: 10"
    "Bucket: BUCKET_2, Bounds: (-10^3, 10^5), Scale: 10^"
[/BUCKET]


- NODE paragraph defines NODE sentences that tracing point of code with specific data type.
  This paragraph could have several sentences which have key:value pairs below.

  * Node                {Mandatory, Valid value: unique enumerator in target application}
  : Name of node, this value is used as first parameter of airlog(...) API.
  For example, C++ style --> airlog("NodeA", ...), C style --> AIRLOG(NodeA, ...) 

  * Filter              {Mandatory, Valid value: Filter name}
  : Second parameter value of airlog(...) API has to be one of the Item from this Filter.

  * Type                {Mandatory, Valid value: Count/Histogram/Latency/Performance/Queue/Utilization}
  : Forth parameter value of airlog(...) API is calculated differently according to the type value.
  Count       --> +/- count
  Histogram   --> value within bucket bounds
  Latency     --> unique key for matching between start point and end point
  Performance --> io size & io type
  Queue       --> queue depth
  Utilization --> usage(tick, size, ...)

  * Group               {Mandatory, Valid value: Group name}
  : If a NODE sentence doesn't have optional key/value pairs below, those rules follow this group behavior.
  If a NODE sentence has a different value of Run, node rule has more higher priority than group rule.

  * Build               {Optional, Valid value: True/False}
  : Same as DEFAULT rule

  * Run                 {Optional, Valid value: On/Off}
  : Same as DEFAULT rule

  * SamplingRatio       {Optional, Valid value: 1~99999 (probability = 1/N)}
  : Same as DEFAULT rule

  * IndexSize           {Optional, Valid value: 1~999}
  : Same as DEFAULT rule

  * Bucket              {Mandatory(Histogram type only), Valid value: Bucket name}
  : Only histogram type NODE sentence can have Bucket option,
  otherwise syntax error will occur at compile-time.

[NODE]
    "Node: PERF_ARR_VOL,            Filter: IO,         Type: PERFORMANCE,  Group: M9K"
    "Node: PERF_PORT,               Filter: IO,         Type: PERFORMANCE,  Group: M9K"
    "Node: LAT_ARR_VOL_READ,        Filter: SimpleLat,  Type: LATENCY,      Group: M9K"
    "Node: LAT_ARR_VOL_WRITE,       Filter: SimpleLat,  Type: LATENCY,      Group: M9K"
    "Node: PERF_SSD_Read,           Filter: DeviceIO,   Type: PERFORMANCE,  Group: M9K"
    "Node: PERF_SSD_Write,          Filter: DeviceIO,   Type: PERFORMANCE,  Group: M9K"
    "Node: PERF_METAFS_IO,          Filter: IO,         Type: PERFORMANCE,  Group: MFS"
    "Node: CNT_AIO_CompleteIOs,     Filter: Base,       Type: COUNT,        Group: POS_IO"
    "Node: Q_IOQueue,               Filter: Base,       Type: QUEUE,        Group: POS_IO"
    "Node: Q_EventQueue,            Filter: RawIO,      Type: QUEUE,        Group: TELEMETRY"
    "Node: PERF_SSD,                Filter: IO,         Type: PERFORMANCE,  Group: POS_IO"
    "Node: LAT_WrSb_AllocWriteBuf,  Filter: SimpleLat,  Type: LATENCY,      Group: POS_IO"
    "Node: LAT_Callback,            Filter: Callback,   Type: LATENCY,      Group: POS_IO"
    "Node: CNT_GcSM_AllocWriteBuf,  Filter: AllocBlk,   Type: COUNT,        Group: POS_GC"
    "Node: PERF_CopierRead,         Filter: IO,         Type: PERFORMANCE,  Group: POS_GC"
    "Node: PERF_GcFlush,            Filter: IO,         Type: PERFORMANCE,  Group: POS_GC"
    "Node: LAT_GetVictimSegment,    Filter: SimpleLat,  Type: LATENCY,      Group: POS_GC"
    "Node: LAT_VictimLoad,          Filter: SimpleLat,  Type: LATENCY,      Group: POS_GC"
    "Node: LAT_SegmentRebuildRead,  Filter: SimpleLat,  Type: LATENCY,      Group: POS_RAID"
    "Node: LAT_SegmentRebuildRecover,  Filter: SimpleLat,  Type: LATENCY,      Group: POS_RAID"
    "Node: LAT_SegmentRebuildWrite, Filter: SimpleLat,  Type: LATENCY,      Group: POS_RAID"
    "Node: PERF_BACKEND_TEST,       Filter: IO,         Type: PERFORMANCE,  Group: BACKEND_TEST"
    "Node: UTIL_REACTOR,            Filter: CoreStatus, Type: UTILIZATION,  Group: TELEMETRY"
    "Node: CNT_PendingIO,           Filter: Device,     Type: COUNT,        Group: TELEMETRY"
    "Node: Ubio_Constructor,        Filter: RawIO,      Type: COUNT,        Group: TELEMETRY"
    "Node: Ubio_Destructor,         Filter: RawIO,      Type: COUNT,        Group: TELEMETRY"
    "Node: SSD_Submit,              Filter: RawIO,      Type: COUNT,        Group: TELEMETRY"
    "Node: SSD_Complete,            Filter: RawIO,      Type: COUNT,        Group: TELEMETRY"
    "Node: Event_Push_In_Reactor,           Filter: RawIO,      Type: COUNT,        Group: TELEMETRY"
    "Node: Event_Execute_In_Reactor,        Filter: RawIO,      Type: COUNT,        Group: TELEMETRY"
    "Node: Event_Execute_Failed, Filter: RawIO,      Type: COUNT,        Group: TELEMETRY"
    "Node: Callback_Constructor,    Filter: RawIO,      Type: COUNT,        Group: TELEMETRY"
    "Node: Callback_Destructor,     Filter: RawIO,      Type: COUNT,        Group: TELEMETRY"
    "Node: Pending_Flush,           Filter: RawIO,      Type: COUNT,        Group: TELEMETRY"
    "Node: Pending_Internal_Write,  Filter: RawIO,      Type: COUNT,        Group: TELEMETRY"
    "Node: Pending_Byte_IO,         Filter: RawIO,      Type: COUNT,        Group: TELEMETRY"
    "Node: RequestedUserRead,       Filter: RawIO,      Type: COUNT,        Group: TELEMETRY"
    "Node: RequestedUserWrite,      Filter: RawIO,      Type: COUNT,        Group: TELEMETRY"
    "Node: RequestedUserAdminIo,    Filter: RawIO,      Type: COUNT,        Group: TELEMETRY"
    "Node: CompleteUserRead,        Filter: RawIO,      Type: COUNT,        Group: TELEMETRY"
    "Node: CompleteUserWrite,       Filter: RawIO,      Type: COUNT,        Group: TELEMETRY"
    "Node: CompleteUserAdminIo,     Filter: RawIO,      Type: COUNT,        Group: TELEMETRY"
    "Node: UserFlushProcess,        Filter: RawIO,      Type: COUNT,        Group: TELEMETRY"
    "Node: PartialWriteProcess,     Filter: RawIO,      Type: COUNT,        Group: TELEMETRY"
    "Node: UserFailIo,              Filter: RawIO,      Type: COUNT,        Group: TELEMETRY"
    "Node: UserReadPendingCnt,      Filter: RawIO,      Type: COUNT,        Group: TELEMETRY"
    "Node: UserWritePendingCnt,     Filter: RawIO,      Type: COUNT,        Group: TELEMETRY"
    "Node: InternalIoPendingCnt,    Filter: RawIO,      Type: COUNT,        Group: TELEMETRY"
    "Node: Feqos_Global_BW_Throttling,    Filter: RawIO,      Type: QUEUE,        Group: TELEMETRY, SamplingRatio: 1"
    "Node: Feqos_Dynamic_BW_Throttling,    Filter: RawIO,      Type: QUEUE,        Group: TELEMETRY, SamplingRatio: 1"
    "Node: Feqos_Global_Iops_Throttling,    Filter: RawIO,      Type: QUEUE,        Group: TELEMETRY, SamplingRatio: 1"
    "Node: Feqos_Dynamic_Iops_Throttling,    Filter: RawIO,      Type: QUEUE,        Group: TELEMETRY, SamplingRatio: 1"
    "Node: Feqos_Volume_Q_Count,    Filter: RawIO,      Type: COUNT,        Group: TELEMETRY"
    "Node: TimeOutIoCnt,    Filter: RawIO,      Type: COUNT,        Group: TELEMETRY"
[/NODE]

)AIR"
