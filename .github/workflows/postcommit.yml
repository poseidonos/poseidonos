
name: M1-PostVM_Test

on:
  push:
    branches: [ main ] 

  workflow_dispatch:
    inputs:
       logLevel:
          description: 'Log level'     
          required: true
          default: 'warning'
       tags:
          description: 'Test scenario tags'

jobs:
  Prepare_Dashboard_Link:
    if: always()
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Make Dashboard Link for Workflow 
      run: |
        POS_WORKING_DIR=${{github.workspace}} GA_COMMIT_HASH=${{github.sha}} GA_WORKFLOW=${{github.workflow}} GRAFANA_DASHBOARD="${{secrets.GRAFANA_GITHUB_ACTION_DASHBAORD_LINK}}" ESTIMATED_EXECUTION_TIME=$((2*60*60)) bash ${{github.workspace}}/.github/workflows/script/setup_dashboard.sh
    - name: Upload Dashboard Link
      uses: actions/upload-artifact@v3
      with:
        name: ${{github.workflow}}-Dashboard
        path: |
          ${{github.workspace}}/Dashboard.html

  Volume_Test:
    runs-on: VM
    steps:
    
    - run: |
        sudo chown -R $USER:$USER $GITHUB_WORKSPACE

    - uses: actions/checkout@v2

    - name: Build Setup
      working-directory: ${{github.workspace}}
      run: | 
        chmod +x .github/workflows/script/build_setup.sh
        .github/workflows/script/build_setup.sh -r ${{github.sha}} -d ${{github.workspace}} -c --with-fpic 

    - name: Volume Test
      id: volume_test
      working-directory: ${{github.workspace}}
      run: |
        POS_WORKING_DIR=${{github.workspace}} GA_COMMIT_HASH=${{github.sha}} GA_WORKFLOW=${{github.workflow}} GA_DETAIL=${{github.action}} POS_EXPORTER_PORT=${{secrets.POS_EXPORTER_PORT}} AMP_REMOTE_WRITE_URL=${{secrets.AMP_REMOTE_WRITE_URL}} AMP_SIGV4_REGION=${{secrets.AMP_SIGV4_REGION}} AMP_SIGV4_ACCESS_KEY=${{secrets.AMP_SIGV4_ACCESS_KEY}} AMP_SIGV4_SECRET_KEY=${{secrets.AMP_SIGV4_SECRET_KEY}} LOGSTASH_PORT=${{secrets.LOGSTASH_PORT}} OS_DOMAIN_ENDPOINT=${{secrets.OS_DOMAIN_ENDPOINT}} OS_REGION=${{secrets.OS_REGION}} bash ${{github.workspace}}/.github/workflows/script/setup_monitoring.sh
        chmod +x .github/workflows/script/volume/volume.sh
        .github/workflows/script/volume/volume.sh ${{github.workspace}}

    - name: Upload POS log
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: VOLUME_TEST_LOG
        path: |
          /var/log/pos

    - name: Clean Backup After Volume Test
      if: always() && steps.volume_test.outcome != 'success'
      working-directory: ${{github.workspace}}
      run: |
        chmod +x .github/workflows/script/clean_backup.sh
        .github/workflows/script/clean_backup.sh -i 127.0.0.1 -p "M1-PostVM_Test" -n "volume" -r ${{github.sha}} -d ${{github.workspace}}

    - name: Upload POS Core Dump
      if: always() && steps.volume_test.outcome != 'success'
      uses: actions/upload-artifact@v3
      with:
        name: VOLUME_TEST_CORE_DUMP
        path: |
          ${{github.workspace}}/tool/dump/*.tar.gz*

  Normal_IO_Test:
    runs-on: VM
    steps:
    
    - run: |
        sudo chown -R $USER:$USER $GITHUB_WORKSPACE

    - uses: actions/checkout@v2

    - name: Build Setup
      working-directory: ${{github.workspace}}
      run: | 
        chmod +x .github/workflows/script/build_setup.sh
        .github/workflows/script/build_setup.sh -r ${{github.sha}} -d ${{github.workspace}} -c --with-fpic 


    - name: Normal IO Test
      id: normal_io_test
      working-directory: ${{github.workspace}}
      run: |
        POS_WORKING_DIR=${{github.workspace}} GA_COMMIT_HASH=${{github.sha}} GA_WORKFLOW=${{github.workflow}} GA_DETAIL=${{github.action}} POS_EXPORTER_PORT=${{secrets.POS_EXPORTER_PORT}} AMP_REMOTE_WRITE_URL=${{secrets.AMP_REMOTE_WRITE_URL}} AMP_SIGV4_REGION=${{secrets.AMP_SIGV4_REGION}} AMP_SIGV4_ACCESS_KEY=${{secrets.AMP_SIGV4_ACCESS_KEY}} AMP_SIGV4_SECRET_KEY=${{secrets.AMP_SIGV4_SECRET_KEY}} LOGSTASH_PORT=${{secrets.LOGSTASH_PORT}} OS_DOMAIN_ENDPOINT=${{secrets.OS_DOMAIN_ENDPOINT}} OS_REGION=${{secrets.OS_REGION}} bash ${{github.workspace}}/.github/workflows/script/setup_monitoring.sh
        chmod +x .github/workflows/script/normal_io_npor_spor/normal_io.sh
        .github/workflows/script/normal_io_npor_spor/normal_io.sh ${{github.workspace}}

    - name: Upload POS log
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: NORMAL_IO_LOG
        path: |
          /var/log/pos

    - name: Clean Backup After Normal IO
      if: always() && steps.normal_io_test.outcome != 'success'
      working-directory: ${{github.workspace}}
      run: |
        chmod +x .github/workflows/script/clean_backup.sh
        .github/workflows/script/clean_backup.sh -i 127.0.0.1 -p "M1-PostVM_Test" -n "normal_io" -r ${{github.sha}} -d ${{github.workspace}}

    - name: Upload POS Core Dump
      if: always() && steps.normal_io_test.outcome != 'success'
      uses: actions/upload-artifact@v3
      with:
        name: NORMAL_IO_CORE_DUMP
        path: |
          ${{github.workspace}}/tool/dump/*.tar.gz*

  NPOR_Test:
    runs-on: VM
    steps:
    
    - run: |
        sudo chown -R $USER:$USER $GITHUB_WORKSPACE

    - uses: actions/checkout@v2

    - name: Build Setup
      working-directory: ${{github.workspace}}
      run: | 
        chmod +x .github/workflows/script/build_setup.sh
        .github/workflows/script/build_setup.sh -r ${{github.sha}} -d ${{github.workspace}} -c --with-fpic 

    - name: NPOR Test
      id: npor_test
      working-directory: ${{github.workspace}}
      run: |
        POS_WORKING_DIR=${{github.workspace}} GA_COMMIT_HASH=${{github.sha}} GA_WORKFLOW=${{github.workflow}} GA_DETAIL=${{github.action}} POS_EXPORTER_PORT=${{secrets.POS_EXPORTER_PORT}} AMP_REMOTE_WRITE_URL=${{secrets.AMP_REMOTE_WRITE_URL}} AMP_SIGV4_REGION=${{secrets.AMP_SIGV4_REGION}} AMP_SIGV4_ACCESS_KEY=${{secrets.AMP_SIGV4_ACCESS_KEY}} AMP_SIGV4_SECRET_KEY=${{secrets.AMP_SIGV4_SECRET_KEY}} LOGSTASH_PORT=${{secrets.LOGSTASH_PORT}} OS_DOMAIN_ENDPOINT=${{secrets.OS_DOMAIN_ENDPOINT}} OS_REGION=${{secrets.OS_REGION}} bash ${{github.workspace}}/.github/workflows/script/setup_monitoring.sh
        chmod +x .github/workflows/script/normal_io_npor_spor/npor.sh
        .github/workflows/script/normal_io_npor_spor/npor.sh ${{github.workspace}}

    - name: Upload POS log
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: NPOR_LOG
        path: |
          /var/log/pos

    - name: Clean Backup After Npor Test
      if: always() && steps.npor_test.outcome != 'success'
      working-directory: ${{github.workspace}}
      run: |
        chmod +x .github/workflows/script/clean_backup.sh
        .github/workflows/script/clean_backup.sh -i 127.0.0.1 -p "M1-PostVM_Test" -n "npor" -r ${{github.sha}} -d ${{github.workspace}}

    - name: Upload POS Core Dump
      if: always() && steps.npor_test.outcome != 'success'
      uses: actions/upload-artifact@v3
      with:
        name: NPOR_CORE_DUMP
        path: |
          ${{github.workspace}}/tool/dump/*.tar.gz*

  Rebuild_Test:
    runs-on: VM
    steps:
    
    - run: |
        sudo chown -R $USER:$USER $GITHUB_WORKSPACE

    - uses: actions/checkout@v2

    - name: Build Setup
      working-directory: ${{github.workspace}}
      run: | 
        chmod +x .github/workflows/script/build_setup.sh
        .github/workflows/script/build_setup.sh -r ${{github.sha}} -d ${{github.workspace}} -c --with-fpic 

    - name: Rebuild Test
      id: rebuild_test
      working-directory: ${{github.workspace}}
      run: |
        POS_WORKING_DIR=${{github.workspace}} GA_COMMIT_HASH=${{github.sha}} GA_WORKFLOW=${{github.workflow}} GA_DETAIL=${{github.action}} POS_EXPORTER_PORT=${{secrets.POS_EXPORTER_PORT}} AMP_REMOTE_WRITE_URL=${{secrets.AMP_REMOTE_WRITE_URL}} AMP_SIGV4_REGION=${{secrets.AMP_SIGV4_REGION}} AMP_SIGV4_ACCESS_KEY=${{secrets.AMP_SIGV4_ACCESS_KEY}} AMP_SIGV4_SECRET_KEY=${{secrets.AMP_SIGV4_SECRET_KEY}} LOGSTASH_PORT=${{secrets.LOGSTASH_PORT}} OS_DOMAIN_ENDPOINT=${{secrets.OS_DOMAIN_ENDPOINT}} OS_REGION=${{secrets.OS_REGION}} bash ${{github.workspace}}/.github/workflows/script/setup_monitoring.sh
        chmod +x .github/workflows/script/rebuild/rebuild.sh
        .github/workflows/script/rebuild/rebuild.sh ${{github.workspace}}

    - name: Upload POS log
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: REBUILD_LOG
        path: |
          /var/log/pos

    - name: Clean Backup After Fault Tolerance Test
      if: always() && steps.rebuild_test.outcome != 'success'
      working-directory: ${{github.workspace}}
      run: |
        chmod +x .github/workflows/script/clean_backup.sh
        .github/workflows/script/clean_backup.sh -i 127.0.0.1 -p "M1-PostVM_Test" -n "rebuild" -r ${{github.sha}} -d ${{github.workspace}}

    - name: Upload POS Core Dump
      if: always() && steps.rebuild_test.outcome != 'success'
      uses: actions/upload-artifact@v3
      with:
        name: REBUILD_CORE_DUMP
        path: |
          ${{github.workspace}}/tool/dump/*.tar.gz*

  SPOR_Test:
    runs-on: VM
    steps:
    
    - run: |
        sudo chown -R $USER:$USER $GITHUB_WORKSPACE

    - uses: actions/checkout@v2

    - name: Build Setup
      working-directory: ${{github.workspace}}
      run: | 
        chmod +x .github/workflows/script/build_setup.sh
        .github/workflows/script/build_setup.sh -r ${{github.sha}} -d ${{github.workspace}} -c --with-fpic 

    - name: SPOR Test
      id: spor_test
      working-directory: ${{github.workspace}}
      run: |
        POS_WORKING_DIR=${{github.workspace}} GA_COMMIT_HASH=${{github.sha}} GA_WORKFLOW=${{github.workflow}} GA_DETAIL=${{github.action}} POS_EXPORTER_PORT=${{secrets.POS_EXPORTER_PORT}} AMP_REMOTE_WRITE_URL=${{secrets.AMP_REMOTE_WRITE_URL}} AMP_SIGV4_REGION=${{secrets.AMP_SIGV4_REGION}} AMP_SIGV4_ACCESS_KEY=${{secrets.AMP_SIGV4_ACCESS_KEY}} AMP_SIGV4_SECRET_KEY=${{secrets.AMP_SIGV4_SECRET_KEY}} LOGSTASH_PORT=${{secrets.LOGSTASH_PORT}} OS_DOMAIN_ENDPOINT=${{secrets.OS_DOMAIN_ENDPOINT}} OS_REGION=${{secrets.OS_REGION}} bash ${{github.workspace}}/.github/workflows/script/setup_monitoring.sh
        chmod +x .github/workflows/script/normal_io_npor_spor/spor_postcommit.sh
        .github/workflows/script/normal_io_npor_spor/spor_postcommit.sh ${{github.workspace}}

    - name: Upload POS log
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: SPOR_LOG
        path: |
          /var/log/pos

    - name: Clean Backup After SPOR Test
      if: always() && steps.spor_test.outcome != 'success'
      working-directory: ${{github.workspace}}
      run: |
        chmod +x .github/workflows/script/clean_backup.sh
        .github/workflows/script/clean_backup.sh -i 127.0.0.1 -p "M1-PostVM_Test" -n "spor" -r ${{github.sha}} -d ${{github.workspace}}

    - name: Upload POS Core Dump
      if: always() && steps.spor_test.outcome != 'success'
      uses: actions/upload-artifact@v3
      with:
        name: SPOR_CORE_DUMP
        path: |
          ${{github.workspace}}/tool/dump/*.tar.gz*

  IO_Intensive_Unmount_Test:
    runs-on: VM
    steps:
    
    - run: |
        sudo chown -R $USER:$USER $GITHUB_WORKSPACE

    - uses: actions/checkout@v2

    - name: Build Setup
      working-directory: ${{github.workspace}}
      run: | 
        chmod +x .github/workflows/script/build_setup.sh
        .github/workflows/script/build_setup.sh -r ${{github.sha}} -d ${{github.workspace}} -c --with-fpic 
      
    - name: IO Intensive + Unmount Volume / Array
      id: io_intensive_unmount_volume_array
      working-directory: ${{github.workspace}}
      run: |
        POS_WORKING_DIR=${{github.workspace}} GA_COMMIT_HASH=${{github.sha}} GA_WORKFLOW=${{github.workflow}} GA_DETAIL=${{github.action}} POS_EXPORTER_PORT=${{secrets.POS_EXPORTER_PORT}} AMP_REMOTE_WRITE_URL=${{secrets.AMP_REMOTE_WRITE_URL}} AMP_SIGV4_REGION=${{secrets.AMP_SIGV4_REGION}} AMP_SIGV4_ACCESS_KEY=${{secrets.AMP_SIGV4_ACCESS_KEY}} AMP_SIGV4_SECRET_KEY=${{secrets.AMP_SIGV4_SECRET_KEY}} LOGSTASH_PORT=${{secrets.LOGSTASH_PORT}} OS_DOMAIN_ENDPOINT=${{secrets.OS_DOMAIN_ENDPOINT}} OS_REGION=${{secrets.OS_REGION}} bash ${{github.workspace}}/.github/workflows/script/setup_monitoring.sh
        chmod +x .github/workflows/script/io_intensive/unmount_volume_array.sh
        .github/workflows/script/io_intensive/unmount_volume_array.sh ${{github.workspace}}

    - name: Upload POS log
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: IO_INTENSIVE_UNMOUNT_LOG
        path: |
          /var/log/pos

    - name: Clean Backup After IO_Intensive_Unmount Test
      if: always() && steps.io_intensive_unmount_volume_array.outcome != 'success'
      working-directory: ${{github.workspace}}
      run: |
        chmod +x .github/workflows/script/clean_backup.sh
        .github/workflows/script/clean_backup.sh -i 127.0.0.1 -p "M1-PostVM_Test" -n "IO_Intensive_Unmount" -r ${{github.sha}} -d ${{github.workspace}}

    - name: Upload POS Core Dump
      if: always() && steps.io_intensive_unmount_volume_array.outcome != 'success'
      uses: actions/upload-artifact@v3
      with:
        name: IO_INTENSIVE_UNMOUNT_CORE_DUMP
        path: |
          ${{github.workspace}}/tool/dump/*.tar.gz*

  IO_Intensive_Detach_Test:
    runs-on: VM
    steps:
    
    - run: |
        sudo chown -R $USER:$USER $GITHUB_WORKSPACE

    - uses: actions/checkout@v2

    - name: Build Setup
      working-directory: ${{github.workspace}}
      run: | 
        chmod +x .github/workflows/script/build_setup.sh
        .github/workflows/script/build_setup.sh -r ${{github.sha}} -d ${{github.workspace}} -c --with-fpic 

    - name: IO Intensive + Detach
      id: io_intensive_detach
      working-directory: ${{github.workspace}}
      run: |
        POS_WORKING_DIR=${{github.workspace}} GA_COMMIT_HASH=${{github.sha}} GA_WORKFLOW=${{github.workflow}} GA_DETAIL=${{github.action}} POS_EXPORTER_PORT=${{secrets.POS_EXPORTER_PORT}} AMP_REMOTE_WRITE_URL=${{secrets.AMP_REMOTE_WRITE_URL}} AMP_SIGV4_REGION=${{secrets.AMP_SIGV4_REGION}} AMP_SIGV4_ACCESS_KEY=${{secrets.AMP_SIGV4_ACCESS_KEY}} AMP_SIGV4_SECRET_KEY=${{secrets.AMP_SIGV4_SECRET_KEY}} LOGSTASH_PORT=${{secrets.LOGSTASH_PORT}} OS_DOMAIN_ENDPOINT=${{secrets.OS_DOMAIN_ENDPOINT}} OS_REGION=${{secrets.OS_REGION}} bash ${{github.workspace}}/.github/workflows/script/setup_monitoring.sh
        chmod +x .github/workflows/script/io_intensive/detach.sh
        .github/workflows/script/io_intensive/detach.sh ${{github.workspace}}

    - name: Upload POS log
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: IO_INTENSIVE_DETACH_LOG
        path: |
          /var/log/pos

    - name: Clean Backup After IO_Intensive_Detach Test
      if: always() && steps.io_intensive_detach.outcome != 'success'
      working-directory: ${{github.workspace}}
      run: |
        chmod +x .github/workflows/script/clean_backup.sh
        .github/workflows/script/clean_backup.sh -i 127.0.0.1 -p "M1-PostVM_Test" -n "IO_Intensive_Detach" -r ${{github.sha}} -d ${{github.workspace}}

    - name: Upload POS Core Dump
      if: always() && steps.io_intensive_detach.outcome != 'success'
      uses: actions/upload-artifact@v3
      with:
        name: IO_INTENSIVE_DETACH_CORE_DUMP
        path: |
          ${{github.workspace}}/tool/dump/*.tar.gz*

  WBT_IO_Unit_Test:
    runs-on: VM
    steps:
    
    - run: |
        sudo chown -R $USER:$USER $GITHUB_WORKSPACE

    - uses: actions/checkout@v2

    - name: Build Setup
      working-directory: ${{github.workspace}}
      run: | 
        chmod +x .github/workflows/script/build_setup.sh
        .github/workflows/script/build_setup.sh -r ${{github.sha}} -d ${{github.workspace}} -c --with-fpic 

    - name: WBT Command Test
      id: wbt_command_test
      working-directory: ${{github.workspace}}
      run: |
        POS_WORKING_DIR=${{github.workspace}} GA_COMMIT_HASH=${{github.sha}} GA_WORKFLOW=${{github.workflow}} GA_DETAIL=${{github.action}} POS_EXPORTER_PORT=${{secrets.POS_EXPORTER_PORT}} AMP_REMOTE_WRITE_URL=${{secrets.AMP_REMOTE_WRITE_URL}} AMP_SIGV4_REGION=${{secrets.AMP_SIGV4_REGION}} AMP_SIGV4_ACCESS_KEY=${{secrets.AMP_SIGV4_ACCESS_KEY}} AMP_SIGV4_SECRET_KEY=${{secrets.AMP_SIGV4_SECRET_KEY}} LOGSTASH_PORT=${{secrets.LOGSTASH_PORT}} OS_DOMAIN_ENDPOINT=${{secrets.OS_DOMAIN_ENDPOINT}} OS_REGION=${{secrets.OS_REGION}} bash ${{github.workspace}}/.github/workflows/script/setup_monitoring.sh
        chmod +x .github/workflows/script/wb_io_st/wbt_command_post.sh
        .github/workflows/script/wb_io_st/wbt_command_post.sh ${{github.workspace}}

    - name: IO Unit Build and Test
      id: io_unit_build_and_test
      working-directory: ${{github.workspace}}
      run: |
        POS_WORKING_DIR=${{github.workspace}} GA_COMMIT_HASH=${{github.sha}} GA_WORKFLOW=${{github.workflow}} GA_DETAIL=${{github.action}} POS_EXPORTER_PORT=${{secrets.POS_EXPORTER_PORT}} AMP_REMOTE_WRITE_URL=${{secrets.AMP_REMOTE_WRITE_URL}} AMP_SIGV4_REGION=${{secrets.AMP_SIGV4_REGION}} AMP_SIGV4_ACCESS_KEY=${{secrets.AMP_SIGV4_ACCESS_KEY}} AMP_SIGV4_SECRET_KEY=${{secrets.AMP_SIGV4_SECRET_KEY}} LOGSTASH_PORT=${{secrets.LOGSTASH_PORT}} OS_DOMAIN_ENDPOINT=${{secrets.OS_DOMAIN_ENDPOINT}} OS_REGION=${{secrets.OS_REGION}} bash ${{github.workspace}}/.github/workflows/script/setup_monitoring.sh
        chmod +x .github/workflows/script/io_unit_build/io_unit_build.sh
        .github/workflows/script/io_unit_build/io_unit_build.sh ${{github.workspace}} ${{github.sha}}

    - name: Upload POS log
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: WBT_IO_UNIT_LOG
        path: |
          /var/log/pos

