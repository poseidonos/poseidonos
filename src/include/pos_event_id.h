/*
 *   BSD LICENSE
 *   Copyright (c) 2021 Samsung Electronics Corporation
 *   All rights reserved.
 *
 *   Redistribution and use in source and binary forms, with or without
 *   modification, are permitted provided that the following conditions
 *   are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in
 *       the documentation and/or other materials provided with the
 *       distribution.
 *     * Neither the name of Samsung Electronics Corporation nor the names of
 *       its contributors may be used to endorse or promote products derived
 *       from this software without specific prior written permission.
 *
 *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 *   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#pragma once

#define EID(X) ((int)POS_EVENT_ID::X)

#include <unordered_map>
#include <string>

enum class POS_EVENT_ID
{
    SUCCESS = 0,
    POS_STARTED,
    POS_TERMINATION_TRIGGERED,
    POS_STOP_FAILURE_BEING_TERMINATED,
    POS_STOP_FAIULRE_MOUNTED_ARRAY_EXISTS,
    POS_TERMINATED,
    POS_SYSTEMINFO_GET_VERSION,
    POS_EVENT_ID_END = 999,
    
    // ------------------- TRACE LOGS (1000 - 1200) -------------------
    POS_TRACE_STARTED = 1000,
    POS_TRACE_INIT_SUCCESS = 1001,
    POS_TRACE_INIT_WITH_ERRORS = 1002,
    POS_TRACE_INIT_FAIL = 1003,
    POS_TRACE_TERMINATING = 1004,
    POS_TRACE_TERMINATED = 1005,
    POS_TRACE_ARRAY_CREATED = 1020,
    POS_TRACE_ARRAY_LOADED = 1021,
    POS_TRACE_ARRAY_DELETED = 1022,
    POS_TRACE_ARRAY_MOUNTED = 1023,
    POS_TRACE_ARRAY_UNMOUNTED = 1024,
    POS_TRACE_ARRAY_SHUTDOWN = 1025,
    POS_TRACE_ARRAY_STATE_CHANGED = 1026,
    POS_TRACE_DEVICE_ATTACHED = 1050,
    POS_TRACE_DEVICE_DETACHED = 1051,


    // ------------------- CLI Server (1200 - 1599) -------------------
    CLI_EVENT_ID_START = 1200,
    CLI_SERVER_INITIALIZED,
    CLI_CLIENT_CREATED,
    CLI_CLIENT_CREATION_FAILURE,
    CLI_CLIENT_DETACHED,
    CLI_CLIENT_DETACHEMENT_FAILURE,
    CLI_CLIENT_ACCEPTED,
    CLI_CLIENT_DISCONNECTED,
    CLI_MSG_RECEIVED,
    CLI_MSG_SENT,
    CLI_MSG_SENDING_FAILURE,
    CLI_TIMEOUT_OR_CANCELLED,
    CLI_SERVER_FINISH,
    CLI_SERVER_THREAD_JOINED,
    CLI_REUSE_ADDR_ENABLED,
    CLI_REUSE_ADDR_FAILURE,
    CLI_SOCK_CREATE_FAILURE,
    CLI_SOCK_BIND_FAILURE,
    CLI_SOCK_LISTEN_FAILURE,
    CLI_EPOLL_CREATE_FAILURE,
    CLI_SOCK_ACCEPT_FAILURE,
    CLI_ADD_CLIENT_FAILURE_MAX_CLIENT,
    CLI_MSG_RECEIVE_FAILURE,
    CLI_SERVER_TIMED_OUT,
    CLI_SERVER_BUSY,
    CLI_LIST_ARRAY_NO_ARRAY_EXISTS,
    CLI_LIST_ARRAY_FAILURE,
    CLI_ADD_DEVICE_FAILURE_NO_DEVICE_SPECIFIED,
    CLI_ADD_DEVICE_SUCCESS,
    CLI_ADD_LISTENER_FAILURE,
    CLI_ADD_LISTENER_SUCCESS,
    CLI_APPLY_FILTER_FAILURE,
    CLI_APPLY_FILTER_SUCCESS,
    CLI_ARRAY_INFO_NO_ARRAY_NAME,
    CLI_ARRAY_INFO_ARRAY_NOT_EXIST,
    CLI_AUTOCREATE_ARRAY_SUCCESS,
    CLI_COMMAND_FAILURE_ARRAY_BROKEN,
    CLI_SET_SYSTEM_PROPERTY_LEVEL_NOT_SUPPORTED,
    CLI_SET_SYSTEM_PROPERTY_FAILURE,
    CLI_DEVEL_RESET_MBR_FAILURE,
    CLI_DEVEL_RESET_MBR_SUCCESS,
    CLI_UPDATE_EVENT_WRR_FAILURE_WEIGHT_VALUE_RANGE_VIOLATION,
    CLI_UPDATE_EVENT_WRR_FAILURE_NO_EVENT_NAME,
    CLI_UPDATE_EVENT_WRR_FAILURE_UNKNOWN_EVENT,
    CLI_SET_LOG_LEVEL_FAILURE_LEVEL_NOT_SPECIFIED,
    CLI_SET_LOG_PREFERENCE_FAILURE_STR_LOG_NOT_SPECIFIED,
    CLI_EVENT_ID_END = 1599,

    INVALID_PARAM,
    SYSTEM_RECOVERY,
    STATE_CONTEXT_UPDATED,
    STATE_CHANGED,
    STATE_CONTROL_ADDED,
    STATE_CONTROL_REMOVED,
    STATE_CONTROL_DEBUG,

    // ---------------Volume (2000)-----------------------
    CREATE_VOL_DEBUG_MSG = 2000,
    DELETE_VOL_DEBUG_MSG = 2001,
    MOUNT_VOL_DEBUG_MSG = 2002,
    UNMOUNT_VOL_DEBUG_MSG = 2003,
    VOL_DEBUG_MSG = 2004,
    VOL_MGR_NOT_INITIALIZED = 2005,
    VOL_MGR_BUSY = 2006,
    VOL_NOT_FOUND = 2010,

    CREATE_VOL_NAME_TOO_SHORT = 2020,
    CREATE_VOL_NAME_TOO_LONG = 2021,
    CREATE_VOL_SAME_VOL_NAME_EXISTS = 2022,
    CREATE_VOL_NAME_INCLUDES_SPECIAL_CHAR = 2023,
    CREATE_VOL_NAME_START_OR_END_WITH_SPACE = 2024,
    CREATE_VOL_SIZE_NOT_ALIGNED = 2025,
    CREATE_VOL_SIZE_EXCEEDED = 2026,
    CREATE_VOL_EXCEED_MAX_NUM_OF_VOLS = 2027,
    CREATE_VOL_CAN_ONLY_BE_WHILE_ONLINE = 2028,
    CREATE_VOL_MEM_ALLOC_FAIL = 2029,
    CREATE_VOL_LOCK_FAIL = 2030,
    CREATE_VOL_ARRAY_NAME_DOES_NOT_EXIST = 2031,
    CREATE_VOL_INTERNAL_ERROR = 2032,

    DELETE_VOL_MOUNTED_VOL_CANNOT_BE_DELETED = 2040,
    DELETE_VOL_LOCK_FAIL = 2041,
    DELETE_VOL_CAN_ONLY_BE_WHILE_ONLINE = 2042,
    DELETE_VOL_ARRAY_NAME_DOES_NOT_EXIST = 2043,
    DELETE_VOL_INTERNAL_ERROR = 2044,

    VOL_UNABLE_TO_LOAD_OPEN_FAILED = 2050,
    VOL_UNABLE_TO_LOAD_READ_FAILED = 2051,
    VOL_UNABLE_TO_LOAD_CONTENT_BROKEN = 2052,
    VOL_UNABLE_TO_SAVE_CREATION_FAILED = 2053,
    VOL_UNABLE_TO_SAVE_OPEN_FAILED = 2054,
    VOL_UNABLE_TO_SAVE_READ_FAILED = 2055,
    VOL_UNABLE_TO_SAVE_WRITE_FAILED = 2056,
    VOL_UNABLE_TO_SAVE_CONTENT_OVERFLOW = 2057,

    RENAME_VOL_NAME_TOO_SHORT = 2060,
    RENAME_VOL_NAME_TOO_LONG = 2061,
    RENAME_VOL_SAME_VOL_NAME_EXISTS = 2062,
    RENAME_VOL_NAME_INCLUDES_SPECIAL_CHAR = 2063,
    RENAME_VOL_NAME_START_OR_END_WITH_SPACE = 2064,
    RENAME_VOL_NAME_DOES_NOT_EXIST = 2065,
    RENAME_VOL_CAN_ONLY_BE_WHILE_ONLINE = 2066,
    RENAME_VOL_ARRAY_NAME_DOES_NOT_EXIST = 2068,
    RENAME_VOL_INTERNAL_ERROR = 2069,

    MOUNT_VOL_ALREADY_MOUNTED = 2070,
    MOUNT_VOL_UNABLE_TO_ATTACH_TO_NVMF = 2071,
    MOUNT_VOL_SUBSYSTEM_NOT_FOUND = 2072,
    MOUNT_VOL_SUBSYSTEM_MISMATCH = 2073,
    MOUNT_VOL_SUBSYSTEM_ALREADY_OCCUPIED = 2074,
    MOUNT_VOL_LOCK_FAIL = 2075,
    MOUNT_VOL_CAN_ONLY_BE_WHILE_ONLINE = 2076,
    MOUNT_VOL_ARRAY_NAME_DOES_NOT_EXIST = 2078,
    MOUNT_VOL_INTERNAL_ERROR = 2079,

    UNMOUNT_VOL_ALREADY_UNMOUNTED = 2080,
    UNMOUNT_VOL_UNABLE_TO_DETACH_FROM_NVMF = 2081,
    UNMOUNT_VOL_LOCK_FAIL = 2082,
    UNMOUNT_VOL_CAN_ONLY_BE_WHILE_ONLINE = 2083,
    UNMOUNT_VOL_ARRAY_NAME_DOES_NOT_EXIST = 2084,
    UNMOUNT_VOL_INTERNAL_ERROR = 2085,

    VOL_REQ_QOS_OUT_OF_RANGE = 2090,
    VOL_REQ_REJECTED_IN_BROKEN_ARRAY = 2091,
    VOL_REQ_PROCESSED_BUT_ERROR_OCCURED = 2092,

    VOL_INTERNAL_INVALID_ID = 2100,
    VOL_INTERNAL_ID_ALLOC_FAILED = 2101,
    VOL_INTERNAL_ID_DUPLICATION = 2102,
    VOL_INTERNAL_UNEXPECTED_PENDING_IO_COUNT = 2103,

    VOL_UPDATE_LOCK_FAIL = 2110,
    VOL_UPDATE_META_SAVE_FAIL = 2111,

    VOL_EVENT_OK = 2130,
    VOL_EVENT_ABORTED,
    VOL_EVENT_DATA_LOSS,
    VOL_EVENT_DEAD_LINE_EXCEEDED,
    VOL_EVENT_RETRY,
    VOL_EVENT_UNIMPLEMENTED,
    VOL_EVENT_UNKNOWN,
    VOL_EVENT_FAIL,
    VOL_EVENT_ROLLBACK_FAIL,

    // --------------Mbr (2300)-----------------------
    MBR_START = 2300,
    MBR_ALLOCATE_MEMORY = MBR_START,
    MBR_CREATE_AND_WRITE,
    MBR_ADD_AND_WRITE,
    MBR_WRITE_DONE,
    MBR_READ_DONE,
    MBR_PARITY_CHECK,
    MBR_SYSTEM_UUID_CHECK,
    MBR_DEVICE_NOT_FOUND = 2310,
    MBR_PARITY_CHECK_FAILED,
    MBR_SYSTEM_UUID_CHECK_FAILED,
    MBR_DATA_NOT_FOUND,
    MBR_KEY_NOT_FOUND,
    MBR_ABR_NOT_FOUND,
    MBR_DELETE_ABR_FAILED,
    MBR_MAX_ARRAY_CNT_EXCEED,
    MBR_ABR_ALREADY_EXIST,
    MBR_WRONG_ARRAY_VALID_FLAG,
    MBR_WRONG_ARRAY_INDEX_MAP,
    MBR_DEVICE_ALREADY_IN_ARRAY,
    MBR_ABR_GET_LIST_SUCCESS,
    MBR_ALLOCATE_MEMORY_FAILED = 2330,
    MBR_DATA_SIZE_ERROR,
    MBR_FORMAT_ERROR,
    MBR_GET_SYSTEM_UUID_FAILED,
    MBR_DEBUG_MSG = 2399,
    MBR_WRITE_ERROR,
    MBR_END,
    MBR_COUNT = MBR_END - MBR_START,

    // --------------Array (2500)-----------------------
    CREATE_ARRAY_DEBUG_MSG = 2500,
    CREATE_ARRAY_EXCEED_MAX_NUM_OF_ARRAYS = 2501,
    CREATE_ARRAY_SAME_ARRAY_NAME_EXISTS = 2502,
    CREATE_ARRAY_NAME_TOO_SHORT = 2503,
    CREATE_ARRAY_NAME_TOO_LONG = 2504,
    CREATE_ARRAY_NAME_INCLUDES_SPECIAL_CHAR = 2505,
    CREATE_ARRAY_NAME_START_OR_END_WITH_SPACE = 2506,
    CREATE_ARRAY_SSD_NAME_NOT_FOUND = 2507,
    CREATE_ARRAY_NVM_NAME_NOT_FOUND = 2508,
    CREATE_ARRAY_NOT_SUPPORTED_RAIDTYPE = 2509,
    CREATE_ARRAY_RAID_INVALID_SSD_CNT = 2510,
    CREATE_ARRAY_RAID_DOES_NOT_SUPPORT_SPARE_DEV = 2511,
    CREATE_ARRAY_NO_AVAILABLE_DEVICE = 2512,
    CREATE_ARRAY_SSD_CAPACITY_IS_LT_MIN = 2513,
    CREATE_ARRAY_NVM_CAPACITY_IS_LT_MIN = 2514,
    CREATE_ARRAY_SPARE_CAPACITY_IS_LT_DATA = 2515,
    CREATE_ARRAY_INSUFFICIENT_MEMORY_UNABLE_TO_ALLOC_PARITY_POOL = 2517,
    CREATE_ARRAY_INSUFFICIENT_SAME_NUMA_DEVS = 2518,
    CREATE_ARRAY_INSUFFICIENT_SAME_CAPACITY_DEVS = 2519,

    LOAD_ARRAY_DEBUG_MSG = 2530,
    LOAD_ARRAY_NVM_DOES_NOT_EXIST = 2531,
    LOAD_ARRAY_ALREADY_LOADED = 2533,

    DELETE_ARRAY_DEBUG_MSG = 2550,
    DELETE_ARRAY_CAN_ONLY_BE_WHILE_OFFLINE = 2551,
    DELETE_ARRAY_ARRAY_NAME_DOES_NOT_EXIST = 2552,
    DELETE_ARRAY_TIMED_OUT = 2553,

    MOUNT_ARRAY_DEBUG_MSG = 2570,
    MOUNT_ARRAY_UNABLE_TO_INVOKE_MOUNT_STATE = 2571,
    MOUNT_ARRAY_ALREADY_MOUNTED = 2572,
    MOUNT_ARRAY_ARRAY_NAME_DOES_NOT_EXIST = 2573,
    MOUNT_ARRAY_BROKEN_ARRAY_CANNOT_BE_MOUNTED = 2575,
    MOUNT_ARRAY_UNABLE_TO_REGISTER_TRANSLATOR = 2580,
    MOUNT_ARRAY_UNABLE_TO_REGISTER_RECOVER = 2581,
    MOUNT_ARRAY_UNABLE_TO_REGISTER_DEVICECHECKER = 2582,
    MOUNT_ARRAY_UNABLE_TO_REGISTER_IOLOCKER = 2583,

    UNMOUNT_ARRAY_DEBUG_MSG = 2590,
    UNMOUNT_ARRAY_ALREADY_UNMOUNTED = 2591,
    UNMOUNT_ARRAY_UNABLE_TO_INVOKE_UNMOUNT_STATE = 2592,
    UNMOUNT_ARRAY_ARRAY_NAME_DOES_NOT_EXIST = 2593,
    UNMOUNT_ARRAY_REJECTED_DUE_TO_REBUILD_INPROGRESS = 2594,
    UNMOUNT_ARRAY_BROKEN_ARRAY_CANNOT_BE_UNMOUNTED = 2595,
    UNMOUNT_BROKEN_ARRAY_DEBUG_MSG = 2597,

    ADD_SPARE_DEBUG_MSG = 2600,
    ADD_SPARE_CAN_ONLY_BE_WHILE_ONLINE = 2601,
    ADD_SPARE_SSD_NAME_NOT_FOUND = 2602,
    ADD_SPARE_CAPACITY_IS_TOO_SMALL = 2603,
    ADD_SPARE_RAID_DOES_NOT_SUPPORT_SPARE_DEV = 2604,
    ADD_SPARE_DEVICE_ALREADY_OCCUPIED = 2605,
    ADD_SPARE_ARRAY_NAME_DOES_NOT_EXIST = 2606,
    REMOVE_SPARE_DEBUG_MSG = 2610,
    REMOVE_SPARE_CAN_ONLY_BE_WHILE_ONLINE = 2611,
    REMOVE_SPARE_SSD_NAME_NOT_FOUND = 2612,
    REMOVE_SPARE_ARRAY_NAME_DOES_NOT_EXIST = 2613,

    ARRAY_DEV_DEBUG_MSG = 2620,
    ARRAY_SSD_NOT_FOUND = 2622,
    ARRAY_NVM_NOT_FOUND = 2623,
    UNABLE_TO_SET_NVM_MORE_THAN_ONE = 2624,
    UNABLE_TO_SET_NULL_NVM = 2625,
    UNABLE_TO_SET_NVM_ALREADY_OCCUPIED = 2626,
    UNABLE_TO_SET_NVM_CAPACITY_IS_LT_MIN = 2627,
    UNABLE_TO_ADD_SSD_ALREADY_OCCUPIED = 2631,

    UPDATE_ABR_DEBUG_MSG = 2641,
    ARRAY_INFO_DEBUG_MSG = 2642,
    ARRAY_COMPO_DEBUG_MSG = 2643,
    RAID_DEBUG_MSG = 2644,
    FORMAT_PARTITION_DEBUG_MSG = 2645,
    REBUILD_ARRAY_DEBUG_MSG = 2646,
    IO_RECOVER_DEBUG_MSG = 2647,
    LOCKER_DEBUG_MSG = 2648,
    IO_TRANSLATOR_NOT_FOUND = 2650,
    IO_RECOVER_NOT_FOUND = 2651,

    ARRAY_MGR_DEBUG_MSG = 2670,
    ARRAY_MGR_NO_ARRAY_MATCHING_REQ_NAME = 2671,
    ARRAY_MGR_NO_ARRAY_OWNING_REQ_DEV = 2672,
    ARRAY_MGR_NO_ARRAY_MATCHING_REQ_ID = 2673,
    ARRAY_MGR_NO_ARRAY_MATCHING_NAME = 2674,

    RECOVER_INVALID_LBA = 2680,
    RECOVER_REQ_DEV_NOT_FOUND = 2681,
    ADDRESS_TRANSLATE_DEBUG_MSG = 2682,
    ADDRESS_TRANSLATION_INVALID_LBA = 2683,
    ADDRESS_TRANSLATION_INVALID_BLK_CNT = 2684,
    ADDRESS_BYTE_TRANSLATION_INVALID_LBA = 2685,
    ADDRESS_BYTE_TRANSLATION_IS_NOT_SUPPORTED = 2686,

    ARRAY_EVENT_STATE_CHANGED = 2700,
    ARRAY_EVENT_UNHANDLED_STATE_TRANSITION = 2701,
    ARRAY_EVENT_BROKEN = 2702,
    ARRAY_EVENT_DEV_STATE_CHANGED = 2703,
    ARRAY_EVENT_DEV_DETACHED = 2704,
    ARRAY_EVENT_DATA_SSD_DETACHED = 2705,
    ARRAY_EVENT_SPARE_SSD_DETACHED = 2706,
    ARRAY_EVENT_NVM_DETACHED = 2707,
    ARRAY_EVENT_SSD_REPLACED = 2708,
    NO_SPARE_SSD_TO_REPLACE = 2709,

    ARRAY_TELEMETRY_DEBUG_MSG = 2750,
    WBT_CMD_NEED_ARRAY_MOUNT = 2791,

    // --------------Rebuilder (2800)----------------
    REBUILD_START = 2800,
    REBUILD_DEBUG_MSG = REBUILD_START,
    REBUILD_STOPPED = 2802,
    REBUILD_FAILED = 2803,
    REBUILD_PROGRESS = 2804,
    REBUILD_PROGRESS_DETAIL = 2805,
    REBUILD_STRIPE_LOCK = 2806,
    REBUILD_STRIPE_UNLOCK = 2807,
    REBUILD_RESULT_PASS = 2810,
    REBUILD_RESULT_FAILED = 2811,
    REBUILD_RESULT_CANCELLED = 2812,
    REBUILD_TRIGGER_FAIL = 2813,
    REBUILD_INVALIDATED = 2814,
    REBUILD_RECORD = 2850,
    REBUILD_END,
    REBUILD_COUNT = REBUILD_END - REBUILD_START,

    // --------------CONFIG (2900)----------------
    CONFIG_START = 2900,
    CONFIG_FILE_READ_DONE = CONFIG_START,

    CONFIG_REQUEST_CONFIG_TYPE_ERROR = 2910,
    CONFIG_REQUEST_KEY_ERROR,
    CONFIG_REQUEST_MODULE_ERROR,

    CONFIG_FILE_OPEN_FAIL = 2920,
    CONFIG_FILE_SIZE_ERROR,
    CONFIG_FILE_READ_ERROR,
    CONFIG_FILE_FORMAT_ERROR,
    CONFIG_JSON_DOC_IS_NOT_OBJECT,
    CONFIG_VALUE_TYPE_ERROR,

    CONFIG_END,
    CONFIG_COUNT = CONFIG_END - CONFIG_START,

    // --------------Journal manager (3000)----------------
    JOURNAL_START = 3000,
    JOURNAL_MANAGER_INITIALIZED = JOURNAL_START,
    JOURNAL_MANAGER_NOT_INITIALIZED = 3001,
    JOURNAL_CONFIGURATION = 3002,
    JOURNAL_NOT_READY = 3003,
    JOURNAL_ALREADY_EXIST = 3004,
    JOURNAL_INVALID = 3005,

    // --------------Journal log buffer (3010)---------
    JOURNAL_LOG_BUFFER_CREATED = 3010,
    JOURNAL_LOG_BUFFER_CREATE_FAILED = 3011,
    JOURNAL_LOG_BUFFER_LOADED = 3012,
    JOURNAL_LOG_BUFFER_RESET = 3013,
    JOURNAL_LOG_BUFFER_RESET_FAILED = 3014,
    JOURNAL_LOG_BUFFER_OPEN_FAILED = 3015,
    JOURNAL_LOG_BUFFER_CLOSE_FAILED = 3016,
    JOURNAL_LOG_BUFFER_READ_FAILED = 3017,
    JOURNAL_LOG_BUFFER_INITIATED = 3018,

    // --------------Write logs (3020)-----------------
    JOURNAL_LOG_WRITE_FAILED = 3020,
    JOURNAL_INVALID_SIZE_LOG_REQUESTED = 3021,
    ADD_TO_JOURNAL_WAITING_LIST = 3022,
    JOURNAL_CALLBACK_FAILED = 3023,
    JOURNAL_NO_LOG_BUFFER_AVAILABLE = 3024,

    // --------------Checkpoint (3030)-----------------
    JOURNAL_LOG_GROUP_FULL = 3030,
    JOURNAL_FLUSH_LOG_GROUP = 3031,
    JOURNAL_CHECKPOINT_STARTED = 3032,
    JOURNAL_CHECKPOINT_STATUS = 3033,
    JOURNAL_CHECKPOINT_COMPLETED = 3034,
    JOURNAL_CHECKPOINT_FAILED = 3035,
    JOUNRAL_WRITE_LOG_GROUP_FOOTER = 3036,
    JOURNAL_CHECKPOINT_IN_PROGRESS = 3037,

    // --------------Journaling system events (3040)---
    JOURNAL_HANDLE_VOLUME_DELETION = 3040,

    // --------------Replay journal (3050)-------------
    JOURNAL_REPLAY_STARTED = 3050,
    JOURNAL_REPLAY_STATUS = 3051,
    JOURNAL_REPLAY_STOPPED = 3052,
    JOURNAL_REPLAY_FAILED = 3053,
    JOURNAL_REPLAY_COMPLETED = 3054,
    JOURNAL_INVALID_LOG_FOUND = 3055,

    JOURNAL_REPLAY_STRIPE_FLUSH = 3060,
    JOURNAL_REPLAY_STRIPE_FLUSH_FAILED = 3061,
    JOURNAL_REPLAY_WB_TAIL = 3062,
    JOURNAL_REPLAY_USER_STRIPE_TAIL = 3063,
    JOURNAL_REPLAY_VOLUME_EVENT = 3064,
    JOURNAL_REPLAY_WB_STRIPE = 3065,

    // Journal Rocks Interface (3080)
    JOURNAL_ROCKS_OPENED = 3080,
    JOURNAL_ROCKS_CLOSED = 3081,
    JOURNAL_ROCKS_DIR_EXISTS = 3082,
    JOURNAL_ROCKS_DIR_CREATION_FAILED = 3083,
    JOURNAL_ROCKS_DIR_CREATED = 3084,
    JOURNAL_ROCKS_DIR_DELETION_FAILED = 3085,
    JOURNAL_ROCKS_DIR_DELETED = 3086,
    JOURNAL_ROCKS_OPEN_FAILED = 3087,

    JOURNAL_DEBUG = 3099,
    JOURNAL_END = JOURNAL_DEBUG,
    JOURNAL_COUNT = JOURNAL_END - JOURNAL_START,

    // --------------Mapper (3100)----------------
    MAPPER_START = 3100,

    MAPPER_SUCCESS = MAPPER_START,
    MAP_FLUSH_STARTED,
    MAP_FLUSH_IN_PROGRESS,
    MAP_FLUSH_ONGOING,
    MAP_FLUSH_COMPLETED,

    MAP_LOAD_STARTED,
    MAP_LOAD_ONGOING,
    MAP_LOAD_COMPLETED,
    MPAGE_NULLPTR,
    MPAGE_ALREADY_EXIST,

    MPAGE_MEMORY_ALLOC_FAILURE,
    VSAMAP_NULL_PTR,
    VSAMAP_SET_FAILURE,
    STRIPEMAP_SET_FAILURE,
    MAPCONTENT_HEADER_NOT_INITIALIZED,

    INVALID_VOLUME_ID,
    REVMAP_GET_MFS_ALIGNED_IOSIZE_FAILURE,
    REVMAP_PACK_ALREADY_LINKED,
    REVMAP_NOT_LINKED_PACK,
    REVMAP_FILE_SIZE,
    REVMAP_VOLUME_ID_FOUND,
    REVMAP_VOLUME_ID_NOT_FOUND,

    REVMAP_MFS_IO_ERROR,
    MAP_UPDATE_HANDLER_EVENT_ALLOCATE_FAIL,
    TRIED_TO_LOAD_WITHOUT_MFSFILE,
    NO_BLOCKMAP_MFS_FILE,
    VSAMAP_HEADER_LOAD_FAILURE,

    VSAMAP_LOAD_FAILURE,
    VSAMAP_NOT_LOADED,
    VSAMAP_UNMOUNT_FAILURE,
    VSAMAP_INVALIDATE_ALLBLKS_FAILURE,
    VSAMAP_UNLOAD_FAILURE,

    VSAMAP_STORE_FAILURE,
    STRIPEMAP_STORE_FAILURE,
    MFS_SYNCIO_ERROR,
    MFS_ASYNCIO_ERROR,
    VSAMAP_NOT_ACCESSIBLE,
    DELETE_VOLUME,
    FILE_NOT_EXIST,
    NEED_TO_INITIAL_STORE,

    WRONG_MAP_ID,
    MAPPER_ALREADY_EXIST,
    MAPPER_FAILED,
    MAPPER_END,
    MAPPER_COUNT = MAPPER_END - MAPPER_START,

    // --------------Allocator (3150)----------------
    ALLOCATOR_START = 3150,

    ALLOCATOR_META_ARCHIVE_STORE = ALLOCATOR_START,
    ALLOCATOR_META_ARCHIVE_LOAD,
    ALLOCATOR_META_ARCHIVE_STORE_REBUILD_SEGMENT,
    ALLOCATOR_META_ARCHIVE_LOAD_REBUILD_SEGMENT,
    ALLOCATOR_META_ARCHIVE_FLUSH_IN_PROGRESS,

    ALLOCATOR_MAKE_REBUILD_TARGET,
    ALLOCATOR_MAKE_REBUILD_TARGET_FAILURE,
    ALLOCATOR_TARGET_SEGMENT_FREED,
    ALLOCATOR_REBUILD_TARGET_SET_NOT_EMPTY,
    ALLOCATOR_REBUILD_TARGET_SET_EMPTY,

    ALLOCATOR_NO_FREE_WB_STRIPE,
    ALLOCATOR_REBUILD_CTX_LOADED,
    ALLOCATOR_REBUILD_SEGMENT_COMPLETED,
    ALLOCATOR_NO_FREE_SEGMENT,
    ALLOCATOR_WRONG_STRIPE_REFERENCE_COUNT,

    ALLOCATOR_CANNOT_ALLOCATE_USER_BLOCK,
    ALLOCATOR_CANNOT_ALLOCATE_STRIPE,
    ALLOCATOR_CANNOT_LINK_REVERSE_MAP,
    ALLOCATOR_STRIPE_WITHOUT_REVERSEMAP,
    ALLOCATOR_RECONSTRUCT_STRIPE,

    ALLOCATOR_REPLAYED_STRIPE_IS_FULL,
    ALLOCATOR_REPLAY_SEGMENT_STATUS,
    ALLOCATOR_TRIGGER_FLUSH,
    REVMAP_RECONSTRUCT_FOUND_RBA,
    REVMAP_RECONSTRUCT_NOT_FOUND_RBA,

    GET_VOLUMESIZE_FAILURE,
    WRONG_BLOCK_COUNT,
    PICKUP_ACTIVE_STRIPE,
    SEGMENT_WAS_VICTIM,
    SEGMENT_WAS_NOT_VICTIM,
    ALLOCATOR_SEGMENT_FREED,
    VALID_COUNT_UNDERFLOWED,
    VALID_COUNT_OVERFLOWED,
    FAILED_TO_ISSUE_ASYNC_METAIO,
    ERROR_REINIT_WITHOUT_DISPOSE,
    ALLOCATOR_FILE_ERROR,
    GC_STRIPE_ALLOCATED,
    ALLOCATE_GC_VICTIM,
    ALLOCATOR_CURRENT_GC_MODE,
    ALLOCATOR_META_ASYNCLOAD,
    TELEMETRY_CLIENT_ERROR,
    UNKNOWN_ALLOCATOR_ERROR,
    ALLOCATOR_FAILED_TO_ASSIGN_STRIPE,
    BLOCK_ALLOCATION_UNLOCK,
    BLOCK_ALLOCATION_LOCK,
    ALLOCATOR_NO_MATCHING_REQ_ARRAY_NAME,

    ALLOCATOR_DEBUG,
    ALLOCATOR_END,
    ALLOCATOR_COUNT = ALLOCATOR_END - ALLOCATOR_START,

    // --------------Metadata (3200)----------------
    META_START = 3200,
    META_INITIALIZED = META_START,
    META_NOT_INITIALIZED = 3201,
    META_ALREADY_REGISTERED = 3202,

    META_STRIPE_FAILED_TO_ASSIGN,

    META_END,
    META_COUNT = META_END - META_START,

    // --------------Garbage collector (3400)----------------
    GC_START = 3400,
    GC_TRIGGERED = GC_START,
    GC_STARTED = 3401,
    GC_DONE = 3402,
    GC_CANNOT_START = 3403,
    GC_VICTIM_STRIPE_CONSTRUCTOR = 3410,
    GC_LOAD_REVERSE_MAP = 3411,
    GC_LOAD_VALID_BLOCKS = 3412,
    GC_GET_UNMAP_VSA = 3413,
    GC_GET_UNMAP_LSA = 3414,
    GC_GET_VICTIM_SEGMENT = 3415,
    GC_GET_VALID_BLOCKS = 3416,
    GC_GET_VALID_BLOCK_INFO = 3417,
    GC_COPY_COMPLETE = 3418,
    GC_GET_BUFFER_FAILED = 3419,
    GC_STRIPE_COPIER_SUBMIT = 3420,
    GC_STRIPE_FLUSH_SUBMIT = 3421,
    GC_STRIPE_FLUSH_COMPLETION = 3422,
    GC_ACQUIRE_OWNERSHIP_RBA_LIST = 3423,
    GC_MAP_UPDATE_REQUEST = 3424,
    GC_MAP_UPDATE = 3425,
    GC_MAP_UPDATE_COMPLETION = 3426,
    GC_MAP_UPDATE_FAILED = 3427,
    GC_COPIER_NOT_EXIST = 3428,
    GC_CANNOT_CREATE_COPIER = 3429,
    GC_ERROR_MSG = 3430,
    GC_RELEASE_VICTIM_SEGMENT = 3431,
    GC_THRESHOLD_CHECK_DISABLE = 3432,

    // --------------WBT GC (3470)----------------
    GC_WBT_START = 3470,
    GC_WBT_ARGUMENT_ERROR = GC_WBT_START,
    GC_WBT_INVALID_ARRAY_NAME = 3471,
    GC_WBT_CANNOT_ENABLE = 3472,
    GC_WBT_CANNOT_START = 3473,
    GC_WBT_UNNECESSARY_GC = 3474,

    // --------------Flow control (3500)----------------
    FC_START = 3500,
    FC_TOKEN_DISTRIBUTED,
    FC_TOKEN_DISTRIBUTED_INIT,
    FC_TOKEN_DISTRIBUTED_TRY_INIT,
    FC_TOKEN_DISTRIBUTED_SKIP_INIT,
    FC_TOKEN_OVERFLOW,
    FC_NEGATIVE_TOKEN,
    FC_WRONG_STRATEGY,
    FC_RESET_FORCERESET,
    FC_SET_FORCERESET,
    FC_FORCERESET_DONE,
    FC_CONFIGURATION,
    FC_NO_MATCHING_REQ_ARRAY_NAME,

    // --------------Meta filesystem (4000)----------------
    // Debug, Info, Warning, Error, Critical
    MFS_START = 4000,
    MFS_DEBUG_START = MFS_START,
    MFS_DEBUG_MESSAGE = MFS_DEBUG_START,
    MFS_INFO_START = 4100,
    MFS_INFO_MESSAGE = MFS_INFO_START,
    MFS_CREATE_META_FILE,
    MFS_WARNING_START = 4200,
    MFS_WARNING_INIT_AGAIN = MFS_WARNING_START,
    MFS_SYSTEM_MOUNT_AGAIN,
    MFS_SYSTEM_UNMOUNT_AGAIN,
    MFS_MSG_ENQUEUE_FAILED,
    MFS_COMPACTION_FAILED,
    MFS_WARNING_MESSAGE,

    MFS_ERROR_START = 4300,
    MFS_ERROR_MOUNTED = MFS_ERROR_START,
    MFS_ERROR_UNMOUNTED,
    MFS_ERROR_MESSAGE,
    MFS_INVALID_PARAMETER,
    MFS_MODULE_NOT_READY,
    MFS_MODULE_ALREADY_READY,
    MFS_MODULE_INIT_FAILED,
    MFS_MODULE_BRINGUP_FAILED,
    MFS_MODULE_NO_MEDIA,
    MFS_SYSTEM_OPEN_FAILED,
    MFS_INVALID_INFORMATION,

    MFS_FILE_CREATE_FAILED,
    MFS_FILE_NOT_FOUND,
    MFS_FILE_NOT_OPENED,
    MFS_FILE_OPEN_FAILED,
    MFS_FILE_OPEN_REPETITIONARY,
    MFS_FILE_CLOSE_FAILED,
    MFS_FILE_FORMAT_FAILED,
    MFS_FILE_DELETE_FAILED,
    MFS_FILE_ALREADY_LOCKED,
    MFS_FILE_READ_FAILED,
    MFS_FILE_WRITE_FAILED,
    MFS_MEDIA_WROTE_SIZE_NOT_MATCHED,
    MFS_MEDIA_SEEK_FAILED,
    MFS_MEDIA_READ_FAILED,
    MFS_MEDIA_WRITE_FAILED,
    MFS_FILE_TRIM_FAILED,

    MFS_MEDIA_MOUNT_FAILED,
    MFS_MEDIA_UNMOUNT_FAILED,
    MFS_MEDIA_NULL,
    MFS_META_STORAGE_CREATE_FAILED,
    MFS_META_STORAGE_CLOSE_FAILED,
    MFS_META_STORAGE_NOT_READY,

    MFS_META_VOLUME_CREATE_FAILED,
    MFS_META_VOLUME_OPEN_FAILED,
    MFS_META_VOLUME_CLOSE_FAILED,
    MFS_META_VOLUME_CLOSE_FAILED_DUE_TO_ACTIVE_FILE,
    MFS_META_VOLUME_NOT_ENOUGH_SPACE,
    MFS_META_VOLUME_ALMOST_FULL,
    MFS_META_VOLUME_ALREADY_CLOSED,
    MFS_META_VOLUME_CATALOG_INVALID,
    MFS_META_SAVE_FAILED,
    MFS_META_LOAD_FAILED,
    MFS_IO_FAILED_DUE_TO_ENQUEUE_FAILED,
    MFS_IO_FAILED_DUE_TO_STOP_STATE,
    MFS_IO_FAILED_DUE_TO_ERROR,
    MFS_QUEUE_POP_FAILED,
    MFS_QUEUE_PUSH_FAILED,
    MFS_MAX_FILE_SIZE_NOT_SET,
    MFS_ARRAY_CREATE_FAILED,
    MFS_ARRAY_ADD_FAILED,
    MFS_ARRAY_REMOVE_FAILED,
    MFS_ARRAY_DELETE_FAILED,
    MFS_INVALID_MBR,
    MFS_NEED_MORE_CONTEXT_SLOT,
    MFS_FILE_DESCRIPTOR_NOT_EXIST,
    MFS_FILE_INACTIVATED,
    MFS_DATA_CORRUPTED,
    MFS_INVALID_CONFIG,

    MFS_CRITICAL_START = 4400,
    MFS_RECOVERY_CATALOG_FAILED = MFS_CRITICAL_START,
    MFS_TEST_FAILED,
    MFS_END,
    MFS_COUNT = MFS_END - MFS_START,
    // Event
    VOLUME_EVENT = 4500,
    DEVICE_DETACH_EVENT = 4510,
    STATE_EVENT = 4520,

    LOGGER_FILTER_POLICY_DECODE_FAIL = 4580,
    LOGGER_FILTER_POLICY_FILE_NOT_FOUND = 4581,
    LOGGER_SET_LEVEL_FAILED,
    LOGGER_FILTER_APPLY_SUCCESS,

    // --------------QOS Related (4600)----------------
    QOS_START = 4600,
    // QOS CLI Commands Related
    QOS_CLI_WRONG_MISSING_PARAMETER = QOS_START,
    QOS_CLI_FE_QOS_DISABLED,
    // QOS Manager Related
    QOS_SET_EVENT_POLICY,
    QOS_NOT_SUPPORTED,
    QOS_FINALIZATION,
    QOS_POLLER_REGISTRATION,
    QOS_POLLER_REGISTRATION_FAILED,
    QOS_POLLER_UNREGISTRATION,
    QOS_POLLER_UNREGISTRATION_FAILED,
    QOS_MINIMUM_NOT_MET,
    QOS_MAX_ARRAYS_EXCEEDED,
    QOS_ARRAY_DOES_NOT_EXIST,
    QOS_NOT_GUARANTEED,
    QOS_END,
    QOS_COUNT = QOS_END - QOS_START,
    // --------------IO Path nvmf (5000)----------------
    IONVMF_START = 5000,

    IONVMF_1H = IONVMF_START,
    IONVMF_2H,
    IONVMF_3H,
    IONVMF_4H,
    IONVMF_5H,
    IONVMF_6H,
    IONVMF_7H,
    IONVMF_8H,
    IONVMF_NAMESPACE_ATTACH_FAILED,
    IONVMF_FAIL_TO_FIND_VOLID,
    IONVMF_FAIL_TO_FIND_ARRAYNAME,
    IONVMF_OVERRIDE_UNVMF_IO_HANDLER,
    IONVMF_VOL_CREATE_TIMEOUT,
    IONVMF_VOL_DELETE_TIMEOUT,
    IONVMF_VOL_MOUNT_TIMEOUT,
    IONVMF_VOLUME_DETACH_COUNT_OVERFLOW,
    IONVMF_FAIL_TO_CREATE_POS_BDEV,
    IONVMF_FAIL_TO_DELETE_POS_BDEV,
    IONVMF_FAIL_TO_DETACH_NAMESPACE,
    IONVMF_BDEV_DOES_NOT_EXIST,
    IONVMF_BDEV_UUID_DOES_NOT_EXIST,
    IONVMF_FAIL_TO_CONVERT_UUID_INTO_STRING,
    IONVMF_FAIL_TO_PARSE_UUID,
    IONVMF_FAIL_TO_FIND_SUBSYSTEM,
    IONVMF_BDEV_ALREADY_EXIST,
    IONVMF_FAIL_TO_READ_TRANSPORT_CONFIG,
    IONVMF_FAIL_TO_CREATE_TRANSPORT,
    IONVMF_TRANSPORT_NUM_SHARED_BUFFER_CHANGED,
    IONVMF_FAIL_TO_CREATE_SUBSYSTEM,
    IONVMF_SET_ARRAY_TO_SUBSYSTEM,
    IONVMF_NO_CONFIG_MGR,
    IONVMF_FAIL_TO_INIT_POS_BDEV,
    IONVMF_SPDK_NVMF_CALLER_NULLPTR,
    // IONVMF_9H_FFH,    // Reserved

    IONVMF_END,
    IONVMF_COUNT = IONVMF_END - IONVMF_START,

    // --------------IO Path Frontend (5100)----------------
    IOFRONTEND_START = 5100,

    AFTMGR_CPU_COUNT_NOT_ENOUGH = IOFRONTEND_START,
    AFTMGR_DISABLED_CORE,
    AFTMGR_FAIL_TO_FIND_MASTER_REACTOR,
    AFTMGR_FAIL_TO_ALLOCATE_ALL_CPU,
    AFTMGR_FAIL_TO_OVERLAP_MASK,
    AFTMGR_FAIL_TO_PARSING_ERROR,
    AFTMGR_CORE_NOT_SUFFICIENT,
    AFTMGR_NO_EVENT_WORKER_ALLOCATED,
    AFTMGR_NO_USE_CONFIG,
    AFTMGR_USE_CONFIG,

    AIO_CONTEXT_NOT_FOUND,
    AIO_FAIL_TO_ALLOCATE_EVENT,
    AIO_FAIL_TO_ALLOCATE_MEMORY,
    AIO_INVALID_AIO_CONTEXT,
    AIO_INVALID_AIO_PRIVATE,
    AIO_INVALID_BDEV_IO,
    AIO_INVALID_UBIO,
    AIO_IO_FROM_INVALID_THREAD,
    AIO_DEBUG_COMPLETION,
    AIO_DEBUG_SUBMISSION,
    AIO_FLUSH_START,
    AIO_FLUSH_END,

    BLKALGN_INVALID_UBIO,

    BLKHDLR_FAIL_TO_ALLOCATE_EVENT,
    BLKHDLR_WRONG_IO_DIRECTION,

    CALLBACK_INVALID_CALLEE,
    CALLBACK_INVALID_COUNT,
    CALLBACK_TIMEOUT,
    CALLBACK_DESTROY_WITHOUT_EXECUTED,
    CALLBACK_DESTROY_WITH_ERROR,

    EVENTFRAMEWORK_FAIL_TO_ALLOCATE_EVENT,
    EVENTFRAMEWORK_INVALID_EVENT,
    EVENTFRAMEWORK_INVALID_REACTOR,

    EVENTSCHEDULER_NOT_MATCH_WORKER_COUNT,

    EVTARG_WRONG_ARGUMENT_ACCESS,
    EVTARG_WRONG_ARGUMENT_ADD,

    EVTQ_INVALID_EVENT,

    EVTSCHDLR_INVALID_WORKER_ID,

    FLUSHREAD_DEBUG_SUBMIT,
    FLUSHREAD_FAIL_TO_ALLOCATE_MEMORY,
    FLUSH_DEBUG_SUBMIT,
    FLUSH_DEBUG_COMPLETION,

    FREEBUFPOOL_FAIL_TO_ALLOCATE_MEMORY,

    IOAT_CONFIG_INVALID,

    IOATAPI_FAIL_TO_FINALIZE,
    IOATAPI_FAIL_TO_INITIALIZE,
    IOATAPI_FAIL_TO_SUBMIT_COPY,
    IOATAPI_DISABLED,
    IOATAPI_ENABLED,

    IODISPATCHER_INVALID_CPU_INDEX,
    IODISPATCHER_INVALID_PARM,

    MERGER_INVALID_SPLIT_REQUESTED,

    RBAMGR_WRONG_VOLUME_ID,

    RDCMP_INVALID_ORIGIN_UBIO,
    RDCMP_INVALID_UBIO,
    RDCMP_READ_FAIL,

    RDHDLR_INVALID_UBIO,
    RDHDLR_READ_DURING_REBUILD,

    SCHEDAPI_COMPLETION_POLLING_FAIL,
    SCHEDAPI_NULL_COMMAND,
    SCHEDAPI_SUBMISSION_FAIL,
    SCHEDAPI_WRONG_BUFFER,

    STRIPE_INVALID_VOLUME_ID,

    REF_COUNT_RAISE_FAIL,
    TRANSLATE_CONVERT_FAIL,
    TRANSLATE_CONVERT_FAIL_IN_SYSTEM_STOP,

    TRSLTR_INVALID_BLOCK_INDEX,
    TRSLTR_WRONG_ACCESS,
    TRSLTR_WRONG_VOLUME_ID,

    VOLUMEIO_DEBUG_SUBMIT,

    UBIO_DEBUG_CHECK_VALID,
    UBIO_DEBUG_COMPLETE,
    UBIO_ALREADY_SYNC_DONE,
    UBIO_CALLBACK_EVENT_ALREADY_SET,
    UBIO_DUPLICATE_IO_ABSTRACTION,
    UBIO_FAIL_TO_ALLOCATE_MEMORY,
    UBIO_FREE_UNALLOWED_BUFFER,
    UBIO_INVALID_GC_PROGRESS,
    UBIO_INVALID_POS_IO,
    UBIO_INVALID_IO_STATE,
    UBIO_INVALID_LSID,
    UBIO_INVALID_ORIGIN_UBIO,
    UBIO_INVALID_ORIGINAL_CORE,
    UBIO_INVALID_PBA,
    UBIO_INVALID_RBA,
    UBIO_INVALID_UBIO_HANDLER,
    UBIO_INVALID_VOLUME_ID,
    UBIO_INVALID_VSA,
    UBIO_INVALID_ARRAY_NAME,
    UBIO_INVALID_DEVICE,
    UBIO_NO_COMPLETION_FOR_FRONT_END_EVENT,
    UBIO_REMAINING_COUNT_ERROR,
    UBIO_REQUEST_NULL_BUFFER,
    UBIO_REQUEST_OUT_RANGE,
    UBIO_SYNC_FLAG_NOT_SET,
    UBIO_WRONG_SPLIT_SIZE,

    URAM_BACKUP_FILE_NOT_EXISTS,
    URAM_BACKUP_FILE_OPEN_FAILED,
    URAM_BACKUP_FILE_READ_FAILED,
    URAM_BACKUP_FILE_STAT_FAILED,
    URAM_CONFIG_FILE_OPEN_FAILED,
    URAM_COMPLETION_TIMEOUT,
    URAM_COMPLETION_FAILED,

    URAM_FAIL_TO_CLOSE,
    URAM_FAIL_TO_OPEN,
    URAM_FAIL_TO_REQUEST_IO,
    URAM_FAIL_TO_RETRY_IO,
    URAM_PENDING_IO_NOT_FOUND,
    URAM_RESTORING_FAILED,
    URAM_RESTORING_PAGE_DONE,
    URAM_SUBMISSION_FAILED,
    URAM_SUBMISSION_TIMEOUT,

    WRCMP_FAIL_TO_ALLOCATE_MEMORY,
    WRCMP_INVALID_SPLIT_UBIO,
    WRCMP_INVALID_STRIPE,
    WRCMP_IO_ERROR,
    WRCMP_WRITE_WRAPUP_FAILED,
    WRCMP_MAP_UPDATE_FAILED,

    IOCONTROL_REBUILD_FAIL,
    WRHDLR_ALLOC_WRITE_BUFFER_FAILED,
    WRHDLR_FAIL_TO_ALLOCATE_MEMORY,
    WRHDLR_FAIL_BY_SYSTEM_STOP,
    WRHDLR_INVALID_UBIO,

    WRHDLR_NO_FREE_SPACE,
    WRHDLR_DEBUG_READ_OLD,
    WRHDLR_DEBUG_READ_OLD_COMPLETE,

    WRWRAPUP_EVENT_ALLOC_FAILED,
    WRWRAPUP_STRIPE_NOT_FOUND,
    WRWRAPUP_DEBUG_STRIPE,
    BLKMAP_DEBUG_UPDATE_REQUEST,
    BLKMAP_DEBUG_UPDATE,

    FLUSH_HANDLING_ENABLED,
    FLUSH_HANDLING_DISABLED,
    FLUSH_CMD_MAPPER_FLUSH_FAILED,
    FLUSH_CMD_ALLOCATOR_FLUSH_FAILED,
    FLUSH_CMD_ONGOING,

    PARITY_ONLY_NOT_SUPPORTED,
    WRITE_FOR_PARITY_FAILED,

    WRHDLR_FAIL_TO_LOCK,
    WRHDLR_FAIL_TO_UNLOCK,

    IOFRONTEND_END,
    IOFRONTEND_COUNT = IOFRONTEND_END - IOFRONTEND_START,

    // --------------IO Path Backend (5300)----------------

    IOBACKEND_START = 5300,

    IOWORKER_OPERATION_NOT_SUPPORTED = IOBACKEND_START,
    IOWORKER_DEVICE_ADDED,
    IOWORKER_UNDERFLOW_HAPPENED,
    IOSMHDLR_BUFFER_NOT_ENOUGH,
    IOSMHDLR_BUFFER_NOT_ALIGNED,
    IOSMHDLR_OPERATION_NOT_SUPPORTED,
    IOSMHDLR_DEBUG_ASYNC_READ,
    IOSMHDLR_COUNT_DIFFERENT,
    IOSMHDLR_DEBUG_ASYNC_WRITE,
    IOSMHDLR_ARRAY_LOCK,
    IOSMHDLR_ARRAY_UNLOCK,
    IOSMHDLR_BYTEIO_BUFFER_NULLPTR,
    IOSMHDLR_BYTEIO_PARTITION_IS_NOT_BYTE_ACCESSIBLE,
    IOSMHDLR_BYTEIO_DIR_NOT_SUPORTTED,
    IOSMHDLR_BYTEIO_PARTITION_TRANSLATE_ERROR,
    I_IOSMHDLR_NULLPTR,

    DEVICE_OPEN_FAILED,
    DEVICE_CLOSE_FAILED,
    DEVICE_SCAN_FAILED,
    DEVICE_SCAN_IGNORED,
    DEVICE_SUBMISSION_FAILED,

    DEVICE_SUBMISSION_QUEUE_FULL,
    DEVICE_SUBMISSION_TIMEOUT,
    DEVICE_COMPLETION_FAILED,
    DEVICE_THREAD_REGISTERED_FAILED,
    DEVICE_THREAD_UNREGISTERED_FAILED,
    DEVICE_OPERATION_NOT_SUPPORTED,
    DEVICE_PENDING_IO_NOT_FOUND,
    DEVICE_UNEXPECTED_PENDING_ERROR_COUNT,
    DEVICE_OVERLAPPED_SET_IOWORKER,
    DEVICE_NULLPTR_IOWORKER,

    UNVME_SSD_DEBUG_CREATED,
    UNVME_SSD_SCAN_FAILED,
    UNVME_SSD_SCANNED,
    UNVME_SSD_ATTACH_NOTIFICATION_FAILED,
    UNVME_SSD_DETACH_NOTIFICATION_FAILED,
    UNVME_SSD_OPEN_FAILED,
    UNVME_SSD_CLOSE_FAILED,
    UNVME_SSD_UNDERFLOW_HAPPENED,
    UNVME_SUBMISSION_FAILED,
    UNVME_SUBMISSION_QUEUE_FULL,
    UNVME_SUBMISSION_RETRY_EXCEED,
    UNVME_COMPLETION_TIMEOUT,

    UNVME_COMPLETION_FAILED,
    UNVME_OPERATION_NOT_SUPPORTED,
    UNVME_CONTROLLER_FATAL_STATUS,
    UNVME_CONTROLLER_RESET_FAILED,
    UNVME_CONTROLLER_RESET,
    UNVME_SUBMITTING_CMD_ABORT,
    UNVME_ABORT_TIMEOUT,
    UNVME_ABORT_SUBMISSION_FAILED,
    UNVME_ABORT_COMPLETION_FAILED,
    UNVME_ABORT_COMPLETION,
    UNVME_DO_NOTHING_ON_TIMEOUT,
    UNVME_ABORT_TIMEOUT_FAILED,

    UNVME_NOT_SUPPORTED_DEVICE,

    UNVME_DEBUG_RETRY_IO,
    UNVME_DEBUG_REQUEST_IO,
    UNVME_DEBUG_COMPLETE_IO,

    DEVICE_CONTEXT_NOT_FOUND,

    DEVCTX_ALLOC_TIMEOUT_CHECKER_FAILED,
    IOCTX_ERROR_KEY_NOT_SET,
    IOCTX_IO_KEY_NOT_SET,

    IOQ_ENQUEUE_NULL_UBIO,

    BUFFER_ENTRY_OUT_OF_RANGE,

    NFLSH_ERROR_DETECT,
    NFLSH_EVENT_ALLOCATION_FAILED,
    NFLSH_EVENT_MAP_UPDATE_FAILED,
    NFLSH_STRIPE_NOT_IN_WRITE_BUFFER,
    NFLSH_STRIPE_DEBUG,
    NFLSH_STRIPE_DEBUG_UPDATE,

    FLUSH_WRAPUP_STRIPE_NOT_IN_USER_AREA,
    STRIPEPUTEVT_STRIPE_NOT_IN_NORMAL_POOL,

    IOBACKEND_END,
    IOBACKEND_COUNT = IOBACKEND_END - IOBACKEND_START,

    // --------------Device (5500)----------------
    DEVICE_START = 5500,

    UNVME_DAEMON_START = DEVICE_START,
    UNVME_DAEMON_FINISH,
    UNVME_REGISTER_CTRL,
    UNVME_REGISTER_NS,
    UNVME_PROBE_CALLBACK,
    UNVME_INIT_SCAN_CALLBACK,
    UNVME_ATTACH_CALLBACK,
    UNVME_DETACH_CALLBACK,
    UNVME_SPDK_DETACH,
    UNVME_CLEAN_UP,
    UNVME_INIT_CONTROLLER,
    UNVME_MAX_RETRY_EXCEED,
    UNVME_MAX_TIMEOUT_EXCEED,

    DEVICEMGR_ATTACH,
    DEVICEMGR_CLEAR_DEVICE,
    DEVICEMGR_START_MONITOR,
    DEVICEMGR_STOP_MONITOR,
    DEVICEMGR_CHK_DUPLICATE,
    DEVICEMGR_INIT_SCAN,
    DEVICEMGR_REMOVE_DEV,
    DEVICEMGR_RESCAN,
    DEVICEMGR_GETDEV,
    DEVICEMGR_LISTDEV,
    DEVICEMGR_DETACH,
    DEVICEMGR_SETUPMODEL,
    DEVICEMGR_DEVICE_NOT_FOUND,

    DEVICE_CREATION_FAIL,
    DEVICE_DETACH_TRIGGER_FAIL,

    URAM_INVALID_NUMA,

    DEVICE_INFO_MSG,
    DEVICE_DEBUG_MSG,
    DEVICE_WARN_MSG,

    // --------------Resource (5700)----------------
    RESOURCE_MANAGER_START = 5700,
    RESOURCE_MANAGER_DEBUG_MSG = RESOURCE_MANAGER_START,
    RESOURCE_BUFFER_POOL_EMPTY,
    RESOURCE_HUGEPAGE_ALLOCATION_FAIL,

    // --------------HA Replication (8000)----------------
    HA_INVALID_INPUT_ARGUMENT = 8000,
    HA_INVALID_RETURN_LSN,
    HA_INSERT_REQUEST_FAIL,
    HA_REQUESTED_NOT_FOUND,
    HA_COMPLETION_FAIL,
    HA_DEBUG_MSG,
    HA_COUNT,
    HA_VOLUME_SUBSCRIBER_REGISTER_FAIL,

    // --------------Smart Log (8500)----------------
    SMART_LOG_INVALID_BUFFER = 8500,
    SMART_LOG_NO_DISK_IN_ARRAY,
    SMART_LOG_INVALID_LOG_PAGE_ID,
    SMART_LOG_ENABLED,
    SMART_LOG_DISABLED,

    // --------------System (9000)----------------
    SYSTEM_START = 9000,
    SYSTEM_SPACE_INFO = SYSTEM_START,
    SYSTEM_VERSION_LOAD_SUCCESS,
    SYSTEM_END,
    SYSTEM_COUNT = SYSTEM_END - SYSTEM_START,

    // --------------Telemetry (9500)----------------
    TELEMETRY_DEBUG_MSG = 9500,
    TELEMETRY_DISABLED = 9501,
    TELEMETRY_START_FAILURE,
    TELEMETRY_START_FAILURE_CONFIG_ERROR,
    TELEMETRY_STOP_FAILURE,
    TELEMETRY_STOP_FAILURE_CONFIG_ERROR,

    TELEMETRY_ERROR_MSG = 9600,
    TELEMETRY_CONFIG_BAD_FILE,
    TELEMETRY_CONFIG_INVALID_FIELD,

    TELEMETRY_AIR_DATA_PARSING_FAILED = 9700,

    // --------------Debug (10000)----------------
    DEBUG_START = 10000,
    DEBUG_MEMORY_CHECK_DOUBLE_FREE = DEBUG_START,
    DEBUG_MEMORY_CHECK_INVALID_ACCESS,
    DEBUG_CORE_DUMP_SETTING_FAILED,
    DEBUG_ATOMIC_UNDERFLOW,
    DEBUG_SIGNAL_HANDLING,

    // -----------------Exceptions-------------------
    EVENT_ID_MAPPING_WRONG = 0x7FFFFFFE,
    RESERVED = 0x7FFFFFFF,
};

// Event information
class PosEventInfoEntry
{
    public:
        PosEventInfoEntry(const char* eventName, const char* message,
            const char* cause, const char* solution)
        {
            this->eventName = eventName;
            this->message = message;
            this->cause = cause;
            this->solution = solution;
        }
        std::string GetEventName() { return eventName; }
        std::string GetMessage() { return message; }
        std::string GetCause() { return cause; }
        std::string GetSolution() { return solution; }

    private:
        std::string eventName = "";
        std::string message = "";
        // mj: Fill in cause and solution for erroneous events only.
        std::string cause = "";
        std::string solution = "";
};

static std::unordered_map<int, PosEventInfoEntry*> PosEventInfo =
    {
        // map<eventId, PosEventInfoEntry(eventName, message, cause)>
        {(int)POS_EVENT_ID::SUCCESS,
            new PosEventInfoEntry("SUCCESS",
                "", "",
                "")},
        {(int)POS_EVENT_ID::POS_SYSTEMINFO_GET_VERSION,
            new PosEventInfoEntry("POS_SYSTEMINFO_GET_VERSION",
                "PoseidonOS version has been loaded.", "",
                "")},
        {(int)POS_EVENT_ID::POS_TERMINATION_TRIGGERED,
            new PosEventInfoEntry("POS_TERMINATION_TRIGGERED",
                "PoseidonOS termination has been requested. Entering a termination process..", "",
                "")},
        {(int)POS_EVENT_ID::POS_STOP_FAILURE_BEING_TERMINATED,
            new PosEventInfoEntry("POS_STOP_FAILURE_BEING_TERMINATED",
                "Failed to stop PoseidonOS.", "PoseidonOS is already in termination process.",
                "Please wait a moment.")},

        {(int)POS_EVENT_ID::POS_STOP_FAIULRE_MOUNTED_ARRAY_EXISTS,
            new PosEventInfoEntry("POS_STOP_FAIULRE_MOUNTED_ARRAY_EXISTS",
                "Failed to terminate PoseidonOS.", "An array is mounted.",
                "Please try the command after a while.")},
        {(int)POS_EVENT_ID::CLI_SERVER_INITIALIZED,
            new PosEventInfoEntry("CLI_SERVER_INITIALIZED",
                "The CLI server has been initialized successfully.", "", "")},
        {(int)POS_EVENT_ID::POS_TRACE_STARTED,
            new PosEventInfoEntry("POS_TRACE_STARTED",
                "The Poseidon OS started.", "", "")},
        {(int)POS_EVENT_ID::POS_TRACE_INIT_SUCCESS,
            new PosEventInfoEntry("POS_TRACE_INIT_SUCCESS",
                "The Poseidon OS successfully initialized.", "", "")},
        {(int)POS_EVENT_ID::POS_TRACE_INIT_FAIL,
            new PosEventInfoEntry("POS_TRACE_INIT_FAIL",
                "The Poseidon OS Failed to initialize.", "", "")},
        {(int)POS_EVENT_ID::POS_TRACE_TERMINATING,
            new PosEventInfoEntry("POS_TRACE_TERMINATING",
                "The Poseidon OS is shutting down.", "", "")},
        {(int)POS_EVENT_ID::POS_TRACE_TERMINATED,
            new PosEventInfoEntry("POS_TRACE_TERMINATED",
                "The Poseidon OS successfully terminated.", "", "")},
        {(int)POS_EVENT_ID::POS_TRACE_ARRAY_CREATED,
            new PosEventInfoEntry("POS_TRACE_ARRAY_CREATED",
                "The array successfully created.", "", "")},
        {(int)POS_EVENT_ID::POS_TRACE_ARRAY_LOADED,
            new PosEventInfoEntry("POS_TRACE_ARRAY_LOADED",
                "The array successfully loaded.", "", "")},
        {(int)POS_EVENT_ID::POS_TRACE_ARRAY_DELETED,
            new PosEventInfoEntry("POS_TRACE_ARRAY_DELETED",
                "The array successfully deleted.", "", "")},
        {(int)POS_EVENT_ID::POS_TRACE_ARRAY_MOUNTED,
            new PosEventInfoEntry("POS_TRACE_ARRAY_MOUNTED",
                "The array successfully mounted.", "", "")},
        {(int)POS_EVENT_ID::POS_TRACE_ARRAY_UNMOUNTED,
            new PosEventInfoEntry("POS_TRACE_ARRAY_UNMOUNTED",
                "The array successfully unmounted.", "", "")},
        {(int)POS_EVENT_ID::POS_TRACE_ARRAY_SHUTDOWN,
            new PosEventInfoEntry("POS_TRACE_ARRAY_SHUTDOWN",
                "The array successfully shutdown.", "", "")},
        {(int)POS_EVENT_ID::POS_TRACE_ARRAY_STATE_CHANGED,
            new PosEventInfoEntry("POS_TRACE_ARRAY_STATE_CHANGED",
                "The array state changed.", "", "")},
        {(int)POS_EVENT_ID::POS_TRACE_DEVICE_ATTACHED,
            new PosEventInfoEntry("POS_TRACE_DEVICE_ATTACHED",
                "A new device is hot-attached.", "", "")},
        {(int)POS_EVENT_ID::POS_TRACE_DEVICE_DETACHED,
            new PosEventInfoEntry("POS_TRACE_DEVICE_DETACHED",
                "A device is hot-detached.", "", "")},
        {(int)POS_EVENT_ID::CLI_CLIENT_ACCEPTED,
            new PosEventInfoEntry("CLI_CLIENT_ACCEPTED",
                "A new client has been accepted (connected).", "", "")},
        {(int)POS_EVENT_ID::CLI_CLIENT_DISCONNECTED,
            new PosEventInfoEntry("CLI_CLIENT_DISCONNECTED",
                "A client has been disconnected.", "", "")},
        {(int)POS_EVENT_ID::CLI_MSG_RECEIVED,
            new PosEventInfoEntry("CLI_MSG_RECEIVED",
                "CLI server has recieved a message from a CLI client.", "", "")},
        {(int)POS_EVENT_ID::CLI_MSG_SENT,
            new PosEventInfoEntry("CLI_MSG_SENT",
                "CLI server has sent a message to a client.", "", "")},
        {(int)POS_EVENT_ID::CLI_TIMEOUT_OR_CANCELLED,
            new PosEventInfoEntry("CLI_TIMEOUT_OR_CANCELLED,",
                "Detected a timeout or a cancellation from the CLI client.", "", "")},
        {(int)POS_EVENT_ID::CLI_MSG_SENDING_FAILURE,
            new PosEventInfoEntry("CLI_MSG_SENDING_FAILURE,",
                "CLI server has Failed to send a message to a client.", "", "")},
        {(int)POS_EVENT_ID::CLI_SERVER_FINISH,
            new PosEventInfoEntry("CLI_SERVER_FINISH",
                "CLI server has finished successfully.", "", "")},
        {(int)POS_EVENT_ID::CLI_SERVER_THREAD_JOINED,
            new PosEventInfoEntry("CLI_SERVER_THREAD_JOINED",
                "A CLI server thread has joined. The main thread is blocked until the CLI processing finishes.", "", "")},
        {(int)POS_EVENT_ID::CLI_REUSE_ADDR_ENABLED,
            new PosEventInfoEntry("CLI_REUSE_ADDR_ENABLED",
                "CLI server has enabled to reuse address.", "", "")},
        {(int)POS_EVENT_ID::CLI_REUSE_ADDR_FAILURE,
            new PosEventInfoEntry("CLI_REUSE_ADDR_FAILURE",
                "CLI server has Failed to reuse address.", "", "")},
        {(int)POS_EVENT_ID::CLI_SOCK_CREATE_FAILURE,
            new PosEventInfoEntry("CLI_SOCK_CREATE_FAILURE",
                "CLI server has Failed to create a socket.", "", "")},
        {(int)POS_EVENT_ID::CLI_SOCK_BIND_FAILURE,
            new PosEventInfoEntry("CLI_SOCK_BIND_FAILURE",
                "CLI server has Failed to bind a socket.", "", "")},
        {(int)POS_EVENT_ID::CLI_SOCK_LISTEN_FAILURE,
            new PosEventInfoEntry("CLI_SOCK_LISTEN_FAILURE",
                "CLI server has Failed to listen to a socket.", "", "")},
        {(int)POS_EVENT_ID::CLI_EPOLL_CREATE_FAILURE,
            new PosEventInfoEntry("CLI_EPOLL_CREATE_FAILURE",
                "CLI server has Failed to create a epoll.", "", "")},
        {(int)POS_EVENT_ID::CLI_SOCK_ACCEPT_FAILURE,
            new PosEventInfoEntry("CLI_SOCK_ACCEPT_FAILURE",
                "CLI server has Failed to accept the client socket.", "", "")},
        {(int)POS_EVENT_ID::CLI_ADD_CLIENT_FAILURE_MAX_CLIENT,
            new PosEventInfoEntry("CLI_ADD_CLIENT_FAILURE_MAX_CLIENT",
                "CLI server has Failed to add a client.",
                    "The number of clients exceeds the maximum.", "")},
        {(int)POS_EVENT_ID::CLI_MSG_RECEIVE_FAILURE,
            new PosEventInfoEntry("CLI_MSG_RECEIVE_FAILURE",
                "CLI server has Failed to receive a message from a client.", "", "")},
        {(int)POS_EVENT_ID::CLI_SERVER_TIMED_OUT,
            new PosEventInfoEntry("CLI_SERVER_TIMED_OUT",
                "CLI server has timed out.", "Command processing takes too long.", "")},
        {(int)POS_EVENT_ID::CLI_SERVER_BUSY,
            new PosEventInfoEntry("CLI_SERVER_BUSY",
                "CLI server could not receive the command.",
                "POS is processing a previously receieved command.", "Please try after a while.")},
        {(int)POS_EVENT_ID::CLI_CLIENT_CREATED,
            new PosEventInfoEntry("CLI_CLIENT_CREATED",
                "CLI server has created a thread for CLI.", "", "")},
        {(int)POS_EVENT_ID::CLI_CLIENT_CREATION_FAILURE,
            new PosEventInfoEntry("CLI_CLIENT_CREATION_FAILURE",
                "CLI server could not create a thread.", "", "")},
        {(int)POS_EVENT_ID::CLI_CLIENT_DETACHED,
            new PosEventInfoEntry("CLI_CLIENT_DETACHED",
                "CLI server has detached a thread for CLI.", "", "")},
        {(int)POS_EVENT_ID::CLI_CLIENT_DETACHEMENT_FAILURE,
            new PosEventInfoEntry("CLI_CLIENT_DETACHEMENT_FAILURE",
                "CLI server could not detach a thread for CLI.", "", "")},
        {(int)POS_EVENT_ID::CLI_LIST_ARRAY_FAILURE,
            new PosEventInfoEntry("CLI_LIST_ARRAY_FAILURE",
                "Failed to retrieve array list.", "unable to read the array configuration.", "try device scanning first")},
        {(int)POS_EVENT_ID::CLI_ADD_DEVICE_FAILURE_NO_DEVICE_SPECIFIED,
            new PosEventInfoEntry("CLI_ADD_DEVICE_FAILURE_NO_DEVICE_SPECIFIED",
                "Failed to add a spare device.", "spare device is not specified", "please specify the spare device")},
        {(int)POS_EVENT_ID::CLI_ADD_DEVICE_SUCCESS,
            new PosEventInfoEntry("CLI_ADD_DEVICE_SUCCESS",
                "A spare device has been added to an array.", "", "")},
        {(int)POS_EVENT_ID::CLI_ADD_LISTENER_SUCCESS,
            new PosEventInfoEntry("CLI_ADD_LISTENER_SUCCESS",
                "A lisenter has been added.", "", "")},
        {(int)POS_EVENT_ID::LOGGER_FILTER_POLICY_FILE_NOT_FOUND,
            new PosEventInfoEntry("LOGGER_FILTER_POLICY_FILE_NOT_FOUND",
                "Failed to find a logger filter policy file.", "", "Check out the instructions in the help message of the command.")},
        {(int)POS_EVENT_ID::LOGGER_FILTER_APPLY_SUCCESS,
            new PosEventInfoEntry("LOGGER_FILTER_APPLY_SUCCESS",
                "Log filter has been applied.", "", "")},
        {(int)POS_EVENT_ID::LOGGER_FILTER_POLICY_DECODE_FAIL,
            new PosEventInfoEntry("LOGGER_FILTER_POLICY_DECODE_FAIL",
                "Failed to decode logger filter policy.", "", "")},
        {(int)POS_EVENT_ID::CLI_ARRAY_INFO_NO_ARRAY_NAME,
            new PosEventInfoEntry("CLI_ARRAY_INFO_NO_ARRAY_NAME",
                "Failed to retrieve array info.", "Array name is not specified.", "Specify the array name.")},
        {(int)POS_EVENT_ID::CLI_ARRAY_INFO_ARRAY_NOT_EXIST,
            new PosEventInfoEntry("CLI_ARRAY_INFO_ARRAY_NOT_EXIST",
                "Failed to retrieve array info.", "array does not exist", "")},
        {(int)POS_EVENT_ID::CLI_AUTOCREATE_ARRAY_SUCCESS,
            new PosEventInfoEntry("CLI_AUTOCREATE_ARRAY_SUCCESS",
                "An array has been created via autocreate.", "", "")},
        {(int)POS_EVENT_ID::CLI_COMMAND_FAILURE_ARRAY_BROKEN,
            new PosEventInfoEntry("CLI_COMMAND_FAILURE_ARRAY_BROKEN",
                "Failed to process the command.", "The array is not in normal state.", "")},
        {(int)POS_EVENT_ID::CLI_SET_SYSTEM_PROPERTY_LEVEL_NOT_SUPPORTED,
            new PosEventInfoEntry("CLI_SET_SYSTEM_PROPERTY_LEVEL_NOT_SUPPORTED",
                "Failed to set rebuild performance impact.", "The specified level is not supported.",
                "Check the supported levels using the --help option.")},
        {(int)POS_EVENT_ID::CLI_SET_SYSTEM_PROPERTY_FAILURE,
            new PosEventInfoEntry("CLI_SET_SYSTEM_PROPERTY_FAILURE",
                "Failed to update rebuild performance impact.", "",
                "")},
        {(int)POS_EVENT_ID::CLI_DEVEL_RESET_MBR_SUCCESS,
            new PosEventInfoEntry("CLI_DEVEL_RESET_MBR_SUCCESS",
                "MBR has been reset.", "", "")},
        {(int)POS_EVENT_ID::CLI_DEVEL_RESET_MBR_FAILURE,
            new PosEventInfoEntry("CLI_DEVEL_RESET_MBR_FAILURE",
                "Failed to reset MBR.", "",
                "")},
        {(int)POS_EVENT_ID::CLI_UPDATE_EVENT_WRR_FAILURE_NO_EVENT_NAME,
            new PosEventInfoEntry("CLI_UPDATE_EVENT_WRR_FAILURE_NO_EVENT_NAME",
                "Failed to update event WRR.", "Event name is not specified.",
                "Please input event name to update.")},
        {(int)POS_EVENT_ID::CLI_UPDATE_EVENT_WRR_FAILURE_WEIGHT_VALUE_RANGE_VIOLATION,
            new PosEventInfoEntry("CLI_UPDATE_EVENT_WRR_FAILURE_WEIGHT_VALUE_RANGE_VIOLATION",
                "Failed to update event WRR.", "Weight value is out of the valid range.",
                "Please input a valid weight value.")},
        {(int)POS_EVENT_ID::CLI_UPDATE_EVENT_WRR_FAILURE_UNKNOWN_EVENT,
            new PosEventInfoEntry("CLI_UPDATE_EVENT_WRR_FAILURE_UNKNOWN_EVENT",
                "Failed to update event WRR.", "The input event does not exist.",
                "Please check the event name.")},
        {(int)POS_EVENT_ID::CLI_SET_LOG_LEVEL_FAILURE_LEVEL_NOT_SPECIFIED,
            new PosEventInfoEntry("CLI_SET_LOG_LEVEL_FAILURE_LEVEL_NOT_SPECIFIED",
                "Failed to set log level.", "The log level is not specified.",
                "Please input the log level to set.")},
        {(int)POS_EVENT_ID::CLI_SET_LOG_PREFERENCE_FAILURE_STR_LOG_NOT_SPECIFIED,
            new PosEventInfoEntry("CLI_SET_LOG_PREFERENCE_FAILURE_STR_LOG_NOT_SPECIFIED",
                "Failed to set preference.", "The structured logging is not specified.",
                "Please input the structured logging.")},

        {(int)POS_EVENT_ID::CREATE_ARRAY_EXCEED_MAX_NUM_OF_ARRAYS,
            new PosEventInfoEntry("CREATE_ARRAY_EXCEED_MAX_NUM_OF_ARRAYS",
                "Failed to create array.", "The maximum number of possible arrays has been exceeded.",
                    "If you remove the existing array, you can create a new array.")},
        {(int)POS_EVENT_ID::CREATE_ARRAY_SAME_ARRAY_NAME_EXISTS,
            new PosEventInfoEntry("CREATE_ARRAY_SAME_ARRAY_NAME_EXISTS",
                "Failed to create array.", "Array with the same name already exists.", "Please use another name.")},
        {(int)POS_EVENT_ID::CREATE_ARRAY_NAME_TOO_SHORT,
            new PosEventInfoEntry("CREATE_ARRAY_NAME_TOO_SHORT",
                "Failed to create array.", "Array name is too short.", "Array name must be at least 2 characters long.")},
        {(int)POS_EVENT_ID::CREATE_ARRAY_NAME_TOO_LONG,
            new PosEventInfoEntry("CREATE_ARRAY_NAME_TOO_LONG",
                "Failed to create an array.", "Array name is too long.", "Array name must be at most 63 characters long.")},
        {(int)POS_EVENT_ID::CREATE_ARRAY_NAME_INCLUDES_SPECIAL_CHAR,
            new PosEventInfoEntry("CREATE_ARRAY_NAME_INCLUDES_SPECIAL_CHAR",
                "Failed to create an array.", "Array name contains a special character.", "Array name must not have any special character.")},
        {(int)POS_EVENT_ID::CREATE_ARRAY_NAME_START_OR_END_WITH_SPACE,
            new PosEventInfoEntry("CREATE_ARRAY_NAME_START_OR_END_WITH_SPACE",
                "Failed to create an array.", "A whitespace exists at the beginning or end of the name.", "Remove the whitespace from the name.")},
        {(int)POS_EVENT_ID::CREATE_ARRAY_SSD_NAME_NOT_FOUND,
            new PosEventInfoEntry("CREATE_ARRAY_SSD_NAME_NOT_FOUND",
                "Failed to create an array.", "Failed to find the device with the given name.", "Please check the data device list.")},
        {(int)POS_EVENT_ID::CREATE_ARRAY_NVM_NAME_NOT_FOUND,
            new PosEventInfoEntry("CREATE_ARRAY_NVM_NAME_NOT_FOUND",
                "Failed to create an array.", "Failed to find the write buffer with the given name.", "Please check the write buffer device name.")},
        {(int)POS_EVENT_ID::CREATE_ARRAY_NOT_SUPPORTED_RAIDTYPE,
            new PosEventInfoEntry("CREATE_ARRAY_NOT_SUPPORTED_RAIDTYPE",
                "Failed to create an array.", "The RAID type is not supported.", "Please check the supported RAID types.")},
        {(int)POS_EVENT_ID::CREATE_ARRAY_RAID_INVALID_SSD_CNT,
            new PosEventInfoEntry("CREATE_ARRAY_RAID_INVALID_SSD_CNT",
                "Failed to create an array.", "The number of devices to build the RAID you entered does not meet the requirement.",
                    "Check the device requirement for the RAID type.")},
        {(int)POS_EVENT_ID::CREATE_ARRAY_RAID_DOES_NOT_SUPPORT_SPARE_DEV,
            new PosEventInfoEntry("CREATE_ARRAY_RAID_DOES_NOT_SUPPORT_SPARE_DEV",
                "Failed to create an array.", "The RAID type entered does not support spare devices.", "Please try again without spare device.")},
        {(int)POS_EVENT_ID::CREATE_ARRAY_NO_AVAILABLE_DEVICE,
            new PosEventInfoEntry("CREATE_ARRAY_NO_AVAILABLE_DEVICE",
                "Failed to create an array.", "The devices you entered are not available.", "Enter available devices.")},
        {(int)POS_EVENT_ID::CREATE_ARRAY_SSD_CAPACITY_IS_LT_MIN,
            new PosEventInfoEntry("CREATE_ARRAY_SSD_CAPACITY_IS_LT_MIN",
                "Failed to create an array.", "The total capacity of data devices is smaller than the minimum requirement.",
                    "Please checkout the minimum requirement for data devices.")},
        {(int)POS_EVENT_ID::CREATE_ARRAY_NVM_CAPACITY_IS_LT_MIN,
            new PosEventInfoEntry("CREATE_ARRAY_NVM_CAPACITY_IS_LT_MIN",
                "Failed to create an array.", "The total capacity of the write buffer is smaller than the minimum requirement.", "Please checkout the minimum requirement for a write buffer.")},
        {(int)POS_EVENT_ID::CREATE_ARRAY_SPARE_CAPACITY_IS_LT_DATA,
            new PosEventInfoEntry("CREATE_ARRAY_SPARE_CAPACITY_IS_LT_DATA",
                "Failed to create an array.", "The capacity of the spare device is smaller than or equal to that of the smallest data device.", "Please use another spare device.")},
        {(int)POS_EVENT_ID::CREATE_ARRAY_INSUFFICIENT_MEMORY_UNABLE_TO_ALLOC_PARITY_POOL,
            new PosEventInfoEntry("CREATE_ARRAY_INSUFFICIENT_MEMORY_UNABLE_TO_ALLOC_PARITY_POOL",
                "Failed to create an array.", "Failed to create buffer pool for parity calculation.", "Please check if there is enough huge page memory space.")},
        {(int)POS_EVENT_ID::CREATE_ARRAY_INSUFFICIENT_SAME_NUMA_DEVS,
            new PosEventInfoEntry("CREATE_ARRAY_INSUFFICIENT_SAME_NUMA_DEVS",
                "Failed to create an array.", "The number of SSDs requested on the same NUMA is insufficient.", "Please check the number of unoccupied SSDs on the same NUMA with the same capacity.")},
        {(int)POS_EVENT_ID::CREATE_ARRAY_INSUFFICIENT_SAME_CAPACITY_DEVS,
            new PosEventInfoEntry("CREATE_ARRAY_INSUFFICIENT_SAME_CAPACITY_DEVS",
                "Failed to create an array.", "The number of SSDs requested with the same capacity on the same NUMA is insufficient",
                    "Please check the number of unoccupied SSDs on the same NUMA with the same capacity.")},
        {(int)POS_EVENT_ID::MBR_DEVICE_ALREADY_IN_ARRAY,
            new PosEventInfoEntry("MBR_DEVICE_ALREADY_IN_ARRAY",
                "Device already belongs to an array.", "", "Select another device.")},
        {(int)POS_EVENT_ID::LOAD_ARRAY_NVM_DOES_NOT_EXIST,
            new PosEventInfoEntry("LOAD_ARRAY_NVM_DOES_NOT_EXIST",
                "Failed to load an array.", "Write buffer device could not be found.", "Please try again after checking there is a write buffer in the array.")},
        {(int)POS_EVENT_ID::LOAD_ARRAY_ALREADY_LOADED,
            new PosEventInfoEntry("LOAD_ARRAY_ALREADY_LOADED",
                "Failed to load an array.", "The array has already been loaded.", "")},
        {(int)POS_EVENT_ID::DELETE_ARRAY_CAN_ONLY_BE_WHILE_OFFLINE,
            new PosEventInfoEntry("DELETE_ARRAY_CAN_ONLY_BE_WHILE_OFFLINE",
                "Failed to delete an array.", "An mounted array cannot be deleted.", "Unmount the array first.")},
        {(int)POS_EVENT_ID::DELETE_ARRAY_ARRAY_NAME_DOES_NOT_EXIST,
            new PosEventInfoEntry("DELETE_ARRAY_ARRAY_NAME_DOES_NOT_EXIST",
                "Failed to delete an array.", "Array of the requested name could not be found.", "Please check the array name to delete.")},
        {(int)POS_EVENT_ID::DELETE_ARRAY_TIMED_OUT,
            new PosEventInfoEntry("DELETE_ARRAY_TIMED_OUT",
                "Failed to delete an array.", "A broken array's internal resource cleanup has not been complete.", "Please try after a while.")},
        {(int)POS_EVENT_ID::MOUNT_ARRAY_UNABLE_TO_INVOKE_MOUNT_STATE,
            new PosEventInfoEntry("MOUNT_ARRAY_UNABLE_TO_INVOKE_MOUNT_STATE",
                "Failed to mount an array.", "Unable to acquire mount state", "Please try after a while.")},
        {(int)POS_EVENT_ID::MOUNT_ARRAY_ALREADY_MOUNTED,
            new PosEventInfoEntry("MOUNT_ARRAY_ALREADY_MOUNTED",
                "Failed to mount an array.", "The array is already mounted.", "")},
        {(int)POS_EVENT_ID::MOUNT_ARRAY_ARRAY_NAME_DOES_NOT_EXIST,
            new PosEventInfoEntry("MOUNT_ARRAY_ARRAY_NAME_DOES_NOT_EXIST",
                "Failed to mount an array.", "Array of the requested name could not be found", "Please check the array's name to mount.")},
        {(int)POS_EVENT_ID::MOUNT_ARRAY_BROKEN_ARRAY_CANNOT_BE_MOUNTED,
            new PosEventInfoEntry("MOUNT_ARRAY_BROKEN_ARRAY_CANNOT_BE_MOUNTED",
                "Failed to mount an array.", "Broken array cannot be mounted", "Please delete the array and create a new one.")},
        {(int)POS_EVENT_ID::MOUNT_ARRAY_UNABLE_TO_REGISTER_TRANSLATOR,
            new PosEventInfoEntry("MOUNT_ARRAY_UNABLE_TO_REGISTER_TRANSLATOR",
                "Failed to mount an array.", "Internal translator service registration was failed during the mounting process.",
                    "Please try again and report the error if the problem occurs repeatedly.")},
        {(int)POS_EVENT_ID::MOUNT_ARRAY_UNABLE_TO_REGISTER_RECOVER,
            new PosEventInfoEntry("MOUNT_ARRAY_UNABLE_TO_REGISTER_RECOVER",
                "Failed to mount an array.", "Internal recover service registration failed during the mounting process", "Please try again and report the error if the problem occurs repeatedly.")},
        {(int)POS_EVENT_ID::MOUNT_ARRAY_UNABLE_TO_REGISTER_DEVICECHECKER,
            new PosEventInfoEntry("MOUNT_ARRAY_UNABLE_TO_REGISTER_DEVICECHECKER",
                "Failed to mount an array.", "Internal device checker service registration failed during the mounting process", "Please try again and report the error if the problem occurs repeatedly.")},
        {(int)POS_EVENT_ID::MOUNT_ARRAY_UNABLE_TO_REGISTER_IOLOCKER,
            new PosEventInfoEntry("MOUNT_ARRAY_UNABLE_TO_REGISTER_IOLOCKER",
                "Failed to mount an array.", "Internal io locker service registration failed during the mounting process.", "Please try again and report the error if the problem occurs repeatedly.")},
        {(int)POS_EVENT_ID::UNMOUNT_ARRAY_ALREADY_UNMOUNTED,
            new PosEventInfoEntry("UNMOUNT_ARRAY_ALREADY_UNMOUNTED",
                "Failed to unmount an array.", "The array is already unmounted.", "Check the status of the array in the array list.")},
        {(int)POS_EVENT_ID::UNMOUNT_ARRAY_UNABLE_TO_INVOKE_UNMOUNT_STATE,
            new PosEventInfoEntry("UNMOUNT_ARRAY_UNABLE_TO_INVOKE_UNMOUNT_STATE",
                "Failed to unmount an array.", "Unable to acquire unmount state.", "Unable to acquire unmount state.")},
        {(int)POS_EVENT_ID::UNMOUNT_ARRAY_ARRAY_NAME_DOES_NOT_EXIST,
            new PosEventInfoEntry("UNMOUNT_ARRAY_ARRAY_NAME_DOES_NOT_EXIST",
                "Failed to unmount an array.", "Array of the requested name could not be found.", "Please check the array's name to unmount and try again.")},
        {(int)POS_EVENT_ID::UNMOUNT_ARRAY_REJECTED_DUE_TO_REBUILD_INPROGRESS,
            new PosEventInfoEntry("UNMOUNT_ARRAY_REJECTED_DUE_TO_REBUILD_INPROGRESS",
                "Failed to unmount an array.", "The array is in the process of rebuilding", "Please try again after the rebuild is completed")},
        {(int)POS_EVENT_ID::UNMOUNT_ARRAY_BROKEN_ARRAY_CANNOT_BE_UNMOUNTED,
            new PosEventInfoEntry("UNMOUNT_ARRAY_BROKEN_ARRAY_CANNOT_BE_UNMOUNTED",
                "Failed to unmount an array.", "Broken array cannot be unmounted.", "Broken array can be deleted without unmount.")},
        {(int)POS_EVENT_ID::ADD_SPARE_CAN_ONLY_BE_WHILE_ONLINE,
            new PosEventInfoEntry("ADD_SPARE_CAN_ONLY_BE_WHILE_ONLINE",
                "Failed to add a spare device.", "Spare device addition is possible only when array is online", "Please mount array and try again")},
        {(int)POS_EVENT_ID::ADD_SPARE_SSD_NAME_NOT_FOUND,
            new PosEventInfoEntry("ADD_SPARE_SSD_NAME_NOT_FOUND",
                "Failed to add a spare device.", "The SSD of the requested name could not be found", "Please check the ssd name in the device list and try again")},
        {(int)POS_EVENT_ID::ADD_SPARE_CAPACITY_IS_TOO_SMALL,
            new PosEventInfoEntry("ADD_SPARE_CAPACITY_IS_TOO_SMALL",
                "Failed to add a spare device.", "SSD capacity does not meet minimum capacity condition", "Please try again with SSDs of 20GB or more.")},
        {(int)POS_EVENT_ID::ADD_SPARE_RAID_DOES_NOT_SUPPORT_SPARE_DEV,
            new PosEventInfoEntry("ADD_SPARE_RAID_DOES_NOT_SUPPORT_SPARE_DEV",
                "Failed to add a spare device.", "The Array does not support spare devices", "Spare cannot be added to the Array")},
        {(int)POS_EVENT_ID::ADD_SPARE_DEVICE_ALREADY_OCCUPIED,
            new PosEventInfoEntry("ADD_SPARE_DEVICE_ALREADY_OCCUPIED",
                "Failed to add spare device.", "The device is occupied by another array.", "Please try again with a device that does not belong to another array.")},
        {(int)POS_EVENT_ID::ADD_SPARE_ARRAY_NAME_DOES_NOT_EXIST,
            new PosEventInfoEntry("ADD_SPARE_ARRAY_NAME_DOES_NOT_EXIST",
                "Failed to add spare device.", "The requested array name does not exist.", "Please check array name to add a device and try again")},
        {(int)POS_EVENT_ID::REMOVE_SPARE_CAN_ONLY_BE_WHILE_ONLINE,
            new PosEventInfoEntry("REMOVE_SPARE_CAN_ONLY_BE_WHILE_ONLINE",
                "Failed to remove a spare device.", "Spare device removal is possible only when array is online", "Please mount array and try again")},
        {(int)POS_EVENT_ID::REMOVE_SPARE_SSD_NAME_NOT_FOUND,
            new PosEventInfoEntry("REMOVE_SPARE_SSD_NAME_NOT_FOUND",
                "Failed to remove a spare device.", "The SSD of the requested name could not be found", "Please check the ssd name in the device list and try again")},
        {(int)POS_EVENT_ID::REMOVE_SPARE_ARRAY_NAME_DOES_NOT_EXIST,
            new PosEventInfoEntry("REMOVE_SPARE_ARRAY_NAME_DOES_NOT_EXIST",
                "Failed to remove spare device.", "The requested array name does not exist.", "Please check array name to remove a device and try again")},
        {(int)POS_EVENT_ID::ARRAY_SSD_NOT_FOUND,
            new PosEventInfoEntry("ARRAY_SSD_NOT_FOUND",
                "Failed to configure an array.", "SSD of the requested name could not be found", "Please check SSD name and try again")},
        {(int)POS_EVENT_ID::ARRAY_NVM_NOT_FOUND,
            new PosEventInfoEntry("ARRAY_NVM_NOT_FOUND",
                "Failed to configure an array.", "Write buffer device of the requested name could not be found", "Please check Write buffer device name and try again")},
        {(int)POS_EVENT_ID::ARRAY_MGR_NO_ARRAY_MATCHING_NAME,
            new PosEventInfoEntry("ARRAY_MGR_NO_ARRAY_MATCHING_NAME",
                "Failed to get the array info.", "Could not find the array with the given name", "Please check the array name again")},
        {(int)POS_EVENT_ID::UNABLE_TO_SET_NVM_MORE_THAN_ONE,
            new PosEventInfoEntry("UNABLE_TO_SET_NVM_MORE_THAN_ONE",
                "Failed to configure an array.", "Up to one write buffer device is allowed for each array", "Please enter only one write buffer device and try again")},
        {(int)POS_EVENT_ID::UNABLE_TO_SET_NULL_NVM,
            new PosEventInfoEntry("UNABLE_TO_SET_NULL_NVM",
                "Failed to configure an array.", "The write buffer device you entered exist but are not available.", "Check write buffer status and try again")},
        {(int)POS_EVENT_ID::UNABLE_TO_SET_NVM_ALREADY_OCCUPIED,
            new PosEventInfoEntry("UNABLE_TO_SET_NVM_ALREADY_OCCUPIED",
                "Failed to configure an array.", "Write buffer device is already in use elsewhere", "Try again with a write buffer device that is not in use")},
        {(int)POS_EVENT_ID::UNABLE_TO_SET_NVM_CAPACITY_IS_LT_MIN,
            new PosEventInfoEntry("UNABLE_TO_SET_NVM_CAPACITY_IS_LT_MIN",
                "Failed to configure an array.", "Write buffer device capacity does not meet minimum capacity condition", "Please try again with write buffer device of 2GB or more.")},
        {(int)POS_EVENT_ID::UNABLE_TO_ADD_SSD_ALREADY_OCCUPIED,
            new PosEventInfoEntry("UNABLE_TO_ADD_SSD_ALREADY_OCCUPIED",
                "Failed to configure an array.", "One or more SSDs are already in use elsewhere", "Try again with SSDs those are not in use")},
        {(int)POS_EVENT_ID::RECOVER_INVALID_LBA,
            new PosEventInfoEntry("RECOVER_INVALID_LBA",
                "Unable to restore requested LBA", "The requested LBA is out of the partition range", "Please check the partition address range")},
        {(int)POS_EVENT_ID::ADDRESS_TRANSLATION_INVALID_LBA,
            new PosEventInfoEntry("ADDRESS_TRANSLATION_INVALID_LBA",
                "Failed to translate", "The requested LBA is out of the partition range", "Please check the partition address range")},
        {(int)POS_EVENT_ID::ADDRESS_BYTE_TRANSLATION_INVALID_LBA,
            new PosEventInfoEntry("ADDRESS_BYTE_TRANSLATION_INVALID_LBA",
                "Failed to translate", "The requested LBA is out of the partition range", "Please check the partition address range")},
        {(int)POS_EVENT_ID::ADDRESS_BYTE_TRANSLATION_IS_NOT_SUPPORTED,
            new PosEventInfoEntry("ADDRESS_BYTE_TRANSLATION_IS_NOT_SUPPORTED",
                "Failed to translate", "Address byte translation is not supported in this partition", "Please check again if the partition supports byte injection.")},
        {(int)POS_EVENT_ID::VOL_NOT_FOUND,
            new PosEventInfoEntry("VOL_NOT_FOUND",
                "Failed to find a volume.", "The volume of the requested name or ID could not be found", "Please check volume name or ID and try again")},
        {(int)POS_EVENT_ID::CREATE_VOL_NAME_TOO_SHORT,
            new PosEventInfoEntry("CREATE_VOL_NAME_TOO_SHORT",
                "Failed to create volume.", "The volume name is too short.", "Enter the volume name between 2 and 255 letters.")},
        {(int)POS_EVENT_ID::CREATE_VOL_NAME_TOO_LONG,
            new PosEventInfoEntry("CREATE_VOL_NAME_TOO_LONG",
                "Failed to create volume.", "The volume name is too long.", "Enter the volume name between 2 and 255 letters.")},
        {(int)POS_EVENT_ID::CREATE_VOL_SAME_VOL_NAME_EXISTS,
            new PosEventInfoEntry("CREATE_VOL_SAME_VOL_NAME_EXISTS",
                "Failed to create a volume.", "Volume with the same name already exists.", "Please use another name.")},
        {(int)POS_EVENT_ID::CREATE_VOL_NAME_INCLUDES_SPECIAL_CHAR,
            new PosEventInfoEntry("CREATE_VOL_NAME_INCLUDES_SPECIAL_CHAR",
                "Failed to create a volume.", "The volume name contains special characters.", "Remove the special character from the volume name and try again.")},
        {(int)POS_EVENT_ID::CREATE_VOL_NAME_START_OR_END_WITH_SPACE,
            new PosEventInfoEntry("CREATE_VOL_NAME_START_OR_END_WITH_SPACE",
                "Failed to create a volume.", "There is a space at the front or back of the volume name", "Remove the space from the front or back Array name and try again.")},
        {(int)POS_EVENT_ID::CREATE_VOL_SIZE_NOT_ALIGNED,
            new PosEventInfoEntry("CREATE_VOL_SIZE_NOT_ALIGNED",
                "Failed to create a volume.", "The volume size should be divided into 1MB units.", "Please check volume size and try again.")},
        {(int)POS_EVENT_ID::CREATE_VOL_SIZE_EXCEEDED,
            new PosEventInfoEntry("CREATE_VOL_SIZE_EXCEEDED",
                "Failed to create a volume.", "The requested volume size is larger than the remaining space.", "Please check the volume size and remaining Array space and try again")},
        {(int)POS_EVENT_ID::CREATE_VOL_EXCEED_MAX_NUM_OF_VOLS,
            new PosEventInfoEntry("CREATE_VOL_EXCEED_MAX_NUM_OF_VOLS",
                "Failed to create a volume.", "The maximum number of possible volumes has been exceeded.", "Remove the existing volume to create a new volume.")},
        {(int)POS_EVENT_ID::CREATE_VOL_CAN_ONLY_BE_WHILE_ONLINE,
            new PosEventInfoEntry("CREATE_VOL_CAN_ONLY_BE_WHILE_ONLINE",
                "Failed to create a volume.", "The volume cannot be created because the array is not mounted.", "Please mount the Array and try again")},
        {(int)POS_EVENT_ID::CREATE_VOL_ARRAY_NAME_DOES_NOT_EXIST,
            new PosEventInfoEntry("CREATE_VOL_ARRAY_NAME_DOES_NOT_EXIST",
                "Failed to create a volume.", "The requested array name does not exist.", "Please check the array name where the volume will be created and try again")},
        {(int)POS_EVENT_ID::DELETE_VOL_MOUNTED_VOL_CANNOT_BE_DELETED,
            new PosEventInfoEntry("DELETE_VOL_MOUNTED_VOL_CANNOT_BE_DELETED",
                "Failed to delete a volume.", "Mounted volume cannot be deleted.", "First unmount the volume and then try again.")},
        {(int)POS_EVENT_ID::DELETE_VOL_CAN_ONLY_BE_WHILE_ONLINE,
            new PosEventInfoEntry("DELETE_VOL_CAN_ONLY_BE_WHILE_ONLINE",
                "Failed to delete a volume.", "The volume cannot be deleted because the array is not mounted.", "Please mount the array and try again")},
        {(int)POS_EVENT_ID::DELETE_VOL_ARRAY_NAME_DOES_NOT_EXIST,
            new PosEventInfoEntry("DELETE_VOL_ARRAY_NAME_DOES_NOT_EXIST",
                "Failed to delete a volume.", "The requested array name does not exist.", "Please check the array name where the volume exists and try again")},
        {(int)POS_EVENT_ID::VOL_UNABLE_TO_LOAD_OPEN_FAILED,
            new PosEventInfoEntry("VOL_UNABLE_TO_LOAD_OPEN_FAILED",
                "Failed to load volumes.", "Failed to open volume meta information.", "Please report the errors.")},
        {(int)POS_EVENT_ID::VOL_UNABLE_TO_LOAD_READ_FAILED,
            new PosEventInfoEntry("VOL_UNABLE_TO_LOAD_READ_FAILED",
                "Failed to load volumes.", "Failed to read volume meta information.", "Please report the errors.")},
        {(int)POS_EVENT_ID::VOL_UNABLE_TO_LOAD_CONTENT_BROKEN,
            new PosEventInfoEntry("VOL_UNABLE_TO_LOAD_CONTENT_BROKEN",
                "Failed to load volumes.", "Failed to parse volume meta information.", "Please report the errors.")},
        {(int)POS_EVENT_ID::VOL_UNABLE_TO_SAVE_CREATION_FAILED,
            new PosEventInfoEntry("VOL_UNABLE_TO_SAVE_CREATION_FAILED",
                "Failed to save volumes.", "Failed to create volume meta information.", "Please report the errors.")},
        {(int)POS_EVENT_ID::VOL_UNABLE_TO_SAVE_OPEN_FAILED,
            new PosEventInfoEntry("VOL_UNABLE_TO_SAVE_OPEN_FAILED",
                "Failed to save volumes.", "Failed to open volume meta information.", "Please report the errors.")},
        {(int)POS_EVENT_ID::VOL_UNABLE_TO_SAVE_READ_FAILED,
            new PosEventInfoEntry("VOL_UNABLE_TO_SAVE_READ_FAILED",
                "Failed to save volumes.", "Failed to read volume meta information.", "Please report the errors.")},
        {(int)POS_EVENT_ID::VOL_UNABLE_TO_SAVE_WRITE_FAILED,
            new PosEventInfoEntry("VOL_UNABLE_TO_SAVE_WRITE_FAILED",
                "Failed to save volumes.", "Failed to write volume meta information.", "Please report the errors.")},
        {(int)POS_EVENT_ID::VOL_UNABLE_TO_SAVE_CONTENT_OVERFLOW,
            new PosEventInfoEntry("VOL_UNABLE_TO_SAVE_CONTENT_OVERFLOW",
                "Failed to save volumes.", "Volume meta information is too large to save.", "Please report the errors.")},
        {(int)POS_EVENT_ID::RENAME_VOL_NAME_TOO_SHORT,
            new PosEventInfoEntry("RENAME_VOL_NAME_TOO_SHORT",
                "Failed to change volume name.", "volume name is too short.", "Enter the volume name between 2 and 255 letters.")},
        {(int)POS_EVENT_ID::RENAME_VOL_NAME_TOO_LONG,
            new PosEventInfoEntry("RENAME_VOL_NAME_TOO_LONG",
                "Failed to change volume name.", "volume name is too long.", "Enter the volume name between 2 and 255 letters.")},
        {(int)POS_EVENT_ID::RENAME_VOL_SAME_VOL_NAME_EXISTS,
            new PosEventInfoEntry("RENAME_VOL_SAME_VOL_NAME_EXISTS",
                "Failed to change volume name.", "Volume with the same name already exists.", "Please use another name.")},
        {(int)POS_EVENT_ID::RENAME_VOL_NAME_INCLUDES_SPECIAL_CHAR,
            new PosEventInfoEntry("RENAME_VOL_NAME_INCLUDES_SPECIAL_CHAR",
                "Failed to change volume name.", "Volume name contains special characters", "Remove the special character of volume name and try again")},
        {(int)POS_EVENT_ID::RENAME_VOL_NAME_START_OR_END_WITH_SPACE,
            new PosEventInfoEntry("RENAME_VOL_NAME_START_OR_END_WITH_SPACE",
                "Failed to change volume name.", "There is a space at the front or back of the volume name", "Remove the space from the front or back Array name and try again")},
        {(int)POS_EVENT_ID::RENAME_VOL_NAME_DOES_NOT_EXIST,
            new PosEventInfoEntry("RENAME_VOL_NAME_DOES_NOT_EXIST",
                "Failed to change volume name.", "The requested volume name to change does not exist.", "Please check volume name to delete and try again")},
        {(int)POS_EVENT_ID::RENAME_VOL_ARRAY_NAME_DOES_NOT_EXIST,
            new PosEventInfoEntry("RENAME_VOL_ARRAY_NAME_DOES_NOT_EXIST",
                "Failed to change volume name.", "The requested array name does not exist.", "Please check array name and try again")},
        {(int)POS_EVENT_ID::RENAME_VOL_CAN_ONLY_BE_WHILE_ONLINE,
            new PosEventInfoEntry("RENAME_VOL_CAN_ONLY_BE_WHILE_ONLINE",
                "Failed to change volume name.", "Volume renaming is possible only when array is online.", "Please mount array and try again")},
        {(int)POS_EVENT_ID::MOUNT_VOL_ALREADY_MOUNTED,
            new PosEventInfoEntry("MOUNT_VOL_ALREADY_MOUNTED",
                "Failed to mount a volume.", "The volume is already mounted.", "Check the status of the volume in the volume list.")},
        {(int)POS_EVENT_ID::MOUNT_VOL_UNABLE_TO_ATTACH_TO_NVMF,
            new PosEventInfoEntry("MOUNT_VOL_UNABLE_TO_ATTACH_TO_NVMF",
                "Failed to mount a volume.", "An error occurred during the NVMe-oF attach process.", "Please report the errors.")},
        {(int)POS_EVENT_ID::MOUNT_VOL_SUBSYSTEM_NOT_FOUND,
            new PosEventInfoEntry("MOUNT_VOL_SUBSYSTEM_NOT_FOUND",
                "Failed to mount a volume.", "Failed to find the subsystem to mount the volume.", "Please check if the subsystem is created correctly and try again.")},
        {(int)POS_EVENT_ID::MOUNT_VOL_SUBSYSTEM_MISMATCH,
            new PosEventInfoEntry("MOUNT_VOL_SUBSYSTEM_MISMATCH",
                "Failed to mount a volume.", "Volume and Array's subsystem do not match", "Please correct the subsystem configuration and try again.")},
        {(int)POS_EVENT_ID::MOUNT_VOL_SUBSYSTEM_ALREADY_OCCUPIED,
            new PosEventInfoEntry("MOUNT_VOL_SUBSYSTEM_ALREADY_OCCUPIED",
                "Failed to mount a volume.", "The subsystem is already being used by another Array.", "Please check the subsystem configuration and try again.")},
        {(int)POS_EVENT_ID::MOUNT_VOL_CAN_ONLY_BE_WHILE_ONLINE,
            new PosEventInfoEntry("MOUNT_VOL_CAN_ONLY_BE_WHILE_ONLINE",
                "Failed to mount a volume.", "The volume cannot be mounted because the array is not mounted.", "Please mount the array and try again")},
        {(int)POS_EVENT_ID::MOUNT_VOL_ARRAY_NAME_DOES_NOT_EXIST,
            new PosEventInfoEntry("MOUNT_VOL_ARRAY_NAME_DOES_NOT_EXIST",
                "Failed to mount a volume.", "The requested array name does not exist.", "Please check the array name where the volume exists and try again")},
        {(int)POS_EVENT_ID::UNMOUNT_VOL_ALREADY_UNMOUNTED,
            new PosEventInfoEntry("UNMOUNT_VOL_ALREADY_UNMOUNTED",
                "Failed to unmount a volume.", "The volume is already unmounted", "Check the status of the volume in the volume list.")},
        {(int)POS_EVENT_ID::UNMOUNT_VOL_UNABLE_TO_DETACH_FROM_NVMF,
            new PosEventInfoEntry("UNMOUNT_VOL_UNABLE_TO_DETACH_FROM_NVMF",
                "Failed to unmount volumes.", "An error occurred during the NVMe-oF detach process.", "Please report the errors.")},
        {(int)POS_EVENT_ID::UNMOUNT_VOL_CAN_ONLY_BE_WHILE_ONLINE,
            new PosEventInfoEntry("UNMOUNT_VOL_CAN_ONLY_BE_WHILE_ONLINE",
                "Failed to unmount a volume.", "The volume cannot be unmounted because the array is not mounted.", "Please mount the array and try again")},
        {(int)POS_EVENT_ID::UNMOUNT_VOL_ARRAY_NAME_DOES_NOT_EXIST,
            new PosEventInfoEntry("UNMOUNT_VOL_ARRAY_NAME_DOES_NOT_EXIST",
                "Failed to unmount a volume.", "The requested array name does not exist.", "Please check the array name where the volume exists and try again")},
        {(int)POS_EVENT_ID::VOL_REQ_REJECTED_IN_BROKEN_ARRAY,
            new PosEventInfoEntry("VOL_REQ_REJECTED_IN_BROKEN_ARRAY",
                "Failed to find volumes.", "The volume cannot be mounted on broken array.", "Please try again in mounted array.")},
        {(int)POS_EVENT_ID::VOL_REQ_PROCESSED_BUT_ERROR_OCCURED,
            new PosEventInfoEntry("VOL_REQ_PROCESSED_BUT_ERROR_OCCURED",
                "Failed to process the volume request perfectly.", "Some requests were successful, but an error occurred during execution.", "Please report the errors.")},
        {(int)POS_EVENT_ID::IONVMF_VOL_DELETE_TIMEOUT,
            new PosEventInfoEntry("IONVMF_VOL_DELETE_TIMEOUT",
                "Failed to delete volumes.", "A timeout has occured.", "Please report the errors.")},

        {(int)POS_EVENT_ID::TELEMETRY_START_FAILURE,
            new PosEventInfoEntry("TELEMETRY_START_FAILURE",
                "Failed to start telemetry.", "", "")},
        {(int)POS_EVENT_ID::TELEMETRY_START_FAILURE_CONFIG_ERROR,
            new PosEventInfoEntry("TELEMETRY_START_FAILURE_CONFIG_ERROR",
                "Failed to start telemetry.", "Failed to update config.", "")},
        {(int)POS_EVENT_ID::TELEMETRY_STOP_FAILURE,
            new PosEventInfoEntry("TELEMETRY_STOP_FAILURE",
                "Failed to stop telemetry.", "", "")},
        {(int)POS_EVENT_ID::TELEMETRY_STOP_FAILURE_CONFIG_ERROR,
            new PosEventInfoEntry("TELEMETRY_STOP_FAILURE_CONFIG_ERROR",
                "Failed to stop telemetry.", "Failed to update config.", "")},
        
        {(int)POS_EVENT_ID::MBR_DEVICE_NOT_FOUND,
            new PosEventInfoEntry("MBR_DEVICE_NOT_FOUND",
                "Could not find a device.", "", "")},
        {(int)POS_EVENT_ID::MBR_DEVICE_NOT_FOUND,
            new PosEventInfoEntry("MBR_ABR_GET_LIST_SUCCESS",
                "ABR list has been loaded.", "", "")},
    };
