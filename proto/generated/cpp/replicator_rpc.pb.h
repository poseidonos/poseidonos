// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: replicator_rpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_replicator_5frpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_replicator_5frpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_replicator_5frpc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_replicator_5frpc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_replicator_5frpc_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_replicator_5frpc_2eproto_metadata_getter(int index);
namespace replicator_rpc {
class Chunk;
struct ChunkDefaultTypeInternal;
extern ChunkDefaultTypeInternal _Chunk_default_instance_;
class CompleteReadRequest;
struct CompleteReadRequestDefaultTypeInternal;
extern CompleteReadRequestDefaultTypeInternal _CompleteReadRequest_default_instance_;
class CompleteReadResponse;
struct CompleteReadResponseDefaultTypeInternal;
extern CompleteReadResponseDefaultTypeInternal _CompleteReadResponse_default_instance_;
class CompleteWriteRequest;
struct CompleteWriteRequestDefaultTypeInternal;
extern CompleteWriteRequestDefaultTypeInternal _CompleteWriteRequest_default_instance_;
class CompleteWriteResponse;
struct CompleteWriteResponseDefaultTypeInternal;
extern CompleteWriteResponseDefaultTypeInternal _CompleteWriteResponse_default_instance_;
class HealthCheckRequest;
struct HealthCheckRequestDefaultTypeInternal;
extern HealthCheckRequestDefaultTypeInternal _HealthCheckRequest_default_instance_;
class HealthCheckResponse;
struct HealthCheckResponseDefaultTypeInternal;
extern HealthCheckResponseDefaultTypeInternal _HealthCheckResponse_default_instance_;
class PushDirtyLogRequest;
struct PushDirtyLogRequestDefaultTypeInternal;
extern PushDirtyLogRequestDefaultTypeInternal _PushDirtyLogRequest_default_instance_;
class PushDirtyLogResponse;
struct PushDirtyLogResponseDefaultTypeInternal;
extern PushDirtyLogResponseDefaultTypeInternal _PushDirtyLogResponse_default_instance_;
class PushHostWriteRequest;
struct PushHostWriteRequestDefaultTypeInternal;
extern PushHostWriteRequestDefaultTypeInternal _PushHostWriteRequest_default_instance_;
class PushHostWriteResponse;
struct PushHostWriteResponseDefaultTypeInternal;
extern PushHostWriteResponseDefaultTypeInternal _PushHostWriteResponse_default_instance_;
class TransferHostWriteRequest;
struct TransferHostWriteRequestDefaultTypeInternal;
extern TransferHostWriteRequestDefaultTypeInternal _TransferHostWriteRequest_default_instance_;
class TransferHostWriteResponse;
struct TransferHostWriteResponseDefaultTypeInternal;
extern TransferHostWriteResponseDefaultTypeInternal _TransferHostWriteResponse_default_instance_;
class TransferVolumeDataRequest;
struct TransferVolumeDataRequestDefaultTypeInternal;
extern TransferVolumeDataRequestDefaultTypeInternal _TransferVolumeDataRequest_default_instance_;
class TransferVolumeDataResponse;
struct TransferVolumeDataResponseDefaultTypeInternal;
extern TransferVolumeDataResponseDefaultTypeInternal _TransferVolumeDataResponse_default_instance_;
}  // namespace replicator_rpc
PROTOBUF_NAMESPACE_OPEN
template<> ::replicator_rpc::Chunk* Arena::CreateMaybeMessage<::replicator_rpc::Chunk>(Arena*);
template<> ::replicator_rpc::CompleteReadRequest* Arena::CreateMaybeMessage<::replicator_rpc::CompleteReadRequest>(Arena*);
template<> ::replicator_rpc::CompleteReadResponse* Arena::CreateMaybeMessage<::replicator_rpc::CompleteReadResponse>(Arena*);
template<> ::replicator_rpc::CompleteWriteRequest* Arena::CreateMaybeMessage<::replicator_rpc::CompleteWriteRequest>(Arena*);
template<> ::replicator_rpc::CompleteWriteResponse* Arena::CreateMaybeMessage<::replicator_rpc::CompleteWriteResponse>(Arena*);
template<> ::replicator_rpc::HealthCheckRequest* Arena::CreateMaybeMessage<::replicator_rpc::HealthCheckRequest>(Arena*);
template<> ::replicator_rpc::HealthCheckResponse* Arena::CreateMaybeMessage<::replicator_rpc::HealthCheckResponse>(Arena*);
template<> ::replicator_rpc::PushDirtyLogRequest* Arena::CreateMaybeMessage<::replicator_rpc::PushDirtyLogRequest>(Arena*);
template<> ::replicator_rpc::PushDirtyLogResponse* Arena::CreateMaybeMessage<::replicator_rpc::PushDirtyLogResponse>(Arena*);
template<> ::replicator_rpc::PushHostWriteRequest* Arena::CreateMaybeMessage<::replicator_rpc::PushHostWriteRequest>(Arena*);
template<> ::replicator_rpc::PushHostWriteResponse* Arena::CreateMaybeMessage<::replicator_rpc::PushHostWriteResponse>(Arena*);
template<> ::replicator_rpc::TransferHostWriteRequest* Arena::CreateMaybeMessage<::replicator_rpc::TransferHostWriteRequest>(Arena*);
template<> ::replicator_rpc::TransferHostWriteResponse* Arena::CreateMaybeMessage<::replicator_rpc::TransferHostWriteResponse>(Arena*);
template<> ::replicator_rpc::TransferVolumeDataRequest* Arena::CreateMaybeMessage<::replicator_rpc::TransferVolumeDataRequest>(Arena*);
template<> ::replicator_rpc::TransferVolumeDataResponse* Arena::CreateMaybeMessage<::replicator_rpc::TransferVolumeDataResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace replicator_rpc {

enum HealthCheckResponse_ServingStatus : int {
  HealthCheckResponse_ServingStatus_UNKNOWN = 0,
  HealthCheckResponse_ServingStatus_SERVING = 1,
  HealthCheckResponse_ServingStatus_NOT_SERVING = 2,
  HealthCheckResponse_ServingStatus_HealthCheckResponse_ServingStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  HealthCheckResponse_ServingStatus_HealthCheckResponse_ServingStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool HealthCheckResponse_ServingStatus_IsValid(int value);
constexpr HealthCheckResponse_ServingStatus HealthCheckResponse_ServingStatus_ServingStatus_MIN = HealthCheckResponse_ServingStatus_UNKNOWN;
constexpr HealthCheckResponse_ServingStatus HealthCheckResponse_ServingStatus_ServingStatus_MAX = HealthCheckResponse_ServingStatus_NOT_SERVING;
constexpr int HealthCheckResponse_ServingStatus_ServingStatus_ARRAYSIZE = HealthCheckResponse_ServingStatus_ServingStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HealthCheckResponse_ServingStatus_descriptor();
template<typename T>
inline const std::string& HealthCheckResponse_ServingStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HealthCheckResponse_ServingStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HealthCheckResponse_ServingStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HealthCheckResponse_ServingStatus_descriptor(), enum_t_value);
}
inline bool HealthCheckResponse_ServingStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, HealthCheckResponse_ServingStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HealthCheckResponse_ServingStatus>(
    HealthCheckResponse_ServingStatus_descriptor(), name, value);
}
// ===================================================================

class TransferHostWriteRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:replicator_rpc.TransferHostWriteRequest) */ {
 public:
  inline TransferHostWriteRequest() : TransferHostWriteRequest(nullptr) {}
  virtual ~TransferHostWriteRequest();
  explicit constexpr TransferHostWriteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransferHostWriteRequest(const TransferHostWriteRequest& from);
  TransferHostWriteRequest(TransferHostWriteRequest&& from) noexcept
    : TransferHostWriteRequest() {
    *this = ::std::move(from);
  }

  inline TransferHostWriteRequest& operator=(const TransferHostWriteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferHostWriteRequest& operator=(TransferHostWriteRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransferHostWriteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransferHostWriteRequest* internal_default_instance() {
    return reinterpret_cast<const TransferHostWriteRequest*>(
               &_TransferHostWriteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TransferHostWriteRequest& a, TransferHostWriteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferHostWriteRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferHostWriteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransferHostWriteRequest* New() const final {
    return CreateMaybeMessage<TransferHostWriteRequest>(nullptr);
  }

  TransferHostWriteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransferHostWriteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransferHostWriteRequest& from);
  void MergeFrom(const TransferHostWriteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferHostWriteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "replicator_rpc.TransferHostWriteRequest";
  }
  protected:
  explicit TransferHostWriteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_replicator_5frpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 7,
    kArrayNameFieldNumber = 1,
    kVolumeNameFieldNumber = 2,
    kRbaFieldNumber = 3,
    kNumBlocksFieldNumber = 4,
    kLsnFieldNumber = 6,
    kRidFieldNumber = 5,
  };
  // repeated .replicator_rpc.Chunk data = 7;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::replicator_rpc::Chunk* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::replicator_rpc::Chunk >*
      mutable_data();
  private:
  const ::replicator_rpc::Chunk& _internal_data(int index) const;
  ::replicator_rpc::Chunk* _internal_add_data();
  public:
  const ::replicator_rpc::Chunk& data(int index) const;
  ::replicator_rpc::Chunk* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::replicator_rpc::Chunk >&
      data() const;

  // string array_name = 1;
  void clear_array_name();
  const std::string& array_name() const;
  void set_array_name(const std::string& value);
  void set_array_name(std::string&& value);
  void set_array_name(const char* value);
  void set_array_name(const char* value, size_t size);
  std::string* mutable_array_name();
  std::string* release_array_name();
  void set_allocated_array_name(std::string* array_name);
  private:
  const std::string& _internal_array_name() const;
  void _internal_set_array_name(const std::string& value);
  std::string* _internal_mutable_array_name();
  public:

  // string volume_name = 2;
  void clear_volume_name();
  const std::string& volume_name() const;
  void set_volume_name(const std::string& value);
  void set_volume_name(std::string&& value);
  void set_volume_name(const char* value);
  void set_volume_name(const char* value, size_t size);
  std::string* mutable_volume_name();
  std::string* release_volume_name();
  void set_allocated_volume_name(std::string* volume_name);
  private:
  const std::string& _internal_volume_name() const;
  void _internal_set_volume_name(const std::string& value);
  std::string* _internal_mutable_volume_name();
  public:

  // uint64 rba = 3;
  void clear_rba();
  ::PROTOBUF_NAMESPACE_ID::uint64 rba() const;
  void set_rba(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_rba() const;
  void _internal_set_rba(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 num_blocks = 4;
  void clear_num_blocks();
  ::PROTOBUF_NAMESPACE_ID::uint64 num_blocks() const;
  void set_num_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_num_blocks() const;
  void _internal_set_num_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 lsn = 6;
  void clear_lsn();
  ::PROTOBUF_NAMESPACE_ID::uint64 lsn() const;
  void set_lsn(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lsn() const;
  void _internal_set_lsn(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 rid = 5;
  void clear_rid();
  ::PROTOBUF_NAMESPACE_ID::uint32 rid() const;
  void set_rid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rid() const;
  void _internal_set_rid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:replicator_rpc.TransferHostWriteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::replicator_rpc::Chunk > data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr array_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr volume_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 rba_;
  ::PROTOBUF_NAMESPACE_ID::uint64 num_blocks_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lsn_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_replicator_5frpc_2eproto;
};
// -------------------------------------------------------------------

class TransferHostWriteResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:replicator_rpc.TransferHostWriteResponse) */ {
 public:
  inline TransferHostWriteResponse() : TransferHostWriteResponse(nullptr) {}
  virtual ~TransferHostWriteResponse();
  explicit constexpr TransferHostWriteResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransferHostWriteResponse(const TransferHostWriteResponse& from);
  TransferHostWriteResponse(TransferHostWriteResponse&& from) noexcept
    : TransferHostWriteResponse() {
    *this = ::std::move(from);
  }

  inline TransferHostWriteResponse& operator=(const TransferHostWriteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferHostWriteResponse& operator=(TransferHostWriteResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransferHostWriteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransferHostWriteResponse* internal_default_instance() {
    return reinterpret_cast<const TransferHostWriteResponse*>(
               &_TransferHostWriteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TransferHostWriteResponse& a, TransferHostWriteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferHostWriteResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferHostWriteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransferHostWriteResponse* New() const final {
    return CreateMaybeMessage<TransferHostWriteResponse>(nullptr);
  }

  TransferHostWriteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransferHostWriteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransferHostWriteResponse& from);
  void MergeFrom(const TransferHostWriteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferHostWriteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "replicator_rpc.TransferHostWriteResponse";
  }
  protected:
  explicit TransferHostWriteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_replicator_5frpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 2,
    kSuccessfulFieldNumber = 1,
  };
  // string reason = 2;
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // bool successful = 1;
  void clear_successful();
  bool successful() const;
  void set_successful(bool value);
  private:
  bool _internal_successful() const;
  void _internal_set_successful(bool value);
  public:

  // @@protoc_insertion_point(class_scope:replicator_rpc.TransferHostWriteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  bool successful_;
  friend struct ::TableStruct_replicator_5frpc_2eproto;
};
// -------------------------------------------------------------------

class TransferVolumeDataRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:replicator_rpc.TransferVolumeDataRequest) */ {
 public:
  inline TransferVolumeDataRequest() : TransferVolumeDataRequest(nullptr) {}
  virtual ~TransferVolumeDataRequest();
  explicit constexpr TransferVolumeDataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransferVolumeDataRequest(const TransferVolumeDataRequest& from);
  TransferVolumeDataRequest(TransferVolumeDataRequest&& from) noexcept
    : TransferVolumeDataRequest() {
    *this = ::std::move(from);
  }

  inline TransferVolumeDataRequest& operator=(const TransferVolumeDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferVolumeDataRequest& operator=(TransferVolumeDataRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransferVolumeDataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransferVolumeDataRequest* internal_default_instance() {
    return reinterpret_cast<const TransferVolumeDataRequest*>(
               &_TransferVolumeDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TransferVolumeDataRequest& a, TransferVolumeDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferVolumeDataRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferVolumeDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransferVolumeDataRequest* New() const final {
    return CreateMaybeMessage<TransferVolumeDataRequest>(nullptr);
  }

  TransferVolumeDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransferVolumeDataRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransferVolumeDataRequest& from);
  void MergeFrom(const TransferVolumeDataRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferVolumeDataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "replicator_rpc.TransferVolumeDataRequest";
  }
  protected:
  explicit TransferVolumeDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_replicator_5frpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 7,
    kArrayNameFieldNumber = 1,
    kVolumeNameFieldNumber = 2,
    kRbaFieldNumber = 3,
    kNumBlocksFieldNumber = 4,
    kLsnFieldNumber = 6,
    kIsDirtyLogFieldNumber = 5,
  };
  // repeated .replicator_rpc.Chunk data = 7;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::replicator_rpc::Chunk* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::replicator_rpc::Chunk >*
      mutable_data();
  private:
  const ::replicator_rpc::Chunk& _internal_data(int index) const;
  ::replicator_rpc::Chunk* _internal_add_data();
  public:
  const ::replicator_rpc::Chunk& data(int index) const;
  ::replicator_rpc::Chunk* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::replicator_rpc::Chunk >&
      data() const;

  // string array_name = 1;
  void clear_array_name();
  const std::string& array_name() const;
  void set_array_name(const std::string& value);
  void set_array_name(std::string&& value);
  void set_array_name(const char* value);
  void set_array_name(const char* value, size_t size);
  std::string* mutable_array_name();
  std::string* release_array_name();
  void set_allocated_array_name(std::string* array_name);
  private:
  const std::string& _internal_array_name() const;
  void _internal_set_array_name(const std::string& value);
  std::string* _internal_mutable_array_name();
  public:

  // string volume_name = 2;
  void clear_volume_name();
  const std::string& volume_name() const;
  void set_volume_name(const std::string& value);
  void set_volume_name(std::string&& value);
  void set_volume_name(const char* value);
  void set_volume_name(const char* value, size_t size);
  std::string* mutable_volume_name();
  std::string* release_volume_name();
  void set_allocated_volume_name(std::string* volume_name);
  private:
  const std::string& _internal_volume_name() const;
  void _internal_set_volume_name(const std::string& value);
  std::string* _internal_mutable_volume_name();
  public:

  // uint64 rba = 3;
  void clear_rba();
  ::PROTOBUF_NAMESPACE_ID::uint64 rba() const;
  void set_rba(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_rba() const;
  void _internal_set_rba(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 num_blocks = 4;
  void clear_num_blocks();
  ::PROTOBUF_NAMESPACE_ID::uint64 num_blocks() const;
  void set_num_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_num_blocks() const;
  void _internal_set_num_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 lsn = 6;
  bool has_lsn() const;
  private:
  bool _internal_has_lsn() const;
  public:
  void clear_lsn();
  ::PROTOBUF_NAMESPACE_ID::uint64 lsn() const;
  void set_lsn(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lsn() const;
  void _internal_set_lsn(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool is_dirty_log = 5;
  void clear_is_dirty_log();
  bool is_dirty_log() const;
  void set_is_dirty_log(bool value);
  private:
  bool _internal_is_dirty_log() const;
  void _internal_set_is_dirty_log(bool value);
  public:

  // @@protoc_insertion_point(class_scope:replicator_rpc.TransferVolumeDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::replicator_rpc::Chunk > data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr array_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr volume_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 rba_;
  ::PROTOBUF_NAMESPACE_ID::uint64 num_blocks_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lsn_;
  bool is_dirty_log_;
  friend struct ::TableStruct_replicator_5frpc_2eproto;
};
// -------------------------------------------------------------------

class Chunk PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:replicator_rpc.Chunk) */ {
 public:
  inline Chunk() : Chunk(nullptr) {}
  virtual ~Chunk();
  explicit constexpr Chunk(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Chunk(const Chunk& from);
  Chunk(Chunk&& from) noexcept
    : Chunk() {
    *this = ::std::move(from);
  }

  inline Chunk& operator=(const Chunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chunk& operator=(Chunk&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Chunk& default_instance() {
    return *internal_default_instance();
  }
  static inline const Chunk* internal_default_instance() {
    return reinterpret_cast<const Chunk*>(
               &_Chunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Chunk& a, Chunk& b) {
    a.Swap(&b);
  }
  inline void Swap(Chunk* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chunk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Chunk* New() const final {
    return CreateMaybeMessage<Chunk>(nullptr);
  }

  Chunk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Chunk>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Chunk& from);
  void MergeFrom(const Chunk& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chunk* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "replicator_rpc.Chunk";
  }
  protected:
  explicit Chunk(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_replicator_5frpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
  };
  // bytes content = 1;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // @@protoc_insertion_point(class_scope:replicator_rpc.Chunk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_replicator_5frpc_2eproto;
};
// -------------------------------------------------------------------

class TransferVolumeDataResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:replicator_rpc.TransferVolumeDataResponse) */ {
 public:
  inline TransferVolumeDataResponse() : TransferVolumeDataResponse(nullptr) {}
  virtual ~TransferVolumeDataResponse();
  explicit constexpr TransferVolumeDataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransferVolumeDataResponse(const TransferVolumeDataResponse& from);
  TransferVolumeDataResponse(TransferVolumeDataResponse&& from) noexcept
    : TransferVolumeDataResponse() {
    *this = ::std::move(from);
  }

  inline TransferVolumeDataResponse& operator=(const TransferVolumeDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferVolumeDataResponse& operator=(TransferVolumeDataResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransferVolumeDataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransferVolumeDataResponse* internal_default_instance() {
    return reinterpret_cast<const TransferVolumeDataResponse*>(
               &_TransferVolumeDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TransferVolumeDataResponse& a, TransferVolumeDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferVolumeDataResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferVolumeDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransferVolumeDataResponse* New() const final {
    return CreateMaybeMessage<TransferVolumeDataResponse>(nullptr);
  }

  TransferVolumeDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransferVolumeDataResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransferVolumeDataResponse& from);
  void MergeFrom(const TransferVolumeDataResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferVolumeDataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "replicator_rpc.TransferVolumeDataResponse";
  }
  protected:
  explicit TransferVolumeDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_replicator_5frpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 2,
    kSuccessfulFieldNumber = 1,
  };
  // string reason = 2;
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // bool successful = 1;
  void clear_successful();
  bool successful() const;
  void set_successful(bool value);
  private:
  bool _internal_successful() const;
  void _internal_set_successful(bool value);
  public:

  // @@protoc_insertion_point(class_scope:replicator_rpc.TransferVolumeDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  bool successful_;
  friend struct ::TableStruct_replicator_5frpc_2eproto;
};
// -------------------------------------------------------------------

class PushHostWriteRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:replicator_rpc.PushHostWriteRequest) */ {
 public:
  inline PushHostWriteRequest() : PushHostWriteRequest(nullptr) {}
  virtual ~PushHostWriteRequest();
  explicit constexpr PushHostWriteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PushHostWriteRequest(const PushHostWriteRequest& from);
  PushHostWriteRequest(PushHostWriteRequest&& from) noexcept
    : PushHostWriteRequest() {
    *this = ::std::move(from);
  }

  inline PushHostWriteRequest& operator=(const PushHostWriteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PushHostWriteRequest& operator=(PushHostWriteRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PushHostWriteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PushHostWriteRequest* internal_default_instance() {
    return reinterpret_cast<const PushHostWriteRequest*>(
               &_PushHostWriteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PushHostWriteRequest& a, PushHostWriteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PushHostWriteRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PushHostWriteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PushHostWriteRequest* New() const final {
    return CreateMaybeMessage<PushHostWriteRequest>(nullptr);
  }

  PushHostWriteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PushHostWriteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PushHostWriteRequest& from);
  void MergeFrom(const PushHostWriteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PushHostWriteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "replicator_rpc.PushHostWriteRequest";
  }
  protected:
  explicit PushHostWriteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_replicator_5frpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 5,
    kArrayNameFieldNumber = 1,
    kVolumeNameFieldNumber = 2,
    kRbaFieldNumber = 3,
    kNumBlocksFieldNumber = 4,
  };
  // repeated .replicator_rpc.Chunk data = 5;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::replicator_rpc::Chunk* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::replicator_rpc::Chunk >*
      mutable_data();
  private:
  const ::replicator_rpc::Chunk& _internal_data(int index) const;
  ::replicator_rpc::Chunk* _internal_add_data();
  public:
  const ::replicator_rpc::Chunk& data(int index) const;
  ::replicator_rpc::Chunk* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::replicator_rpc::Chunk >&
      data() const;

  // string array_name = 1;
  void clear_array_name();
  const std::string& array_name() const;
  void set_array_name(const std::string& value);
  void set_array_name(std::string&& value);
  void set_array_name(const char* value);
  void set_array_name(const char* value, size_t size);
  std::string* mutable_array_name();
  std::string* release_array_name();
  void set_allocated_array_name(std::string* array_name);
  private:
  const std::string& _internal_array_name() const;
  void _internal_set_array_name(const std::string& value);
  std::string* _internal_mutable_array_name();
  public:

  // string volume_name = 2;
  void clear_volume_name();
  const std::string& volume_name() const;
  void set_volume_name(const std::string& value);
  void set_volume_name(std::string&& value);
  void set_volume_name(const char* value);
  void set_volume_name(const char* value, size_t size);
  std::string* mutable_volume_name();
  std::string* release_volume_name();
  void set_allocated_volume_name(std::string* volume_name);
  private:
  const std::string& _internal_volume_name() const;
  void _internal_set_volume_name(const std::string& value);
  std::string* _internal_mutable_volume_name();
  public:

  // uint64 rba = 3;
  void clear_rba();
  ::PROTOBUF_NAMESPACE_ID::uint64 rba() const;
  void set_rba(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_rba() const;
  void _internal_set_rba(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 num_blocks = 4;
  void clear_num_blocks();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_blocks() const;
  void set_num_blocks(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_blocks() const;
  void _internal_set_num_blocks(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:replicator_rpc.PushHostWriteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::replicator_rpc::Chunk > data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr array_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr volume_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 rba_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_blocks_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_replicator_5frpc_2eproto;
};
// -------------------------------------------------------------------

class PushHostWriteResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:replicator_rpc.PushHostWriteResponse) */ {
 public:
  inline PushHostWriteResponse() : PushHostWriteResponse(nullptr) {}
  virtual ~PushHostWriteResponse();
  explicit constexpr PushHostWriteResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PushHostWriteResponse(const PushHostWriteResponse& from);
  PushHostWriteResponse(PushHostWriteResponse&& from) noexcept
    : PushHostWriteResponse() {
    *this = ::std::move(from);
  }

  inline PushHostWriteResponse& operator=(const PushHostWriteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PushHostWriteResponse& operator=(PushHostWriteResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PushHostWriteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PushHostWriteResponse* internal_default_instance() {
    return reinterpret_cast<const PushHostWriteResponse*>(
               &_PushHostWriteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PushHostWriteResponse& a, PushHostWriteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PushHostWriteResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PushHostWriteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PushHostWriteResponse* New() const final {
    return CreateMaybeMessage<PushHostWriteResponse>(nullptr);
  }

  PushHostWriteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PushHostWriteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PushHostWriteResponse& from);
  void MergeFrom(const PushHostWriteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PushHostWriteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "replicator_rpc.PushHostWriteResponse";
  }
  protected:
  explicit PushHostWriteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_replicator_5frpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 3,
    kLsnFieldNumber = 2,
    kSuccessfulFieldNumber = 1,
  };
  // string reason = 3;
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // uint64 lsn = 2;
  void clear_lsn();
  ::PROTOBUF_NAMESPACE_ID::uint64 lsn() const;
  void set_lsn(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lsn() const;
  void _internal_set_lsn(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool successful = 1;
  void clear_successful();
  bool successful() const;
  void set_successful(bool value);
  private:
  bool _internal_successful() const;
  void _internal_set_successful(bool value);
  public:

  // @@protoc_insertion_point(class_scope:replicator_rpc.PushHostWriteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lsn_;
  bool successful_;
  friend struct ::TableStruct_replicator_5frpc_2eproto;
};
// -------------------------------------------------------------------

class PushDirtyLogRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:replicator_rpc.PushDirtyLogRequest) */ {
 public:
  inline PushDirtyLogRequest() : PushDirtyLogRequest(nullptr) {}
  virtual ~PushDirtyLogRequest();
  explicit constexpr PushDirtyLogRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PushDirtyLogRequest(const PushDirtyLogRequest& from);
  PushDirtyLogRequest(PushDirtyLogRequest&& from) noexcept
    : PushDirtyLogRequest() {
    *this = ::std::move(from);
  }

  inline PushDirtyLogRequest& operator=(const PushDirtyLogRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PushDirtyLogRequest& operator=(PushDirtyLogRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PushDirtyLogRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PushDirtyLogRequest* internal_default_instance() {
    return reinterpret_cast<const PushDirtyLogRequest*>(
               &_PushDirtyLogRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PushDirtyLogRequest& a, PushDirtyLogRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PushDirtyLogRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PushDirtyLogRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PushDirtyLogRequest* New() const final {
    return CreateMaybeMessage<PushDirtyLogRequest>(nullptr);
  }

  PushDirtyLogRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PushDirtyLogRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PushDirtyLogRequest& from);
  void MergeFrom(const PushDirtyLogRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PushDirtyLogRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "replicator_rpc.PushDirtyLogRequest";
  }
  protected:
  explicit PushDirtyLogRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_replicator_5frpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrayNameFieldNumber = 1,
    kVolumeNameFieldNumber = 2,
    kRbaFieldNumber = 3,
    kNumBlocksFieldNumber = 4,
  };
  // string array_name = 1;
  void clear_array_name();
  const std::string& array_name() const;
  void set_array_name(const std::string& value);
  void set_array_name(std::string&& value);
  void set_array_name(const char* value);
  void set_array_name(const char* value, size_t size);
  std::string* mutable_array_name();
  std::string* release_array_name();
  void set_allocated_array_name(std::string* array_name);
  private:
  const std::string& _internal_array_name() const;
  void _internal_set_array_name(const std::string& value);
  std::string* _internal_mutable_array_name();
  public:

  // string volume_name = 2;
  void clear_volume_name();
  const std::string& volume_name() const;
  void set_volume_name(const std::string& value);
  void set_volume_name(std::string&& value);
  void set_volume_name(const char* value);
  void set_volume_name(const char* value, size_t size);
  std::string* mutable_volume_name();
  std::string* release_volume_name();
  void set_allocated_volume_name(std::string* volume_name);
  private:
  const std::string& _internal_volume_name() const;
  void _internal_set_volume_name(const std::string& value);
  std::string* _internal_mutable_volume_name();
  public:

  // uint64 rba = 3;
  void clear_rba();
  ::PROTOBUF_NAMESPACE_ID::uint64 rba() const;
  void set_rba(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_rba() const;
  void _internal_set_rba(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 num_blocks = 4;
  void clear_num_blocks();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_blocks() const;
  void set_num_blocks(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_blocks() const;
  void _internal_set_num_blocks(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:replicator_rpc.PushDirtyLogRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr array_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr volume_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 rba_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_blocks_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_replicator_5frpc_2eproto;
};
// -------------------------------------------------------------------

class PushDirtyLogResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:replicator_rpc.PushDirtyLogResponse) */ {
 public:
  inline PushDirtyLogResponse() : PushDirtyLogResponse(nullptr) {}
  virtual ~PushDirtyLogResponse();
  explicit constexpr PushDirtyLogResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PushDirtyLogResponse(const PushDirtyLogResponse& from);
  PushDirtyLogResponse(PushDirtyLogResponse&& from) noexcept
    : PushDirtyLogResponse() {
    *this = ::std::move(from);
  }

  inline PushDirtyLogResponse& operator=(const PushDirtyLogResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PushDirtyLogResponse& operator=(PushDirtyLogResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PushDirtyLogResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PushDirtyLogResponse* internal_default_instance() {
    return reinterpret_cast<const PushDirtyLogResponse*>(
               &_PushDirtyLogResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PushDirtyLogResponse& a, PushDirtyLogResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PushDirtyLogResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PushDirtyLogResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PushDirtyLogResponse* New() const final {
    return CreateMaybeMessage<PushDirtyLogResponse>(nullptr);
  }

  PushDirtyLogResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PushDirtyLogResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PushDirtyLogResponse& from);
  void MergeFrom(const PushDirtyLogResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PushDirtyLogResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "replicator_rpc.PushDirtyLogResponse";
  }
  protected:
  explicit PushDirtyLogResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_replicator_5frpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 2,
    kSuccessfulFieldNumber = 1,
  };
  // string reason = 2;
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // bool successful = 1;
  void clear_successful();
  bool successful() const;
  void set_successful(bool value);
  private:
  bool _internal_successful() const;
  void _internal_set_successful(bool value);
  public:

  // @@protoc_insertion_point(class_scope:replicator_rpc.PushDirtyLogResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  bool successful_;
  friend struct ::TableStruct_replicator_5frpc_2eproto;
};
// -------------------------------------------------------------------

class CompleteReadRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:replicator_rpc.CompleteReadRequest) */ {
 public:
  inline CompleteReadRequest() : CompleteReadRequest(nullptr) {}
  virtual ~CompleteReadRequest();
  explicit constexpr CompleteReadRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CompleteReadRequest(const CompleteReadRequest& from);
  CompleteReadRequest(CompleteReadRequest&& from) noexcept
    : CompleteReadRequest() {
    *this = ::std::move(from);
  }

  inline CompleteReadRequest& operator=(const CompleteReadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompleteReadRequest& operator=(CompleteReadRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CompleteReadRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompleteReadRequest* internal_default_instance() {
    return reinterpret_cast<const CompleteReadRequest*>(
               &_CompleteReadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CompleteReadRequest& a, CompleteReadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CompleteReadRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompleteReadRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompleteReadRequest* New() const final {
    return CreateMaybeMessage<CompleteReadRequest>(nullptr);
  }

  CompleteReadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompleteReadRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CompleteReadRequest& from);
  void MergeFrom(const CompleteReadRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompleteReadRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "replicator_rpc.CompleteReadRequest";
  }
  protected:
  explicit CompleteReadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_replicator_5frpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 5,
    kArrayNameFieldNumber = 1,
    kVolumeNameFieldNumber = 2,
    kRbaFieldNumber = 3,
    kNumBlocksFieldNumber = 4,
  };
  // repeated .replicator_rpc.Chunk data = 5;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::replicator_rpc::Chunk* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::replicator_rpc::Chunk >*
      mutable_data();
  private:
  const ::replicator_rpc::Chunk& _internal_data(int index) const;
  ::replicator_rpc::Chunk* _internal_add_data();
  public:
  const ::replicator_rpc::Chunk& data(int index) const;
  ::replicator_rpc::Chunk* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::replicator_rpc::Chunk >&
      data() const;

  // string array_name = 1;
  void clear_array_name();
  const std::string& array_name() const;
  void set_array_name(const std::string& value);
  void set_array_name(std::string&& value);
  void set_array_name(const char* value);
  void set_array_name(const char* value, size_t size);
  std::string* mutable_array_name();
  std::string* release_array_name();
  void set_allocated_array_name(std::string* array_name);
  private:
  const std::string& _internal_array_name() const;
  void _internal_set_array_name(const std::string& value);
  std::string* _internal_mutable_array_name();
  public:

  // string volume_name = 2;
  void clear_volume_name();
  const std::string& volume_name() const;
  void set_volume_name(const std::string& value);
  void set_volume_name(std::string&& value);
  void set_volume_name(const char* value);
  void set_volume_name(const char* value, size_t size);
  std::string* mutable_volume_name();
  std::string* release_volume_name();
  void set_allocated_volume_name(std::string* volume_name);
  private:
  const std::string& _internal_volume_name() const;
  void _internal_set_volume_name(const std::string& value);
  std::string* _internal_mutable_volume_name();
  public:

  // uint64 rba = 3;
  void clear_rba();
  ::PROTOBUF_NAMESPACE_ID::uint64 rba() const;
  void set_rba(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_rba() const;
  void _internal_set_rba(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 num_blocks = 4;
  void clear_num_blocks();
  ::PROTOBUF_NAMESPACE_ID::uint64 num_blocks() const;
  void set_num_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_num_blocks() const;
  void _internal_set_num_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:replicator_rpc.CompleteReadRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::replicator_rpc::Chunk > data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr array_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr volume_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 rba_;
  ::PROTOBUF_NAMESPACE_ID::uint64 num_blocks_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_replicator_5frpc_2eproto;
};
// -------------------------------------------------------------------

class CompleteReadResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:replicator_rpc.CompleteReadResponse) */ {
 public:
  inline CompleteReadResponse() : CompleteReadResponse(nullptr) {}
  virtual ~CompleteReadResponse();
  explicit constexpr CompleteReadResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CompleteReadResponse(const CompleteReadResponse& from);
  CompleteReadResponse(CompleteReadResponse&& from) noexcept
    : CompleteReadResponse() {
    *this = ::std::move(from);
  }

  inline CompleteReadResponse& operator=(const CompleteReadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompleteReadResponse& operator=(CompleteReadResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CompleteReadResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompleteReadResponse* internal_default_instance() {
    return reinterpret_cast<const CompleteReadResponse*>(
               &_CompleteReadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CompleteReadResponse& a, CompleteReadResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CompleteReadResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompleteReadResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompleteReadResponse* New() const final {
    return CreateMaybeMessage<CompleteReadResponse>(nullptr);
  }

  CompleteReadResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompleteReadResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CompleteReadResponse& from);
  void MergeFrom(const CompleteReadResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompleteReadResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "replicator_rpc.CompleteReadResponse";
  }
  protected:
  explicit CompleteReadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_replicator_5frpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 2,
    kSuccessfulFieldNumber = 1,
  };
  // string reason = 2;
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // bool successful = 1;
  void clear_successful();
  bool successful() const;
  void set_successful(bool value);
  private:
  bool _internal_successful() const;
  void _internal_set_successful(bool value);
  public:

  // @@protoc_insertion_point(class_scope:replicator_rpc.CompleteReadResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  bool successful_;
  friend struct ::TableStruct_replicator_5frpc_2eproto;
};
// -------------------------------------------------------------------

class CompleteWriteRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:replicator_rpc.CompleteWriteRequest) */ {
 public:
  inline CompleteWriteRequest() : CompleteWriteRequest(nullptr) {}
  virtual ~CompleteWriteRequest();
  explicit constexpr CompleteWriteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CompleteWriteRequest(const CompleteWriteRequest& from);
  CompleteWriteRequest(CompleteWriteRequest&& from) noexcept
    : CompleteWriteRequest() {
    *this = ::std::move(from);
  }

  inline CompleteWriteRequest& operator=(const CompleteWriteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompleteWriteRequest& operator=(CompleteWriteRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CompleteWriteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompleteWriteRequest* internal_default_instance() {
    return reinterpret_cast<const CompleteWriteRequest*>(
               &_CompleteWriteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CompleteWriteRequest& a, CompleteWriteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CompleteWriteRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompleteWriteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompleteWriteRequest* New() const final {
    return CreateMaybeMessage<CompleteWriteRequest>(nullptr);
  }

  CompleteWriteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompleteWriteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CompleteWriteRequest& from);
  void MergeFrom(const CompleteWriteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompleteWriteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "replicator_rpc.CompleteWriteRequest";
  }
  protected:
  explicit CompleteWriteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_replicator_5frpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrayNameFieldNumber = 1,
    kVolumeNameFieldNumber = 2,
    kRbaFieldNumber = 3,
    kNumBlocksFieldNumber = 4,
    kLsnFieldNumber = 5,
  };
  // string array_name = 1;
  void clear_array_name();
  const std::string& array_name() const;
  void set_array_name(const std::string& value);
  void set_array_name(std::string&& value);
  void set_array_name(const char* value);
  void set_array_name(const char* value, size_t size);
  std::string* mutable_array_name();
  std::string* release_array_name();
  void set_allocated_array_name(std::string* array_name);
  private:
  const std::string& _internal_array_name() const;
  void _internal_set_array_name(const std::string& value);
  std::string* _internal_mutable_array_name();
  public:

  // string volume_name = 2;
  void clear_volume_name();
  const std::string& volume_name() const;
  void set_volume_name(const std::string& value);
  void set_volume_name(std::string&& value);
  void set_volume_name(const char* value);
  void set_volume_name(const char* value, size_t size);
  std::string* mutable_volume_name();
  std::string* release_volume_name();
  void set_allocated_volume_name(std::string* volume_name);
  private:
  const std::string& _internal_volume_name() const;
  void _internal_set_volume_name(const std::string& value);
  std::string* _internal_mutable_volume_name();
  public:

  // uint64 rba = 3;
  void clear_rba();
  ::PROTOBUF_NAMESPACE_ID::uint64 rba() const;
  void set_rba(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_rba() const;
  void _internal_set_rba(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 num_blocks = 4;
  void clear_num_blocks();
  ::PROTOBUF_NAMESPACE_ID::uint64 num_blocks() const;
  void set_num_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_num_blocks() const;
  void _internal_set_num_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 lsn = 5;
  bool has_lsn() const;
  private:
  bool _internal_has_lsn() const;
  public:
  void clear_lsn();
  ::PROTOBUF_NAMESPACE_ID::uint64 lsn() const;
  void set_lsn(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lsn() const;
  void _internal_set_lsn(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:replicator_rpc.CompleteWriteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr array_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr volume_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 rba_;
  ::PROTOBUF_NAMESPACE_ID::uint64 num_blocks_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lsn_;
  friend struct ::TableStruct_replicator_5frpc_2eproto;
};
// -------------------------------------------------------------------

class CompleteWriteResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:replicator_rpc.CompleteWriteResponse) */ {
 public:
  inline CompleteWriteResponse() : CompleteWriteResponse(nullptr) {}
  virtual ~CompleteWriteResponse();
  explicit constexpr CompleteWriteResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CompleteWriteResponse(const CompleteWriteResponse& from);
  CompleteWriteResponse(CompleteWriteResponse&& from) noexcept
    : CompleteWriteResponse() {
    *this = ::std::move(from);
  }

  inline CompleteWriteResponse& operator=(const CompleteWriteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompleteWriteResponse& operator=(CompleteWriteResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CompleteWriteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompleteWriteResponse* internal_default_instance() {
    return reinterpret_cast<const CompleteWriteResponse*>(
               &_CompleteWriteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CompleteWriteResponse& a, CompleteWriteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CompleteWriteResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompleteWriteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompleteWriteResponse* New() const final {
    return CreateMaybeMessage<CompleteWriteResponse>(nullptr);
  }

  CompleteWriteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompleteWriteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CompleteWriteResponse& from);
  void MergeFrom(const CompleteWriteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompleteWriteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "replicator_rpc.CompleteWriteResponse";
  }
  protected:
  explicit CompleteWriteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_replicator_5frpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 2,
    kSuccessfulFieldNumber = 1,
  };
  // string reason = 2;
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // bool successful = 1;
  void clear_successful();
  bool successful() const;
  void set_successful(bool value);
  private:
  bool _internal_successful() const;
  void _internal_set_successful(bool value);
  public:

  // @@protoc_insertion_point(class_scope:replicator_rpc.CompleteWriteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  bool successful_;
  friend struct ::TableStruct_replicator_5frpc_2eproto;
};
// -------------------------------------------------------------------

class HealthCheckRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:replicator_rpc.HealthCheckRequest) */ {
 public:
  inline HealthCheckRequest() : HealthCheckRequest(nullptr) {}
  virtual ~HealthCheckRequest();
  explicit constexpr HealthCheckRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HealthCheckRequest(const HealthCheckRequest& from);
  HealthCheckRequest(HealthCheckRequest&& from) noexcept
    : HealthCheckRequest() {
    *this = ::std::move(from);
  }

  inline HealthCheckRequest& operator=(const HealthCheckRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HealthCheckRequest& operator=(HealthCheckRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HealthCheckRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HealthCheckRequest* internal_default_instance() {
    return reinterpret_cast<const HealthCheckRequest*>(
               &_HealthCheckRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(HealthCheckRequest& a, HealthCheckRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HealthCheckRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HealthCheckRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HealthCheckRequest* New() const final {
    return CreateMaybeMessage<HealthCheckRequest>(nullptr);
  }

  HealthCheckRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HealthCheckRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HealthCheckRequest& from);
  void MergeFrom(const HealthCheckRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HealthCheckRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "replicator_rpc.HealthCheckRequest";
  }
  protected:
  explicit HealthCheckRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_replicator_5frpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:replicator_rpc.HealthCheckRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_replicator_5frpc_2eproto;
};
// -------------------------------------------------------------------

class HealthCheckResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:replicator_rpc.HealthCheckResponse) */ {
 public:
  inline HealthCheckResponse() : HealthCheckResponse(nullptr) {}
  virtual ~HealthCheckResponse();
  explicit constexpr HealthCheckResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HealthCheckResponse(const HealthCheckResponse& from);
  HealthCheckResponse(HealthCheckResponse&& from) noexcept
    : HealthCheckResponse() {
    *this = ::std::move(from);
  }

  inline HealthCheckResponse& operator=(const HealthCheckResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HealthCheckResponse& operator=(HealthCheckResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HealthCheckResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const HealthCheckResponse* internal_default_instance() {
    return reinterpret_cast<const HealthCheckResponse*>(
               &_HealthCheckResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(HealthCheckResponse& a, HealthCheckResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HealthCheckResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HealthCheckResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HealthCheckResponse* New() const final {
    return CreateMaybeMessage<HealthCheckResponse>(nullptr);
  }

  HealthCheckResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HealthCheckResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HealthCheckResponse& from);
  void MergeFrom(const HealthCheckResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HealthCheckResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "replicator_rpc.HealthCheckResponse";
  }
  protected:
  explicit HealthCheckResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_replicator_5frpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef HealthCheckResponse_ServingStatus ServingStatus;
  static constexpr ServingStatus UNKNOWN =
    HealthCheckResponse_ServingStatus_UNKNOWN;
  static constexpr ServingStatus SERVING =
    HealthCheckResponse_ServingStatus_SERVING;
  static constexpr ServingStatus NOT_SERVING =
    HealthCheckResponse_ServingStatus_NOT_SERVING;
  static inline bool ServingStatus_IsValid(int value) {
    return HealthCheckResponse_ServingStatus_IsValid(value);
  }
  static constexpr ServingStatus ServingStatus_MIN =
    HealthCheckResponse_ServingStatus_ServingStatus_MIN;
  static constexpr ServingStatus ServingStatus_MAX =
    HealthCheckResponse_ServingStatus_ServingStatus_MAX;
  static constexpr int ServingStatus_ARRAYSIZE =
    HealthCheckResponse_ServingStatus_ServingStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ServingStatus_descriptor() {
    return HealthCheckResponse_ServingStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& ServingStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ServingStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ServingStatus_Name.");
    return HealthCheckResponse_ServingStatus_Name(enum_t_value);
  }
  static inline bool ServingStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ServingStatus* value) {
    return HealthCheckResponse_ServingStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string reason = 2;
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // .replicator_rpc.HealthCheckResponse.ServingStatus status = 1;
  void clear_status();
  ::replicator_rpc::HealthCheckResponse_ServingStatus status() const;
  void set_status(::replicator_rpc::HealthCheckResponse_ServingStatus value);
  private:
  ::replicator_rpc::HealthCheckResponse_ServingStatus _internal_status() const;
  void _internal_set_status(::replicator_rpc::HealthCheckResponse_ServingStatus value);
  public:

  // @@protoc_insertion_point(class_scope:replicator_rpc.HealthCheckResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  int status_;
  friend struct ::TableStruct_replicator_5frpc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TransferHostWriteRequest

// string array_name = 1;
inline void TransferHostWriteRequest::clear_array_name() {
  array_name_.ClearToEmpty();
}
inline const std::string& TransferHostWriteRequest::array_name() const {
  // @@protoc_insertion_point(field_get:replicator_rpc.TransferHostWriteRequest.array_name)
  return _internal_array_name();
}
inline void TransferHostWriteRequest::set_array_name(const std::string& value) {
  _internal_set_array_name(value);
  // @@protoc_insertion_point(field_set:replicator_rpc.TransferHostWriteRequest.array_name)
}
inline std::string* TransferHostWriteRequest::mutable_array_name() {
  // @@protoc_insertion_point(field_mutable:replicator_rpc.TransferHostWriteRequest.array_name)
  return _internal_mutable_array_name();
}
inline const std::string& TransferHostWriteRequest::_internal_array_name() const {
  return array_name_.Get();
}
inline void TransferHostWriteRequest::_internal_set_array_name(const std::string& value) {
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TransferHostWriteRequest::set_array_name(std::string&& value) {
  
  array_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:replicator_rpc.TransferHostWriteRequest.array_name)
}
inline void TransferHostWriteRequest::set_array_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:replicator_rpc.TransferHostWriteRequest.array_name)
}
inline void TransferHostWriteRequest::set_array_name(const char* value,
    size_t size) {
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:replicator_rpc.TransferHostWriteRequest.array_name)
}
inline std::string* TransferHostWriteRequest::_internal_mutable_array_name() {
  
  return array_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TransferHostWriteRequest::release_array_name() {
  // @@protoc_insertion_point(field_release:replicator_rpc.TransferHostWriteRequest.array_name)
  return array_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransferHostWriteRequest::set_allocated_array_name(std::string* array_name) {
  if (array_name != nullptr) {
    
  } else {
    
  }
  array_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), array_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:replicator_rpc.TransferHostWriteRequest.array_name)
}

// string volume_name = 2;
inline void TransferHostWriteRequest::clear_volume_name() {
  volume_name_.ClearToEmpty();
}
inline const std::string& TransferHostWriteRequest::volume_name() const {
  // @@protoc_insertion_point(field_get:replicator_rpc.TransferHostWriteRequest.volume_name)
  return _internal_volume_name();
}
inline void TransferHostWriteRequest::set_volume_name(const std::string& value) {
  _internal_set_volume_name(value);
  // @@protoc_insertion_point(field_set:replicator_rpc.TransferHostWriteRequest.volume_name)
}
inline std::string* TransferHostWriteRequest::mutable_volume_name() {
  // @@protoc_insertion_point(field_mutable:replicator_rpc.TransferHostWriteRequest.volume_name)
  return _internal_mutable_volume_name();
}
inline const std::string& TransferHostWriteRequest::_internal_volume_name() const {
  return volume_name_.Get();
}
inline void TransferHostWriteRequest::_internal_set_volume_name(const std::string& value) {
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TransferHostWriteRequest::set_volume_name(std::string&& value) {
  
  volume_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:replicator_rpc.TransferHostWriteRequest.volume_name)
}
inline void TransferHostWriteRequest::set_volume_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:replicator_rpc.TransferHostWriteRequest.volume_name)
}
inline void TransferHostWriteRequest::set_volume_name(const char* value,
    size_t size) {
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:replicator_rpc.TransferHostWriteRequest.volume_name)
}
inline std::string* TransferHostWriteRequest::_internal_mutable_volume_name() {
  
  return volume_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TransferHostWriteRequest::release_volume_name() {
  // @@protoc_insertion_point(field_release:replicator_rpc.TransferHostWriteRequest.volume_name)
  return volume_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransferHostWriteRequest::set_allocated_volume_name(std::string* volume_name) {
  if (volume_name != nullptr) {
    
  } else {
    
  }
  volume_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), volume_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:replicator_rpc.TransferHostWriteRequest.volume_name)
}

// uint64 rba = 3;
inline void TransferHostWriteRequest::clear_rba() {
  rba_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransferHostWriteRequest::_internal_rba() const {
  return rba_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransferHostWriteRequest::rba() const {
  // @@protoc_insertion_point(field_get:replicator_rpc.TransferHostWriteRequest.rba)
  return _internal_rba();
}
inline void TransferHostWriteRequest::_internal_set_rba(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  rba_ = value;
}
inline void TransferHostWriteRequest::set_rba(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_rba(value);
  // @@protoc_insertion_point(field_set:replicator_rpc.TransferHostWriteRequest.rba)
}

// uint64 num_blocks = 4;
inline void TransferHostWriteRequest::clear_num_blocks() {
  num_blocks_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransferHostWriteRequest::_internal_num_blocks() const {
  return num_blocks_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransferHostWriteRequest::num_blocks() const {
  // @@protoc_insertion_point(field_get:replicator_rpc.TransferHostWriteRequest.num_blocks)
  return _internal_num_blocks();
}
inline void TransferHostWriteRequest::_internal_set_num_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  num_blocks_ = value;
}
inline void TransferHostWriteRequest::set_num_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_num_blocks(value);
  // @@protoc_insertion_point(field_set:replicator_rpc.TransferHostWriteRequest.num_blocks)
}

// uint32 rid = 5;
inline void TransferHostWriteRequest::clear_rid() {
  rid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TransferHostWriteRequest::_internal_rid() const {
  return rid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TransferHostWriteRequest::rid() const {
  // @@protoc_insertion_point(field_get:replicator_rpc.TransferHostWriteRequest.rid)
  return _internal_rid();
}
inline void TransferHostWriteRequest::_internal_set_rid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rid_ = value;
}
inline void TransferHostWriteRequest::set_rid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:replicator_rpc.TransferHostWriteRequest.rid)
}

// uint64 lsn = 6;
inline void TransferHostWriteRequest::clear_lsn() {
  lsn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransferHostWriteRequest::_internal_lsn() const {
  return lsn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransferHostWriteRequest::lsn() const {
  // @@protoc_insertion_point(field_get:replicator_rpc.TransferHostWriteRequest.lsn)
  return _internal_lsn();
}
inline void TransferHostWriteRequest::_internal_set_lsn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  lsn_ = value;
}
inline void TransferHostWriteRequest::set_lsn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lsn(value);
  // @@protoc_insertion_point(field_set:replicator_rpc.TransferHostWriteRequest.lsn)
}

// repeated .replicator_rpc.Chunk data = 7;
inline int TransferHostWriteRequest::_internal_data_size() const {
  return data_.size();
}
inline int TransferHostWriteRequest::data_size() const {
  return _internal_data_size();
}
inline void TransferHostWriteRequest::clear_data() {
  data_.Clear();
}
inline ::replicator_rpc::Chunk* TransferHostWriteRequest::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:replicator_rpc.TransferHostWriteRequest.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::replicator_rpc::Chunk >*
TransferHostWriteRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:replicator_rpc.TransferHostWriteRequest.data)
  return &data_;
}
inline const ::replicator_rpc::Chunk& TransferHostWriteRequest::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::replicator_rpc::Chunk& TransferHostWriteRequest::data(int index) const {
  // @@protoc_insertion_point(field_get:replicator_rpc.TransferHostWriteRequest.data)
  return _internal_data(index);
}
inline ::replicator_rpc::Chunk* TransferHostWriteRequest::_internal_add_data() {
  return data_.Add();
}
inline ::replicator_rpc::Chunk* TransferHostWriteRequest::add_data() {
  // @@protoc_insertion_point(field_add:replicator_rpc.TransferHostWriteRequest.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::replicator_rpc::Chunk >&
TransferHostWriteRequest::data() const {
  // @@protoc_insertion_point(field_list:replicator_rpc.TransferHostWriteRequest.data)
  return data_;
}

// -------------------------------------------------------------------

// TransferHostWriteResponse

// bool successful = 1;
inline void TransferHostWriteResponse::clear_successful() {
  successful_ = false;
}
inline bool TransferHostWriteResponse::_internal_successful() const {
  return successful_;
}
inline bool TransferHostWriteResponse::successful() const {
  // @@protoc_insertion_point(field_get:replicator_rpc.TransferHostWriteResponse.successful)
  return _internal_successful();
}
inline void TransferHostWriteResponse::_internal_set_successful(bool value) {
  
  successful_ = value;
}
inline void TransferHostWriteResponse::set_successful(bool value) {
  _internal_set_successful(value);
  // @@protoc_insertion_point(field_set:replicator_rpc.TransferHostWriteResponse.successful)
}

// string reason = 2;
inline bool TransferHostWriteResponse::_internal_has_reason() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TransferHostWriteResponse::has_reason() const {
  return _internal_has_reason();
}
inline void TransferHostWriteResponse::clear_reason() {
  reason_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TransferHostWriteResponse::reason() const {
  // @@protoc_insertion_point(field_get:replicator_rpc.TransferHostWriteResponse.reason)
  return _internal_reason();
}
inline void TransferHostWriteResponse::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:replicator_rpc.TransferHostWriteResponse.reason)
}
inline std::string* TransferHostWriteResponse::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:replicator_rpc.TransferHostWriteResponse.reason)
  return _internal_mutable_reason();
}
inline const std::string& TransferHostWriteResponse::_internal_reason() const {
  return reason_.Get();
}
inline void TransferHostWriteResponse::_internal_set_reason(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TransferHostWriteResponse::set_reason(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:replicator_rpc.TransferHostWriteResponse.reason)
}
inline void TransferHostWriteResponse::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:replicator_rpc.TransferHostWriteResponse.reason)
}
inline void TransferHostWriteResponse::set_reason(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:replicator_rpc.TransferHostWriteResponse.reason)
}
inline std::string* TransferHostWriteResponse::_internal_mutable_reason() {
  _has_bits_[0] |= 0x00000001u;
  return reason_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TransferHostWriteResponse::release_reason() {
  // @@protoc_insertion_point(field_release:replicator_rpc.TransferHostWriteResponse.reason)
  if (!_internal_has_reason()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return reason_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransferHostWriteResponse::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:replicator_rpc.TransferHostWriteResponse.reason)
}

// -------------------------------------------------------------------

// TransferVolumeDataRequest

// string array_name = 1;
inline void TransferVolumeDataRequest::clear_array_name() {
  array_name_.ClearToEmpty();
}
inline const std::string& TransferVolumeDataRequest::array_name() const {
  // @@protoc_insertion_point(field_get:replicator_rpc.TransferVolumeDataRequest.array_name)
  return _internal_array_name();
}
inline void TransferVolumeDataRequest::set_array_name(const std::string& value) {
  _internal_set_array_name(value);
  // @@protoc_insertion_point(field_set:replicator_rpc.TransferVolumeDataRequest.array_name)
}
inline std::string* TransferVolumeDataRequest::mutable_array_name() {
  // @@protoc_insertion_point(field_mutable:replicator_rpc.TransferVolumeDataRequest.array_name)
  return _internal_mutable_array_name();
}
inline const std::string& TransferVolumeDataRequest::_internal_array_name() const {
  return array_name_.Get();
}
inline void TransferVolumeDataRequest::_internal_set_array_name(const std::string& value) {
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TransferVolumeDataRequest::set_array_name(std::string&& value) {
  
  array_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:replicator_rpc.TransferVolumeDataRequest.array_name)
}
inline void TransferVolumeDataRequest::set_array_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:replicator_rpc.TransferVolumeDataRequest.array_name)
}
inline void TransferVolumeDataRequest::set_array_name(const char* value,
    size_t size) {
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:replicator_rpc.TransferVolumeDataRequest.array_name)
}
inline std::string* TransferVolumeDataRequest::_internal_mutable_array_name() {
  
  return array_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TransferVolumeDataRequest::release_array_name() {
  // @@protoc_insertion_point(field_release:replicator_rpc.TransferVolumeDataRequest.array_name)
  return array_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransferVolumeDataRequest::set_allocated_array_name(std::string* array_name) {
  if (array_name != nullptr) {
    
  } else {
    
  }
  array_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), array_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:replicator_rpc.TransferVolumeDataRequest.array_name)
}

// string volume_name = 2;
inline void TransferVolumeDataRequest::clear_volume_name() {
  volume_name_.ClearToEmpty();
}
inline const std::string& TransferVolumeDataRequest::volume_name() const {
  // @@protoc_insertion_point(field_get:replicator_rpc.TransferVolumeDataRequest.volume_name)
  return _internal_volume_name();
}
inline void TransferVolumeDataRequest::set_volume_name(const std::string& value) {
  _internal_set_volume_name(value);
  // @@protoc_insertion_point(field_set:replicator_rpc.TransferVolumeDataRequest.volume_name)
}
inline std::string* TransferVolumeDataRequest::mutable_volume_name() {
  // @@protoc_insertion_point(field_mutable:replicator_rpc.TransferVolumeDataRequest.volume_name)
  return _internal_mutable_volume_name();
}
inline const std::string& TransferVolumeDataRequest::_internal_volume_name() const {
  return volume_name_.Get();
}
inline void TransferVolumeDataRequest::_internal_set_volume_name(const std::string& value) {
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TransferVolumeDataRequest::set_volume_name(std::string&& value) {
  
  volume_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:replicator_rpc.TransferVolumeDataRequest.volume_name)
}
inline void TransferVolumeDataRequest::set_volume_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:replicator_rpc.TransferVolumeDataRequest.volume_name)
}
inline void TransferVolumeDataRequest::set_volume_name(const char* value,
    size_t size) {
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:replicator_rpc.TransferVolumeDataRequest.volume_name)
}
inline std::string* TransferVolumeDataRequest::_internal_mutable_volume_name() {
  
  return volume_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TransferVolumeDataRequest::release_volume_name() {
  // @@protoc_insertion_point(field_release:replicator_rpc.TransferVolumeDataRequest.volume_name)
  return volume_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransferVolumeDataRequest::set_allocated_volume_name(std::string* volume_name) {
  if (volume_name != nullptr) {
    
  } else {
    
  }
  volume_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), volume_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:replicator_rpc.TransferVolumeDataRequest.volume_name)
}

// uint64 rba = 3;
inline void TransferVolumeDataRequest::clear_rba() {
  rba_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransferVolumeDataRequest::_internal_rba() const {
  return rba_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransferVolumeDataRequest::rba() const {
  // @@protoc_insertion_point(field_get:replicator_rpc.TransferVolumeDataRequest.rba)
  return _internal_rba();
}
inline void TransferVolumeDataRequest::_internal_set_rba(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  rba_ = value;
}
inline void TransferVolumeDataRequest::set_rba(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_rba(value);
  // @@protoc_insertion_point(field_set:replicator_rpc.TransferVolumeDataRequest.rba)
}

// uint64 num_blocks = 4;
inline void TransferVolumeDataRequest::clear_num_blocks() {
  num_blocks_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransferVolumeDataRequest::_internal_num_blocks() const {
  return num_blocks_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransferVolumeDataRequest::num_blocks() const {
  // @@protoc_insertion_point(field_get:replicator_rpc.TransferVolumeDataRequest.num_blocks)
  return _internal_num_blocks();
}
inline void TransferVolumeDataRequest::_internal_set_num_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  num_blocks_ = value;
}
inline void TransferVolumeDataRequest::set_num_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_num_blocks(value);
  // @@protoc_insertion_point(field_set:replicator_rpc.TransferVolumeDataRequest.num_blocks)
}

// bool is_dirty_log = 5;
inline void TransferVolumeDataRequest::clear_is_dirty_log() {
  is_dirty_log_ = false;
}
inline bool TransferVolumeDataRequest::_internal_is_dirty_log() const {
  return is_dirty_log_;
}
inline bool TransferVolumeDataRequest::is_dirty_log() const {
  // @@protoc_insertion_point(field_get:replicator_rpc.TransferVolumeDataRequest.is_dirty_log)
  return _internal_is_dirty_log();
}
inline void TransferVolumeDataRequest::_internal_set_is_dirty_log(bool value) {
  
  is_dirty_log_ = value;
}
inline void TransferVolumeDataRequest::set_is_dirty_log(bool value) {
  _internal_set_is_dirty_log(value);
  // @@protoc_insertion_point(field_set:replicator_rpc.TransferVolumeDataRequest.is_dirty_log)
}

// uint64 lsn = 6;
inline bool TransferVolumeDataRequest::_internal_has_lsn() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TransferVolumeDataRequest::has_lsn() const {
  return _internal_has_lsn();
}
inline void TransferVolumeDataRequest::clear_lsn() {
  lsn_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransferVolumeDataRequest::_internal_lsn() const {
  return lsn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransferVolumeDataRequest::lsn() const {
  // @@protoc_insertion_point(field_get:replicator_rpc.TransferVolumeDataRequest.lsn)
  return _internal_lsn();
}
inline void TransferVolumeDataRequest::_internal_set_lsn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  lsn_ = value;
}
inline void TransferVolumeDataRequest::set_lsn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lsn(value);
  // @@protoc_insertion_point(field_set:replicator_rpc.TransferVolumeDataRequest.lsn)
}

// repeated .replicator_rpc.Chunk data = 7;
inline int TransferVolumeDataRequest::_internal_data_size() const {
  return data_.size();
}
inline int TransferVolumeDataRequest::data_size() const {
  return _internal_data_size();
}
inline void TransferVolumeDataRequest::clear_data() {
  data_.Clear();
}
inline ::replicator_rpc::Chunk* TransferVolumeDataRequest::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:replicator_rpc.TransferVolumeDataRequest.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::replicator_rpc::Chunk >*
TransferVolumeDataRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:replicator_rpc.TransferVolumeDataRequest.data)
  return &data_;
}
inline const ::replicator_rpc::Chunk& TransferVolumeDataRequest::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::replicator_rpc::Chunk& TransferVolumeDataRequest::data(int index) const {
  // @@protoc_insertion_point(field_get:replicator_rpc.TransferVolumeDataRequest.data)
  return _internal_data(index);
}
inline ::replicator_rpc::Chunk* TransferVolumeDataRequest::_internal_add_data() {
  return data_.Add();
}
inline ::replicator_rpc::Chunk* TransferVolumeDataRequest::add_data() {
  // @@protoc_insertion_point(field_add:replicator_rpc.TransferVolumeDataRequest.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::replicator_rpc::Chunk >&
TransferVolumeDataRequest::data() const {
  // @@protoc_insertion_point(field_list:replicator_rpc.TransferVolumeDataRequest.data)
  return data_;
}

// -------------------------------------------------------------------

// Chunk

// bytes content = 1;
inline void Chunk::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& Chunk::content() const {
  // @@protoc_insertion_point(field_get:replicator_rpc.Chunk.content)
  return _internal_content();
}
inline void Chunk::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:replicator_rpc.Chunk.content)
}
inline std::string* Chunk::mutable_content() {
  // @@protoc_insertion_point(field_mutable:replicator_rpc.Chunk.content)
  return _internal_mutable_content();
}
inline const std::string& Chunk::_internal_content() const {
  return content_.Get();
}
inline void Chunk::_internal_set_content(const std::string& value) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Chunk::set_content(std::string&& value) {
  
  content_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:replicator_rpc.Chunk.content)
}
inline void Chunk::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:replicator_rpc.Chunk.content)
}
inline void Chunk::set_content(const void* value,
    size_t size) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:replicator_rpc.Chunk.content)
}
inline std::string* Chunk::_internal_mutable_content() {
  
  return content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Chunk::release_content() {
  // @@protoc_insertion_point(field_release:replicator_rpc.Chunk.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Chunk::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:replicator_rpc.Chunk.content)
}

// -------------------------------------------------------------------

// TransferVolumeDataResponse

// bool successful = 1;
inline void TransferVolumeDataResponse::clear_successful() {
  successful_ = false;
}
inline bool TransferVolumeDataResponse::_internal_successful() const {
  return successful_;
}
inline bool TransferVolumeDataResponse::successful() const {
  // @@protoc_insertion_point(field_get:replicator_rpc.TransferVolumeDataResponse.successful)
  return _internal_successful();
}
inline void TransferVolumeDataResponse::_internal_set_successful(bool value) {
  
  successful_ = value;
}
inline void TransferVolumeDataResponse::set_successful(bool value) {
  _internal_set_successful(value);
  // @@protoc_insertion_point(field_set:replicator_rpc.TransferVolumeDataResponse.successful)
}

// string reason = 2;
inline bool TransferVolumeDataResponse::_internal_has_reason() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TransferVolumeDataResponse::has_reason() const {
  return _internal_has_reason();
}
inline void TransferVolumeDataResponse::clear_reason() {
  reason_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TransferVolumeDataResponse::reason() const {
  // @@protoc_insertion_point(field_get:replicator_rpc.TransferVolumeDataResponse.reason)
  return _internal_reason();
}
inline void TransferVolumeDataResponse::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:replicator_rpc.TransferVolumeDataResponse.reason)
}
inline std::string* TransferVolumeDataResponse::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:replicator_rpc.TransferVolumeDataResponse.reason)
  return _internal_mutable_reason();
}
inline const std::string& TransferVolumeDataResponse::_internal_reason() const {
  return reason_.Get();
}
inline void TransferVolumeDataResponse::_internal_set_reason(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TransferVolumeDataResponse::set_reason(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:replicator_rpc.TransferVolumeDataResponse.reason)
}
inline void TransferVolumeDataResponse::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:replicator_rpc.TransferVolumeDataResponse.reason)
}
inline void TransferVolumeDataResponse::set_reason(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:replicator_rpc.TransferVolumeDataResponse.reason)
}
inline std::string* TransferVolumeDataResponse::_internal_mutable_reason() {
  _has_bits_[0] |= 0x00000001u;
  return reason_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TransferVolumeDataResponse::release_reason() {
  // @@protoc_insertion_point(field_release:replicator_rpc.TransferVolumeDataResponse.reason)
  if (!_internal_has_reason()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return reason_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransferVolumeDataResponse::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:replicator_rpc.TransferVolumeDataResponse.reason)
}

// -------------------------------------------------------------------

// PushHostWriteRequest

// string array_name = 1;
inline void PushHostWriteRequest::clear_array_name() {
  array_name_.ClearToEmpty();
}
inline const std::string& PushHostWriteRequest::array_name() const {
  // @@protoc_insertion_point(field_get:replicator_rpc.PushHostWriteRequest.array_name)
  return _internal_array_name();
}
inline void PushHostWriteRequest::set_array_name(const std::string& value) {
  _internal_set_array_name(value);
  // @@protoc_insertion_point(field_set:replicator_rpc.PushHostWriteRequest.array_name)
}
inline std::string* PushHostWriteRequest::mutable_array_name() {
  // @@protoc_insertion_point(field_mutable:replicator_rpc.PushHostWriteRequest.array_name)
  return _internal_mutable_array_name();
}
inline const std::string& PushHostWriteRequest::_internal_array_name() const {
  return array_name_.Get();
}
inline void PushHostWriteRequest::_internal_set_array_name(const std::string& value) {
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PushHostWriteRequest::set_array_name(std::string&& value) {
  
  array_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:replicator_rpc.PushHostWriteRequest.array_name)
}
inline void PushHostWriteRequest::set_array_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:replicator_rpc.PushHostWriteRequest.array_name)
}
inline void PushHostWriteRequest::set_array_name(const char* value,
    size_t size) {
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:replicator_rpc.PushHostWriteRequest.array_name)
}
inline std::string* PushHostWriteRequest::_internal_mutable_array_name() {
  
  return array_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PushHostWriteRequest::release_array_name() {
  // @@protoc_insertion_point(field_release:replicator_rpc.PushHostWriteRequest.array_name)
  return array_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PushHostWriteRequest::set_allocated_array_name(std::string* array_name) {
  if (array_name != nullptr) {
    
  } else {
    
  }
  array_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), array_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:replicator_rpc.PushHostWriteRequest.array_name)
}

// string volume_name = 2;
inline void PushHostWriteRequest::clear_volume_name() {
  volume_name_.ClearToEmpty();
}
inline const std::string& PushHostWriteRequest::volume_name() const {
  // @@protoc_insertion_point(field_get:replicator_rpc.PushHostWriteRequest.volume_name)
  return _internal_volume_name();
}
inline void PushHostWriteRequest::set_volume_name(const std::string& value) {
  _internal_set_volume_name(value);
  // @@protoc_insertion_point(field_set:replicator_rpc.PushHostWriteRequest.volume_name)
}
inline std::string* PushHostWriteRequest::mutable_volume_name() {
  // @@protoc_insertion_point(field_mutable:replicator_rpc.PushHostWriteRequest.volume_name)
  return _internal_mutable_volume_name();
}
inline const std::string& PushHostWriteRequest::_internal_volume_name() const {
  return volume_name_.Get();
}
inline void PushHostWriteRequest::_internal_set_volume_name(const std::string& value) {
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PushHostWriteRequest::set_volume_name(std::string&& value) {
  
  volume_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:replicator_rpc.PushHostWriteRequest.volume_name)
}
inline void PushHostWriteRequest::set_volume_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:replicator_rpc.PushHostWriteRequest.volume_name)
}
inline void PushHostWriteRequest::set_volume_name(const char* value,
    size_t size) {
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:replicator_rpc.PushHostWriteRequest.volume_name)
}
inline std::string* PushHostWriteRequest::_internal_mutable_volume_name() {
  
  return volume_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PushHostWriteRequest::release_volume_name() {
  // @@protoc_insertion_point(field_release:replicator_rpc.PushHostWriteRequest.volume_name)
  return volume_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PushHostWriteRequest::set_allocated_volume_name(std::string* volume_name) {
  if (volume_name != nullptr) {
    
  } else {
    
  }
  volume_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), volume_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:replicator_rpc.PushHostWriteRequest.volume_name)
}

// uint64 rba = 3;
inline void PushHostWriteRequest::clear_rba() {
  rba_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PushHostWriteRequest::_internal_rba() const {
  return rba_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PushHostWriteRequest::rba() const {
  // @@protoc_insertion_point(field_get:replicator_rpc.PushHostWriteRequest.rba)
  return _internal_rba();
}
inline void PushHostWriteRequest::_internal_set_rba(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  rba_ = value;
}
inline void PushHostWriteRequest::set_rba(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_rba(value);
  // @@protoc_insertion_point(field_set:replicator_rpc.PushHostWriteRequest.rba)
}

// uint32 num_blocks = 4;
inline void PushHostWriteRequest::clear_num_blocks() {
  num_blocks_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PushHostWriteRequest::_internal_num_blocks() const {
  return num_blocks_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PushHostWriteRequest::num_blocks() const {
  // @@protoc_insertion_point(field_get:replicator_rpc.PushHostWriteRequest.num_blocks)
  return _internal_num_blocks();
}
inline void PushHostWriteRequest::_internal_set_num_blocks(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_blocks_ = value;
}
inline void PushHostWriteRequest::set_num_blocks(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_blocks(value);
  // @@protoc_insertion_point(field_set:replicator_rpc.PushHostWriteRequest.num_blocks)
}

// repeated .replicator_rpc.Chunk data = 5;
inline int PushHostWriteRequest::_internal_data_size() const {
  return data_.size();
}
inline int PushHostWriteRequest::data_size() const {
  return _internal_data_size();
}
inline void PushHostWriteRequest::clear_data() {
  data_.Clear();
}
inline ::replicator_rpc::Chunk* PushHostWriteRequest::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:replicator_rpc.PushHostWriteRequest.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::replicator_rpc::Chunk >*
PushHostWriteRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:replicator_rpc.PushHostWriteRequest.data)
  return &data_;
}
inline const ::replicator_rpc::Chunk& PushHostWriteRequest::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::replicator_rpc::Chunk& PushHostWriteRequest::data(int index) const {
  // @@protoc_insertion_point(field_get:replicator_rpc.PushHostWriteRequest.data)
  return _internal_data(index);
}
inline ::replicator_rpc::Chunk* PushHostWriteRequest::_internal_add_data() {
  return data_.Add();
}
inline ::replicator_rpc::Chunk* PushHostWriteRequest::add_data() {
  // @@protoc_insertion_point(field_add:replicator_rpc.PushHostWriteRequest.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::replicator_rpc::Chunk >&
PushHostWriteRequest::data() const {
  // @@protoc_insertion_point(field_list:replicator_rpc.PushHostWriteRequest.data)
  return data_;
}

// -------------------------------------------------------------------

// PushHostWriteResponse

// bool successful = 1;
inline void PushHostWriteResponse::clear_successful() {
  successful_ = false;
}
inline bool PushHostWriteResponse::_internal_successful() const {
  return successful_;
}
inline bool PushHostWriteResponse::successful() const {
  // @@protoc_insertion_point(field_get:replicator_rpc.PushHostWriteResponse.successful)
  return _internal_successful();
}
inline void PushHostWriteResponse::_internal_set_successful(bool value) {
  
  successful_ = value;
}
inline void PushHostWriteResponse::set_successful(bool value) {
  _internal_set_successful(value);
  // @@protoc_insertion_point(field_set:replicator_rpc.PushHostWriteResponse.successful)
}

// uint64 lsn = 2;
inline void PushHostWriteResponse::clear_lsn() {
  lsn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PushHostWriteResponse::_internal_lsn() const {
  return lsn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PushHostWriteResponse::lsn() const {
  // @@protoc_insertion_point(field_get:replicator_rpc.PushHostWriteResponse.lsn)
  return _internal_lsn();
}
inline void PushHostWriteResponse::_internal_set_lsn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  lsn_ = value;
}
inline void PushHostWriteResponse::set_lsn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lsn(value);
  // @@protoc_insertion_point(field_set:replicator_rpc.PushHostWriteResponse.lsn)
}

// string reason = 3;
inline bool PushHostWriteResponse::_internal_has_reason() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PushHostWriteResponse::has_reason() const {
  return _internal_has_reason();
}
inline void PushHostWriteResponse::clear_reason() {
  reason_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PushHostWriteResponse::reason() const {
  // @@protoc_insertion_point(field_get:replicator_rpc.PushHostWriteResponse.reason)
  return _internal_reason();
}
inline void PushHostWriteResponse::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:replicator_rpc.PushHostWriteResponse.reason)
}
inline std::string* PushHostWriteResponse::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:replicator_rpc.PushHostWriteResponse.reason)
  return _internal_mutable_reason();
}
inline const std::string& PushHostWriteResponse::_internal_reason() const {
  return reason_.Get();
}
inline void PushHostWriteResponse::_internal_set_reason(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PushHostWriteResponse::set_reason(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:replicator_rpc.PushHostWriteResponse.reason)
}
inline void PushHostWriteResponse::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:replicator_rpc.PushHostWriteResponse.reason)
}
inline void PushHostWriteResponse::set_reason(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:replicator_rpc.PushHostWriteResponse.reason)
}
inline std::string* PushHostWriteResponse::_internal_mutable_reason() {
  _has_bits_[0] |= 0x00000001u;
  return reason_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PushHostWriteResponse::release_reason() {
  // @@protoc_insertion_point(field_release:replicator_rpc.PushHostWriteResponse.reason)
  if (!_internal_has_reason()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return reason_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PushHostWriteResponse::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:replicator_rpc.PushHostWriteResponse.reason)
}

// -------------------------------------------------------------------

// PushDirtyLogRequest

// string array_name = 1;
inline void PushDirtyLogRequest::clear_array_name() {
  array_name_.ClearToEmpty();
}
inline const std::string& PushDirtyLogRequest::array_name() const {
  // @@protoc_insertion_point(field_get:replicator_rpc.PushDirtyLogRequest.array_name)
  return _internal_array_name();
}
inline void PushDirtyLogRequest::set_array_name(const std::string& value) {
  _internal_set_array_name(value);
  // @@protoc_insertion_point(field_set:replicator_rpc.PushDirtyLogRequest.array_name)
}
inline std::string* PushDirtyLogRequest::mutable_array_name() {
  // @@protoc_insertion_point(field_mutable:replicator_rpc.PushDirtyLogRequest.array_name)
  return _internal_mutable_array_name();
}
inline const std::string& PushDirtyLogRequest::_internal_array_name() const {
  return array_name_.Get();
}
inline void PushDirtyLogRequest::_internal_set_array_name(const std::string& value) {
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PushDirtyLogRequest::set_array_name(std::string&& value) {
  
  array_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:replicator_rpc.PushDirtyLogRequest.array_name)
}
inline void PushDirtyLogRequest::set_array_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:replicator_rpc.PushDirtyLogRequest.array_name)
}
inline void PushDirtyLogRequest::set_array_name(const char* value,
    size_t size) {
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:replicator_rpc.PushDirtyLogRequest.array_name)
}
inline std::string* PushDirtyLogRequest::_internal_mutable_array_name() {
  
  return array_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PushDirtyLogRequest::release_array_name() {
  // @@protoc_insertion_point(field_release:replicator_rpc.PushDirtyLogRequest.array_name)
  return array_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PushDirtyLogRequest::set_allocated_array_name(std::string* array_name) {
  if (array_name != nullptr) {
    
  } else {
    
  }
  array_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), array_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:replicator_rpc.PushDirtyLogRequest.array_name)
}

// string volume_name = 2;
inline void PushDirtyLogRequest::clear_volume_name() {
  volume_name_.ClearToEmpty();
}
inline const std::string& PushDirtyLogRequest::volume_name() const {
  // @@protoc_insertion_point(field_get:replicator_rpc.PushDirtyLogRequest.volume_name)
  return _internal_volume_name();
}
inline void PushDirtyLogRequest::set_volume_name(const std::string& value) {
  _internal_set_volume_name(value);
  // @@protoc_insertion_point(field_set:replicator_rpc.PushDirtyLogRequest.volume_name)
}
inline std::string* PushDirtyLogRequest::mutable_volume_name() {
  // @@protoc_insertion_point(field_mutable:replicator_rpc.PushDirtyLogRequest.volume_name)
  return _internal_mutable_volume_name();
}
inline const std::string& PushDirtyLogRequest::_internal_volume_name() const {
  return volume_name_.Get();
}
inline void PushDirtyLogRequest::_internal_set_volume_name(const std::string& value) {
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PushDirtyLogRequest::set_volume_name(std::string&& value) {
  
  volume_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:replicator_rpc.PushDirtyLogRequest.volume_name)
}
inline void PushDirtyLogRequest::set_volume_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:replicator_rpc.PushDirtyLogRequest.volume_name)
}
inline void PushDirtyLogRequest::set_volume_name(const char* value,
    size_t size) {
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:replicator_rpc.PushDirtyLogRequest.volume_name)
}
inline std::string* PushDirtyLogRequest::_internal_mutable_volume_name() {
  
  return volume_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PushDirtyLogRequest::release_volume_name() {
  // @@protoc_insertion_point(field_release:replicator_rpc.PushDirtyLogRequest.volume_name)
  return volume_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PushDirtyLogRequest::set_allocated_volume_name(std::string* volume_name) {
  if (volume_name != nullptr) {
    
  } else {
    
  }
  volume_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), volume_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:replicator_rpc.PushDirtyLogRequest.volume_name)
}

// uint64 rba = 3;
inline void PushDirtyLogRequest::clear_rba() {
  rba_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PushDirtyLogRequest::_internal_rba() const {
  return rba_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PushDirtyLogRequest::rba() const {
  // @@protoc_insertion_point(field_get:replicator_rpc.PushDirtyLogRequest.rba)
  return _internal_rba();
}
inline void PushDirtyLogRequest::_internal_set_rba(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  rba_ = value;
}
inline void PushDirtyLogRequest::set_rba(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_rba(value);
  // @@protoc_insertion_point(field_set:replicator_rpc.PushDirtyLogRequest.rba)
}

// uint32 num_blocks = 4;
inline void PushDirtyLogRequest::clear_num_blocks() {
  num_blocks_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PushDirtyLogRequest::_internal_num_blocks() const {
  return num_blocks_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PushDirtyLogRequest::num_blocks() const {
  // @@protoc_insertion_point(field_get:replicator_rpc.PushDirtyLogRequest.num_blocks)
  return _internal_num_blocks();
}
inline void PushDirtyLogRequest::_internal_set_num_blocks(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_blocks_ = value;
}
inline void PushDirtyLogRequest::set_num_blocks(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_blocks(value);
  // @@protoc_insertion_point(field_set:replicator_rpc.PushDirtyLogRequest.num_blocks)
}

// -------------------------------------------------------------------

// PushDirtyLogResponse

// bool successful = 1;
inline void PushDirtyLogResponse::clear_successful() {
  successful_ = false;
}
inline bool PushDirtyLogResponse::_internal_successful() const {
  return successful_;
}
inline bool PushDirtyLogResponse::successful() const {
  // @@protoc_insertion_point(field_get:replicator_rpc.PushDirtyLogResponse.successful)
  return _internal_successful();
}
inline void PushDirtyLogResponse::_internal_set_successful(bool value) {
  
  successful_ = value;
}
inline void PushDirtyLogResponse::set_successful(bool value) {
  _internal_set_successful(value);
  // @@protoc_insertion_point(field_set:replicator_rpc.PushDirtyLogResponse.successful)
}

// string reason = 2;
inline bool PushDirtyLogResponse::_internal_has_reason() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PushDirtyLogResponse::has_reason() const {
  return _internal_has_reason();
}
inline void PushDirtyLogResponse::clear_reason() {
  reason_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PushDirtyLogResponse::reason() const {
  // @@protoc_insertion_point(field_get:replicator_rpc.PushDirtyLogResponse.reason)
  return _internal_reason();
}
inline void PushDirtyLogResponse::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:replicator_rpc.PushDirtyLogResponse.reason)
}
inline std::string* PushDirtyLogResponse::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:replicator_rpc.PushDirtyLogResponse.reason)
  return _internal_mutable_reason();
}
inline const std::string& PushDirtyLogResponse::_internal_reason() const {
  return reason_.Get();
}
inline void PushDirtyLogResponse::_internal_set_reason(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PushDirtyLogResponse::set_reason(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:replicator_rpc.PushDirtyLogResponse.reason)
}
inline void PushDirtyLogResponse::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:replicator_rpc.PushDirtyLogResponse.reason)
}
inline void PushDirtyLogResponse::set_reason(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:replicator_rpc.PushDirtyLogResponse.reason)
}
inline std::string* PushDirtyLogResponse::_internal_mutable_reason() {
  _has_bits_[0] |= 0x00000001u;
  return reason_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PushDirtyLogResponse::release_reason() {
  // @@protoc_insertion_point(field_release:replicator_rpc.PushDirtyLogResponse.reason)
  if (!_internal_has_reason()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return reason_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PushDirtyLogResponse::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:replicator_rpc.PushDirtyLogResponse.reason)
}

// -------------------------------------------------------------------

// CompleteReadRequest

// string array_name = 1;
inline void CompleteReadRequest::clear_array_name() {
  array_name_.ClearToEmpty();
}
inline const std::string& CompleteReadRequest::array_name() const {
  // @@protoc_insertion_point(field_get:replicator_rpc.CompleteReadRequest.array_name)
  return _internal_array_name();
}
inline void CompleteReadRequest::set_array_name(const std::string& value) {
  _internal_set_array_name(value);
  // @@protoc_insertion_point(field_set:replicator_rpc.CompleteReadRequest.array_name)
}
inline std::string* CompleteReadRequest::mutable_array_name() {
  // @@protoc_insertion_point(field_mutable:replicator_rpc.CompleteReadRequest.array_name)
  return _internal_mutable_array_name();
}
inline const std::string& CompleteReadRequest::_internal_array_name() const {
  return array_name_.Get();
}
inline void CompleteReadRequest::_internal_set_array_name(const std::string& value) {
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CompleteReadRequest::set_array_name(std::string&& value) {
  
  array_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:replicator_rpc.CompleteReadRequest.array_name)
}
inline void CompleteReadRequest::set_array_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:replicator_rpc.CompleteReadRequest.array_name)
}
inline void CompleteReadRequest::set_array_name(const char* value,
    size_t size) {
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:replicator_rpc.CompleteReadRequest.array_name)
}
inline std::string* CompleteReadRequest::_internal_mutable_array_name() {
  
  return array_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CompleteReadRequest::release_array_name() {
  // @@protoc_insertion_point(field_release:replicator_rpc.CompleteReadRequest.array_name)
  return array_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CompleteReadRequest::set_allocated_array_name(std::string* array_name) {
  if (array_name != nullptr) {
    
  } else {
    
  }
  array_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), array_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:replicator_rpc.CompleteReadRequest.array_name)
}

// string volume_name = 2;
inline void CompleteReadRequest::clear_volume_name() {
  volume_name_.ClearToEmpty();
}
inline const std::string& CompleteReadRequest::volume_name() const {
  // @@protoc_insertion_point(field_get:replicator_rpc.CompleteReadRequest.volume_name)
  return _internal_volume_name();
}
inline void CompleteReadRequest::set_volume_name(const std::string& value) {
  _internal_set_volume_name(value);
  // @@protoc_insertion_point(field_set:replicator_rpc.CompleteReadRequest.volume_name)
}
inline std::string* CompleteReadRequest::mutable_volume_name() {
  // @@protoc_insertion_point(field_mutable:replicator_rpc.CompleteReadRequest.volume_name)
  return _internal_mutable_volume_name();
}
inline const std::string& CompleteReadRequest::_internal_volume_name() const {
  return volume_name_.Get();
}
inline void CompleteReadRequest::_internal_set_volume_name(const std::string& value) {
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CompleteReadRequest::set_volume_name(std::string&& value) {
  
  volume_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:replicator_rpc.CompleteReadRequest.volume_name)
}
inline void CompleteReadRequest::set_volume_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:replicator_rpc.CompleteReadRequest.volume_name)
}
inline void CompleteReadRequest::set_volume_name(const char* value,
    size_t size) {
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:replicator_rpc.CompleteReadRequest.volume_name)
}
inline std::string* CompleteReadRequest::_internal_mutable_volume_name() {
  
  return volume_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CompleteReadRequest::release_volume_name() {
  // @@protoc_insertion_point(field_release:replicator_rpc.CompleteReadRequest.volume_name)
  return volume_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CompleteReadRequest::set_allocated_volume_name(std::string* volume_name) {
  if (volume_name != nullptr) {
    
  } else {
    
  }
  volume_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), volume_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:replicator_rpc.CompleteReadRequest.volume_name)
}

// uint64 rba = 3;
inline void CompleteReadRequest::clear_rba() {
  rba_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CompleteReadRequest::_internal_rba() const {
  return rba_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CompleteReadRequest::rba() const {
  // @@protoc_insertion_point(field_get:replicator_rpc.CompleteReadRequest.rba)
  return _internal_rba();
}
inline void CompleteReadRequest::_internal_set_rba(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  rba_ = value;
}
inline void CompleteReadRequest::set_rba(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_rba(value);
  // @@protoc_insertion_point(field_set:replicator_rpc.CompleteReadRequest.rba)
}

// uint64 num_blocks = 4;
inline void CompleteReadRequest::clear_num_blocks() {
  num_blocks_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CompleteReadRequest::_internal_num_blocks() const {
  return num_blocks_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CompleteReadRequest::num_blocks() const {
  // @@protoc_insertion_point(field_get:replicator_rpc.CompleteReadRequest.num_blocks)
  return _internal_num_blocks();
}
inline void CompleteReadRequest::_internal_set_num_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  num_blocks_ = value;
}
inline void CompleteReadRequest::set_num_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_num_blocks(value);
  // @@protoc_insertion_point(field_set:replicator_rpc.CompleteReadRequest.num_blocks)
}

// repeated .replicator_rpc.Chunk data = 5;
inline int CompleteReadRequest::_internal_data_size() const {
  return data_.size();
}
inline int CompleteReadRequest::data_size() const {
  return _internal_data_size();
}
inline void CompleteReadRequest::clear_data() {
  data_.Clear();
}
inline ::replicator_rpc::Chunk* CompleteReadRequest::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:replicator_rpc.CompleteReadRequest.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::replicator_rpc::Chunk >*
CompleteReadRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:replicator_rpc.CompleteReadRequest.data)
  return &data_;
}
inline const ::replicator_rpc::Chunk& CompleteReadRequest::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::replicator_rpc::Chunk& CompleteReadRequest::data(int index) const {
  // @@protoc_insertion_point(field_get:replicator_rpc.CompleteReadRequest.data)
  return _internal_data(index);
}
inline ::replicator_rpc::Chunk* CompleteReadRequest::_internal_add_data() {
  return data_.Add();
}
inline ::replicator_rpc::Chunk* CompleteReadRequest::add_data() {
  // @@protoc_insertion_point(field_add:replicator_rpc.CompleteReadRequest.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::replicator_rpc::Chunk >&
CompleteReadRequest::data() const {
  // @@protoc_insertion_point(field_list:replicator_rpc.CompleteReadRequest.data)
  return data_;
}

// -------------------------------------------------------------------

// CompleteReadResponse

// bool successful = 1;
inline void CompleteReadResponse::clear_successful() {
  successful_ = false;
}
inline bool CompleteReadResponse::_internal_successful() const {
  return successful_;
}
inline bool CompleteReadResponse::successful() const {
  // @@protoc_insertion_point(field_get:replicator_rpc.CompleteReadResponse.successful)
  return _internal_successful();
}
inline void CompleteReadResponse::_internal_set_successful(bool value) {
  
  successful_ = value;
}
inline void CompleteReadResponse::set_successful(bool value) {
  _internal_set_successful(value);
  // @@protoc_insertion_point(field_set:replicator_rpc.CompleteReadResponse.successful)
}

// string reason = 2;
inline bool CompleteReadResponse::_internal_has_reason() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CompleteReadResponse::has_reason() const {
  return _internal_has_reason();
}
inline void CompleteReadResponse::clear_reason() {
  reason_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CompleteReadResponse::reason() const {
  // @@protoc_insertion_point(field_get:replicator_rpc.CompleteReadResponse.reason)
  return _internal_reason();
}
inline void CompleteReadResponse::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:replicator_rpc.CompleteReadResponse.reason)
}
inline std::string* CompleteReadResponse::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:replicator_rpc.CompleteReadResponse.reason)
  return _internal_mutable_reason();
}
inline const std::string& CompleteReadResponse::_internal_reason() const {
  return reason_.Get();
}
inline void CompleteReadResponse::_internal_set_reason(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CompleteReadResponse::set_reason(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:replicator_rpc.CompleteReadResponse.reason)
}
inline void CompleteReadResponse::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:replicator_rpc.CompleteReadResponse.reason)
}
inline void CompleteReadResponse::set_reason(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:replicator_rpc.CompleteReadResponse.reason)
}
inline std::string* CompleteReadResponse::_internal_mutable_reason() {
  _has_bits_[0] |= 0x00000001u;
  return reason_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CompleteReadResponse::release_reason() {
  // @@protoc_insertion_point(field_release:replicator_rpc.CompleteReadResponse.reason)
  if (!_internal_has_reason()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return reason_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CompleteReadResponse::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:replicator_rpc.CompleteReadResponse.reason)
}

// -------------------------------------------------------------------

// CompleteWriteRequest

// string array_name = 1;
inline void CompleteWriteRequest::clear_array_name() {
  array_name_.ClearToEmpty();
}
inline const std::string& CompleteWriteRequest::array_name() const {
  // @@protoc_insertion_point(field_get:replicator_rpc.CompleteWriteRequest.array_name)
  return _internal_array_name();
}
inline void CompleteWriteRequest::set_array_name(const std::string& value) {
  _internal_set_array_name(value);
  // @@protoc_insertion_point(field_set:replicator_rpc.CompleteWriteRequest.array_name)
}
inline std::string* CompleteWriteRequest::mutable_array_name() {
  // @@protoc_insertion_point(field_mutable:replicator_rpc.CompleteWriteRequest.array_name)
  return _internal_mutable_array_name();
}
inline const std::string& CompleteWriteRequest::_internal_array_name() const {
  return array_name_.Get();
}
inline void CompleteWriteRequest::_internal_set_array_name(const std::string& value) {
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CompleteWriteRequest::set_array_name(std::string&& value) {
  
  array_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:replicator_rpc.CompleteWriteRequest.array_name)
}
inline void CompleteWriteRequest::set_array_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:replicator_rpc.CompleteWriteRequest.array_name)
}
inline void CompleteWriteRequest::set_array_name(const char* value,
    size_t size) {
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:replicator_rpc.CompleteWriteRequest.array_name)
}
inline std::string* CompleteWriteRequest::_internal_mutable_array_name() {
  
  return array_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CompleteWriteRequest::release_array_name() {
  // @@protoc_insertion_point(field_release:replicator_rpc.CompleteWriteRequest.array_name)
  return array_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CompleteWriteRequest::set_allocated_array_name(std::string* array_name) {
  if (array_name != nullptr) {
    
  } else {
    
  }
  array_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), array_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:replicator_rpc.CompleteWriteRequest.array_name)
}

// string volume_name = 2;
inline void CompleteWriteRequest::clear_volume_name() {
  volume_name_.ClearToEmpty();
}
inline const std::string& CompleteWriteRequest::volume_name() const {
  // @@protoc_insertion_point(field_get:replicator_rpc.CompleteWriteRequest.volume_name)
  return _internal_volume_name();
}
inline void CompleteWriteRequest::set_volume_name(const std::string& value) {
  _internal_set_volume_name(value);
  // @@protoc_insertion_point(field_set:replicator_rpc.CompleteWriteRequest.volume_name)
}
inline std::string* CompleteWriteRequest::mutable_volume_name() {
  // @@protoc_insertion_point(field_mutable:replicator_rpc.CompleteWriteRequest.volume_name)
  return _internal_mutable_volume_name();
}
inline const std::string& CompleteWriteRequest::_internal_volume_name() const {
  return volume_name_.Get();
}
inline void CompleteWriteRequest::_internal_set_volume_name(const std::string& value) {
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CompleteWriteRequest::set_volume_name(std::string&& value) {
  
  volume_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:replicator_rpc.CompleteWriteRequest.volume_name)
}
inline void CompleteWriteRequest::set_volume_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:replicator_rpc.CompleteWriteRequest.volume_name)
}
inline void CompleteWriteRequest::set_volume_name(const char* value,
    size_t size) {
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:replicator_rpc.CompleteWriteRequest.volume_name)
}
inline std::string* CompleteWriteRequest::_internal_mutable_volume_name() {
  
  return volume_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CompleteWriteRequest::release_volume_name() {
  // @@protoc_insertion_point(field_release:replicator_rpc.CompleteWriteRequest.volume_name)
  return volume_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CompleteWriteRequest::set_allocated_volume_name(std::string* volume_name) {
  if (volume_name != nullptr) {
    
  } else {
    
  }
  volume_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), volume_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:replicator_rpc.CompleteWriteRequest.volume_name)
}

// uint64 rba = 3;
inline void CompleteWriteRequest::clear_rba() {
  rba_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CompleteWriteRequest::_internal_rba() const {
  return rba_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CompleteWriteRequest::rba() const {
  // @@protoc_insertion_point(field_get:replicator_rpc.CompleteWriteRequest.rba)
  return _internal_rba();
}
inline void CompleteWriteRequest::_internal_set_rba(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  rba_ = value;
}
inline void CompleteWriteRequest::set_rba(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_rba(value);
  // @@protoc_insertion_point(field_set:replicator_rpc.CompleteWriteRequest.rba)
}

// uint64 num_blocks = 4;
inline void CompleteWriteRequest::clear_num_blocks() {
  num_blocks_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CompleteWriteRequest::_internal_num_blocks() const {
  return num_blocks_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CompleteWriteRequest::num_blocks() const {
  // @@protoc_insertion_point(field_get:replicator_rpc.CompleteWriteRequest.num_blocks)
  return _internal_num_blocks();
}
inline void CompleteWriteRequest::_internal_set_num_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  num_blocks_ = value;
}
inline void CompleteWriteRequest::set_num_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_num_blocks(value);
  // @@protoc_insertion_point(field_set:replicator_rpc.CompleteWriteRequest.num_blocks)
}

// uint64 lsn = 5;
inline bool CompleteWriteRequest::_internal_has_lsn() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CompleteWriteRequest::has_lsn() const {
  return _internal_has_lsn();
}
inline void CompleteWriteRequest::clear_lsn() {
  lsn_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CompleteWriteRequest::_internal_lsn() const {
  return lsn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CompleteWriteRequest::lsn() const {
  // @@protoc_insertion_point(field_get:replicator_rpc.CompleteWriteRequest.lsn)
  return _internal_lsn();
}
inline void CompleteWriteRequest::_internal_set_lsn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  lsn_ = value;
}
inline void CompleteWriteRequest::set_lsn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lsn(value);
  // @@protoc_insertion_point(field_set:replicator_rpc.CompleteWriteRequest.lsn)
}

// -------------------------------------------------------------------

// CompleteWriteResponse

// bool successful = 1;
inline void CompleteWriteResponse::clear_successful() {
  successful_ = false;
}
inline bool CompleteWriteResponse::_internal_successful() const {
  return successful_;
}
inline bool CompleteWriteResponse::successful() const {
  // @@protoc_insertion_point(field_get:replicator_rpc.CompleteWriteResponse.successful)
  return _internal_successful();
}
inline void CompleteWriteResponse::_internal_set_successful(bool value) {
  
  successful_ = value;
}
inline void CompleteWriteResponse::set_successful(bool value) {
  _internal_set_successful(value);
  // @@protoc_insertion_point(field_set:replicator_rpc.CompleteWriteResponse.successful)
}

// string reason = 2;
inline bool CompleteWriteResponse::_internal_has_reason() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CompleteWriteResponse::has_reason() const {
  return _internal_has_reason();
}
inline void CompleteWriteResponse::clear_reason() {
  reason_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CompleteWriteResponse::reason() const {
  // @@protoc_insertion_point(field_get:replicator_rpc.CompleteWriteResponse.reason)
  return _internal_reason();
}
inline void CompleteWriteResponse::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:replicator_rpc.CompleteWriteResponse.reason)
}
inline std::string* CompleteWriteResponse::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:replicator_rpc.CompleteWriteResponse.reason)
  return _internal_mutable_reason();
}
inline const std::string& CompleteWriteResponse::_internal_reason() const {
  return reason_.Get();
}
inline void CompleteWriteResponse::_internal_set_reason(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CompleteWriteResponse::set_reason(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:replicator_rpc.CompleteWriteResponse.reason)
}
inline void CompleteWriteResponse::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:replicator_rpc.CompleteWriteResponse.reason)
}
inline void CompleteWriteResponse::set_reason(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:replicator_rpc.CompleteWriteResponse.reason)
}
inline std::string* CompleteWriteResponse::_internal_mutable_reason() {
  _has_bits_[0] |= 0x00000001u;
  return reason_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CompleteWriteResponse::release_reason() {
  // @@protoc_insertion_point(field_release:replicator_rpc.CompleteWriteResponse.reason)
  if (!_internal_has_reason()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return reason_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CompleteWriteResponse::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:replicator_rpc.CompleteWriteResponse.reason)
}

// -------------------------------------------------------------------

// HealthCheckRequest

// -------------------------------------------------------------------

// HealthCheckResponse

// .replicator_rpc.HealthCheckResponse.ServingStatus status = 1;
inline void HealthCheckResponse::clear_status() {
  status_ = 0;
}
inline ::replicator_rpc::HealthCheckResponse_ServingStatus HealthCheckResponse::_internal_status() const {
  return static_cast< ::replicator_rpc::HealthCheckResponse_ServingStatus >(status_);
}
inline ::replicator_rpc::HealthCheckResponse_ServingStatus HealthCheckResponse::status() const {
  // @@protoc_insertion_point(field_get:replicator_rpc.HealthCheckResponse.status)
  return _internal_status();
}
inline void HealthCheckResponse::_internal_set_status(::replicator_rpc::HealthCheckResponse_ServingStatus value) {
  
  status_ = value;
}
inline void HealthCheckResponse::set_status(::replicator_rpc::HealthCheckResponse_ServingStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:replicator_rpc.HealthCheckResponse.status)
}

// string reason = 2;
inline bool HealthCheckResponse::_internal_has_reason() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HealthCheckResponse::has_reason() const {
  return _internal_has_reason();
}
inline void HealthCheckResponse::clear_reason() {
  reason_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HealthCheckResponse::reason() const {
  // @@protoc_insertion_point(field_get:replicator_rpc.HealthCheckResponse.reason)
  return _internal_reason();
}
inline void HealthCheckResponse::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:replicator_rpc.HealthCheckResponse.reason)
}
inline std::string* HealthCheckResponse::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:replicator_rpc.HealthCheckResponse.reason)
  return _internal_mutable_reason();
}
inline const std::string& HealthCheckResponse::_internal_reason() const {
  return reason_.Get();
}
inline void HealthCheckResponse::_internal_set_reason(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void HealthCheckResponse::set_reason(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:replicator_rpc.HealthCheckResponse.reason)
}
inline void HealthCheckResponse::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:replicator_rpc.HealthCheckResponse.reason)
}
inline void HealthCheckResponse::set_reason(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:replicator_rpc.HealthCheckResponse.reason)
}
inline std::string* HealthCheckResponse::_internal_mutable_reason() {
  _has_bits_[0] |= 0x00000001u;
  return reason_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* HealthCheckResponse::release_reason() {
  // @@protoc_insertion_point(field_release:replicator_rpc.HealthCheckResponse.reason)
  if (!_internal_has_reason()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return reason_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HealthCheckResponse::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:replicator_rpc.HealthCheckResponse.reason)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace replicator_rpc

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::replicator_rpc::HealthCheckResponse_ServingStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::replicator_rpc::HealthCheckResponse_ServingStatus>() {
  return ::replicator_rpc::HealthCheckResponse_ServingStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_replicator_5frpc_2eproto
