// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pos_rpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pos_5frpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pos_5frpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pos_5frpc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pos_5frpc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[33]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pos_5frpc_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_pos_5frpc_2eproto_metadata_getter(int index);
namespace pos_rpc {
class ArrayInfo;
struct ArrayInfoDefaultTypeInternal;
extern ArrayInfoDefaultTypeInternal _ArrayInfo_default_instance_;
class ArrayListResponse;
struct ArrayListResponseDefaultTypeInternal;
extern ArrayListResponseDefaultTypeInternal _ArrayListResponse_default_instance_;
class Chunk;
struct ChunkDefaultTypeInternal;
extern ChunkDefaultTypeInternal _Chunk_default_instance_;
class CompleteHostWriteRequest;
struct CompleteHostWriteRequestDefaultTypeInternal;
extern CompleteHostWriteRequestDefaultTypeInternal _CompleteHostWriteRequest_default_instance_;
class CompleteHostWriteResponse;
struct CompleteHostWriteResponseDefaultTypeInternal;
extern CompleteHostWriteResponseDefaultTypeInternal _CompleteHostWriteResponse_default_instance_;
class CreateArrayRequest;
struct CreateArrayRequestDefaultTypeInternal;
extern CreateArrayRequestDefaultTypeInternal _CreateArrayRequest_default_instance_;
class CreateVolumeRequest;
struct CreateVolumeRequestDefaultTypeInternal;
extern CreateVolumeRequestDefaultTypeInternal _CreateVolumeRequest_default_instance_;
class DeleteArrayRequest;
struct DeleteArrayRequestDefaultTypeInternal;
extern DeleteArrayRequestDefaultTypeInternal _DeleteArrayRequest_default_instance_;
class DeleteVolumeRequest;
struct DeleteVolumeRequestDefaultTypeInternal;
extern DeleteVolumeRequestDefaultTypeInternal _DeleteVolumeRequest_default_instance_;
class FinishVolumeSyncRequest;
struct FinishVolumeSyncRequestDefaultTypeInternal;
extern FinishVolumeSyncRequestDefaultTypeInternal _FinishVolumeSyncRequest_default_instance_;
class FinishVolumeSyncResponse;
struct FinishVolumeSyncResponseDefaultTypeInternal;
extern FinishVolumeSyncResponseDefaultTypeInternal _FinishVolumeSyncResponse_default_instance_;
class GetArrayListRequest;
struct GetArrayListRequestDefaultTypeInternal;
extern GetArrayListRequestDefaultTypeInternal _GetArrayListRequest_default_instance_;
class GetVolumeListRequest;
struct GetVolumeListRequestDefaultTypeInternal;
extern GetVolumeListRequestDefaultTypeInternal _GetVolumeListRequest_default_instance_;
class HealthCheckRequest;
struct HealthCheckRequestDefaultTypeInternal;
extern HealthCheckRequestDefaultTypeInternal _HealthCheckRequest_default_instance_;
class HealthCheckResponse;
struct HealthCheckResponseDefaultTypeInternal;
extern HealthCheckResponseDefaultTypeInternal _HealthCheckResponse_default_instance_;
class MountVolumeRequest;
struct MountVolumeRequestDefaultTypeInternal;
extern MountVolumeRequestDefaultTypeInternal _MountVolumeRequest_default_instance_;
class PosResponse;
struct PosResponseDefaultTypeInternal;
extern PosResponseDefaultTypeInternal _PosResponse_default_instance_;
class ReadBlocksRequest;
struct ReadBlocksRequestDefaultTypeInternal;
extern ReadBlocksRequestDefaultTypeInternal _ReadBlocksRequest_default_instance_;
class ReadBlocksResponse;
struct ReadBlocksResponseDefaultTypeInternal;
extern ReadBlocksResponseDefaultTypeInternal _ReadBlocksResponse_default_instance_;
class ResumeWriteRequest;
struct ResumeWriteRequestDefaultTypeInternal;
extern ResumeWriteRequestDefaultTypeInternal _ResumeWriteRequest_default_instance_;
class ResumeWriteResponse;
struct ResumeWriteResponseDefaultTypeInternal;
extern ResumeWriteResponseDefaultTypeInternal _ResumeWriteResponse_default_instance_;
class StartVolumeSyncRequest;
struct StartVolumeSyncRequestDefaultTypeInternal;
extern StartVolumeSyncRequestDefaultTypeInternal _StartVolumeSyncRequest_default_instance_;
class StartVolumeSyncResponse;
struct StartVolumeSyncResponseDefaultTypeInternal;
extern StartVolumeSyncResponseDefaultTypeInternal _StartVolumeSyncResponse_default_instance_;
class SuspendWriteRequest;
struct SuspendWriteRequestDefaultTypeInternal;
extern SuspendWriteRequestDefaultTypeInternal _SuspendWriteRequest_default_instance_;
class SuspendWriteResponse;
struct SuspendWriteResponseDefaultTypeInternal;
extern SuspendWriteResponseDefaultTypeInternal _SuspendWriteResponse_default_instance_;
class UnmountVolumeRequest;
struct UnmountVolumeRequestDefaultTypeInternal;
extern UnmountVolumeRequestDefaultTypeInternal _UnmountVolumeRequest_default_instance_;
class UpdateVoluemMetaRequest;
struct UpdateVoluemMetaRequestDefaultTypeInternal;
extern UpdateVoluemMetaRequestDefaultTypeInternal _UpdateVoluemMetaRequest_default_instance_;
class VolumeInfo;
struct VolumeInfoDefaultTypeInternal;
extern VolumeInfoDefaultTypeInternal _VolumeInfo_default_instance_;
class VolumeListResponse;
struct VolumeListResponseDefaultTypeInternal;
extern VolumeListResponseDefaultTypeInternal _VolumeListResponse_default_instance_;
class WriteBlocksRequest;
struct WriteBlocksRequestDefaultTypeInternal;
extern WriteBlocksRequestDefaultTypeInternal _WriteBlocksRequest_default_instance_;
class WriteBlocksResponse;
struct WriteBlocksResponseDefaultTypeInternal;
extern WriteBlocksResponseDefaultTypeInternal _WriteBlocksResponse_default_instance_;
class WriteHostBlocksRequest;
struct WriteHostBlocksRequestDefaultTypeInternal;
extern WriteHostBlocksRequestDefaultTypeInternal _WriteHostBlocksRequest_default_instance_;
class WriteHostBlocksResponse;
struct WriteHostBlocksResponseDefaultTypeInternal;
extern WriteHostBlocksResponseDefaultTypeInternal _WriteHostBlocksResponse_default_instance_;
}  // namespace pos_rpc
PROTOBUF_NAMESPACE_OPEN
template<> ::pos_rpc::ArrayInfo* Arena::CreateMaybeMessage<::pos_rpc::ArrayInfo>(Arena*);
template<> ::pos_rpc::ArrayListResponse* Arena::CreateMaybeMessage<::pos_rpc::ArrayListResponse>(Arena*);
template<> ::pos_rpc::Chunk* Arena::CreateMaybeMessage<::pos_rpc::Chunk>(Arena*);
template<> ::pos_rpc::CompleteHostWriteRequest* Arena::CreateMaybeMessage<::pos_rpc::CompleteHostWriteRequest>(Arena*);
template<> ::pos_rpc::CompleteHostWriteResponse* Arena::CreateMaybeMessage<::pos_rpc::CompleteHostWriteResponse>(Arena*);
template<> ::pos_rpc::CreateArrayRequest* Arena::CreateMaybeMessage<::pos_rpc::CreateArrayRequest>(Arena*);
template<> ::pos_rpc::CreateVolumeRequest* Arena::CreateMaybeMessage<::pos_rpc::CreateVolumeRequest>(Arena*);
template<> ::pos_rpc::DeleteArrayRequest* Arena::CreateMaybeMessage<::pos_rpc::DeleteArrayRequest>(Arena*);
template<> ::pos_rpc::DeleteVolumeRequest* Arena::CreateMaybeMessage<::pos_rpc::DeleteVolumeRequest>(Arena*);
template<> ::pos_rpc::FinishVolumeSyncRequest* Arena::CreateMaybeMessage<::pos_rpc::FinishVolumeSyncRequest>(Arena*);
template<> ::pos_rpc::FinishVolumeSyncResponse* Arena::CreateMaybeMessage<::pos_rpc::FinishVolumeSyncResponse>(Arena*);
template<> ::pos_rpc::GetArrayListRequest* Arena::CreateMaybeMessage<::pos_rpc::GetArrayListRequest>(Arena*);
template<> ::pos_rpc::GetVolumeListRequest* Arena::CreateMaybeMessage<::pos_rpc::GetVolumeListRequest>(Arena*);
template<> ::pos_rpc::HealthCheckRequest* Arena::CreateMaybeMessage<::pos_rpc::HealthCheckRequest>(Arena*);
template<> ::pos_rpc::HealthCheckResponse* Arena::CreateMaybeMessage<::pos_rpc::HealthCheckResponse>(Arena*);
template<> ::pos_rpc::MountVolumeRequest* Arena::CreateMaybeMessage<::pos_rpc::MountVolumeRequest>(Arena*);
template<> ::pos_rpc::PosResponse* Arena::CreateMaybeMessage<::pos_rpc::PosResponse>(Arena*);
template<> ::pos_rpc::ReadBlocksRequest* Arena::CreateMaybeMessage<::pos_rpc::ReadBlocksRequest>(Arena*);
template<> ::pos_rpc::ReadBlocksResponse* Arena::CreateMaybeMessage<::pos_rpc::ReadBlocksResponse>(Arena*);
template<> ::pos_rpc::ResumeWriteRequest* Arena::CreateMaybeMessage<::pos_rpc::ResumeWriteRequest>(Arena*);
template<> ::pos_rpc::ResumeWriteResponse* Arena::CreateMaybeMessage<::pos_rpc::ResumeWriteResponse>(Arena*);
template<> ::pos_rpc::StartVolumeSyncRequest* Arena::CreateMaybeMessage<::pos_rpc::StartVolumeSyncRequest>(Arena*);
template<> ::pos_rpc::StartVolumeSyncResponse* Arena::CreateMaybeMessage<::pos_rpc::StartVolumeSyncResponse>(Arena*);
template<> ::pos_rpc::SuspendWriteRequest* Arena::CreateMaybeMessage<::pos_rpc::SuspendWriteRequest>(Arena*);
template<> ::pos_rpc::SuspendWriteResponse* Arena::CreateMaybeMessage<::pos_rpc::SuspendWriteResponse>(Arena*);
template<> ::pos_rpc::UnmountVolumeRequest* Arena::CreateMaybeMessage<::pos_rpc::UnmountVolumeRequest>(Arena*);
template<> ::pos_rpc::UpdateVoluemMetaRequest* Arena::CreateMaybeMessage<::pos_rpc::UpdateVoluemMetaRequest>(Arena*);
template<> ::pos_rpc::VolumeInfo* Arena::CreateMaybeMessage<::pos_rpc::VolumeInfo>(Arena*);
template<> ::pos_rpc::VolumeListResponse* Arena::CreateMaybeMessage<::pos_rpc::VolumeListResponse>(Arena*);
template<> ::pos_rpc::WriteBlocksRequest* Arena::CreateMaybeMessage<::pos_rpc::WriteBlocksRequest>(Arena*);
template<> ::pos_rpc::WriteBlocksResponse* Arena::CreateMaybeMessage<::pos_rpc::WriteBlocksResponse>(Arena*);
template<> ::pos_rpc::WriteHostBlocksRequest* Arena::CreateMaybeMessage<::pos_rpc::WriteHostBlocksRequest>(Arena*);
template<> ::pos_rpc::WriteHostBlocksResponse* Arena::CreateMaybeMessage<::pos_rpc::WriteHostBlocksResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pos_rpc {

enum HealthCheckResponse_ServingStatus : int {
  HealthCheckResponse_ServingStatus_UNKNOWN = 0,
  HealthCheckResponse_ServingStatus_SERVING = 1,
  HealthCheckResponse_ServingStatus_NOT_SERVING = 2,
  HealthCheckResponse_ServingStatus_HealthCheckResponse_ServingStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  HealthCheckResponse_ServingStatus_HealthCheckResponse_ServingStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool HealthCheckResponse_ServingStatus_IsValid(int value);
constexpr HealthCheckResponse_ServingStatus HealthCheckResponse_ServingStatus_ServingStatus_MIN = HealthCheckResponse_ServingStatus_UNKNOWN;
constexpr HealthCheckResponse_ServingStatus HealthCheckResponse_ServingStatus_ServingStatus_MAX = HealthCheckResponse_ServingStatus_NOT_SERVING;
constexpr int HealthCheckResponse_ServingStatus_ServingStatus_ARRAYSIZE = HealthCheckResponse_ServingStatus_ServingStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HealthCheckResponse_ServingStatus_descriptor();
template<typename T>
inline const std::string& HealthCheckResponse_ServingStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HealthCheckResponse_ServingStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HealthCheckResponse_ServingStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HealthCheckResponse_ServingStatus_descriptor(), enum_t_value);
}
inline bool HealthCheckResponse_ServingStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, HealthCheckResponse_ServingStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HealthCheckResponse_ServingStatus>(
    HealthCheckResponse_ServingStatus_descriptor(), name, value);
}
enum ArrayInfo_ArrayState : int {
  ArrayInfo_ArrayState_OFFLINE = 0,
  ArrayInfo_ArrayState_PAUSE = 1,
  ArrayInfo_ArrayState_NORMAL = 2,
  ArrayInfo_ArrayState_BUSY = 3,
  ArrayInfo_ArrayState_STOP = 4,
  ArrayInfo_ArrayState_SNAPSHOT = 5,
  ArrayInfo_ArrayState_ArrayInfo_ArrayState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ArrayInfo_ArrayState_ArrayInfo_ArrayState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ArrayInfo_ArrayState_IsValid(int value);
constexpr ArrayInfo_ArrayState ArrayInfo_ArrayState_ArrayState_MIN = ArrayInfo_ArrayState_OFFLINE;
constexpr ArrayInfo_ArrayState ArrayInfo_ArrayState_ArrayState_MAX = ArrayInfo_ArrayState_SNAPSHOT;
constexpr int ArrayInfo_ArrayState_ArrayState_ARRAYSIZE = ArrayInfo_ArrayState_ArrayState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ArrayInfo_ArrayState_descriptor();
template<typename T>
inline const std::string& ArrayInfo_ArrayState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ArrayInfo_ArrayState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ArrayInfo_ArrayState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ArrayInfo_ArrayState_descriptor(), enum_t_value);
}
inline bool ArrayInfo_ArrayState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ArrayInfo_ArrayState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ArrayInfo_ArrayState>(
    ArrayInfo_ArrayState_descriptor(), name, value);
}
enum VolumeInfo_VolumeState : int {
  VolumeInfo_VolumeState_UNKNOWN = 0,
  VolumeInfo_VolumeState_MOUNTED = 1,
  VolumeInfo_VolumeState_UNMOUNTED = 2,
  VolumeInfo_VolumeState_VolumeInfo_VolumeState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  VolumeInfo_VolumeState_VolumeInfo_VolumeState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool VolumeInfo_VolumeState_IsValid(int value);
constexpr VolumeInfo_VolumeState VolumeInfo_VolumeState_VolumeState_MIN = VolumeInfo_VolumeState_UNKNOWN;
constexpr VolumeInfo_VolumeState VolumeInfo_VolumeState_VolumeState_MAX = VolumeInfo_VolumeState_UNMOUNTED;
constexpr int VolumeInfo_VolumeState_VolumeState_ARRAYSIZE = VolumeInfo_VolumeState_VolumeState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VolumeInfo_VolumeState_descriptor();
template<typename T>
inline const std::string& VolumeInfo_VolumeState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VolumeInfo_VolumeState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VolumeInfo_VolumeState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VolumeInfo_VolumeState_descriptor(), enum_t_value);
}
inline bool VolumeInfo_VolumeState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VolumeInfo_VolumeState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VolumeInfo_VolumeState>(
    VolumeInfo_VolumeState_descriptor(), name, value);
}
enum PosResult : int {
  SUCCESS = 0,
  FAIL = 1,
  PosResult_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PosResult_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PosResult_IsValid(int value);
constexpr PosResult PosResult_MIN = SUCCESS;
constexpr PosResult PosResult_MAX = FAIL;
constexpr int PosResult_ARRAYSIZE = PosResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PosResult_descriptor();
template<typename T>
inline const std::string& PosResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PosResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PosResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PosResult_descriptor(), enum_t_value);
}
inline bool PosResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PosResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PosResult>(
    PosResult_descriptor(), name, value);
}
// ===================================================================

class HealthCheckRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pos_rpc.HealthCheckRequest) */ {
 public:
  inline HealthCheckRequest() : HealthCheckRequest(nullptr) {}
  virtual ~HealthCheckRequest();
  explicit constexpr HealthCheckRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HealthCheckRequest(const HealthCheckRequest& from);
  HealthCheckRequest(HealthCheckRequest&& from) noexcept
    : HealthCheckRequest() {
    *this = ::std::move(from);
  }

  inline HealthCheckRequest& operator=(const HealthCheckRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HealthCheckRequest& operator=(HealthCheckRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HealthCheckRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HealthCheckRequest* internal_default_instance() {
    return reinterpret_cast<const HealthCheckRequest*>(
               &_HealthCheckRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HealthCheckRequest& a, HealthCheckRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HealthCheckRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HealthCheckRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HealthCheckRequest* New() const final {
    return CreateMaybeMessage<HealthCheckRequest>(nullptr);
  }

  HealthCheckRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HealthCheckRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HealthCheckRequest& from);
  void MergeFrom(const HealthCheckRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HealthCheckRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pos_rpc.HealthCheckRequest";
  }
  protected:
  explicit HealthCheckRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_pos_5frpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pos_rpc.HealthCheckRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pos_5frpc_2eproto;
};
// -------------------------------------------------------------------

class HealthCheckResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pos_rpc.HealthCheckResponse) */ {
 public:
  inline HealthCheckResponse() : HealthCheckResponse(nullptr) {}
  virtual ~HealthCheckResponse();
  explicit constexpr HealthCheckResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HealthCheckResponse(const HealthCheckResponse& from);
  HealthCheckResponse(HealthCheckResponse&& from) noexcept
    : HealthCheckResponse() {
    *this = ::std::move(from);
  }

  inline HealthCheckResponse& operator=(const HealthCheckResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HealthCheckResponse& operator=(HealthCheckResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HealthCheckResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const HealthCheckResponse* internal_default_instance() {
    return reinterpret_cast<const HealthCheckResponse*>(
               &_HealthCheckResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HealthCheckResponse& a, HealthCheckResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HealthCheckResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HealthCheckResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HealthCheckResponse* New() const final {
    return CreateMaybeMessage<HealthCheckResponse>(nullptr);
  }

  HealthCheckResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HealthCheckResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HealthCheckResponse& from);
  void MergeFrom(const HealthCheckResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HealthCheckResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pos_rpc.HealthCheckResponse";
  }
  protected:
  explicit HealthCheckResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_pos_5frpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef HealthCheckResponse_ServingStatus ServingStatus;
  static constexpr ServingStatus UNKNOWN =
    HealthCheckResponse_ServingStatus_UNKNOWN;
  static constexpr ServingStatus SERVING =
    HealthCheckResponse_ServingStatus_SERVING;
  static constexpr ServingStatus NOT_SERVING =
    HealthCheckResponse_ServingStatus_NOT_SERVING;
  static inline bool ServingStatus_IsValid(int value) {
    return HealthCheckResponse_ServingStatus_IsValid(value);
  }
  static constexpr ServingStatus ServingStatus_MIN =
    HealthCheckResponse_ServingStatus_ServingStatus_MIN;
  static constexpr ServingStatus ServingStatus_MAX =
    HealthCheckResponse_ServingStatus_ServingStatus_MAX;
  static constexpr int ServingStatus_ARRAYSIZE =
    HealthCheckResponse_ServingStatus_ServingStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ServingStatus_descriptor() {
    return HealthCheckResponse_ServingStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& ServingStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ServingStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ServingStatus_Name.");
    return HealthCheckResponse_ServingStatus_Name(enum_t_value);
  }
  static inline bool ServingStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ServingStatus* value) {
    return HealthCheckResponse_ServingStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string reason = 2;
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // .pos_rpc.HealthCheckResponse.ServingStatus status = 1;
  void clear_status();
  ::pos_rpc::HealthCheckResponse_ServingStatus status() const;
  void set_status(::pos_rpc::HealthCheckResponse_ServingStatus value);
  private:
  ::pos_rpc::HealthCheckResponse_ServingStatus _internal_status() const;
  void _internal_set_status(::pos_rpc::HealthCheckResponse_ServingStatus value);
  public:

  // @@protoc_insertion_point(class_scope:pos_rpc.HealthCheckResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  int status_;
  friend struct ::TableStruct_pos_5frpc_2eproto;
};
// -------------------------------------------------------------------

class CreateArrayRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pos_rpc.CreateArrayRequest) */ {
 public:
  inline CreateArrayRequest() : CreateArrayRequest(nullptr) {}
  virtual ~CreateArrayRequest();
  explicit constexpr CreateArrayRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateArrayRequest(const CreateArrayRequest& from);
  CreateArrayRequest(CreateArrayRequest&& from) noexcept
    : CreateArrayRequest() {
    *this = ::std::move(from);
  }

  inline CreateArrayRequest& operator=(const CreateArrayRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateArrayRequest& operator=(CreateArrayRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateArrayRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateArrayRequest* internal_default_instance() {
    return reinterpret_cast<const CreateArrayRequest*>(
               &_CreateArrayRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CreateArrayRequest& a, CreateArrayRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateArrayRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateArrayRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateArrayRequest* New() const final {
    return CreateMaybeMessage<CreateArrayRequest>(nullptr);
  }

  CreateArrayRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateArrayRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateArrayRequest& from);
  void MergeFrom(const CreateArrayRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateArrayRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pos_rpc.CreateArrayRequest";
  }
  protected:
  explicit CreateArrayRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_pos_5frpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrayNameFieldNumber = 1,
    kCapacityFieldNumber = 2,
  };
  // string array_name = 1;
  void clear_array_name();
  const std::string& array_name() const;
  void set_array_name(const std::string& value);
  void set_array_name(std::string&& value);
  void set_array_name(const char* value);
  void set_array_name(const char* value, size_t size);
  std::string* mutable_array_name();
  std::string* release_array_name();
  void set_allocated_array_name(std::string* array_name);
  private:
  const std::string& _internal_array_name() const;
  void _internal_set_array_name(const std::string& value);
  std::string* _internal_mutable_array_name();
  public:

  // uint64 capacity = 2;
  void clear_capacity();
  ::PROTOBUF_NAMESPACE_ID::uint64 capacity() const;
  void set_capacity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_capacity() const;
  void _internal_set_capacity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:pos_rpc.CreateArrayRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr array_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 capacity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pos_5frpc_2eproto;
};
// -------------------------------------------------------------------

class DeleteArrayRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pos_rpc.DeleteArrayRequest) */ {
 public:
  inline DeleteArrayRequest() : DeleteArrayRequest(nullptr) {}
  virtual ~DeleteArrayRequest();
  explicit constexpr DeleteArrayRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteArrayRequest(const DeleteArrayRequest& from);
  DeleteArrayRequest(DeleteArrayRequest&& from) noexcept
    : DeleteArrayRequest() {
    *this = ::std::move(from);
  }

  inline DeleteArrayRequest& operator=(const DeleteArrayRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteArrayRequest& operator=(DeleteArrayRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteArrayRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteArrayRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteArrayRequest*>(
               &_DeleteArrayRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DeleteArrayRequest& a, DeleteArrayRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteArrayRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteArrayRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteArrayRequest* New() const final {
    return CreateMaybeMessage<DeleteArrayRequest>(nullptr);
  }

  DeleteArrayRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteArrayRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteArrayRequest& from);
  void MergeFrom(const DeleteArrayRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteArrayRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pos_rpc.DeleteArrayRequest";
  }
  protected:
  explicit DeleteArrayRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_pos_5frpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrayNameFieldNumber = 1,
  };
  // string array_name = 1;
  void clear_array_name();
  const std::string& array_name() const;
  void set_array_name(const std::string& value);
  void set_array_name(std::string&& value);
  void set_array_name(const char* value);
  void set_array_name(const char* value, size_t size);
  std::string* mutable_array_name();
  std::string* release_array_name();
  void set_allocated_array_name(std::string* array_name);
  private:
  const std::string& _internal_array_name() const;
  void _internal_set_array_name(const std::string& value);
  std::string* _internal_mutable_array_name();
  public:

  // @@protoc_insertion_point(class_scope:pos_rpc.DeleteArrayRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr array_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pos_5frpc_2eproto;
};
// -------------------------------------------------------------------

class CreateVolumeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pos_rpc.CreateVolumeRequest) */ {
 public:
  inline CreateVolumeRequest() : CreateVolumeRequest(nullptr) {}
  virtual ~CreateVolumeRequest();
  explicit constexpr CreateVolumeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateVolumeRequest(const CreateVolumeRequest& from);
  CreateVolumeRequest(CreateVolumeRequest&& from) noexcept
    : CreateVolumeRequest() {
    *this = ::std::move(from);
  }

  inline CreateVolumeRequest& operator=(const CreateVolumeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateVolumeRequest& operator=(CreateVolumeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateVolumeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateVolumeRequest* internal_default_instance() {
    return reinterpret_cast<const CreateVolumeRequest*>(
               &_CreateVolumeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CreateVolumeRequest& a, CreateVolumeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateVolumeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateVolumeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateVolumeRequest* New() const final {
    return CreateMaybeMessage<CreateVolumeRequest>(nullptr);
  }

  CreateVolumeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateVolumeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateVolumeRequest& from);
  void MergeFrom(const CreateVolumeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateVolumeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pos_rpc.CreateVolumeRequest";
  }
  protected:
  explicit CreateVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_pos_5frpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrayNameFieldNumber = 1,
    kVolumeNameFieldNumber = 2,
    kCapacityFieldNumber = 3,
  };
  // string array_name = 1;
  void clear_array_name();
  const std::string& array_name() const;
  void set_array_name(const std::string& value);
  void set_array_name(std::string&& value);
  void set_array_name(const char* value);
  void set_array_name(const char* value, size_t size);
  std::string* mutable_array_name();
  std::string* release_array_name();
  void set_allocated_array_name(std::string* array_name);
  private:
  const std::string& _internal_array_name() const;
  void _internal_set_array_name(const std::string& value);
  std::string* _internal_mutable_array_name();
  public:

  // string volume_name = 2;
  void clear_volume_name();
  const std::string& volume_name() const;
  void set_volume_name(const std::string& value);
  void set_volume_name(std::string&& value);
  void set_volume_name(const char* value);
  void set_volume_name(const char* value, size_t size);
  std::string* mutable_volume_name();
  std::string* release_volume_name();
  void set_allocated_volume_name(std::string* volume_name);
  private:
  const std::string& _internal_volume_name() const;
  void _internal_set_volume_name(const std::string& value);
  std::string* _internal_mutable_volume_name();
  public:

  // uint64 capacity = 3;
  void clear_capacity();
  ::PROTOBUF_NAMESPACE_ID::uint64 capacity() const;
  void set_capacity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_capacity() const;
  void _internal_set_capacity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:pos_rpc.CreateVolumeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr array_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr volume_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 capacity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pos_5frpc_2eproto;
};
// -------------------------------------------------------------------

class DeleteVolumeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pos_rpc.DeleteVolumeRequest) */ {
 public:
  inline DeleteVolumeRequest() : DeleteVolumeRequest(nullptr) {}
  virtual ~DeleteVolumeRequest();
  explicit constexpr DeleteVolumeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteVolumeRequest(const DeleteVolumeRequest& from);
  DeleteVolumeRequest(DeleteVolumeRequest&& from) noexcept
    : DeleteVolumeRequest() {
    *this = ::std::move(from);
  }

  inline DeleteVolumeRequest& operator=(const DeleteVolumeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteVolumeRequest& operator=(DeleteVolumeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteVolumeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteVolumeRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteVolumeRequest*>(
               &_DeleteVolumeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DeleteVolumeRequest& a, DeleteVolumeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteVolumeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteVolumeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteVolumeRequest* New() const final {
    return CreateMaybeMessage<DeleteVolumeRequest>(nullptr);
  }

  DeleteVolumeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteVolumeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteVolumeRequest& from);
  void MergeFrom(const DeleteVolumeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteVolumeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pos_rpc.DeleteVolumeRequest";
  }
  protected:
  explicit DeleteVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_pos_5frpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrayNameFieldNumber = 1,
    kVolumeNameFieldNumber = 2,
  };
  // string array_name = 1;
  void clear_array_name();
  const std::string& array_name() const;
  void set_array_name(const std::string& value);
  void set_array_name(std::string&& value);
  void set_array_name(const char* value);
  void set_array_name(const char* value, size_t size);
  std::string* mutable_array_name();
  std::string* release_array_name();
  void set_allocated_array_name(std::string* array_name);
  private:
  const std::string& _internal_array_name() const;
  void _internal_set_array_name(const std::string& value);
  std::string* _internal_mutable_array_name();
  public:

  // string volume_name = 2;
  void clear_volume_name();
  const std::string& volume_name() const;
  void set_volume_name(const std::string& value);
  void set_volume_name(std::string&& value);
  void set_volume_name(const char* value);
  void set_volume_name(const char* value, size_t size);
  std::string* mutable_volume_name();
  std::string* release_volume_name();
  void set_allocated_volume_name(std::string* volume_name);
  private:
  const std::string& _internal_volume_name() const;
  void _internal_set_volume_name(const std::string& value);
  std::string* _internal_mutable_volume_name();
  public:

  // @@protoc_insertion_point(class_scope:pos_rpc.DeleteVolumeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr array_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr volume_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pos_5frpc_2eproto;
};
// -------------------------------------------------------------------

class MountVolumeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pos_rpc.MountVolumeRequest) */ {
 public:
  inline MountVolumeRequest() : MountVolumeRequest(nullptr) {}
  virtual ~MountVolumeRequest();
  explicit constexpr MountVolumeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MountVolumeRequest(const MountVolumeRequest& from);
  MountVolumeRequest(MountVolumeRequest&& from) noexcept
    : MountVolumeRequest() {
    *this = ::std::move(from);
  }

  inline MountVolumeRequest& operator=(const MountVolumeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MountVolumeRequest& operator=(MountVolumeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MountVolumeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MountVolumeRequest* internal_default_instance() {
    return reinterpret_cast<const MountVolumeRequest*>(
               &_MountVolumeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MountVolumeRequest& a, MountVolumeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MountVolumeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MountVolumeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MountVolumeRequest* New() const final {
    return CreateMaybeMessage<MountVolumeRequest>(nullptr);
  }

  MountVolumeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MountVolumeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MountVolumeRequest& from);
  void MergeFrom(const MountVolumeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MountVolumeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pos_rpc.MountVolumeRequest";
  }
  protected:
  explicit MountVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_pos_5frpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrayNameFieldNumber = 1,
    kVolumeNameFieldNumber = 2,
  };
  // string array_name = 1;
  void clear_array_name();
  const std::string& array_name() const;
  void set_array_name(const std::string& value);
  void set_array_name(std::string&& value);
  void set_array_name(const char* value);
  void set_array_name(const char* value, size_t size);
  std::string* mutable_array_name();
  std::string* release_array_name();
  void set_allocated_array_name(std::string* array_name);
  private:
  const std::string& _internal_array_name() const;
  void _internal_set_array_name(const std::string& value);
  std::string* _internal_mutable_array_name();
  public:

  // string volume_name = 2;
  void clear_volume_name();
  const std::string& volume_name() const;
  void set_volume_name(const std::string& value);
  void set_volume_name(std::string&& value);
  void set_volume_name(const char* value);
  void set_volume_name(const char* value, size_t size);
  std::string* mutable_volume_name();
  std::string* release_volume_name();
  void set_allocated_volume_name(std::string* volume_name);
  private:
  const std::string& _internal_volume_name() const;
  void _internal_set_volume_name(const std::string& value);
  std::string* _internal_mutable_volume_name();
  public:

  // @@protoc_insertion_point(class_scope:pos_rpc.MountVolumeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr array_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr volume_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pos_5frpc_2eproto;
};
// -------------------------------------------------------------------

class UnmountVolumeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pos_rpc.UnmountVolumeRequest) */ {
 public:
  inline UnmountVolumeRequest() : UnmountVolumeRequest(nullptr) {}
  virtual ~UnmountVolumeRequest();
  explicit constexpr UnmountVolumeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnmountVolumeRequest(const UnmountVolumeRequest& from);
  UnmountVolumeRequest(UnmountVolumeRequest&& from) noexcept
    : UnmountVolumeRequest() {
    *this = ::std::move(from);
  }

  inline UnmountVolumeRequest& operator=(const UnmountVolumeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnmountVolumeRequest& operator=(UnmountVolumeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnmountVolumeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnmountVolumeRequest* internal_default_instance() {
    return reinterpret_cast<const UnmountVolumeRequest*>(
               &_UnmountVolumeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UnmountVolumeRequest& a, UnmountVolumeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UnmountVolumeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnmountVolumeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnmountVolumeRequest* New() const final {
    return CreateMaybeMessage<UnmountVolumeRequest>(nullptr);
  }

  UnmountVolumeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnmountVolumeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnmountVolumeRequest& from);
  void MergeFrom(const UnmountVolumeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnmountVolumeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pos_rpc.UnmountVolumeRequest";
  }
  protected:
  explicit UnmountVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_pos_5frpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrayNameFieldNumber = 1,
    kVolumeNameFieldNumber = 2,
  };
  // string array_name = 1;
  void clear_array_name();
  const std::string& array_name() const;
  void set_array_name(const std::string& value);
  void set_array_name(std::string&& value);
  void set_array_name(const char* value);
  void set_array_name(const char* value, size_t size);
  std::string* mutable_array_name();
  std::string* release_array_name();
  void set_allocated_array_name(std::string* array_name);
  private:
  const std::string& _internal_array_name() const;
  void _internal_set_array_name(const std::string& value);
  std::string* _internal_mutable_array_name();
  public:

  // string volume_name = 2;
  void clear_volume_name();
  const std::string& volume_name() const;
  void set_volume_name(const std::string& value);
  void set_volume_name(std::string&& value);
  void set_volume_name(const char* value);
  void set_volume_name(const char* value, size_t size);
  std::string* mutable_volume_name();
  std::string* release_volume_name();
  void set_allocated_volume_name(std::string* volume_name);
  private:
  const std::string& _internal_volume_name() const;
  void _internal_set_volume_name(const std::string& value);
  std::string* _internal_mutable_volume_name();
  public:

  // @@protoc_insertion_point(class_scope:pos_rpc.UnmountVolumeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr array_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr volume_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pos_5frpc_2eproto;
};
// -------------------------------------------------------------------

class UpdateVoluemMetaRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pos_rpc.UpdateVoluemMetaRequest) */ {
 public:
  inline UpdateVoluemMetaRequest() : UpdateVoluemMetaRequest(nullptr) {}
  virtual ~UpdateVoluemMetaRequest();
  explicit constexpr UpdateVoluemMetaRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateVoluemMetaRequest(const UpdateVoluemMetaRequest& from);
  UpdateVoluemMetaRequest(UpdateVoluemMetaRequest&& from) noexcept
    : UpdateVoluemMetaRequest() {
    *this = ::std::move(from);
  }

  inline UpdateVoluemMetaRequest& operator=(const UpdateVoluemMetaRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateVoluemMetaRequest& operator=(UpdateVoluemMetaRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateVoluemMetaRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateVoluemMetaRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateVoluemMetaRequest*>(
               &_UpdateVoluemMetaRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(UpdateVoluemMetaRequest& a, UpdateVoluemMetaRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateVoluemMetaRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateVoluemMetaRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateVoluemMetaRequest* New() const final {
    return CreateMaybeMessage<UpdateVoluemMetaRequest>(nullptr);
  }

  UpdateVoluemMetaRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateVoluemMetaRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateVoluemMetaRequest& from);
  void MergeFrom(const UpdateVoluemMetaRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateVoluemMetaRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pos_rpc.UpdateVoluemMetaRequest";
  }
  protected:
  explicit UpdateVoluemMetaRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_pos_5frpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrayNameFieldNumber = 1,
  };
  // string array_name = 1;
  void clear_array_name();
  const std::string& array_name() const;
  void set_array_name(const std::string& value);
  void set_array_name(std::string&& value);
  void set_array_name(const char* value);
  void set_array_name(const char* value, size_t size);
  std::string* mutable_array_name();
  std::string* release_array_name();
  void set_allocated_array_name(std::string* array_name);
  private:
  const std::string& _internal_array_name() const;
  void _internal_set_array_name(const std::string& value);
  std::string* _internal_mutable_array_name();
  public:

  // @@protoc_insertion_point(class_scope:pos_rpc.UpdateVoluemMetaRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr array_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pos_5frpc_2eproto;
};
// -------------------------------------------------------------------

class PosResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pos_rpc.PosResponse) */ {
 public:
  inline PosResponse() : PosResponse(nullptr) {}
  virtual ~PosResponse();
  explicit constexpr PosResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PosResponse(const PosResponse& from);
  PosResponse(PosResponse&& from) noexcept
    : PosResponse() {
    *this = ::std::move(from);
  }

  inline PosResponse& operator=(const PosResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PosResponse& operator=(PosResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PosResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PosResponse* internal_default_instance() {
    return reinterpret_cast<const PosResponse*>(
               &_PosResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PosResponse& a, PosResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PosResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PosResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PosResponse* New() const final {
    return CreateMaybeMessage<PosResponse>(nullptr);
  }

  PosResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PosResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PosResponse& from);
  void MergeFrom(const PosResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PosResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pos_rpc.PosResponse";
  }
  protected:
  explicit PosResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_pos_5frpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string reason = 2;
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // .pos_rpc.PosResult result = 1;
  void clear_result();
  ::pos_rpc::PosResult result() const;
  void set_result(::pos_rpc::PosResult value);
  private:
  ::pos_rpc::PosResult _internal_result() const;
  void _internal_set_result(::pos_rpc::PosResult value);
  public:

  // @@protoc_insertion_point(class_scope:pos_rpc.PosResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  int result_;
  friend struct ::TableStruct_pos_5frpc_2eproto;
};
// -------------------------------------------------------------------

class GetArrayListRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pos_rpc.GetArrayListRequest) */ {
 public:
  inline GetArrayListRequest() : GetArrayListRequest(nullptr) {}
  virtual ~GetArrayListRequest();
  explicit constexpr GetArrayListRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetArrayListRequest(const GetArrayListRequest& from);
  GetArrayListRequest(GetArrayListRequest&& from) noexcept
    : GetArrayListRequest() {
    *this = ::std::move(from);
  }

  inline GetArrayListRequest& operator=(const GetArrayListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetArrayListRequest& operator=(GetArrayListRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetArrayListRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetArrayListRequest* internal_default_instance() {
    return reinterpret_cast<const GetArrayListRequest*>(
               &_GetArrayListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetArrayListRequest& a, GetArrayListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetArrayListRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetArrayListRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetArrayListRequest* New() const final {
    return CreateMaybeMessage<GetArrayListRequest>(nullptr);
  }

  GetArrayListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetArrayListRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetArrayListRequest& from);
  void MergeFrom(const GetArrayListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetArrayListRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pos_rpc.GetArrayListRequest";
  }
  protected:
  explicit GetArrayListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_pos_5frpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pos_rpc.GetArrayListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pos_5frpc_2eproto;
};
// -------------------------------------------------------------------

class ArrayInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pos_rpc.ArrayInfo) */ {
 public:
  inline ArrayInfo() : ArrayInfo(nullptr) {}
  virtual ~ArrayInfo();
  explicit constexpr ArrayInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArrayInfo(const ArrayInfo& from);
  ArrayInfo(ArrayInfo&& from) noexcept
    : ArrayInfo() {
    *this = ::std::move(from);
  }

  inline ArrayInfo& operator=(const ArrayInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArrayInfo& operator=(ArrayInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ArrayInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArrayInfo* internal_default_instance() {
    return reinterpret_cast<const ArrayInfo*>(
               &_ArrayInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ArrayInfo& a, ArrayInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ArrayInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArrayInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ArrayInfo* New() const final {
    return CreateMaybeMessage<ArrayInfo>(nullptr);
  }

  ArrayInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ArrayInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ArrayInfo& from);
  void MergeFrom(const ArrayInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArrayInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pos_rpc.ArrayInfo";
  }
  protected:
  explicit ArrayInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_pos_5frpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ArrayInfo_ArrayState ArrayState;
  static constexpr ArrayState OFFLINE =
    ArrayInfo_ArrayState_OFFLINE;
  static constexpr ArrayState PAUSE =
    ArrayInfo_ArrayState_PAUSE;
  static constexpr ArrayState NORMAL =
    ArrayInfo_ArrayState_NORMAL;
  static constexpr ArrayState BUSY =
    ArrayInfo_ArrayState_BUSY;
  static constexpr ArrayState STOP =
    ArrayInfo_ArrayState_STOP;
  static constexpr ArrayState SNAPSHOT =
    ArrayInfo_ArrayState_SNAPSHOT;
  static inline bool ArrayState_IsValid(int value) {
    return ArrayInfo_ArrayState_IsValid(value);
  }
  static constexpr ArrayState ArrayState_MIN =
    ArrayInfo_ArrayState_ArrayState_MIN;
  static constexpr ArrayState ArrayState_MAX =
    ArrayInfo_ArrayState_ArrayState_MAX;
  static constexpr int ArrayState_ARRAYSIZE =
    ArrayInfo_ArrayState_ArrayState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ArrayState_descriptor() {
    return ArrayInfo_ArrayState_descriptor();
  }
  template<typename T>
  static inline const std::string& ArrayState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ArrayState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ArrayState_Name.");
    return ArrayInfo_ArrayState_Name(enum_t_value);
  }
  static inline bool ArrayState_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ArrayState* value) {
    return ArrayInfo_ArrayState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kArrayNameFieldNumber = 1,
    kTotalCapacityFieldNumber = 2,
    kUsedCapacityFieldNumber = 3,
    kStateFieldNumber = 4,
  };
  // string array_name = 1;
  void clear_array_name();
  const std::string& array_name() const;
  void set_array_name(const std::string& value);
  void set_array_name(std::string&& value);
  void set_array_name(const char* value);
  void set_array_name(const char* value, size_t size);
  std::string* mutable_array_name();
  std::string* release_array_name();
  void set_allocated_array_name(std::string* array_name);
  private:
  const std::string& _internal_array_name() const;
  void _internal_set_array_name(const std::string& value);
  std::string* _internal_mutable_array_name();
  public:

  // uint64 total_capacity = 2;
  void clear_total_capacity();
  ::PROTOBUF_NAMESPACE_ID::uint64 total_capacity() const;
  void set_total_capacity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_total_capacity() const;
  void _internal_set_total_capacity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 used_capacity = 3;
  void clear_used_capacity();
  ::PROTOBUF_NAMESPACE_ID::uint64 used_capacity() const;
  void set_used_capacity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_used_capacity() const;
  void _internal_set_used_capacity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .pos_rpc.ArrayInfo.ArrayState state = 4;
  void clear_state();
  ::pos_rpc::ArrayInfo_ArrayState state() const;
  void set_state(::pos_rpc::ArrayInfo_ArrayState value);
  private:
  ::pos_rpc::ArrayInfo_ArrayState _internal_state() const;
  void _internal_set_state(::pos_rpc::ArrayInfo_ArrayState value);
  public:

  // @@protoc_insertion_point(class_scope:pos_rpc.ArrayInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr array_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 total_capacity_;
  ::PROTOBUF_NAMESPACE_ID::uint64 used_capacity_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pos_5frpc_2eproto;
};
// -------------------------------------------------------------------

class ArrayListResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pos_rpc.ArrayListResponse) */ {
 public:
  inline ArrayListResponse() : ArrayListResponse(nullptr) {}
  virtual ~ArrayListResponse();
  explicit constexpr ArrayListResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArrayListResponse(const ArrayListResponse& from);
  ArrayListResponse(ArrayListResponse&& from) noexcept
    : ArrayListResponse() {
    *this = ::std::move(from);
  }

  inline ArrayListResponse& operator=(const ArrayListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArrayListResponse& operator=(ArrayListResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ArrayListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArrayListResponse* internal_default_instance() {
    return reinterpret_cast<const ArrayListResponse*>(
               &_ArrayListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ArrayListResponse& a, ArrayListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ArrayListResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArrayListResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ArrayListResponse* New() const final {
    return CreateMaybeMessage<ArrayListResponse>(nullptr);
  }

  ArrayListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ArrayListResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ArrayListResponse& from);
  void MergeFrom(const ArrayListResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArrayListResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pos_rpc.ArrayListResponse";
  }
  protected:
  explicit ArrayListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_pos_5frpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfosFieldNumber = 3,
    kReasonFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // repeated .pos_rpc.ArrayInfo infos = 3;
  int infos_size() const;
  private:
  int _internal_infos_size() const;
  public:
  void clear_infos();
  ::pos_rpc::ArrayInfo* mutable_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pos_rpc::ArrayInfo >*
      mutable_infos();
  private:
  const ::pos_rpc::ArrayInfo& _internal_infos(int index) const;
  ::pos_rpc::ArrayInfo* _internal_add_infos();
  public:
  const ::pos_rpc::ArrayInfo& infos(int index) const;
  ::pos_rpc::ArrayInfo* add_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pos_rpc::ArrayInfo >&
      infos() const;

  // string reason = 2;
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // .pos_rpc.PosResult result = 1;
  void clear_result();
  ::pos_rpc::PosResult result() const;
  void set_result(::pos_rpc::PosResult value);
  private:
  ::pos_rpc::PosResult _internal_result() const;
  void _internal_set_result(::pos_rpc::PosResult value);
  public:

  // @@protoc_insertion_point(class_scope:pos_rpc.ArrayListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pos_rpc::ArrayInfo > infos_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  int result_;
  friend struct ::TableStruct_pos_5frpc_2eproto;
};
// -------------------------------------------------------------------

class GetVolumeListRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pos_rpc.GetVolumeListRequest) */ {
 public:
  inline GetVolumeListRequest() : GetVolumeListRequest(nullptr) {}
  virtual ~GetVolumeListRequest();
  explicit constexpr GetVolumeListRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetVolumeListRequest(const GetVolumeListRequest& from);
  GetVolumeListRequest(GetVolumeListRequest&& from) noexcept
    : GetVolumeListRequest() {
    *this = ::std::move(from);
  }

  inline GetVolumeListRequest& operator=(const GetVolumeListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVolumeListRequest& operator=(GetVolumeListRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetVolumeListRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetVolumeListRequest* internal_default_instance() {
    return reinterpret_cast<const GetVolumeListRequest*>(
               &_GetVolumeListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GetVolumeListRequest& a, GetVolumeListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVolumeListRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVolumeListRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetVolumeListRequest* New() const final {
    return CreateMaybeMessage<GetVolumeListRequest>(nullptr);
  }

  GetVolumeListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetVolumeListRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetVolumeListRequest& from);
  void MergeFrom(const GetVolumeListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVolumeListRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pos_rpc.GetVolumeListRequest";
  }
  protected:
  explicit GetVolumeListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_pos_5frpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrayNameFieldNumber = 1,
  };
  // string array_name = 1;
  void clear_array_name();
  const std::string& array_name() const;
  void set_array_name(const std::string& value);
  void set_array_name(std::string&& value);
  void set_array_name(const char* value);
  void set_array_name(const char* value, size_t size);
  std::string* mutable_array_name();
  std::string* release_array_name();
  void set_allocated_array_name(std::string* array_name);
  private:
  const std::string& _internal_array_name() const;
  void _internal_set_array_name(const std::string& value);
  std::string* _internal_mutable_array_name();
  public:

  // @@protoc_insertion_point(class_scope:pos_rpc.GetVolumeListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr array_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pos_5frpc_2eproto;
};
// -------------------------------------------------------------------

class VolumeInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pos_rpc.VolumeInfo) */ {
 public:
  inline VolumeInfo() : VolumeInfo(nullptr) {}
  virtual ~VolumeInfo();
  explicit constexpr VolumeInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VolumeInfo(const VolumeInfo& from);
  VolumeInfo(VolumeInfo&& from) noexcept
    : VolumeInfo() {
    *this = ::std::move(from);
  }

  inline VolumeInfo& operator=(const VolumeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline VolumeInfo& operator=(VolumeInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VolumeInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const VolumeInfo* internal_default_instance() {
    return reinterpret_cast<const VolumeInfo*>(
               &_VolumeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(VolumeInfo& a, VolumeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(VolumeInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VolumeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VolumeInfo* New() const final {
    return CreateMaybeMessage<VolumeInfo>(nullptr);
  }

  VolumeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VolumeInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VolumeInfo& from);
  void MergeFrom(const VolumeInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VolumeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pos_rpc.VolumeInfo";
  }
  protected:
  explicit VolumeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_pos_5frpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef VolumeInfo_VolumeState VolumeState;
  static constexpr VolumeState UNKNOWN =
    VolumeInfo_VolumeState_UNKNOWN;
  static constexpr VolumeState MOUNTED =
    VolumeInfo_VolumeState_MOUNTED;
  static constexpr VolumeState UNMOUNTED =
    VolumeInfo_VolumeState_UNMOUNTED;
  static inline bool VolumeState_IsValid(int value) {
    return VolumeInfo_VolumeState_IsValid(value);
  }
  static constexpr VolumeState VolumeState_MIN =
    VolumeInfo_VolumeState_VolumeState_MIN;
  static constexpr VolumeState VolumeState_MAX =
    VolumeInfo_VolumeState_VolumeState_MAX;
  static constexpr int VolumeState_ARRAYSIZE =
    VolumeInfo_VolumeState_VolumeState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  VolumeState_descriptor() {
    return VolumeInfo_VolumeState_descriptor();
  }
  template<typename T>
  static inline const std::string& VolumeState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, VolumeState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function VolumeState_Name.");
    return VolumeInfo_VolumeState_Name(enum_t_value);
  }
  static inline bool VolumeState_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      VolumeState* value) {
    return VolumeInfo_VolumeState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kVolumeNameFieldNumber = 1,
    kTotalCapacityFieldNumber = 2,
    kUsedCapacityFieldNumber = 3,
    kStateFieldNumber = 4,
  };
  // string volume_name = 1;
  void clear_volume_name();
  const std::string& volume_name() const;
  void set_volume_name(const std::string& value);
  void set_volume_name(std::string&& value);
  void set_volume_name(const char* value);
  void set_volume_name(const char* value, size_t size);
  std::string* mutable_volume_name();
  std::string* release_volume_name();
  void set_allocated_volume_name(std::string* volume_name);
  private:
  const std::string& _internal_volume_name() const;
  void _internal_set_volume_name(const std::string& value);
  std::string* _internal_mutable_volume_name();
  public:

  // uint64 total_capacity = 2;
  void clear_total_capacity();
  ::PROTOBUF_NAMESPACE_ID::uint64 total_capacity() const;
  void set_total_capacity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_total_capacity() const;
  void _internal_set_total_capacity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 used_capacity = 3;
  void clear_used_capacity();
  ::PROTOBUF_NAMESPACE_ID::uint64 used_capacity() const;
  void set_used_capacity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_used_capacity() const;
  void _internal_set_used_capacity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .pos_rpc.VolumeInfo.VolumeState state = 4;
  void clear_state();
  ::pos_rpc::VolumeInfo_VolumeState state() const;
  void set_state(::pos_rpc::VolumeInfo_VolumeState value);
  private:
  ::pos_rpc::VolumeInfo_VolumeState _internal_state() const;
  void _internal_set_state(::pos_rpc::VolumeInfo_VolumeState value);
  public:

  // @@protoc_insertion_point(class_scope:pos_rpc.VolumeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr volume_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 total_capacity_;
  ::PROTOBUF_NAMESPACE_ID::uint64 used_capacity_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pos_5frpc_2eproto;
};
// -------------------------------------------------------------------

class VolumeListResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pos_rpc.VolumeListResponse) */ {
 public:
  inline VolumeListResponse() : VolumeListResponse(nullptr) {}
  virtual ~VolumeListResponse();
  explicit constexpr VolumeListResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VolumeListResponse(const VolumeListResponse& from);
  VolumeListResponse(VolumeListResponse&& from) noexcept
    : VolumeListResponse() {
    *this = ::std::move(from);
  }

  inline VolumeListResponse& operator=(const VolumeListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VolumeListResponse& operator=(VolumeListResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VolumeListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const VolumeListResponse* internal_default_instance() {
    return reinterpret_cast<const VolumeListResponse*>(
               &_VolumeListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(VolumeListResponse& a, VolumeListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VolumeListResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VolumeListResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VolumeListResponse* New() const final {
    return CreateMaybeMessage<VolumeListResponse>(nullptr);
  }

  VolumeListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VolumeListResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VolumeListResponse& from);
  void MergeFrom(const VolumeListResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VolumeListResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pos_rpc.VolumeListResponse";
  }
  protected:
  explicit VolumeListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_pos_5frpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfosFieldNumber = 3,
    kReasonFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // repeated .pos_rpc.VolumeInfo infos = 3;
  int infos_size() const;
  private:
  int _internal_infos_size() const;
  public:
  void clear_infos();
  ::pos_rpc::VolumeInfo* mutable_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pos_rpc::VolumeInfo >*
      mutable_infos();
  private:
  const ::pos_rpc::VolumeInfo& _internal_infos(int index) const;
  ::pos_rpc::VolumeInfo* _internal_add_infos();
  public:
  const ::pos_rpc::VolumeInfo& infos(int index) const;
  ::pos_rpc::VolumeInfo* add_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pos_rpc::VolumeInfo >&
      infos() const;

  // string reason = 2;
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // .pos_rpc.PosResult result = 1;
  void clear_result();
  ::pos_rpc::PosResult result() const;
  void set_result(::pos_rpc::PosResult value);
  private:
  ::pos_rpc::PosResult _internal_result() const;
  void _internal_set_result(::pos_rpc::PosResult value);
  public:

  // @@protoc_insertion_point(class_scope:pos_rpc.VolumeListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pos_rpc::VolumeInfo > infos_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  int result_;
  friend struct ::TableStruct_pos_5frpc_2eproto;
};
// -------------------------------------------------------------------

class Chunk PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pos_rpc.Chunk) */ {
 public:
  inline Chunk() : Chunk(nullptr) {}
  virtual ~Chunk();
  explicit constexpr Chunk(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Chunk(const Chunk& from);
  Chunk(Chunk&& from) noexcept
    : Chunk() {
    *this = ::std::move(from);
  }

  inline Chunk& operator=(const Chunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chunk& operator=(Chunk&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Chunk& default_instance() {
    return *internal_default_instance();
  }
  static inline const Chunk* internal_default_instance() {
    return reinterpret_cast<const Chunk*>(
               &_Chunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Chunk& a, Chunk& b) {
    a.Swap(&b);
  }
  inline void Swap(Chunk* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chunk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Chunk* New() const final {
    return CreateMaybeMessage<Chunk>(nullptr);
  }

  Chunk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Chunk>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Chunk& from);
  void MergeFrom(const Chunk& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chunk* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pos_rpc.Chunk";
  }
  protected:
  explicit Chunk(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_pos_5frpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
  };
  // bytes content = 1;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // @@protoc_insertion_point(class_scope:pos_rpc.Chunk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pos_5frpc_2eproto;
};
// -------------------------------------------------------------------

class ReadBlocksRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pos_rpc.ReadBlocksRequest) */ {
 public:
  inline ReadBlocksRequest() : ReadBlocksRequest(nullptr) {}
  virtual ~ReadBlocksRequest();
  explicit constexpr ReadBlocksRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadBlocksRequest(const ReadBlocksRequest& from);
  ReadBlocksRequest(ReadBlocksRequest&& from) noexcept
    : ReadBlocksRequest() {
    *this = ::std::move(from);
  }

  inline ReadBlocksRequest& operator=(const ReadBlocksRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadBlocksRequest& operator=(ReadBlocksRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadBlocksRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadBlocksRequest* internal_default_instance() {
    return reinterpret_cast<const ReadBlocksRequest*>(
               &_ReadBlocksRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ReadBlocksRequest& a, ReadBlocksRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadBlocksRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadBlocksRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadBlocksRequest* New() const final {
    return CreateMaybeMessage<ReadBlocksRequest>(nullptr);
  }

  ReadBlocksRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadBlocksRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadBlocksRequest& from);
  void MergeFrom(const ReadBlocksRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadBlocksRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pos_rpc.ReadBlocksRequest";
  }
  protected:
  explicit ReadBlocksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_pos_5frpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrayNameFieldNumber = 1,
    kVolumeNameFieldNumber = 2,
    kRbaFieldNumber = 3,
    kNumBlocksFieldNumber = 4,
  };
  // string array_name = 1;
  void clear_array_name();
  const std::string& array_name() const;
  void set_array_name(const std::string& value);
  void set_array_name(std::string&& value);
  void set_array_name(const char* value);
  void set_array_name(const char* value, size_t size);
  std::string* mutable_array_name();
  std::string* release_array_name();
  void set_allocated_array_name(std::string* array_name);
  private:
  const std::string& _internal_array_name() const;
  void _internal_set_array_name(const std::string& value);
  std::string* _internal_mutable_array_name();
  public:

  // string volume_name = 2;
  void clear_volume_name();
  const std::string& volume_name() const;
  void set_volume_name(const std::string& value);
  void set_volume_name(std::string&& value);
  void set_volume_name(const char* value);
  void set_volume_name(const char* value, size_t size);
  std::string* mutable_volume_name();
  std::string* release_volume_name();
  void set_allocated_volume_name(std::string* volume_name);
  private:
  const std::string& _internal_volume_name() const;
  void _internal_set_volume_name(const std::string& value);
  std::string* _internal_mutable_volume_name();
  public:

  // uint64 rba = 3;
  void clear_rba();
  ::PROTOBUF_NAMESPACE_ID::uint64 rba() const;
  void set_rba(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_rba() const;
  void _internal_set_rba(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 num_blocks = 4;
  void clear_num_blocks();
  ::PROTOBUF_NAMESPACE_ID::uint64 num_blocks() const;
  void set_num_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_num_blocks() const;
  void _internal_set_num_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:pos_rpc.ReadBlocksRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr array_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr volume_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 rba_;
  ::PROTOBUF_NAMESPACE_ID::uint64 num_blocks_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pos_5frpc_2eproto;
};
// -------------------------------------------------------------------

class ReadBlocksResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pos_rpc.ReadBlocksResponse) */ {
 public:
  inline ReadBlocksResponse() : ReadBlocksResponse(nullptr) {}
  virtual ~ReadBlocksResponse();
  explicit constexpr ReadBlocksResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadBlocksResponse(const ReadBlocksResponse& from);
  ReadBlocksResponse(ReadBlocksResponse&& from) noexcept
    : ReadBlocksResponse() {
    *this = ::std::move(from);
  }

  inline ReadBlocksResponse& operator=(const ReadBlocksResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadBlocksResponse& operator=(ReadBlocksResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadBlocksResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadBlocksResponse* internal_default_instance() {
    return reinterpret_cast<const ReadBlocksResponse*>(
               &_ReadBlocksResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ReadBlocksResponse& a, ReadBlocksResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadBlocksResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadBlocksResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadBlocksResponse* New() const final {
    return CreateMaybeMessage<ReadBlocksResponse>(nullptr);
  }

  ReadBlocksResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadBlocksResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadBlocksResponse& from);
  void MergeFrom(const ReadBlocksResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadBlocksResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pos_rpc.ReadBlocksResponse";
  }
  protected:
  explicit ReadBlocksResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_pos_5frpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kReasonFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // repeated .pos_rpc.Chunk data = 3;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::pos_rpc::Chunk* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pos_rpc::Chunk >*
      mutable_data();
  private:
  const ::pos_rpc::Chunk& _internal_data(int index) const;
  ::pos_rpc::Chunk* _internal_add_data();
  public:
  const ::pos_rpc::Chunk& data(int index) const;
  ::pos_rpc::Chunk* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pos_rpc::Chunk >&
      data() const;

  // string reason = 2;
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // .pos_rpc.PosResult result = 1;
  void clear_result();
  ::pos_rpc::PosResult result() const;
  void set_result(::pos_rpc::PosResult value);
  private:
  ::pos_rpc::PosResult _internal_result() const;
  void _internal_set_result(::pos_rpc::PosResult value);
  public:

  // @@protoc_insertion_point(class_scope:pos_rpc.ReadBlocksResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pos_rpc::Chunk > data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  int result_;
  friend struct ::TableStruct_pos_5frpc_2eproto;
};
// -------------------------------------------------------------------

class WriteBlocksRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pos_rpc.WriteBlocksRequest) */ {
 public:
  inline WriteBlocksRequest() : WriteBlocksRequest(nullptr) {}
  virtual ~WriteBlocksRequest();
  explicit constexpr WriteBlocksRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WriteBlocksRequest(const WriteBlocksRequest& from);
  WriteBlocksRequest(WriteBlocksRequest&& from) noexcept
    : WriteBlocksRequest() {
    *this = ::std::move(from);
  }

  inline WriteBlocksRequest& operator=(const WriteBlocksRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteBlocksRequest& operator=(WriteBlocksRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WriteBlocksRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WriteBlocksRequest* internal_default_instance() {
    return reinterpret_cast<const WriteBlocksRequest*>(
               &_WriteBlocksRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(WriteBlocksRequest& a, WriteBlocksRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteBlocksRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteBlocksRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriteBlocksRequest* New() const final {
    return CreateMaybeMessage<WriteBlocksRequest>(nullptr);
  }

  WriteBlocksRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriteBlocksRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WriteBlocksRequest& from);
  void MergeFrom(const WriteBlocksRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteBlocksRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pos_rpc.WriteBlocksRequest";
  }
  protected:
  explicit WriteBlocksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_pos_5frpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 6,
    kArrayNameFieldNumber = 1,
    kVolumeNameFieldNumber = 2,
    kRbaFieldNumber = 3,
    kNumBlocksFieldNumber = 4,
    kLsnFieldNumber = 5,
  };
  // repeated .pos_rpc.Chunk data = 6;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::pos_rpc::Chunk* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pos_rpc::Chunk >*
      mutable_data();
  private:
  const ::pos_rpc::Chunk& _internal_data(int index) const;
  ::pos_rpc::Chunk* _internal_add_data();
  public:
  const ::pos_rpc::Chunk& data(int index) const;
  ::pos_rpc::Chunk* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pos_rpc::Chunk >&
      data() const;

  // string array_name = 1;
  void clear_array_name();
  const std::string& array_name() const;
  void set_array_name(const std::string& value);
  void set_array_name(std::string&& value);
  void set_array_name(const char* value);
  void set_array_name(const char* value, size_t size);
  std::string* mutable_array_name();
  std::string* release_array_name();
  void set_allocated_array_name(std::string* array_name);
  private:
  const std::string& _internal_array_name() const;
  void _internal_set_array_name(const std::string& value);
  std::string* _internal_mutable_array_name();
  public:

  // string volume_name = 2;
  void clear_volume_name();
  const std::string& volume_name() const;
  void set_volume_name(const std::string& value);
  void set_volume_name(std::string&& value);
  void set_volume_name(const char* value);
  void set_volume_name(const char* value, size_t size);
  std::string* mutable_volume_name();
  std::string* release_volume_name();
  void set_allocated_volume_name(std::string* volume_name);
  private:
  const std::string& _internal_volume_name() const;
  void _internal_set_volume_name(const std::string& value);
  std::string* _internal_mutable_volume_name();
  public:

  // uint64 rba = 3;
  void clear_rba();
  ::PROTOBUF_NAMESPACE_ID::uint64 rba() const;
  void set_rba(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_rba() const;
  void _internal_set_rba(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 num_blocks = 4;
  void clear_num_blocks();
  ::PROTOBUF_NAMESPACE_ID::uint64 num_blocks() const;
  void set_num_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_num_blocks() const;
  void _internal_set_num_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 lsn = 5;
  void clear_lsn();
  ::PROTOBUF_NAMESPACE_ID::uint64 lsn() const;
  void set_lsn(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lsn() const;
  void _internal_set_lsn(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:pos_rpc.WriteBlocksRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pos_rpc::Chunk > data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr array_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr volume_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 rba_;
  ::PROTOBUF_NAMESPACE_ID::uint64 num_blocks_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lsn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pos_5frpc_2eproto;
};
// -------------------------------------------------------------------

class WriteBlocksResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pos_rpc.WriteBlocksResponse) */ {
 public:
  inline WriteBlocksResponse() : WriteBlocksResponse(nullptr) {}
  virtual ~WriteBlocksResponse();
  explicit constexpr WriteBlocksResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WriteBlocksResponse(const WriteBlocksResponse& from);
  WriteBlocksResponse(WriteBlocksResponse&& from) noexcept
    : WriteBlocksResponse() {
    *this = ::std::move(from);
  }

  inline WriteBlocksResponse& operator=(const WriteBlocksResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteBlocksResponse& operator=(WriteBlocksResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WriteBlocksResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WriteBlocksResponse* internal_default_instance() {
    return reinterpret_cast<const WriteBlocksResponse*>(
               &_WriteBlocksResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(WriteBlocksResponse& a, WriteBlocksResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteBlocksResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteBlocksResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriteBlocksResponse* New() const final {
    return CreateMaybeMessage<WriteBlocksResponse>(nullptr);
  }

  WriteBlocksResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriteBlocksResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WriteBlocksResponse& from);
  void MergeFrom(const WriteBlocksResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteBlocksResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pos_rpc.WriteBlocksResponse";
  }
  protected:
  explicit WriteBlocksResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_pos_5frpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string reason = 2;
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // .pos_rpc.PosResult result = 1;
  void clear_result();
  ::pos_rpc::PosResult result() const;
  void set_result(::pos_rpc::PosResult value);
  private:
  ::pos_rpc::PosResult _internal_result() const;
  void _internal_set_result(::pos_rpc::PosResult value);
  public:

  // @@protoc_insertion_point(class_scope:pos_rpc.WriteBlocksResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  int result_;
  friend struct ::TableStruct_pos_5frpc_2eproto;
};
// -------------------------------------------------------------------

class WriteHostBlocksRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pos_rpc.WriteHostBlocksRequest) */ {
 public:
  inline WriteHostBlocksRequest() : WriteHostBlocksRequest(nullptr) {}
  virtual ~WriteHostBlocksRequest();
  explicit constexpr WriteHostBlocksRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WriteHostBlocksRequest(const WriteHostBlocksRequest& from);
  WriteHostBlocksRequest(WriteHostBlocksRequest&& from) noexcept
    : WriteHostBlocksRequest() {
    *this = ::std::move(from);
  }

  inline WriteHostBlocksRequest& operator=(const WriteHostBlocksRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteHostBlocksRequest& operator=(WriteHostBlocksRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WriteHostBlocksRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WriteHostBlocksRequest* internal_default_instance() {
    return reinterpret_cast<const WriteHostBlocksRequest*>(
               &_WriteHostBlocksRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(WriteHostBlocksRequest& a, WriteHostBlocksRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteHostBlocksRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteHostBlocksRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriteHostBlocksRequest* New() const final {
    return CreateMaybeMessage<WriteHostBlocksRequest>(nullptr);
  }

  WriteHostBlocksRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriteHostBlocksRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WriteHostBlocksRequest& from);
  void MergeFrom(const WriteHostBlocksRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteHostBlocksRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pos_rpc.WriteHostBlocksRequest";
  }
  protected:
  explicit WriteHostBlocksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_pos_5frpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrayNameFieldNumber = 1,
    kVolumeNameFieldNumber = 2,
    kRbaFieldNumber = 3,
    kNumBlocksFieldNumber = 4,
    kLsnFieldNumber = 5,
  };
  // string array_name = 1;
  void clear_array_name();
  const std::string& array_name() const;
  void set_array_name(const std::string& value);
  void set_array_name(std::string&& value);
  void set_array_name(const char* value);
  void set_array_name(const char* value, size_t size);
  std::string* mutable_array_name();
  std::string* release_array_name();
  void set_allocated_array_name(std::string* array_name);
  private:
  const std::string& _internal_array_name() const;
  void _internal_set_array_name(const std::string& value);
  std::string* _internal_mutable_array_name();
  public:

  // string volume_name = 2;
  void clear_volume_name();
  const std::string& volume_name() const;
  void set_volume_name(const std::string& value);
  void set_volume_name(std::string&& value);
  void set_volume_name(const char* value);
  void set_volume_name(const char* value, size_t size);
  std::string* mutable_volume_name();
  std::string* release_volume_name();
  void set_allocated_volume_name(std::string* volume_name);
  private:
  const std::string& _internal_volume_name() const;
  void _internal_set_volume_name(const std::string& value);
  std::string* _internal_mutable_volume_name();
  public:

  // uint64 rba = 3;
  void clear_rba();
  ::PROTOBUF_NAMESPACE_ID::uint64 rba() const;
  void set_rba(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_rba() const;
  void _internal_set_rba(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 num_blocks = 4;
  void clear_num_blocks();
  ::PROTOBUF_NAMESPACE_ID::uint64 num_blocks() const;
  void set_num_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_num_blocks() const;
  void _internal_set_num_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 lsn = 5;
  void clear_lsn();
  ::PROTOBUF_NAMESPACE_ID::uint64 lsn() const;
  void set_lsn(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lsn() const;
  void _internal_set_lsn(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:pos_rpc.WriteHostBlocksRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr array_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr volume_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 rba_;
  ::PROTOBUF_NAMESPACE_ID::uint64 num_blocks_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lsn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pos_5frpc_2eproto;
};
// -------------------------------------------------------------------

class WriteHostBlocksResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pos_rpc.WriteHostBlocksResponse) */ {
 public:
  inline WriteHostBlocksResponse() : WriteHostBlocksResponse(nullptr) {}
  virtual ~WriteHostBlocksResponse();
  explicit constexpr WriteHostBlocksResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WriteHostBlocksResponse(const WriteHostBlocksResponse& from);
  WriteHostBlocksResponse(WriteHostBlocksResponse&& from) noexcept
    : WriteHostBlocksResponse() {
    *this = ::std::move(from);
  }

  inline WriteHostBlocksResponse& operator=(const WriteHostBlocksResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteHostBlocksResponse& operator=(WriteHostBlocksResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WriteHostBlocksResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WriteHostBlocksResponse* internal_default_instance() {
    return reinterpret_cast<const WriteHostBlocksResponse*>(
               &_WriteHostBlocksResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(WriteHostBlocksResponse& a, WriteHostBlocksResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteHostBlocksResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteHostBlocksResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriteHostBlocksResponse* New() const final {
    return CreateMaybeMessage<WriteHostBlocksResponse>(nullptr);
  }

  WriteHostBlocksResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriteHostBlocksResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WriteHostBlocksResponse& from);
  void MergeFrom(const WriteHostBlocksResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteHostBlocksResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pos_rpc.WriteHostBlocksResponse";
  }
  protected:
  explicit WriteHostBlocksResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_pos_5frpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string reason = 2;
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // .pos_rpc.PosResult result = 1;
  void clear_result();
  ::pos_rpc::PosResult result() const;
  void set_result(::pos_rpc::PosResult value);
  private:
  ::pos_rpc::PosResult _internal_result() const;
  void _internal_set_result(::pos_rpc::PosResult value);
  public:

  // @@protoc_insertion_point(class_scope:pos_rpc.WriteHostBlocksResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  int result_;
  friend struct ::TableStruct_pos_5frpc_2eproto;
};
// -------------------------------------------------------------------

class CompleteHostWriteRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pos_rpc.CompleteHostWriteRequest) */ {
 public:
  inline CompleteHostWriteRequest() : CompleteHostWriteRequest(nullptr) {}
  virtual ~CompleteHostWriteRequest();
  explicit constexpr CompleteHostWriteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CompleteHostWriteRequest(const CompleteHostWriteRequest& from);
  CompleteHostWriteRequest(CompleteHostWriteRequest&& from) noexcept
    : CompleteHostWriteRequest() {
    *this = ::std::move(from);
  }

  inline CompleteHostWriteRequest& operator=(const CompleteHostWriteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompleteHostWriteRequest& operator=(CompleteHostWriteRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CompleteHostWriteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompleteHostWriteRequest* internal_default_instance() {
    return reinterpret_cast<const CompleteHostWriteRequest*>(
               &_CompleteHostWriteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CompleteHostWriteRequest& a, CompleteHostWriteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CompleteHostWriteRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompleteHostWriteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompleteHostWriteRequest* New() const final {
    return CreateMaybeMessage<CompleteHostWriteRequest>(nullptr);
  }

  CompleteHostWriteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompleteHostWriteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CompleteHostWriteRequest& from);
  void MergeFrom(const CompleteHostWriteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompleteHostWriteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pos_rpc.CompleteHostWriteRequest";
  }
  protected:
  explicit CompleteHostWriteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_pos_5frpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrayNameFieldNumber = 1,
    kVolumeNameFieldNumber = 2,
    kLsnFieldNumber = 3,
  };
  // string array_name = 1;
  void clear_array_name();
  const std::string& array_name() const;
  void set_array_name(const std::string& value);
  void set_array_name(std::string&& value);
  void set_array_name(const char* value);
  void set_array_name(const char* value, size_t size);
  std::string* mutable_array_name();
  std::string* release_array_name();
  void set_allocated_array_name(std::string* array_name);
  private:
  const std::string& _internal_array_name() const;
  void _internal_set_array_name(const std::string& value);
  std::string* _internal_mutable_array_name();
  public:

  // string volume_name = 2;
  void clear_volume_name();
  const std::string& volume_name() const;
  void set_volume_name(const std::string& value);
  void set_volume_name(std::string&& value);
  void set_volume_name(const char* value);
  void set_volume_name(const char* value, size_t size);
  std::string* mutable_volume_name();
  std::string* release_volume_name();
  void set_allocated_volume_name(std::string* volume_name);
  private:
  const std::string& _internal_volume_name() const;
  void _internal_set_volume_name(const std::string& value);
  std::string* _internal_mutable_volume_name();
  public:

  // uint64 lsn = 3;
  void clear_lsn();
  ::PROTOBUF_NAMESPACE_ID::uint64 lsn() const;
  void set_lsn(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lsn() const;
  void _internal_set_lsn(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:pos_rpc.CompleteHostWriteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr array_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr volume_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lsn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pos_5frpc_2eproto;
};
// -------------------------------------------------------------------

class CompleteHostWriteResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pos_rpc.CompleteHostWriteResponse) */ {
 public:
  inline CompleteHostWriteResponse() : CompleteHostWriteResponse(nullptr) {}
  virtual ~CompleteHostWriteResponse();
  explicit constexpr CompleteHostWriteResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CompleteHostWriteResponse(const CompleteHostWriteResponse& from);
  CompleteHostWriteResponse(CompleteHostWriteResponse&& from) noexcept
    : CompleteHostWriteResponse() {
    *this = ::std::move(from);
  }

  inline CompleteHostWriteResponse& operator=(const CompleteHostWriteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompleteHostWriteResponse& operator=(CompleteHostWriteResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CompleteHostWriteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompleteHostWriteResponse* internal_default_instance() {
    return reinterpret_cast<const CompleteHostWriteResponse*>(
               &_CompleteHostWriteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CompleteHostWriteResponse& a, CompleteHostWriteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CompleteHostWriteResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompleteHostWriteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompleteHostWriteResponse* New() const final {
    return CreateMaybeMessage<CompleteHostWriteResponse>(nullptr);
  }

  CompleteHostWriteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompleteHostWriteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CompleteHostWriteResponse& from);
  void MergeFrom(const CompleteHostWriteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompleteHostWriteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pos_rpc.CompleteHostWriteResponse";
  }
  protected:
  explicit CompleteHostWriteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_pos_5frpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string reason = 2;
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // .pos_rpc.PosResult result = 1;
  void clear_result();
  ::pos_rpc::PosResult result() const;
  void set_result(::pos_rpc::PosResult value);
  private:
  ::pos_rpc::PosResult _internal_result() const;
  void _internal_set_result(::pos_rpc::PosResult value);
  public:

  // @@protoc_insertion_point(class_scope:pos_rpc.CompleteHostWriteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  int result_;
  friend struct ::TableStruct_pos_5frpc_2eproto;
};
// -------------------------------------------------------------------

class StartVolumeSyncRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pos_rpc.StartVolumeSyncRequest) */ {
 public:
  inline StartVolumeSyncRequest() : StartVolumeSyncRequest(nullptr) {}
  virtual ~StartVolumeSyncRequest();
  explicit constexpr StartVolumeSyncRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartVolumeSyncRequest(const StartVolumeSyncRequest& from);
  StartVolumeSyncRequest(StartVolumeSyncRequest&& from) noexcept
    : StartVolumeSyncRequest() {
    *this = ::std::move(from);
  }

  inline StartVolumeSyncRequest& operator=(const StartVolumeSyncRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartVolumeSyncRequest& operator=(StartVolumeSyncRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartVolumeSyncRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartVolumeSyncRequest* internal_default_instance() {
    return reinterpret_cast<const StartVolumeSyncRequest*>(
               &_StartVolumeSyncRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(StartVolumeSyncRequest& a, StartVolumeSyncRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartVolumeSyncRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartVolumeSyncRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartVolumeSyncRequest* New() const final {
    return CreateMaybeMessage<StartVolumeSyncRequest>(nullptr);
  }

  StartVolumeSyncRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartVolumeSyncRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartVolumeSyncRequest& from);
  void MergeFrom(const StartVolumeSyncRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartVolumeSyncRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pos_rpc.StartVolumeSyncRequest";
  }
  protected:
  explicit StartVolumeSyncRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_pos_5frpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrayNameFieldNumber = 1,
    kVolumeNameFieldNumber = 2,
    kIsPrimaryFieldNumber = 3,
  };
  // string array_name = 1;
  void clear_array_name();
  const std::string& array_name() const;
  void set_array_name(const std::string& value);
  void set_array_name(std::string&& value);
  void set_array_name(const char* value);
  void set_array_name(const char* value, size_t size);
  std::string* mutable_array_name();
  std::string* release_array_name();
  void set_allocated_array_name(std::string* array_name);
  private:
  const std::string& _internal_array_name() const;
  void _internal_set_array_name(const std::string& value);
  std::string* _internal_mutable_array_name();
  public:

  // string volume_name = 2;
  void clear_volume_name();
  const std::string& volume_name() const;
  void set_volume_name(const std::string& value);
  void set_volume_name(std::string&& value);
  void set_volume_name(const char* value);
  void set_volume_name(const char* value, size_t size);
  std::string* mutable_volume_name();
  std::string* release_volume_name();
  void set_allocated_volume_name(std::string* volume_name);
  private:
  const std::string& _internal_volume_name() const;
  void _internal_set_volume_name(const std::string& value);
  std::string* _internal_mutable_volume_name();
  public:

  // bool is_primary = 3;
  void clear_is_primary();
  bool is_primary() const;
  void set_is_primary(bool value);
  private:
  bool _internal_is_primary() const;
  void _internal_set_is_primary(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pos_rpc.StartVolumeSyncRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr array_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr volume_name_;
  bool is_primary_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pos_5frpc_2eproto;
};
// -------------------------------------------------------------------

class StartVolumeSyncResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pos_rpc.StartVolumeSyncResponse) */ {
 public:
  inline StartVolumeSyncResponse() : StartVolumeSyncResponse(nullptr) {}
  virtual ~StartVolumeSyncResponse();
  explicit constexpr StartVolumeSyncResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartVolumeSyncResponse(const StartVolumeSyncResponse& from);
  StartVolumeSyncResponse(StartVolumeSyncResponse&& from) noexcept
    : StartVolumeSyncResponse() {
    *this = ::std::move(from);
  }

  inline StartVolumeSyncResponse& operator=(const StartVolumeSyncResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartVolumeSyncResponse& operator=(StartVolumeSyncResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartVolumeSyncResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartVolumeSyncResponse* internal_default_instance() {
    return reinterpret_cast<const StartVolumeSyncResponse*>(
               &_StartVolumeSyncResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(StartVolumeSyncResponse& a, StartVolumeSyncResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StartVolumeSyncResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartVolumeSyncResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartVolumeSyncResponse* New() const final {
    return CreateMaybeMessage<StartVolumeSyncResponse>(nullptr);
  }

  StartVolumeSyncResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartVolumeSyncResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartVolumeSyncResponse& from);
  void MergeFrom(const StartVolumeSyncResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartVolumeSyncResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pos_rpc.StartVolumeSyncResponse";
  }
  protected:
  explicit StartVolumeSyncResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_pos_5frpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string reason = 2;
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // .pos_rpc.PosResult result = 1;
  void clear_result();
  ::pos_rpc::PosResult result() const;
  void set_result(::pos_rpc::PosResult value);
  private:
  ::pos_rpc::PosResult _internal_result() const;
  void _internal_set_result(::pos_rpc::PosResult value);
  public:

  // @@protoc_insertion_point(class_scope:pos_rpc.StartVolumeSyncResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  int result_;
  friend struct ::TableStruct_pos_5frpc_2eproto;
};
// -------------------------------------------------------------------

class FinishVolumeSyncRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pos_rpc.FinishVolumeSyncRequest) */ {
 public:
  inline FinishVolumeSyncRequest() : FinishVolumeSyncRequest(nullptr) {}
  virtual ~FinishVolumeSyncRequest();
  explicit constexpr FinishVolumeSyncRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FinishVolumeSyncRequest(const FinishVolumeSyncRequest& from);
  FinishVolumeSyncRequest(FinishVolumeSyncRequest&& from) noexcept
    : FinishVolumeSyncRequest() {
    *this = ::std::move(from);
  }

  inline FinishVolumeSyncRequest& operator=(const FinishVolumeSyncRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FinishVolumeSyncRequest& operator=(FinishVolumeSyncRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FinishVolumeSyncRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FinishVolumeSyncRequest* internal_default_instance() {
    return reinterpret_cast<const FinishVolumeSyncRequest*>(
               &_FinishVolumeSyncRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(FinishVolumeSyncRequest& a, FinishVolumeSyncRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FinishVolumeSyncRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FinishVolumeSyncRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FinishVolumeSyncRequest* New() const final {
    return CreateMaybeMessage<FinishVolumeSyncRequest>(nullptr);
  }

  FinishVolumeSyncRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FinishVolumeSyncRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FinishVolumeSyncRequest& from);
  void MergeFrom(const FinishVolumeSyncRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FinishVolumeSyncRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pos_rpc.FinishVolumeSyncRequest";
  }
  protected:
  explicit FinishVolumeSyncRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_pos_5frpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrayNameFieldNumber = 1,
    kVolumeNameFieldNumber = 2,
    kIsPrimaryFieldNumber = 3,
  };
  // string array_name = 1;
  void clear_array_name();
  const std::string& array_name() const;
  void set_array_name(const std::string& value);
  void set_array_name(std::string&& value);
  void set_array_name(const char* value);
  void set_array_name(const char* value, size_t size);
  std::string* mutable_array_name();
  std::string* release_array_name();
  void set_allocated_array_name(std::string* array_name);
  private:
  const std::string& _internal_array_name() const;
  void _internal_set_array_name(const std::string& value);
  std::string* _internal_mutable_array_name();
  public:

  // string volume_name = 2;
  void clear_volume_name();
  const std::string& volume_name() const;
  void set_volume_name(const std::string& value);
  void set_volume_name(std::string&& value);
  void set_volume_name(const char* value);
  void set_volume_name(const char* value, size_t size);
  std::string* mutable_volume_name();
  std::string* release_volume_name();
  void set_allocated_volume_name(std::string* volume_name);
  private:
  const std::string& _internal_volume_name() const;
  void _internal_set_volume_name(const std::string& value);
  std::string* _internal_mutable_volume_name();
  public:

  // bool is_primary = 3;
  void clear_is_primary();
  bool is_primary() const;
  void set_is_primary(bool value);
  private:
  bool _internal_is_primary() const;
  void _internal_set_is_primary(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pos_rpc.FinishVolumeSyncRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr array_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr volume_name_;
  bool is_primary_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pos_5frpc_2eproto;
};
// -------------------------------------------------------------------

class FinishVolumeSyncResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pos_rpc.FinishVolumeSyncResponse) */ {
 public:
  inline FinishVolumeSyncResponse() : FinishVolumeSyncResponse(nullptr) {}
  virtual ~FinishVolumeSyncResponse();
  explicit constexpr FinishVolumeSyncResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FinishVolumeSyncResponse(const FinishVolumeSyncResponse& from);
  FinishVolumeSyncResponse(FinishVolumeSyncResponse&& from) noexcept
    : FinishVolumeSyncResponse() {
    *this = ::std::move(from);
  }

  inline FinishVolumeSyncResponse& operator=(const FinishVolumeSyncResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FinishVolumeSyncResponse& operator=(FinishVolumeSyncResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FinishVolumeSyncResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FinishVolumeSyncResponse* internal_default_instance() {
    return reinterpret_cast<const FinishVolumeSyncResponse*>(
               &_FinishVolumeSyncResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(FinishVolumeSyncResponse& a, FinishVolumeSyncResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FinishVolumeSyncResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FinishVolumeSyncResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FinishVolumeSyncResponse* New() const final {
    return CreateMaybeMessage<FinishVolumeSyncResponse>(nullptr);
  }

  FinishVolumeSyncResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FinishVolumeSyncResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FinishVolumeSyncResponse& from);
  void MergeFrom(const FinishVolumeSyncResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FinishVolumeSyncResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pos_rpc.FinishVolumeSyncResponse";
  }
  protected:
  explicit FinishVolumeSyncResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_pos_5frpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string reason = 2;
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // .pos_rpc.PosResult result = 1;
  void clear_result();
  ::pos_rpc::PosResult result() const;
  void set_result(::pos_rpc::PosResult value);
  private:
  ::pos_rpc::PosResult _internal_result() const;
  void _internal_set_result(::pos_rpc::PosResult value);
  public:

  // @@protoc_insertion_point(class_scope:pos_rpc.FinishVolumeSyncResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  int result_;
  friend struct ::TableStruct_pos_5frpc_2eproto;
};
// -------------------------------------------------------------------

class SuspendWriteRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pos_rpc.SuspendWriteRequest) */ {
 public:
  inline SuspendWriteRequest() : SuspendWriteRequest(nullptr) {}
  virtual ~SuspendWriteRequest();
  explicit constexpr SuspendWriteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SuspendWriteRequest(const SuspendWriteRequest& from);
  SuspendWriteRequest(SuspendWriteRequest&& from) noexcept
    : SuspendWriteRequest() {
    *this = ::std::move(from);
  }

  inline SuspendWriteRequest& operator=(const SuspendWriteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SuspendWriteRequest& operator=(SuspendWriteRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SuspendWriteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SuspendWriteRequest* internal_default_instance() {
    return reinterpret_cast<const SuspendWriteRequest*>(
               &_SuspendWriteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(SuspendWriteRequest& a, SuspendWriteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SuspendWriteRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SuspendWriteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SuspendWriteRequest* New() const final {
    return CreateMaybeMessage<SuspendWriteRequest>(nullptr);
  }

  SuspendWriteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SuspendWriteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SuspendWriteRequest& from);
  void MergeFrom(const SuspendWriteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SuspendWriteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pos_rpc.SuspendWriteRequest";
  }
  protected:
  explicit SuspendWriteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_pos_5frpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrayNameFieldNumber = 1,
    kVolumeNameFieldNumber = 2,
  };
  // string array_name = 1;
  void clear_array_name();
  const std::string& array_name() const;
  void set_array_name(const std::string& value);
  void set_array_name(std::string&& value);
  void set_array_name(const char* value);
  void set_array_name(const char* value, size_t size);
  std::string* mutable_array_name();
  std::string* release_array_name();
  void set_allocated_array_name(std::string* array_name);
  private:
  const std::string& _internal_array_name() const;
  void _internal_set_array_name(const std::string& value);
  std::string* _internal_mutable_array_name();
  public:

  // string volume_name = 2;
  void clear_volume_name();
  const std::string& volume_name() const;
  void set_volume_name(const std::string& value);
  void set_volume_name(std::string&& value);
  void set_volume_name(const char* value);
  void set_volume_name(const char* value, size_t size);
  std::string* mutable_volume_name();
  std::string* release_volume_name();
  void set_allocated_volume_name(std::string* volume_name);
  private:
  const std::string& _internal_volume_name() const;
  void _internal_set_volume_name(const std::string& value);
  std::string* _internal_mutable_volume_name();
  public:

  // @@protoc_insertion_point(class_scope:pos_rpc.SuspendWriteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr array_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr volume_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pos_5frpc_2eproto;
};
// -------------------------------------------------------------------

class SuspendWriteResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pos_rpc.SuspendWriteResponse) */ {
 public:
  inline SuspendWriteResponse() : SuspendWriteResponse(nullptr) {}
  virtual ~SuspendWriteResponse();
  explicit constexpr SuspendWriteResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SuspendWriteResponse(const SuspendWriteResponse& from);
  SuspendWriteResponse(SuspendWriteResponse&& from) noexcept
    : SuspendWriteResponse() {
    *this = ::std::move(from);
  }

  inline SuspendWriteResponse& operator=(const SuspendWriteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SuspendWriteResponse& operator=(SuspendWriteResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SuspendWriteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SuspendWriteResponse* internal_default_instance() {
    return reinterpret_cast<const SuspendWriteResponse*>(
               &_SuspendWriteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(SuspendWriteResponse& a, SuspendWriteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SuspendWriteResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SuspendWriteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SuspendWriteResponse* New() const final {
    return CreateMaybeMessage<SuspendWriteResponse>(nullptr);
  }

  SuspendWriteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SuspendWriteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SuspendWriteResponse& from);
  void MergeFrom(const SuspendWriteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SuspendWriteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pos_rpc.SuspendWriteResponse";
  }
  protected:
  explicit SuspendWriteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_pos_5frpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string reason = 2;
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // .pos_rpc.PosResult result = 1;
  void clear_result();
  ::pos_rpc::PosResult result() const;
  void set_result(::pos_rpc::PosResult value);
  private:
  ::pos_rpc::PosResult _internal_result() const;
  void _internal_set_result(::pos_rpc::PosResult value);
  public:

  // @@protoc_insertion_point(class_scope:pos_rpc.SuspendWriteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  int result_;
  friend struct ::TableStruct_pos_5frpc_2eproto;
};
// -------------------------------------------------------------------

class ResumeWriteRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pos_rpc.ResumeWriteRequest) */ {
 public:
  inline ResumeWriteRequest() : ResumeWriteRequest(nullptr) {}
  virtual ~ResumeWriteRequest();
  explicit constexpr ResumeWriteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResumeWriteRequest(const ResumeWriteRequest& from);
  ResumeWriteRequest(ResumeWriteRequest&& from) noexcept
    : ResumeWriteRequest() {
    *this = ::std::move(from);
  }

  inline ResumeWriteRequest& operator=(const ResumeWriteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResumeWriteRequest& operator=(ResumeWriteRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResumeWriteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResumeWriteRequest* internal_default_instance() {
    return reinterpret_cast<const ResumeWriteRequest*>(
               &_ResumeWriteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(ResumeWriteRequest& a, ResumeWriteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ResumeWriteRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResumeWriteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResumeWriteRequest* New() const final {
    return CreateMaybeMessage<ResumeWriteRequest>(nullptr);
  }

  ResumeWriteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResumeWriteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResumeWriteRequest& from);
  void MergeFrom(const ResumeWriteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResumeWriteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pos_rpc.ResumeWriteRequest";
  }
  protected:
  explicit ResumeWriteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_pos_5frpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrayNameFieldNumber = 1,
    kVolumeNameFieldNumber = 2,
  };
  // string array_name = 1;
  void clear_array_name();
  const std::string& array_name() const;
  void set_array_name(const std::string& value);
  void set_array_name(std::string&& value);
  void set_array_name(const char* value);
  void set_array_name(const char* value, size_t size);
  std::string* mutable_array_name();
  std::string* release_array_name();
  void set_allocated_array_name(std::string* array_name);
  private:
  const std::string& _internal_array_name() const;
  void _internal_set_array_name(const std::string& value);
  std::string* _internal_mutable_array_name();
  public:

  // string volume_name = 2;
  void clear_volume_name();
  const std::string& volume_name() const;
  void set_volume_name(const std::string& value);
  void set_volume_name(std::string&& value);
  void set_volume_name(const char* value);
  void set_volume_name(const char* value, size_t size);
  std::string* mutable_volume_name();
  std::string* release_volume_name();
  void set_allocated_volume_name(std::string* volume_name);
  private:
  const std::string& _internal_volume_name() const;
  void _internal_set_volume_name(const std::string& value);
  std::string* _internal_mutable_volume_name();
  public:

  // @@protoc_insertion_point(class_scope:pos_rpc.ResumeWriteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr array_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr volume_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pos_5frpc_2eproto;
};
// -------------------------------------------------------------------

class ResumeWriteResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pos_rpc.ResumeWriteResponse) */ {
 public:
  inline ResumeWriteResponse() : ResumeWriteResponse(nullptr) {}
  virtual ~ResumeWriteResponse();
  explicit constexpr ResumeWriteResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResumeWriteResponse(const ResumeWriteResponse& from);
  ResumeWriteResponse(ResumeWriteResponse&& from) noexcept
    : ResumeWriteResponse() {
    *this = ::std::move(from);
  }

  inline ResumeWriteResponse& operator=(const ResumeWriteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResumeWriteResponse& operator=(ResumeWriteResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResumeWriteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResumeWriteResponse* internal_default_instance() {
    return reinterpret_cast<const ResumeWriteResponse*>(
               &_ResumeWriteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(ResumeWriteResponse& a, ResumeWriteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ResumeWriteResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResumeWriteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResumeWriteResponse* New() const final {
    return CreateMaybeMessage<ResumeWriteResponse>(nullptr);
  }

  ResumeWriteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResumeWriteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResumeWriteResponse& from);
  void MergeFrom(const ResumeWriteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResumeWriteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pos_rpc.ResumeWriteResponse";
  }
  protected:
  explicit ResumeWriteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_pos_5frpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string reason = 2;
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // .pos_rpc.PosResult result = 1;
  void clear_result();
  ::pos_rpc::PosResult result() const;
  void set_result(::pos_rpc::PosResult value);
  private:
  ::pos_rpc::PosResult _internal_result() const;
  void _internal_set_result(::pos_rpc::PosResult value);
  public:

  // @@protoc_insertion_point(class_scope:pos_rpc.ResumeWriteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  int result_;
  friend struct ::TableStruct_pos_5frpc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HealthCheckRequest

// -------------------------------------------------------------------

// HealthCheckResponse

// .pos_rpc.HealthCheckResponse.ServingStatus status = 1;
inline void HealthCheckResponse::clear_status() {
  status_ = 0;
}
inline ::pos_rpc::HealthCheckResponse_ServingStatus HealthCheckResponse::_internal_status() const {
  return static_cast< ::pos_rpc::HealthCheckResponse_ServingStatus >(status_);
}
inline ::pos_rpc::HealthCheckResponse_ServingStatus HealthCheckResponse::status() const {
  // @@protoc_insertion_point(field_get:pos_rpc.HealthCheckResponse.status)
  return _internal_status();
}
inline void HealthCheckResponse::_internal_set_status(::pos_rpc::HealthCheckResponse_ServingStatus value) {
  
  status_ = value;
}
inline void HealthCheckResponse::set_status(::pos_rpc::HealthCheckResponse_ServingStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:pos_rpc.HealthCheckResponse.status)
}

// string reason = 2;
inline bool HealthCheckResponse::_internal_has_reason() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HealthCheckResponse::has_reason() const {
  return _internal_has_reason();
}
inline void HealthCheckResponse::clear_reason() {
  reason_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HealthCheckResponse::reason() const {
  // @@protoc_insertion_point(field_get:pos_rpc.HealthCheckResponse.reason)
  return _internal_reason();
}
inline void HealthCheckResponse::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:pos_rpc.HealthCheckResponse.reason)
}
inline std::string* HealthCheckResponse::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:pos_rpc.HealthCheckResponse.reason)
  return _internal_mutable_reason();
}
inline const std::string& HealthCheckResponse::_internal_reason() const {
  return reason_.Get();
}
inline void HealthCheckResponse::_internal_set_reason(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void HealthCheckResponse::set_reason(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pos_rpc.HealthCheckResponse.reason)
}
inline void HealthCheckResponse::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pos_rpc.HealthCheckResponse.reason)
}
inline void HealthCheckResponse::set_reason(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pos_rpc.HealthCheckResponse.reason)
}
inline std::string* HealthCheckResponse::_internal_mutable_reason() {
  _has_bits_[0] |= 0x00000001u;
  return reason_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* HealthCheckResponse::release_reason() {
  // @@protoc_insertion_point(field_release:pos_rpc.HealthCheckResponse.reason)
  if (!_internal_has_reason()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return reason_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HealthCheckResponse::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pos_rpc.HealthCheckResponse.reason)
}

// -------------------------------------------------------------------

// CreateArrayRequest

// string array_name = 1;
inline void CreateArrayRequest::clear_array_name() {
  array_name_.ClearToEmpty();
}
inline const std::string& CreateArrayRequest::array_name() const {
  // @@protoc_insertion_point(field_get:pos_rpc.CreateArrayRequest.array_name)
  return _internal_array_name();
}
inline void CreateArrayRequest::set_array_name(const std::string& value) {
  _internal_set_array_name(value);
  // @@protoc_insertion_point(field_set:pos_rpc.CreateArrayRequest.array_name)
}
inline std::string* CreateArrayRequest::mutable_array_name() {
  // @@protoc_insertion_point(field_mutable:pos_rpc.CreateArrayRequest.array_name)
  return _internal_mutable_array_name();
}
inline const std::string& CreateArrayRequest::_internal_array_name() const {
  return array_name_.Get();
}
inline void CreateArrayRequest::_internal_set_array_name(const std::string& value) {
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateArrayRequest::set_array_name(std::string&& value) {
  
  array_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pos_rpc.CreateArrayRequest.array_name)
}
inline void CreateArrayRequest::set_array_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pos_rpc.CreateArrayRequest.array_name)
}
inline void CreateArrayRequest::set_array_name(const char* value,
    size_t size) {
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pos_rpc.CreateArrayRequest.array_name)
}
inline std::string* CreateArrayRequest::_internal_mutable_array_name() {
  
  return array_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateArrayRequest::release_array_name() {
  // @@protoc_insertion_point(field_release:pos_rpc.CreateArrayRequest.array_name)
  return array_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateArrayRequest::set_allocated_array_name(std::string* array_name) {
  if (array_name != nullptr) {
    
  } else {
    
  }
  array_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), array_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pos_rpc.CreateArrayRequest.array_name)
}

// uint64 capacity = 2;
inline void CreateArrayRequest::clear_capacity() {
  capacity_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateArrayRequest::_internal_capacity() const {
  return capacity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateArrayRequest::capacity() const {
  // @@protoc_insertion_point(field_get:pos_rpc.CreateArrayRequest.capacity)
  return _internal_capacity();
}
inline void CreateArrayRequest::_internal_set_capacity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  capacity_ = value;
}
inline void CreateArrayRequest::set_capacity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_capacity(value);
  // @@protoc_insertion_point(field_set:pos_rpc.CreateArrayRequest.capacity)
}

// -------------------------------------------------------------------

// DeleteArrayRequest

// string array_name = 1;
inline void DeleteArrayRequest::clear_array_name() {
  array_name_.ClearToEmpty();
}
inline const std::string& DeleteArrayRequest::array_name() const {
  // @@protoc_insertion_point(field_get:pos_rpc.DeleteArrayRequest.array_name)
  return _internal_array_name();
}
inline void DeleteArrayRequest::set_array_name(const std::string& value) {
  _internal_set_array_name(value);
  // @@protoc_insertion_point(field_set:pos_rpc.DeleteArrayRequest.array_name)
}
inline std::string* DeleteArrayRequest::mutable_array_name() {
  // @@protoc_insertion_point(field_mutable:pos_rpc.DeleteArrayRequest.array_name)
  return _internal_mutable_array_name();
}
inline const std::string& DeleteArrayRequest::_internal_array_name() const {
  return array_name_.Get();
}
inline void DeleteArrayRequest::_internal_set_array_name(const std::string& value) {
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteArrayRequest::set_array_name(std::string&& value) {
  
  array_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pos_rpc.DeleteArrayRequest.array_name)
}
inline void DeleteArrayRequest::set_array_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pos_rpc.DeleteArrayRequest.array_name)
}
inline void DeleteArrayRequest::set_array_name(const char* value,
    size_t size) {
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pos_rpc.DeleteArrayRequest.array_name)
}
inline std::string* DeleteArrayRequest::_internal_mutable_array_name() {
  
  return array_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteArrayRequest::release_array_name() {
  // @@protoc_insertion_point(field_release:pos_rpc.DeleteArrayRequest.array_name)
  return array_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteArrayRequest::set_allocated_array_name(std::string* array_name) {
  if (array_name != nullptr) {
    
  } else {
    
  }
  array_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), array_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pos_rpc.DeleteArrayRequest.array_name)
}

// -------------------------------------------------------------------

// CreateVolumeRequest

// string array_name = 1;
inline void CreateVolumeRequest::clear_array_name() {
  array_name_.ClearToEmpty();
}
inline const std::string& CreateVolumeRequest::array_name() const {
  // @@protoc_insertion_point(field_get:pos_rpc.CreateVolumeRequest.array_name)
  return _internal_array_name();
}
inline void CreateVolumeRequest::set_array_name(const std::string& value) {
  _internal_set_array_name(value);
  // @@protoc_insertion_point(field_set:pos_rpc.CreateVolumeRequest.array_name)
}
inline std::string* CreateVolumeRequest::mutable_array_name() {
  // @@protoc_insertion_point(field_mutable:pos_rpc.CreateVolumeRequest.array_name)
  return _internal_mutable_array_name();
}
inline const std::string& CreateVolumeRequest::_internal_array_name() const {
  return array_name_.Get();
}
inline void CreateVolumeRequest::_internal_set_array_name(const std::string& value) {
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateVolumeRequest::set_array_name(std::string&& value) {
  
  array_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pos_rpc.CreateVolumeRequest.array_name)
}
inline void CreateVolumeRequest::set_array_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pos_rpc.CreateVolumeRequest.array_name)
}
inline void CreateVolumeRequest::set_array_name(const char* value,
    size_t size) {
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pos_rpc.CreateVolumeRequest.array_name)
}
inline std::string* CreateVolumeRequest::_internal_mutable_array_name() {
  
  return array_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateVolumeRequest::release_array_name() {
  // @@protoc_insertion_point(field_release:pos_rpc.CreateVolumeRequest.array_name)
  return array_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateVolumeRequest::set_allocated_array_name(std::string* array_name) {
  if (array_name != nullptr) {
    
  } else {
    
  }
  array_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), array_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pos_rpc.CreateVolumeRequest.array_name)
}

// string volume_name = 2;
inline void CreateVolumeRequest::clear_volume_name() {
  volume_name_.ClearToEmpty();
}
inline const std::string& CreateVolumeRequest::volume_name() const {
  // @@protoc_insertion_point(field_get:pos_rpc.CreateVolumeRequest.volume_name)
  return _internal_volume_name();
}
inline void CreateVolumeRequest::set_volume_name(const std::string& value) {
  _internal_set_volume_name(value);
  // @@protoc_insertion_point(field_set:pos_rpc.CreateVolumeRequest.volume_name)
}
inline std::string* CreateVolumeRequest::mutable_volume_name() {
  // @@protoc_insertion_point(field_mutable:pos_rpc.CreateVolumeRequest.volume_name)
  return _internal_mutable_volume_name();
}
inline const std::string& CreateVolumeRequest::_internal_volume_name() const {
  return volume_name_.Get();
}
inline void CreateVolumeRequest::_internal_set_volume_name(const std::string& value) {
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateVolumeRequest::set_volume_name(std::string&& value) {
  
  volume_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pos_rpc.CreateVolumeRequest.volume_name)
}
inline void CreateVolumeRequest::set_volume_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pos_rpc.CreateVolumeRequest.volume_name)
}
inline void CreateVolumeRequest::set_volume_name(const char* value,
    size_t size) {
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pos_rpc.CreateVolumeRequest.volume_name)
}
inline std::string* CreateVolumeRequest::_internal_mutable_volume_name() {
  
  return volume_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateVolumeRequest::release_volume_name() {
  // @@protoc_insertion_point(field_release:pos_rpc.CreateVolumeRequest.volume_name)
  return volume_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateVolumeRequest::set_allocated_volume_name(std::string* volume_name) {
  if (volume_name != nullptr) {
    
  } else {
    
  }
  volume_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), volume_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pos_rpc.CreateVolumeRequest.volume_name)
}

// uint64 capacity = 3;
inline void CreateVolumeRequest::clear_capacity() {
  capacity_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateVolumeRequest::_internal_capacity() const {
  return capacity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateVolumeRequest::capacity() const {
  // @@protoc_insertion_point(field_get:pos_rpc.CreateVolumeRequest.capacity)
  return _internal_capacity();
}
inline void CreateVolumeRequest::_internal_set_capacity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  capacity_ = value;
}
inline void CreateVolumeRequest::set_capacity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_capacity(value);
  // @@protoc_insertion_point(field_set:pos_rpc.CreateVolumeRequest.capacity)
}

// -------------------------------------------------------------------

// DeleteVolumeRequest

// string array_name = 1;
inline void DeleteVolumeRequest::clear_array_name() {
  array_name_.ClearToEmpty();
}
inline const std::string& DeleteVolumeRequest::array_name() const {
  // @@protoc_insertion_point(field_get:pos_rpc.DeleteVolumeRequest.array_name)
  return _internal_array_name();
}
inline void DeleteVolumeRequest::set_array_name(const std::string& value) {
  _internal_set_array_name(value);
  // @@protoc_insertion_point(field_set:pos_rpc.DeleteVolumeRequest.array_name)
}
inline std::string* DeleteVolumeRequest::mutable_array_name() {
  // @@protoc_insertion_point(field_mutable:pos_rpc.DeleteVolumeRequest.array_name)
  return _internal_mutable_array_name();
}
inline const std::string& DeleteVolumeRequest::_internal_array_name() const {
  return array_name_.Get();
}
inline void DeleteVolumeRequest::_internal_set_array_name(const std::string& value) {
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteVolumeRequest::set_array_name(std::string&& value) {
  
  array_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pos_rpc.DeleteVolumeRequest.array_name)
}
inline void DeleteVolumeRequest::set_array_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pos_rpc.DeleteVolumeRequest.array_name)
}
inline void DeleteVolumeRequest::set_array_name(const char* value,
    size_t size) {
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pos_rpc.DeleteVolumeRequest.array_name)
}
inline std::string* DeleteVolumeRequest::_internal_mutable_array_name() {
  
  return array_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteVolumeRequest::release_array_name() {
  // @@protoc_insertion_point(field_release:pos_rpc.DeleteVolumeRequest.array_name)
  return array_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteVolumeRequest::set_allocated_array_name(std::string* array_name) {
  if (array_name != nullptr) {
    
  } else {
    
  }
  array_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), array_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pos_rpc.DeleteVolumeRequest.array_name)
}

// string volume_name = 2;
inline void DeleteVolumeRequest::clear_volume_name() {
  volume_name_.ClearToEmpty();
}
inline const std::string& DeleteVolumeRequest::volume_name() const {
  // @@protoc_insertion_point(field_get:pos_rpc.DeleteVolumeRequest.volume_name)
  return _internal_volume_name();
}
inline void DeleteVolumeRequest::set_volume_name(const std::string& value) {
  _internal_set_volume_name(value);
  // @@protoc_insertion_point(field_set:pos_rpc.DeleteVolumeRequest.volume_name)
}
inline std::string* DeleteVolumeRequest::mutable_volume_name() {
  // @@protoc_insertion_point(field_mutable:pos_rpc.DeleteVolumeRequest.volume_name)
  return _internal_mutable_volume_name();
}
inline const std::string& DeleteVolumeRequest::_internal_volume_name() const {
  return volume_name_.Get();
}
inline void DeleteVolumeRequest::_internal_set_volume_name(const std::string& value) {
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteVolumeRequest::set_volume_name(std::string&& value) {
  
  volume_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pos_rpc.DeleteVolumeRequest.volume_name)
}
inline void DeleteVolumeRequest::set_volume_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pos_rpc.DeleteVolumeRequest.volume_name)
}
inline void DeleteVolumeRequest::set_volume_name(const char* value,
    size_t size) {
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pos_rpc.DeleteVolumeRequest.volume_name)
}
inline std::string* DeleteVolumeRequest::_internal_mutable_volume_name() {
  
  return volume_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteVolumeRequest::release_volume_name() {
  // @@protoc_insertion_point(field_release:pos_rpc.DeleteVolumeRequest.volume_name)
  return volume_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteVolumeRequest::set_allocated_volume_name(std::string* volume_name) {
  if (volume_name != nullptr) {
    
  } else {
    
  }
  volume_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), volume_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pos_rpc.DeleteVolumeRequest.volume_name)
}

// -------------------------------------------------------------------

// MountVolumeRequest

// string array_name = 1;
inline void MountVolumeRequest::clear_array_name() {
  array_name_.ClearToEmpty();
}
inline const std::string& MountVolumeRequest::array_name() const {
  // @@protoc_insertion_point(field_get:pos_rpc.MountVolumeRequest.array_name)
  return _internal_array_name();
}
inline void MountVolumeRequest::set_array_name(const std::string& value) {
  _internal_set_array_name(value);
  // @@protoc_insertion_point(field_set:pos_rpc.MountVolumeRequest.array_name)
}
inline std::string* MountVolumeRequest::mutable_array_name() {
  // @@protoc_insertion_point(field_mutable:pos_rpc.MountVolumeRequest.array_name)
  return _internal_mutable_array_name();
}
inline const std::string& MountVolumeRequest::_internal_array_name() const {
  return array_name_.Get();
}
inline void MountVolumeRequest::_internal_set_array_name(const std::string& value) {
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MountVolumeRequest::set_array_name(std::string&& value) {
  
  array_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pos_rpc.MountVolumeRequest.array_name)
}
inline void MountVolumeRequest::set_array_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pos_rpc.MountVolumeRequest.array_name)
}
inline void MountVolumeRequest::set_array_name(const char* value,
    size_t size) {
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pos_rpc.MountVolumeRequest.array_name)
}
inline std::string* MountVolumeRequest::_internal_mutable_array_name() {
  
  return array_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MountVolumeRequest::release_array_name() {
  // @@protoc_insertion_point(field_release:pos_rpc.MountVolumeRequest.array_name)
  return array_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MountVolumeRequest::set_allocated_array_name(std::string* array_name) {
  if (array_name != nullptr) {
    
  } else {
    
  }
  array_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), array_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pos_rpc.MountVolumeRequest.array_name)
}

// string volume_name = 2;
inline void MountVolumeRequest::clear_volume_name() {
  volume_name_.ClearToEmpty();
}
inline const std::string& MountVolumeRequest::volume_name() const {
  // @@protoc_insertion_point(field_get:pos_rpc.MountVolumeRequest.volume_name)
  return _internal_volume_name();
}
inline void MountVolumeRequest::set_volume_name(const std::string& value) {
  _internal_set_volume_name(value);
  // @@protoc_insertion_point(field_set:pos_rpc.MountVolumeRequest.volume_name)
}
inline std::string* MountVolumeRequest::mutable_volume_name() {
  // @@protoc_insertion_point(field_mutable:pos_rpc.MountVolumeRequest.volume_name)
  return _internal_mutable_volume_name();
}
inline const std::string& MountVolumeRequest::_internal_volume_name() const {
  return volume_name_.Get();
}
inline void MountVolumeRequest::_internal_set_volume_name(const std::string& value) {
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MountVolumeRequest::set_volume_name(std::string&& value) {
  
  volume_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pos_rpc.MountVolumeRequest.volume_name)
}
inline void MountVolumeRequest::set_volume_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pos_rpc.MountVolumeRequest.volume_name)
}
inline void MountVolumeRequest::set_volume_name(const char* value,
    size_t size) {
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pos_rpc.MountVolumeRequest.volume_name)
}
inline std::string* MountVolumeRequest::_internal_mutable_volume_name() {
  
  return volume_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MountVolumeRequest::release_volume_name() {
  // @@protoc_insertion_point(field_release:pos_rpc.MountVolumeRequest.volume_name)
  return volume_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MountVolumeRequest::set_allocated_volume_name(std::string* volume_name) {
  if (volume_name != nullptr) {
    
  } else {
    
  }
  volume_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), volume_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pos_rpc.MountVolumeRequest.volume_name)
}

// -------------------------------------------------------------------

// UnmountVolumeRequest

// string array_name = 1;
inline void UnmountVolumeRequest::clear_array_name() {
  array_name_.ClearToEmpty();
}
inline const std::string& UnmountVolumeRequest::array_name() const {
  // @@protoc_insertion_point(field_get:pos_rpc.UnmountVolumeRequest.array_name)
  return _internal_array_name();
}
inline void UnmountVolumeRequest::set_array_name(const std::string& value) {
  _internal_set_array_name(value);
  // @@protoc_insertion_point(field_set:pos_rpc.UnmountVolumeRequest.array_name)
}
inline std::string* UnmountVolumeRequest::mutable_array_name() {
  // @@protoc_insertion_point(field_mutable:pos_rpc.UnmountVolumeRequest.array_name)
  return _internal_mutable_array_name();
}
inline const std::string& UnmountVolumeRequest::_internal_array_name() const {
  return array_name_.Get();
}
inline void UnmountVolumeRequest::_internal_set_array_name(const std::string& value) {
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UnmountVolumeRequest::set_array_name(std::string&& value) {
  
  array_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pos_rpc.UnmountVolumeRequest.array_name)
}
inline void UnmountVolumeRequest::set_array_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pos_rpc.UnmountVolumeRequest.array_name)
}
inline void UnmountVolumeRequest::set_array_name(const char* value,
    size_t size) {
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pos_rpc.UnmountVolumeRequest.array_name)
}
inline std::string* UnmountVolumeRequest::_internal_mutable_array_name() {
  
  return array_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UnmountVolumeRequest::release_array_name() {
  // @@protoc_insertion_point(field_release:pos_rpc.UnmountVolumeRequest.array_name)
  return array_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnmountVolumeRequest::set_allocated_array_name(std::string* array_name) {
  if (array_name != nullptr) {
    
  } else {
    
  }
  array_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), array_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pos_rpc.UnmountVolumeRequest.array_name)
}

// string volume_name = 2;
inline void UnmountVolumeRequest::clear_volume_name() {
  volume_name_.ClearToEmpty();
}
inline const std::string& UnmountVolumeRequest::volume_name() const {
  // @@protoc_insertion_point(field_get:pos_rpc.UnmountVolumeRequest.volume_name)
  return _internal_volume_name();
}
inline void UnmountVolumeRequest::set_volume_name(const std::string& value) {
  _internal_set_volume_name(value);
  // @@protoc_insertion_point(field_set:pos_rpc.UnmountVolumeRequest.volume_name)
}
inline std::string* UnmountVolumeRequest::mutable_volume_name() {
  // @@protoc_insertion_point(field_mutable:pos_rpc.UnmountVolumeRequest.volume_name)
  return _internal_mutable_volume_name();
}
inline const std::string& UnmountVolumeRequest::_internal_volume_name() const {
  return volume_name_.Get();
}
inline void UnmountVolumeRequest::_internal_set_volume_name(const std::string& value) {
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UnmountVolumeRequest::set_volume_name(std::string&& value) {
  
  volume_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pos_rpc.UnmountVolumeRequest.volume_name)
}
inline void UnmountVolumeRequest::set_volume_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pos_rpc.UnmountVolumeRequest.volume_name)
}
inline void UnmountVolumeRequest::set_volume_name(const char* value,
    size_t size) {
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pos_rpc.UnmountVolumeRequest.volume_name)
}
inline std::string* UnmountVolumeRequest::_internal_mutable_volume_name() {
  
  return volume_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UnmountVolumeRequest::release_volume_name() {
  // @@protoc_insertion_point(field_release:pos_rpc.UnmountVolumeRequest.volume_name)
  return volume_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnmountVolumeRequest::set_allocated_volume_name(std::string* volume_name) {
  if (volume_name != nullptr) {
    
  } else {
    
  }
  volume_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), volume_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pos_rpc.UnmountVolumeRequest.volume_name)
}

// -------------------------------------------------------------------

// UpdateVoluemMetaRequest

// string array_name = 1;
inline void UpdateVoluemMetaRequest::clear_array_name() {
  array_name_.ClearToEmpty();
}
inline const std::string& UpdateVoluemMetaRequest::array_name() const {
  // @@protoc_insertion_point(field_get:pos_rpc.UpdateVoluemMetaRequest.array_name)
  return _internal_array_name();
}
inline void UpdateVoluemMetaRequest::set_array_name(const std::string& value) {
  _internal_set_array_name(value);
  // @@protoc_insertion_point(field_set:pos_rpc.UpdateVoluemMetaRequest.array_name)
}
inline std::string* UpdateVoluemMetaRequest::mutable_array_name() {
  // @@protoc_insertion_point(field_mutable:pos_rpc.UpdateVoluemMetaRequest.array_name)
  return _internal_mutable_array_name();
}
inline const std::string& UpdateVoluemMetaRequest::_internal_array_name() const {
  return array_name_.Get();
}
inline void UpdateVoluemMetaRequest::_internal_set_array_name(const std::string& value) {
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateVoluemMetaRequest::set_array_name(std::string&& value) {
  
  array_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pos_rpc.UpdateVoluemMetaRequest.array_name)
}
inline void UpdateVoluemMetaRequest::set_array_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pos_rpc.UpdateVoluemMetaRequest.array_name)
}
inline void UpdateVoluemMetaRequest::set_array_name(const char* value,
    size_t size) {
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pos_rpc.UpdateVoluemMetaRequest.array_name)
}
inline std::string* UpdateVoluemMetaRequest::_internal_mutable_array_name() {
  
  return array_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateVoluemMetaRequest::release_array_name() {
  // @@protoc_insertion_point(field_release:pos_rpc.UpdateVoluemMetaRequest.array_name)
  return array_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateVoluemMetaRequest::set_allocated_array_name(std::string* array_name) {
  if (array_name != nullptr) {
    
  } else {
    
  }
  array_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), array_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pos_rpc.UpdateVoluemMetaRequest.array_name)
}

// -------------------------------------------------------------------

// PosResponse

// .pos_rpc.PosResult result = 1;
inline void PosResponse::clear_result() {
  result_ = 0;
}
inline ::pos_rpc::PosResult PosResponse::_internal_result() const {
  return static_cast< ::pos_rpc::PosResult >(result_);
}
inline ::pos_rpc::PosResult PosResponse::result() const {
  // @@protoc_insertion_point(field_get:pos_rpc.PosResponse.result)
  return _internal_result();
}
inline void PosResponse::_internal_set_result(::pos_rpc::PosResult value) {
  
  result_ = value;
}
inline void PosResponse::set_result(::pos_rpc::PosResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:pos_rpc.PosResponse.result)
}

// string reason = 2;
inline bool PosResponse::_internal_has_reason() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PosResponse::has_reason() const {
  return _internal_has_reason();
}
inline void PosResponse::clear_reason() {
  reason_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PosResponse::reason() const {
  // @@protoc_insertion_point(field_get:pos_rpc.PosResponse.reason)
  return _internal_reason();
}
inline void PosResponse::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:pos_rpc.PosResponse.reason)
}
inline std::string* PosResponse::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:pos_rpc.PosResponse.reason)
  return _internal_mutable_reason();
}
inline const std::string& PosResponse::_internal_reason() const {
  return reason_.Get();
}
inline void PosResponse::_internal_set_reason(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PosResponse::set_reason(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pos_rpc.PosResponse.reason)
}
inline void PosResponse::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pos_rpc.PosResponse.reason)
}
inline void PosResponse::set_reason(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pos_rpc.PosResponse.reason)
}
inline std::string* PosResponse::_internal_mutable_reason() {
  _has_bits_[0] |= 0x00000001u;
  return reason_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PosResponse::release_reason() {
  // @@protoc_insertion_point(field_release:pos_rpc.PosResponse.reason)
  if (!_internal_has_reason()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return reason_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PosResponse::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pos_rpc.PosResponse.reason)
}

// -------------------------------------------------------------------

// GetArrayListRequest

// -------------------------------------------------------------------

// ArrayInfo

// string array_name = 1;
inline void ArrayInfo::clear_array_name() {
  array_name_.ClearToEmpty();
}
inline const std::string& ArrayInfo::array_name() const {
  // @@protoc_insertion_point(field_get:pos_rpc.ArrayInfo.array_name)
  return _internal_array_name();
}
inline void ArrayInfo::set_array_name(const std::string& value) {
  _internal_set_array_name(value);
  // @@protoc_insertion_point(field_set:pos_rpc.ArrayInfo.array_name)
}
inline std::string* ArrayInfo::mutable_array_name() {
  // @@protoc_insertion_point(field_mutable:pos_rpc.ArrayInfo.array_name)
  return _internal_mutable_array_name();
}
inline const std::string& ArrayInfo::_internal_array_name() const {
  return array_name_.Get();
}
inline void ArrayInfo::_internal_set_array_name(const std::string& value) {
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ArrayInfo::set_array_name(std::string&& value) {
  
  array_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pos_rpc.ArrayInfo.array_name)
}
inline void ArrayInfo::set_array_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pos_rpc.ArrayInfo.array_name)
}
inline void ArrayInfo::set_array_name(const char* value,
    size_t size) {
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pos_rpc.ArrayInfo.array_name)
}
inline std::string* ArrayInfo::_internal_mutable_array_name() {
  
  return array_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ArrayInfo::release_array_name() {
  // @@protoc_insertion_point(field_release:pos_rpc.ArrayInfo.array_name)
  return array_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ArrayInfo::set_allocated_array_name(std::string* array_name) {
  if (array_name != nullptr) {
    
  } else {
    
  }
  array_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), array_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pos_rpc.ArrayInfo.array_name)
}

// uint64 total_capacity = 2;
inline void ArrayInfo::clear_total_capacity() {
  total_capacity_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ArrayInfo::_internal_total_capacity() const {
  return total_capacity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ArrayInfo::total_capacity() const {
  // @@protoc_insertion_point(field_get:pos_rpc.ArrayInfo.total_capacity)
  return _internal_total_capacity();
}
inline void ArrayInfo::_internal_set_total_capacity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  total_capacity_ = value;
}
inline void ArrayInfo::set_total_capacity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_total_capacity(value);
  // @@protoc_insertion_point(field_set:pos_rpc.ArrayInfo.total_capacity)
}

// uint64 used_capacity = 3;
inline void ArrayInfo::clear_used_capacity() {
  used_capacity_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ArrayInfo::_internal_used_capacity() const {
  return used_capacity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ArrayInfo::used_capacity() const {
  // @@protoc_insertion_point(field_get:pos_rpc.ArrayInfo.used_capacity)
  return _internal_used_capacity();
}
inline void ArrayInfo::_internal_set_used_capacity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  used_capacity_ = value;
}
inline void ArrayInfo::set_used_capacity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_used_capacity(value);
  // @@protoc_insertion_point(field_set:pos_rpc.ArrayInfo.used_capacity)
}

// .pos_rpc.ArrayInfo.ArrayState state = 4;
inline void ArrayInfo::clear_state() {
  state_ = 0;
}
inline ::pos_rpc::ArrayInfo_ArrayState ArrayInfo::_internal_state() const {
  return static_cast< ::pos_rpc::ArrayInfo_ArrayState >(state_);
}
inline ::pos_rpc::ArrayInfo_ArrayState ArrayInfo::state() const {
  // @@protoc_insertion_point(field_get:pos_rpc.ArrayInfo.state)
  return _internal_state();
}
inline void ArrayInfo::_internal_set_state(::pos_rpc::ArrayInfo_ArrayState value) {
  
  state_ = value;
}
inline void ArrayInfo::set_state(::pos_rpc::ArrayInfo_ArrayState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:pos_rpc.ArrayInfo.state)
}

// -------------------------------------------------------------------

// ArrayListResponse

// .pos_rpc.PosResult result = 1;
inline void ArrayListResponse::clear_result() {
  result_ = 0;
}
inline ::pos_rpc::PosResult ArrayListResponse::_internal_result() const {
  return static_cast< ::pos_rpc::PosResult >(result_);
}
inline ::pos_rpc::PosResult ArrayListResponse::result() const {
  // @@protoc_insertion_point(field_get:pos_rpc.ArrayListResponse.result)
  return _internal_result();
}
inline void ArrayListResponse::_internal_set_result(::pos_rpc::PosResult value) {
  
  result_ = value;
}
inline void ArrayListResponse::set_result(::pos_rpc::PosResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:pos_rpc.ArrayListResponse.result)
}

// string reason = 2;
inline bool ArrayListResponse::_internal_has_reason() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ArrayListResponse::has_reason() const {
  return _internal_has_reason();
}
inline void ArrayListResponse::clear_reason() {
  reason_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ArrayListResponse::reason() const {
  // @@protoc_insertion_point(field_get:pos_rpc.ArrayListResponse.reason)
  return _internal_reason();
}
inline void ArrayListResponse::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:pos_rpc.ArrayListResponse.reason)
}
inline std::string* ArrayListResponse::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:pos_rpc.ArrayListResponse.reason)
  return _internal_mutable_reason();
}
inline const std::string& ArrayListResponse::_internal_reason() const {
  return reason_.Get();
}
inline void ArrayListResponse::_internal_set_reason(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ArrayListResponse::set_reason(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pos_rpc.ArrayListResponse.reason)
}
inline void ArrayListResponse::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pos_rpc.ArrayListResponse.reason)
}
inline void ArrayListResponse::set_reason(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pos_rpc.ArrayListResponse.reason)
}
inline std::string* ArrayListResponse::_internal_mutable_reason() {
  _has_bits_[0] |= 0x00000001u;
  return reason_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ArrayListResponse::release_reason() {
  // @@protoc_insertion_point(field_release:pos_rpc.ArrayListResponse.reason)
  if (!_internal_has_reason()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return reason_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ArrayListResponse::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pos_rpc.ArrayListResponse.reason)
}

// repeated .pos_rpc.ArrayInfo infos = 3;
inline int ArrayListResponse::_internal_infos_size() const {
  return infos_.size();
}
inline int ArrayListResponse::infos_size() const {
  return _internal_infos_size();
}
inline void ArrayListResponse::clear_infos() {
  infos_.Clear();
}
inline ::pos_rpc::ArrayInfo* ArrayListResponse::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:pos_rpc.ArrayListResponse.infos)
  return infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pos_rpc::ArrayInfo >*
ArrayListResponse::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:pos_rpc.ArrayListResponse.infos)
  return &infos_;
}
inline const ::pos_rpc::ArrayInfo& ArrayListResponse::_internal_infos(int index) const {
  return infos_.Get(index);
}
inline const ::pos_rpc::ArrayInfo& ArrayListResponse::infos(int index) const {
  // @@protoc_insertion_point(field_get:pos_rpc.ArrayListResponse.infos)
  return _internal_infos(index);
}
inline ::pos_rpc::ArrayInfo* ArrayListResponse::_internal_add_infos() {
  return infos_.Add();
}
inline ::pos_rpc::ArrayInfo* ArrayListResponse::add_infos() {
  // @@protoc_insertion_point(field_add:pos_rpc.ArrayListResponse.infos)
  return _internal_add_infos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pos_rpc::ArrayInfo >&
ArrayListResponse::infos() const {
  // @@protoc_insertion_point(field_list:pos_rpc.ArrayListResponse.infos)
  return infos_;
}

// -------------------------------------------------------------------

// GetVolumeListRequest

// string array_name = 1;
inline void GetVolumeListRequest::clear_array_name() {
  array_name_.ClearToEmpty();
}
inline const std::string& GetVolumeListRequest::array_name() const {
  // @@protoc_insertion_point(field_get:pos_rpc.GetVolumeListRequest.array_name)
  return _internal_array_name();
}
inline void GetVolumeListRequest::set_array_name(const std::string& value) {
  _internal_set_array_name(value);
  // @@protoc_insertion_point(field_set:pos_rpc.GetVolumeListRequest.array_name)
}
inline std::string* GetVolumeListRequest::mutable_array_name() {
  // @@protoc_insertion_point(field_mutable:pos_rpc.GetVolumeListRequest.array_name)
  return _internal_mutable_array_name();
}
inline const std::string& GetVolumeListRequest::_internal_array_name() const {
  return array_name_.Get();
}
inline void GetVolumeListRequest::_internal_set_array_name(const std::string& value) {
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetVolumeListRequest::set_array_name(std::string&& value) {
  
  array_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pos_rpc.GetVolumeListRequest.array_name)
}
inline void GetVolumeListRequest::set_array_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pos_rpc.GetVolumeListRequest.array_name)
}
inline void GetVolumeListRequest::set_array_name(const char* value,
    size_t size) {
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pos_rpc.GetVolumeListRequest.array_name)
}
inline std::string* GetVolumeListRequest::_internal_mutable_array_name() {
  
  return array_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetVolumeListRequest::release_array_name() {
  // @@protoc_insertion_point(field_release:pos_rpc.GetVolumeListRequest.array_name)
  return array_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetVolumeListRequest::set_allocated_array_name(std::string* array_name) {
  if (array_name != nullptr) {
    
  } else {
    
  }
  array_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), array_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pos_rpc.GetVolumeListRequest.array_name)
}

// -------------------------------------------------------------------

// VolumeInfo

// string volume_name = 1;
inline void VolumeInfo::clear_volume_name() {
  volume_name_.ClearToEmpty();
}
inline const std::string& VolumeInfo::volume_name() const {
  // @@protoc_insertion_point(field_get:pos_rpc.VolumeInfo.volume_name)
  return _internal_volume_name();
}
inline void VolumeInfo::set_volume_name(const std::string& value) {
  _internal_set_volume_name(value);
  // @@protoc_insertion_point(field_set:pos_rpc.VolumeInfo.volume_name)
}
inline std::string* VolumeInfo::mutable_volume_name() {
  // @@protoc_insertion_point(field_mutable:pos_rpc.VolumeInfo.volume_name)
  return _internal_mutable_volume_name();
}
inline const std::string& VolumeInfo::_internal_volume_name() const {
  return volume_name_.Get();
}
inline void VolumeInfo::_internal_set_volume_name(const std::string& value) {
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VolumeInfo::set_volume_name(std::string&& value) {
  
  volume_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pos_rpc.VolumeInfo.volume_name)
}
inline void VolumeInfo::set_volume_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pos_rpc.VolumeInfo.volume_name)
}
inline void VolumeInfo::set_volume_name(const char* value,
    size_t size) {
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pos_rpc.VolumeInfo.volume_name)
}
inline std::string* VolumeInfo::_internal_mutable_volume_name() {
  
  return volume_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VolumeInfo::release_volume_name() {
  // @@protoc_insertion_point(field_release:pos_rpc.VolumeInfo.volume_name)
  return volume_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VolumeInfo::set_allocated_volume_name(std::string* volume_name) {
  if (volume_name != nullptr) {
    
  } else {
    
  }
  volume_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), volume_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pos_rpc.VolumeInfo.volume_name)
}

// uint64 total_capacity = 2;
inline void VolumeInfo::clear_total_capacity() {
  total_capacity_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VolumeInfo::_internal_total_capacity() const {
  return total_capacity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VolumeInfo::total_capacity() const {
  // @@protoc_insertion_point(field_get:pos_rpc.VolumeInfo.total_capacity)
  return _internal_total_capacity();
}
inline void VolumeInfo::_internal_set_total_capacity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  total_capacity_ = value;
}
inline void VolumeInfo::set_total_capacity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_total_capacity(value);
  // @@protoc_insertion_point(field_set:pos_rpc.VolumeInfo.total_capacity)
}

// uint64 used_capacity = 3;
inline void VolumeInfo::clear_used_capacity() {
  used_capacity_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VolumeInfo::_internal_used_capacity() const {
  return used_capacity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VolumeInfo::used_capacity() const {
  // @@protoc_insertion_point(field_get:pos_rpc.VolumeInfo.used_capacity)
  return _internal_used_capacity();
}
inline void VolumeInfo::_internal_set_used_capacity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  used_capacity_ = value;
}
inline void VolumeInfo::set_used_capacity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_used_capacity(value);
  // @@protoc_insertion_point(field_set:pos_rpc.VolumeInfo.used_capacity)
}

// .pos_rpc.VolumeInfo.VolumeState state = 4;
inline void VolumeInfo::clear_state() {
  state_ = 0;
}
inline ::pos_rpc::VolumeInfo_VolumeState VolumeInfo::_internal_state() const {
  return static_cast< ::pos_rpc::VolumeInfo_VolumeState >(state_);
}
inline ::pos_rpc::VolumeInfo_VolumeState VolumeInfo::state() const {
  // @@protoc_insertion_point(field_get:pos_rpc.VolumeInfo.state)
  return _internal_state();
}
inline void VolumeInfo::_internal_set_state(::pos_rpc::VolumeInfo_VolumeState value) {
  
  state_ = value;
}
inline void VolumeInfo::set_state(::pos_rpc::VolumeInfo_VolumeState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:pos_rpc.VolumeInfo.state)
}

// -------------------------------------------------------------------

// VolumeListResponse

// .pos_rpc.PosResult result = 1;
inline void VolumeListResponse::clear_result() {
  result_ = 0;
}
inline ::pos_rpc::PosResult VolumeListResponse::_internal_result() const {
  return static_cast< ::pos_rpc::PosResult >(result_);
}
inline ::pos_rpc::PosResult VolumeListResponse::result() const {
  // @@protoc_insertion_point(field_get:pos_rpc.VolumeListResponse.result)
  return _internal_result();
}
inline void VolumeListResponse::_internal_set_result(::pos_rpc::PosResult value) {
  
  result_ = value;
}
inline void VolumeListResponse::set_result(::pos_rpc::PosResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:pos_rpc.VolumeListResponse.result)
}

// string reason = 2;
inline bool VolumeListResponse::_internal_has_reason() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VolumeListResponse::has_reason() const {
  return _internal_has_reason();
}
inline void VolumeListResponse::clear_reason() {
  reason_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VolumeListResponse::reason() const {
  // @@protoc_insertion_point(field_get:pos_rpc.VolumeListResponse.reason)
  return _internal_reason();
}
inline void VolumeListResponse::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:pos_rpc.VolumeListResponse.reason)
}
inline std::string* VolumeListResponse::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:pos_rpc.VolumeListResponse.reason)
  return _internal_mutable_reason();
}
inline const std::string& VolumeListResponse::_internal_reason() const {
  return reason_.Get();
}
inline void VolumeListResponse::_internal_set_reason(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VolumeListResponse::set_reason(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pos_rpc.VolumeListResponse.reason)
}
inline void VolumeListResponse::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pos_rpc.VolumeListResponse.reason)
}
inline void VolumeListResponse::set_reason(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pos_rpc.VolumeListResponse.reason)
}
inline std::string* VolumeListResponse::_internal_mutable_reason() {
  _has_bits_[0] |= 0x00000001u;
  return reason_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VolumeListResponse::release_reason() {
  // @@protoc_insertion_point(field_release:pos_rpc.VolumeListResponse.reason)
  if (!_internal_has_reason()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return reason_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VolumeListResponse::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pos_rpc.VolumeListResponse.reason)
}

// repeated .pos_rpc.VolumeInfo infos = 3;
inline int VolumeListResponse::_internal_infos_size() const {
  return infos_.size();
}
inline int VolumeListResponse::infos_size() const {
  return _internal_infos_size();
}
inline void VolumeListResponse::clear_infos() {
  infos_.Clear();
}
inline ::pos_rpc::VolumeInfo* VolumeListResponse::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:pos_rpc.VolumeListResponse.infos)
  return infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pos_rpc::VolumeInfo >*
VolumeListResponse::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:pos_rpc.VolumeListResponse.infos)
  return &infos_;
}
inline const ::pos_rpc::VolumeInfo& VolumeListResponse::_internal_infos(int index) const {
  return infos_.Get(index);
}
inline const ::pos_rpc::VolumeInfo& VolumeListResponse::infos(int index) const {
  // @@protoc_insertion_point(field_get:pos_rpc.VolumeListResponse.infos)
  return _internal_infos(index);
}
inline ::pos_rpc::VolumeInfo* VolumeListResponse::_internal_add_infos() {
  return infos_.Add();
}
inline ::pos_rpc::VolumeInfo* VolumeListResponse::add_infos() {
  // @@protoc_insertion_point(field_add:pos_rpc.VolumeListResponse.infos)
  return _internal_add_infos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pos_rpc::VolumeInfo >&
VolumeListResponse::infos() const {
  // @@protoc_insertion_point(field_list:pos_rpc.VolumeListResponse.infos)
  return infos_;
}

// -------------------------------------------------------------------

// Chunk

// bytes content = 1;
inline void Chunk::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& Chunk::content() const {
  // @@protoc_insertion_point(field_get:pos_rpc.Chunk.content)
  return _internal_content();
}
inline void Chunk::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:pos_rpc.Chunk.content)
}
inline std::string* Chunk::mutable_content() {
  // @@protoc_insertion_point(field_mutable:pos_rpc.Chunk.content)
  return _internal_mutable_content();
}
inline const std::string& Chunk::_internal_content() const {
  return content_.Get();
}
inline void Chunk::_internal_set_content(const std::string& value) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Chunk::set_content(std::string&& value) {
  
  content_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pos_rpc.Chunk.content)
}
inline void Chunk::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pos_rpc.Chunk.content)
}
inline void Chunk::set_content(const void* value,
    size_t size) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pos_rpc.Chunk.content)
}
inline std::string* Chunk::_internal_mutable_content() {
  
  return content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Chunk::release_content() {
  // @@protoc_insertion_point(field_release:pos_rpc.Chunk.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Chunk::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pos_rpc.Chunk.content)
}

// -------------------------------------------------------------------

// ReadBlocksRequest

// string array_name = 1;
inline void ReadBlocksRequest::clear_array_name() {
  array_name_.ClearToEmpty();
}
inline const std::string& ReadBlocksRequest::array_name() const {
  // @@protoc_insertion_point(field_get:pos_rpc.ReadBlocksRequest.array_name)
  return _internal_array_name();
}
inline void ReadBlocksRequest::set_array_name(const std::string& value) {
  _internal_set_array_name(value);
  // @@protoc_insertion_point(field_set:pos_rpc.ReadBlocksRequest.array_name)
}
inline std::string* ReadBlocksRequest::mutable_array_name() {
  // @@protoc_insertion_point(field_mutable:pos_rpc.ReadBlocksRequest.array_name)
  return _internal_mutable_array_name();
}
inline const std::string& ReadBlocksRequest::_internal_array_name() const {
  return array_name_.Get();
}
inline void ReadBlocksRequest::_internal_set_array_name(const std::string& value) {
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReadBlocksRequest::set_array_name(std::string&& value) {
  
  array_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pos_rpc.ReadBlocksRequest.array_name)
}
inline void ReadBlocksRequest::set_array_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pos_rpc.ReadBlocksRequest.array_name)
}
inline void ReadBlocksRequest::set_array_name(const char* value,
    size_t size) {
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pos_rpc.ReadBlocksRequest.array_name)
}
inline std::string* ReadBlocksRequest::_internal_mutable_array_name() {
  
  return array_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReadBlocksRequest::release_array_name() {
  // @@protoc_insertion_point(field_release:pos_rpc.ReadBlocksRequest.array_name)
  return array_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReadBlocksRequest::set_allocated_array_name(std::string* array_name) {
  if (array_name != nullptr) {
    
  } else {
    
  }
  array_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), array_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pos_rpc.ReadBlocksRequest.array_name)
}

// string volume_name = 2;
inline void ReadBlocksRequest::clear_volume_name() {
  volume_name_.ClearToEmpty();
}
inline const std::string& ReadBlocksRequest::volume_name() const {
  // @@protoc_insertion_point(field_get:pos_rpc.ReadBlocksRequest.volume_name)
  return _internal_volume_name();
}
inline void ReadBlocksRequest::set_volume_name(const std::string& value) {
  _internal_set_volume_name(value);
  // @@protoc_insertion_point(field_set:pos_rpc.ReadBlocksRequest.volume_name)
}
inline std::string* ReadBlocksRequest::mutable_volume_name() {
  // @@protoc_insertion_point(field_mutable:pos_rpc.ReadBlocksRequest.volume_name)
  return _internal_mutable_volume_name();
}
inline const std::string& ReadBlocksRequest::_internal_volume_name() const {
  return volume_name_.Get();
}
inline void ReadBlocksRequest::_internal_set_volume_name(const std::string& value) {
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReadBlocksRequest::set_volume_name(std::string&& value) {
  
  volume_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pos_rpc.ReadBlocksRequest.volume_name)
}
inline void ReadBlocksRequest::set_volume_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pos_rpc.ReadBlocksRequest.volume_name)
}
inline void ReadBlocksRequest::set_volume_name(const char* value,
    size_t size) {
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pos_rpc.ReadBlocksRequest.volume_name)
}
inline std::string* ReadBlocksRequest::_internal_mutable_volume_name() {
  
  return volume_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReadBlocksRequest::release_volume_name() {
  // @@protoc_insertion_point(field_release:pos_rpc.ReadBlocksRequest.volume_name)
  return volume_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReadBlocksRequest::set_allocated_volume_name(std::string* volume_name) {
  if (volume_name != nullptr) {
    
  } else {
    
  }
  volume_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), volume_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pos_rpc.ReadBlocksRequest.volume_name)
}

// uint64 rba = 3;
inline void ReadBlocksRequest::clear_rba() {
  rba_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadBlocksRequest::_internal_rba() const {
  return rba_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadBlocksRequest::rba() const {
  // @@protoc_insertion_point(field_get:pos_rpc.ReadBlocksRequest.rba)
  return _internal_rba();
}
inline void ReadBlocksRequest::_internal_set_rba(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  rba_ = value;
}
inline void ReadBlocksRequest::set_rba(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_rba(value);
  // @@protoc_insertion_point(field_set:pos_rpc.ReadBlocksRequest.rba)
}

// uint64 num_blocks = 4;
inline void ReadBlocksRequest::clear_num_blocks() {
  num_blocks_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadBlocksRequest::_internal_num_blocks() const {
  return num_blocks_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadBlocksRequest::num_blocks() const {
  // @@protoc_insertion_point(field_get:pos_rpc.ReadBlocksRequest.num_blocks)
  return _internal_num_blocks();
}
inline void ReadBlocksRequest::_internal_set_num_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  num_blocks_ = value;
}
inline void ReadBlocksRequest::set_num_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_num_blocks(value);
  // @@protoc_insertion_point(field_set:pos_rpc.ReadBlocksRequest.num_blocks)
}

// -------------------------------------------------------------------

// ReadBlocksResponse

// .pos_rpc.PosResult result = 1;
inline void ReadBlocksResponse::clear_result() {
  result_ = 0;
}
inline ::pos_rpc::PosResult ReadBlocksResponse::_internal_result() const {
  return static_cast< ::pos_rpc::PosResult >(result_);
}
inline ::pos_rpc::PosResult ReadBlocksResponse::result() const {
  // @@protoc_insertion_point(field_get:pos_rpc.ReadBlocksResponse.result)
  return _internal_result();
}
inline void ReadBlocksResponse::_internal_set_result(::pos_rpc::PosResult value) {
  
  result_ = value;
}
inline void ReadBlocksResponse::set_result(::pos_rpc::PosResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:pos_rpc.ReadBlocksResponse.result)
}

// string reason = 2;
inline bool ReadBlocksResponse::_internal_has_reason() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReadBlocksResponse::has_reason() const {
  return _internal_has_reason();
}
inline void ReadBlocksResponse::clear_reason() {
  reason_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReadBlocksResponse::reason() const {
  // @@protoc_insertion_point(field_get:pos_rpc.ReadBlocksResponse.reason)
  return _internal_reason();
}
inline void ReadBlocksResponse::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:pos_rpc.ReadBlocksResponse.reason)
}
inline std::string* ReadBlocksResponse::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:pos_rpc.ReadBlocksResponse.reason)
  return _internal_mutable_reason();
}
inline const std::string& ReadBlocksResponse::_internal_reason() const {
  return reason_.Get();
}
inline void ReadBlocksResponse::_internal_set_reason(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReadBlocksResponse::set_reason(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pos_rpc.ReadBlocksResponse.reason)
}
inline void ReadBlocksResponse::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pos_rpc.ReadBlocksResponse.reason)
}
inline void ReadBlocksResponse::set_reason(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pos_rpc.ReadBlocksResponse.reason)
}
inline std::string* ReadBlocksResponse::_internal_mutable_reason() {
  _has_bits_[0] |= 0x00000001u;
  return reason_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReadBlocksResponse::release_reason() {
  // @@protoc_insertion_point(field_release:pos_rpc.ReadBlocksResponse.reason)
  if (!_internal_has_reason()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return reason_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReadBlocksResponse::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pos_rpc.ReadBlocksResponse.reason)
}

// repeated .pos_rpc.Chunk data = 3;
inline int ReadBlocksResponse::_internal_data_size() const {
  return data_.size();
}
inline int ReadBlocksResponse::data_size() const {
  return _internal_data_size();
}
inline void ReadBlocksResponse::clear_data() {
  data_.Clear();
}
inline ::pos_rpc::Chunk* ReadBlocksResponse::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:pos_rpc.ReadBlocksResponse.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pos_rpc::Chunk >*
ReadBlocksResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pos_rpc.ReadBlocksResponse.data)
  return &data_;
}
inline const ::pos_rpc::Chunk& ReadBlocksResponse::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::pos_rpc::Chunk& ReadBlocksResponse::data(int index) const {
  // @@protoc_insertion_point(field_get:pos_rpc.ReadBlocksResponse.data)
  return _internal_data(index);
}
inline ::pos_rpc::Chunk* ReadBlocksResponse::_internal_add_data() {
  return data_.Add();
}
inline ::pos_rpc::Chunk* ReadBlocksResponse::add_data() {
  // @@protoc_insertion_point(field_add:pos_rpc.ReadBlocksResponse.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pos_rpc::Chunk >&
ReadBlocksResponse::data() const {
  // @@protoc_insertion_point(field_list:pos_rpc.ReadBlocksResponse.data)
  return data_;
}

// -------------------------------------------------------------------

// WriteBlocksRequest

// string array_name = 1;
inline void WriteBlocksRequest::clear_array_name() {
  array_name_.ClearToEmpty();
}
inline const std::string& WriteBlocksRequest::array_name() const {
  // @@protoc_insertion_point(field_get:pos_rpc.WriteBlocksRequest.array_name)
  return _internal_array_name();
}
inline void WriteBlocksRequest::set_array_name(const std::string& value) {
  _internal_set_array_name(value);
  // @@protoc_insertion_point(field_set:pos_rpc.WriteBlocksRequest.array_name)
}
inline std::string* WriteBlocksRequest::mutable_array_name() {
  // @@protoc_insertion_point(field_mutable:pos_rpc.WriteBlocksRequest.array_name)
  return _internal_mutable_array_name();
}
inline const std::string& WriteBlocksRequest::_internal_array_name() const {
  return array_name_.Get();
}
inline void WriteBlocksRequest::_internal_set_array_name(const std::string& value) {
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WriteBlocksRequest::set_array_name(std::string&& value) {
  
  array_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pos_rpc.WriteBlocksRequest.array_name)
}
inline void WriteBlocksRequest::set_array_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pos_rpc.WriteBlocksRequest.array_name)
}
inline void WriteBlocksRequest::set_array_name(const char* value,
    size_t size) {
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pos_rpc.WriteBlocksRequest.array_name)
}
inline std::string* WriteBlocksRequest::_internal_mutable_array_name() {
  
  return array_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WriteBlocksRequest::release_array_name() {
  // @@protoc_insertion_point(field_release:pos_rpc.WriteBlocksRequest.array_name)
  return array_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WriteBlocksRequest::set_allocated_array_name(std::string* array_name) {
  if (array_name != nullptr) {
    
  } else {
    
  }
  array_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), array_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pos_rpc.WriteBlocksRequest.array_name)
}

// string volume_name = 2;
inline void WriteBlocksRequest::clear_volume_name() {
  volume_name_.ClearToEmpty();
}
inline const std::string& WriteBlocksRequest::volume_name() const {
  // @@protoc_insertion_point(field_get:pos_rpc.WriteBlocksRequest.volume_name)
  return _internal_volume_name();
}
inline void WriteBlocksRequest::set_volume_name(const std::string& value) {
  _internal_set_volume_name(value);
  // @@protoc_insertion_point(field_set:pos_rpc.WriteBlocksRequest.volume_name)
}
inline std::string* WriteBlocksRequest::mutable_volume_name() {
  // @@protoc_insertion_point(field_mutable:pos_rpc.WriteBlocksRequest.volume_name)
  return _internal_mutable_volume_name();
}
inline const std::string& WriteBlocksRequest::_internal_volume_name() const {
  return volume_name_.Get();
}
inline void WriteBlocksRequest::_internal_set_volume_name(const std::string& value) {
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WriteBlocksRequest::set_volume_name(std::string&& value) {
  
  volume_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pos_rpc.WriteBlocksRequest.volume_name)
}
inline void WriteBlocksRequest::set_volume_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pos_rpc.WriteBlocksRequest.volume_name)
}
inline void WriteBlocksRequest::set_volume_name(const char* value,
    size_t size) {
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pos_rpc.WriteBlocksRequest.volume_name)
}
inline std::string* WriteBlocksRequest::_internal_mutable_volume_name() {
  
  return volume_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WriteBlocksRequest::release_volume_name() {
  // @@protoc_insertion_point(field_release:pos_rpc.WriteBlocksRequest.volume_name)
  return volume_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WriteBlocksRequest::set_allocated_volume_name(std::string* volume_name) {
  if (volume_name != nullptr) {
    
  } else {
    
  }
  volume_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), volume_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pos_rpc.WriteBlocksRequest.volume_name)
}

// uint64 rba = 3;
inline void WriteBlocksRequest::clear_rba() {
  rba_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WriteBlocksRequest::_internal_rba() const {
  return rba_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WriteBlocksRequest::rba() const {
  // @@protoc_insertion_point(field_get:pos_rpc.WriteBlocksRequest.rba)
  return _internal_rba();
}
inline void WriteBlocksRequest::_internal_set_rba(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  rba_ = value;
}
inline void WriteBlocksRequest::set_rba(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_rba(value);
  // @@protoc_insertion_point(field_set:pos_rpc.WriteBlocksRequest.rba)
}

// uint64 num_blocks = 4;
inline void WriteBlocksRequest::clear_num_blocks() {
  num_blocks_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WriteBlocksRequest::_internal_num_blocks() const {
  return num_blocks_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WriteBlocksRequest::num_blocks() const {
  // @@protoc_insertion_point(field_get:pos_rpc.WriteBlocksRequest.num_blocks)
  return _internal_num_blocks();
}
inline void WriteBlocksRequest::_internal_set_num_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  num_blocks_ = value;
}
inline void WriteBlocksRequest::set_num_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_num_blocks(value);
  // @@protoc_insertion_point(field_set:pos_rpc.WriteBlocksRequest.num_blocks)
}

// uint64 lsn = 5;
inline void WriteBlocksRequest::clear_lsn() {
  lsn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WriteBlocksRequest::_internal_lsn() const {
  return lsn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WriteBlocksRequest::lsn() const {
  // @@protoc_insertion_point(field_get:pos_rpc.WriteBlocksRequest.lsn)
  return _internal_lsn();
}
inline void WriteBlocksRequest::_internal_set_lsn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  lsn_ = value;
}
inline void WriteBlocksRequest::set_lsn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lsn(value);
  // @@protoc_insertion_point(field_set:pos_rpc.WriteBlocksRequest.lsn)
}

// repeated .pos_rpc.Chunk data = 6;
inline int WriteBlocksRequest::_internal_data_size() const {
  return data_.size();
}
inline int WriteBlocksRequest::data_size() const {
  return _internal_data_size();
}
inline void WriteBlocksRequest::clear_data() {
  data_.Clear();
}
inline ::pos_rpc::Chunk* WriteBlocksRequest::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:pos_rpc.WriteBlocksRequest.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pos_rpc::Chunk >*
WriteBlocksRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pos_rpc.WriteBlocksRequest.data)
  return &data_;
}
inline const ::pos_rpc::Chunk& WriteBlocksRequest::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::pos_rpc::Chunk& WriteBlocksRequest::data(int index) const {
  // @@protoc_insertion_point(field_get:pos_rpc.WriteBlocksRequest.data)
  return _internal_data(index);
}
inline ::pos_rpc::Chunk* WriteBlocksRequest::_internal_add_data() {
  return data_.Add();
}
inline ::pos_rpc::Chunk* WriteBlocksRequest::add_data() {
  // @@protoc_insertion_point(field_add:pos_rpc.WriteBlocksRequest.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pos_rpc::Chunk >&
WriteBlocksRequest::data() const {
  // @@protoc_insertion_point(field_list:pos_rpc.WriteBlocksRequest.data)
  return data_;
}

// -------------------------------------------------------------------

// WriteBlocksResponse

// .pos_rpc.PosResult result = 1;
inline void WriteBlocksResponse::clear_result() {
  result_ = 0;
}
inline ::pos_rpc::PosResult WriteBlocksResponse::_internal_result() const {
  return static_cast< ::pos_rpc::PosResult >(result_);
}
inline ::pos_rpc::PosResult WriteBlocksResponse::result() const {
  // @@protoc_insertion_point(field_get:pos_rpc.WriteBlocksResponse.result)
  return _internal_result();
}
inline void WriteBlocksResponse::_internal_set_result(::pos_rpc::PosResult value) {
  
  result_ = value;
}
inline void WriteBlocksResponse::set_result(::pos_rpc::PosResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:pos_rpc.WriteBlocksResponse.result)
}

// string reason = 2;
inline bool WriteBlocksResponse::_internal_has_reason() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WriteBlocksResponse::has_reason() const {
  return _internal_has_reason();
}
inline void WriteBlocksResponse::clear_reason() {
  reason_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WriteBlocksResponse::reason() const {
  // @@protoc_insertion_point(field_get:pos_rpc.WriteBlocksResponse.reason)
  return _internal_reason();
}
inline void WriteBlocksResponse::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:pos_rpc.WriteBlocksResponse.reason)
}
inline std::string* WriteBlocksResponse::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:pos_rpc.WriteBlocksResponse.reason)
  return _internal_mutable_reason();
}
inline const std::string& WriteBlocksResponse::_internal_reason() const {
  return reason_.Get();
}
inline void WriteBlocksResponse::_internal_set_reason(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WriteBlocksResponse::set_reason(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pos_rpc.WriteBlocksResponse.reason)
}
inline void WriteBlocksResponse::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pos_rpc.WriteBlocksResponse.reason)
}
inline void WriteBlocksResponse::set_reason(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pos_rpc.WriteBlocksResponse.reason)
}
inline std::string* WriteBlocksResponse::_internal_mutable_reason() {
  _has_bits_[0] |= 0x00000001u;
  return reason_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WriteBlocksResponse::release_reason() {
  // @@protoc_insertion_point(field_release:pos_rpc.WriteBlocksResponse.reason)
  if (!_internal_has_reason()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return reason_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WriteBlocksResponse::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pos_rpc.WriteBlocksResponse.reason)
}

// -------------------------------------------------------------------

// WriteHostBlocksRequest

// string array_name = 1;
inline void WriteHostBlocksRequest::clear_array_name() {
  array_name_.ClearToEmpty();
}
inline const std::string& WriteHostBlocksRequest::array_name() const {
  // @@protoc_insertion_point(field_get:pos_rpc.WriteHostBlocksRequest.array_name)
  return _internal_array_name();
}
inline void WriteHostBlocksRequest::set_array_name(const std::string& value) {
  _internal_set_array_name(value);
  // @@protoc_insertion_point(field_set:pos_rpc.WriteHostBlocksRequest.array_name)
}
inline std::string* WriteHostBlocksRequest::mutable_array_name() {
  // @@protoc_insertion_point(field_mutable:pos_rpc.WriteHostBlocksRequest.array_name)
  return _internal_mutable_array_name();
}
inline const std::string& WriteHostBlocksRequest::_internal_array_name() const {
  return array_name_.Get();
}
inline void WriteHostBlocksRequest::_internal_set_array_name(const std::string& value) {
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WriteHostBlocksRequest::set_array_name(std::string&& value) {
  
  array_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pos_rpc.WriteHostBlocksRequest.array_name)
}
inline void WriteHostBlocksRequest::set_array_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pos_rpc.WriteHostBlocksRequest.array_name)
}
inline void WriteHostBlocksRequest::set_array_name(const char* value,
    size_t size) {
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pos_rpc.WriteHostBlocksRequest.array_name)
}
inline std::string* WriteHostBlocksRequest::_internal_mutable_array_name() {
  
  return array_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WriteHostBlocksRequest::release_array_name() {
  // @@protoc_insertion_point(field_release:pos_rpc.WriteHostBlocksRequest.array_name)
  return array_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WriteHostBlocksRequest::set_allocated_array_name(std::string* array_name) {
  if (array_name != nullptr) {
    
  } else {
    
  }
  array_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), array_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pos_rpc.WriteHostBlocksRequest.array_name)
}

// string volume_name = 2;
inline void WriteHostBlocksRequest::clear_volume_name() {
  volume_name_.ClearToEmpty();
}
inline const std::string& WriteHostBlocksRequest::volume_name() const {
  // @@protoc_insertion_point(field_get:pos_rpc.WriteHostBlocksRequest.volume_name)
  return _internal_volume_name();
}
inline void WriteHostBlocksRequest::set_volume_name(const std::string& value) {
  _internal_set_volume_name(value);
  // @@protoc_insertion_point(field_set:pos_rpc.WriteHostBlocksRequest.volume_name)
}
inline std::string* WriteHostBlocksRequest::mutable_volume_name() {
  // @@protoc_insertion_point(field_mutable:pos_rpc.WriteHostBlocksRequest.volume_name)
  return _internal_mutable_volume_name();
}
inline const std::string& WriteHostBlocksRequest::_internal_volume_name() const {
  return volume_name_.Get();
}
inline void WriteHostBlocksRequest::_internal_set_volume_name(const std::string& value) {
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WriteHostBlocksRequest::set_volume_name(std::string&& value) {
  
  volume_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pos_rpc.WriteHostBlocksRequest.volume_name)
}
inline void WriteHostBlocksRequest::set_volume_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pos_rpc.WriteHostBlocksRequest.volume_name)
}
inline void WriteHostBlocksRequest::set_volume_name(const char* value,
    size_t size) {
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pos_rpc.WriteHostBlocksRequest.volume_name)
}
inline std::string* WriteHostBlocksRequest::_internal_mutable_volume_name() {
  
  return volume_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WriteHostBlocksRequest::release_volume_name() {
  // @@protoc_insertion_point(field_release:pos_rpc.WriteHostBlocksRequest.volume_name)
  return volume_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WriteHostBlocksRequest::set_allocated_volume_name(std::string* volume_name) {
  if (volume_name != nullptr) {
    
  } else {
    
  }
  volume_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), volume_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pos_rpc.WriteHostBlocksRequest.volume_name)
}

// uint64 rba = 3;
inline void WriteHostBlocksRequest::clear_rba() {
  rba_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WriteHostBlocksRequest::_internal_rba() const {
  return rba_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WriteHostBlocksRequest::rba() const {
  // @@protoc_insertion_point(field_get:pos_rpc.WriteHostBlocksRequest.rba)
  return _internal_rba();
}
inline void WriteHostBlocksRequest::_internal_set_rba(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  rba_ = value;
}
inline void WriteHostBlocksRequest::set_rba(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_rba(value);
  // @@protoc_insertion_point(field_set:pos_rpc.WriteHostBlocksRequest.rba)
}

// uint64 num_blocks = 4;
inline void WriteHostBlocksRequest::clear_num_blocks() {
  num_blocks_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WriteHostBlocksRequest::_internal_num_blocks() const {
  return num_blocks_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WriteHostBlocksRequest::num_blocks() const {
  // @@protoc_insertion_point(field_get:pos_rpc.WriteHostBlocksRequest.num_blocks)
  return _internal_num_blocks();
}
inline void WriteHostBlocksRequest::_internal_set_num_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  num_blocks_ = value;
}
inline void WriteHostBlocksRequest::set_num_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_num_blocks(value);
  // @@protoc_insertion_point(field_set:pos_rpc.WriteHostBlocksRequest.num_blocks)
}

// uint64 lsn = 5;
inline void WriteHostBlocksRequest::clear_lsn() {
  lsn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WriteHostBlocksRequest::_internal_lsn() const {
  return lsn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WriteHostBlocksRequest::lsn() const {
  // @@protoc_insertion_point(field_get:pos_rpc.WriteHostBlocksRequest.lsn)
  return _internal_lsn();
}
inline void WriteHostBlocksRequest::_internal_set_lsn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  lsn_ = value;
}
inline void WriteHostBlocksRequest::set_lsn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lsn(value);
  // @@protoc_insertion_point(field_set:pos_rpc.WriteHostBlocksRequest.lsn)
}

// -------------------------------------------------------------------

// WriteHostBlocksResponse

// .pos_rpc.PosResult result = 1;
inline void WriteHostBlocksResponse::clear_result() {
  result_ = 0;
}
inline ::pos_rpc::PosResult WriteHostBlocksResponse::_internal_result() const {
  return static_cast< ::pos_rpc::PosResult >(result_);
}
inline ::pos_rpc::PosResult WriteHostBlocksResponse::result() const {
  // @@protoc_insertion_point(field_get:pos_rpc.WriteHostBlocksResponse.result)
  return _internal_result();
}
inline void WriteHostBlocksResponse::_internal_set_result(::pos_rpc::PosResult value) {
  
  result_ = value;
}
inline void WriteHostBlocksResponse::set_result(::pos_rpc::PosResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:pos_rpc.WriteHostBlocksResponse.result)
}

// string reason = 2;
inline bool WriteHostBlocksResponse::_internal_has_reason() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WriteHostBlocksResponse::has_reason() const {
  return _internal_has_reason();
}
inline void WriteHostBlocksResponse::clear_reason() {
  reason_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WriteHostBlocksResponse::reason() const {
  // @@protoc_insertion_point(field_get:pos_rpc.WriteHostBlocksResponse.reason)
  return _internal_reason();
}
inline void WriteHostBlocksResponse::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:pos_rpc.WriteHostBlocksResponse.reason)
}
inline std::string* WriteHostBlocksResponse::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:pos_rpc.WriteHostBlocksResponse.reason)
  return _internal_mutable_reason();
}
inline const std::string& WriteHostBlocksResponse::_internal_reason() const {
  return reason_.Get();
}
inline void WriteHostBlocksResponse::_internal_set_reason(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WriteHostBlocksResponse::set_reason(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pos_rpc.WriteHostBlocksResponse.reason)
}
inline void WriteHostBlocksResponse::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pos_rpc.WriteHostBlocksResponse.reason)
}
inline void WriteHostBlocksResponse::set_reason(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pos_rpc.WriteHostBlocksResponse.reason)
}
inline std::string* WriteHostBlocksResponse::_internal_mutable_reason() {
  _has_bits_[0] |= 0x00000001u;
  return reason_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WriteHostBlocksResponse::release_reason() {
  // @@protoc_insertion_point(field_release:pos_rpc.WriteHostBlocksResponse.reason)
  if (!_internal_has_reason()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return reason_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WriteHostBlocksResponse::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pos_rpc.WriteHostBlocksResponse.reason)
}

// -------------------------------------------------------------------

// CompleteHostWriteRequest

// string array_name = 1;
inline void CompleteHostWriteRequest::clear_array_name() {
  array_name_.ClearToEmpty();
}
inline const std::string& CompleteHostWriteRequest::array_name() const {
  // @@protoc_insertion_point(field_get:pos_rpc.CompleteHostWriteRequest.array_name)
  return _internal_array_name();
}
inline void CompleteHostWriteRequest::set_array_name(const std::string& value) {
  _internal_set_array_name(value);
  // @@protoc_insertion_point(field_set:pos_rpc.CompleteHostWriteRequest.array_name)
}
inline std::string* CompleteHostWriteRequest::mutable_array_name() {
  // @@protoc_insertion_point(field_mutable:pos_rpc.CompleteHostWriteRequest.array_name)
  return _internal_mutable_array_name();
}
inline const std::string& CompleteHostWriteRequest::_internal_array_name() const {
  return array_name_.Get();
}
inline void CompleteHostWriteRequest::_internal_set_array_name(const std::string& value) {
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CompleteHostWriteRequest::set_array_name(std::string&& value) {
  
  array_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pos_rpc.CompleteHostWriteRequest.array_name)
}
inline void CompleteHostWriteRequest::set_array_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pos_rpc.CompleteHostWriteRequest.array_name)
}
inline void CompleteHostWriteRequest::set_array_name(const char* value,
    size_t size) {
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pos_rpc.CompleteHostWriteRequest.array_name)
}
inline std::string* CompleteHostWriteRequest::_internal_mutable_array_name() {
  
  return array_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CompleteHostWriteRequest::release_array_name() {
  // @@protoc_insertion_point(field_release:pos_rpc.CompleteHostWriteRequest.array_name)
  return array_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CompleteHostWriteRequest::set_allocated_array_name(std::string* array_name) {
  if (array_name != nullptr) {
    
  } else {
    
  }
  array_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), array_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pos_rpc.CompleteHostWriteRequest.array_name)
}

// string volume_name = 2;
inline void CompleteHostWriteRequest::clear_volume_name() {
  volume_name_.ClearToEmpty();
}
inline const std::string& CompleteHostWriteRequest::volume_name() const {
  // @@protoc_insertion_point(field_get:pos_rpc.CompleteHostWriteRequest.volume_name)
  return _internal_volume_name();
}
inline void CompleteHostWriteRequest::set_volume_name(const std::string& value) {
  _internal_set_volume_name(value);
  // @@protoc_insertion_point(field_set:pos_rpc.CompleteHostWriteRequest.volume_name)
}
inline std::string* CompleteHostWriteRequest::mutable_volume_name() {
  // @@protoc_insertion_point(field_mutable:pos_rpc.CompleteHostWriteRequest.volume_name)
  return _internal_mutable_volume_name();
}
inline const std::string& CompleteHostWriteRequest::_internal_volume_name() const {
  return volume_name_.Get();
}
inline void CompleteHostWriteRequest::_internal_set_volume_name(const std::string& value) {
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CompleteHostWriteRequest::set_volume_name(std::string&& value) {
  
  volume_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pos_rpc.CompleteHostWriteRequest.volume_name)
}
inline void CompleteHostWriteRequest::set_volume_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pos_rpc.CompleteHostWriteRequest.volume_name)
}
inline void CompleteHostWriteRequest::set_volume_name(const char* value,
    size_t size) {
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pos_rpc.CompleteHostWriteRequest.volume_name)
}
inline std::string* CompleteHostWriteRequest::_internal_mutable_volume_name() {
  
  return volume_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CompleteHostWriteRequest::release_volume_name() {
  // @@protoc_insertion_point(field_release:pos_rpc.CompleteHostWriteRequest.volume_name)
  return volume_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CompleteHostWriteRequest::set_allocated_volume_name(std::string* volume_name) {
  if (volume_name != nullptr) {
    
  } else {
    
  }
  volume_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), volume_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pos_rpc.CompleteHostWriteRequest.volume_name)
}

// uint64 lsn = 3;
inline void CompleteHostWriteRequest::clear_lsn() {
  lsn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CompleteHostWriteRequest::_internal_lsn() const {
  return lsn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CompleteHostWriteRequest::lsn() const {
  // @@protoc_insertion_point(field_get:pos_rpc.CompleteHostWriteRequest.lsn)
  return _internal_lsn();
}
inline void CompleteHostWriteRequest::_internal_set_lsn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  lsn_ = value;
}
inline void CompleteHostWriteRequest::set_lsn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lsn(value);
  // @@protoc_insertion_point(field_set:pos_rpc.CompleteHostWriteRequest.lsn)
}

// -------------------------------------------------------------------

// CompleteHostWriteResponse

// .pos_rpc.PosResult result = 1;
inline void CompleteHostWriteResponse::clear_result() {
  result_ = 0;
}
inline ::pos_rpc::PosResult CompleteHostWriteResponse::_internal_result() const {
  return static_cast< ::pos_rpc::PosResult >(result_);
}
inline ::pos_rpc::PosResult CompleteHostWriteResponse::result() const {
  // @@protoc_insertion_point(field_get:pos_rpc.CompleteHostWriteResponse.result)
  return _internal_result();
}
inline void CompleteHostWriteResponse::_internal_set_result(::pos_rpc::PosResult value) {
  
  result_ = value;
}
inline void CompleteHostWriteResponse::set_result(::pos_rpc::PosResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:pos_rpc.CompleteHostWriteResponse.result)
}

// string reason = 2;
inline bool CompleteHostWriteResponse::_internal_has_reason() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CompleteHostWriteResponse::has_reason() const {
  return _internal_has_reason();
}
inline void CompleteHostWriteResponse::clear_reason() {
  reason_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CompleteHostWriteResponse::reason() const {
  // @@protoc_insertion_point(field_get:pos_rpc.CompleteHostWriteResponse.reason)
  return _internal_reason();
}
inline void CompleteHostWriteResponse::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:pos_rpc.CompleteHostWriteResponse.reason)
}
inline std::string* CompleteHostWriteResponse::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:pos_rpc.CompleteHostWriteResponse.reason)
  return _internal_mutable_reason();
}
inline const std::string& CompleteHostWriteResponse::_internal_reason() const {
  return reason_.Get();
}
inline void CompleteHostWriteResponse::_internal_set_reason(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CompleteHostWriteResponse::set_reason(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pos_rpc.CompleteHostWriteResponse.reason)
}
inline void CompleteHostWriteResponse::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pos_rpc.CompleteHostWriteResponse.reason)
}
inline void CompleteHostWriteResponse::set_reason(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pos_rpc.CompleteHostWriteResponse.reason)
}
inline std::string* CompleteHostWriteResponse::_internal_mutable_reason() {
  _has_bits_[0] |= 0x00000001u;
  return reason_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CompleteHostWriteResponse::release_reason() {
  // @@protoc_insertion_point(field_release:pos_rpc.CompleteHostWriteResponse.reason)
  if (!_internal_has_reason()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return reason_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CompleteHostWriteResponse::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pos_rpc.CompleteHostWriteResponse.reason)
}

// -------------------------------------------------------------------

// StartVolumeSyncRequest

// string array_name = 1;
inline void StartVolumeSyncRequest::clear_array_name() {
  array_name_.ClearToEmpty();
}
inline const std::string& StartVolumeSyncRequest::array_name() const {
  // @@protoc_insertion_point(field_get:pos_rpc.StartVolumeSyncRequest.array_name)
  return _internal_array_name();
}
inline void StartVolumeSyncRequest::set_array_name(const std::string& value) {
  _internal_set_array_name(value);
  // @@protoc_insertion_point(field_set:pos_rpc.StartVolumeSyncRequest.array_name)
}
inline std::string* StartVolumeSyncRequest::mutable_array_name() {
  // @@protoc_insertion_point(field_mutable:pos_rpc.StartVolumeSyncRequest.array_name)
  return _internal_mutable_array_name();
}
inline const std::string& StartVolumeSyncRequest::_internal_array_name() const {
  return array_name_.Get();
}
inline void StartVolumeSyncRequest::_internal_set_array_name(const std::string& value) {
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StartVolumeSyncRequest::set_array_name(std::string&& value) {
  
  array_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pos_rpc.StartVolumeSyncRequest.array_name)
}
inline void StartVolumeSyncRequest::set_array_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pos_rpc.StartVolumeSyncRequest.array_name)
}
inline void StartVolumeSyncRequest::set_array_name(const char* value,
    size_t size) {
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pos_rpc.StartVolumeSyncRequest.array_name)
}
inline std::string* StartVolumeSyncRequest::_internal_mutable_array_name() {
  
  return array_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StartVolumeSyncRequest::release_array_name() {
  // @@protoc_insertion_point(field_release:pos_rpc.StartVolumeSyncRequest.array_name)
  return array_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartVolumeSyncRequest::set_allocated_array_name(std::string* array_name) {
  if (array_name != nullptr) {
    
  } else {
    
  }
  array_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), array_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pos_rpc.StartVolumeSyncRequest.array_name)
}

// string volume_name = 2;
inline void StartVolumeSyncRequest::clear_volume_name() {
  volume_name_.ClearToEmpty();
}
inline const std::string& StartVolumeSyncRequest::volume_name() const {
  // @@protoc_insertion_point(field_get:pos_rpc.StartVolumeSyncRequest.volume_name)
  return _internal_volume_name();
}
inline void StartVolumeSyncRequest::set_volume_name(const std::string& value) {
  _internal_set_volume_name(value);
  // @@protoc_insertion_point(field_set:pos_rpc.StartVolumeSyncRequest.volume_name)
}
inline std::string* StartVolumeSyncRequest::mutable_volume_name() {
  // @@protoc_insertion_point(field_mutable:pos_rpc.StartVolumeSyncRequest.volume_name)
  return _internal_mutable_volume_name();
}
inline const std::string& StartVolumeSyncRequest::_internal_volume_name() const {
  return volume_name_.Get();
}
inline void StartVolumeSyncRequest::_internal_set_volume_name(const std::string& value) {
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StartVolumeSyncRequest::set_volume_name(std::string&& value) {
  
  volume_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pos_rpc.StartVolumeSyncRequest.volume_name)
}
inline void StartVolumeSyncRequest::set_volume_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pos_rpc.StartVolumeSyncRequest.volume_name)
}
inline void StartVolumeSyncRequest::set_volume_name(const char* value,
    size_t size) {
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pos_rpc.StartVolumeSyncRequest.volume_name)
}
inline std::string* StartVolumeSyncRequest::_internal_mutable_volume_name() {
  
  return volume_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StartVolumeSyncRequest::release_volume_name() {
  // @@protoc_insertion_point(field_release:pos_rpc.StartVolumeSyncRequest.volume_name)
  return volume_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartVolumeSyncRequest::set_allocated_volume_name(std::string* volume_name) {
  if (volume_name != nullptr) {
    
  } else {
    
  }
  volume_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), volume_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pos_rpc.StartVolumeSyncRequest.volume_name)
}

// bool is_primary = 3;
inline void StartVolumeSyncRequest::clear_is_primary() {
  is_primary_ = false;
}
inline bool StartVolumeSyncRequest::_internal_is_primary() const {
  return is_primary_;
}
inline bool StartVolumeSyncRequest::is_primary() const {
  // @@protoc_insertion_point(field_get:pos_rpc.StartVolumeSyncRequest.is_primary)
  return _internal_is_primary();
}
inline void StartVolumeSyncRequest::_internal_set_is_primary(bool value) {
  
  is_primary_ = value;
}
inline void StartVolumeSyncRequest::set_is_primary(bool value) {
  _internal_set_is_primary(value);
  // @@protoc_insertion_point(field_set:pos_rpc.StartVolumeSyncRequest.is_primary)
}

// -------------------------------------------------------------------

// StartVolumeSyncResponse

// .pos_rpc.PosResult result = 1;
inline void StartVolumeSyncResponse::clear_result() {
  result_ = 0;
}
inline ::pos_rpc::PosResult StartVolumeSyncResponse::_internal_result() const {
  return static_cast< ::pos_rpc::PosResult >(result_);
}
inline ::pos_rpc::PosResult StartVolumeSyncResponse::result() const {
  // @@protoc_insertion_point(field_get:pos_rpc.StartVolumeSyncResponse.result)
  return _internal_result();
}
inline void StartVolumeSyncResponse::_internal_set_result(::pos_rpc::PosResult value) {
  
  result_ = value;
}
inline void StartVolumeSyncResponse::set_result(::pos_rpc::PosResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:pos_rpc.StartVolumeSyncResponse.result)
}

// string reason = 2;
inline bool StartVolumeSyncResponse::_internal_has_reason() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StartVolumeSyncResponse::has_reason() const {
  return _internal_has_reason();
}
inline void StartVolumeSyncResponse::clear_reason() {
  reason_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StartVolumeSyncResponse::reason() const {
  // @@protoc_insertion_point(field_get:pos_rpc.StartVolumeSyncResponse.reason)
  return _internal_reason();
}
inline void StartVolumeSyncResponse::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:pos_rpc.StartVolumeSyncResponse.reason)
}
inline std::string* StartVolumeSyncResponse::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:pos_rpc.StartVolumeSyncResponse.reason)
  return _internal_mutable_reason();
}
inline const std::string& StartVolumeSyncResponse::_internal_reason() const {
  return reason_.Get();
}
inline void StartVolumeSyncResponse::_internal_set_reason(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StartVolumeSyncResponse::set_reason(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pos_rpc.StartVolumeSyncResponse.reason)
}
inline void StartVolumeSyncResponse::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pos_rpc.StartVolumeSyncResponse.reason)
}
inline void StartVolumeSyncResponse::set_reason(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pos_rpc.StartVolumeSyncResponse.reason)
}
inline std::string* StartVolumeSyncResponse::_internal_mutable_reason() {
  _has_bits_[0] |= 0x00000001u;
  return reason_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StartVolumeSyncResponse::release_reason() {
  // @@protoc_insertion_point(field_release:pos_rpc.StartVolumeSyncResponse.reason)
  if (!_internal_has_reason()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return reason_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartVolumeSyncResponse::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pos_rpc.StartVolumeSyncResponse.reason)
}

// -------------------------------------------------------------------

// FinishVolumeSyncRequest

// string array_name = 1;
inline void FinishVolumeSyncRequest::clear_array_name() {
  array_name_.ClearToEmpty();
}
inline const std::string& FinishVolumeSyncRequest::array_name() const {
  // @@protoc_insertion_point(field_get:pos_rpc.FinishVolumeSyncRequest.array_name)
  return _internal_array_name();
}
inline void FinishVolumeSyncRequest::set_array_name(const std::string& value) {
  _internal_set_array_name(value);
  // @@protoc_insertion_point(field_set:pos_rpc.FinishVolumeSyncRequest.array_name)
}
inline std::string* FinishVolumeSyncRequest::mutable_array_name() {
  // @@protoc_insertion_point(field_mutable:pos_rpc.FinishVolumeSyncRequest.array_name)
  return _internal_mutable_array_name();
}
inline const std::string& FinishVolumeSyncRequest::_internal_array_name() const {
  return array_name_.Get();
}
inline void FinishVolumeSyncRequest::_internal_set_array_name(const std::string& value) {
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FinishVolumeSyncRequest::set_array_name(std::string&& value) {
  
  array_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pos_rpc.FinishVolumeSyncRequest.array_name)
}
inline void FinishVolumeSyncRequest::set_array_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pos_rpc.FinishVolumeSyncRequest.array_name)
}
inline void FinishVolumeSyncRequest::set_array_name(const char* value,
    size_t size) {
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pos_rpc.FinishVolumeSyncRequest.array_name)
}
inline std::string* FinishVolumeSyncRequest::_internal_mutable_array_name() {
  
  return array_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FinishVolumeSyncRequest::release_array_name() {
  // @@protoc_insertion_point(field_release:pos_rpc.FinishVolumeSyncRequest.array_name)
  return array_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FinishVolumeSyncRequest::set_allocated_array_name(std::string* array_name) {
  if (array_name != nullptr) {
    
  } else {
    
  }
  array_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), array_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pos_rpc.FinishVolumeSyncRequest.array_name)
}

// string volume_name = 2;
inline void FinishVolumeSyncRequest::clear_volume_name() {
  volume_name_.ClearToEmpty();
}
inline const std::string& FinishVolumeSyncRequest::volume_name() const {
  // @@protoc_insertion_point(field_get:pos_rpc.FinishVolumeSyncRequest.volume_name)
  return _internal_volume_name();
}
inline void FinishVolumeSyncRequest::set_volume_name(const std::string& value) {
  _internal_set_volume_name(value);
  // @@protoc_insertion_point(field_set:pos_rpc.FinishVolumeSyncRequest.volume_name)
}
inline std::string* FinishVolumeSyncRequest::mutable_volume_name() {
  // @@protoc_insertion_point(field_mutable:pos_rpc.FinishVolumeSyncRequest.volume_name)
  return _internal_mutable_volume_name();
}
inline const std::string& FinishVolumeSyncRequest::_internal_volume_name() const {
  return volume_name_.Get();
}
inline void FinishVolumeSyncRequest::_internal_set_volume_name(const std::string& value) {
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FinishVolumeSyncRequest::set_volume_name(std::string&& value) {
  
  volume_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pos_rpc.FinishVolumeSyncRequest.volume_name)
}
inline void FinishVolumeSyncRequest::set_volume_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pos_rpc.FinishVolumeSyncRequest.volume_name)
}
inline void FinishVolumeSyncRequest::set_volume_name(const char* value,
    size_t size) {
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pos_rpc.FinishVolumeSyncRequest.volume_name)
}
inline std::string* FinishVolumeSyncRequest::_internal_mutable_volume_name() {
  
  return volume_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FinishVolumeSyncRequest::release_volume_name() {
  // @@protoc_insertion_point(field_release:pos_rpc.FinishVolumeSyncRequest.volume_name)
  return volume_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FinishVolumeSyncRequest::set_allocated_volume_name(std::string* volume_name) {
  if (volume_name != nullptr) {
    
  } else {
    
  }
  volume_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), volume_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pos_rpc.FinishVolumeSyncRequest.volume_name)
}

// bool is_primary = 3;
inline void FinishVolumeSyncRequest::clear_is_primary() {
  is_primary_ = false;
}
inline bool FinishVolumeSyncRequest::_internal_is_primary() const {
  return is_primary_;
}
inline bool FinishVolumeSyncRequest::is_primary() const {
  // @@protoc_insertion_point(field_get:pos_rpc.FinishVolumeSyncRequest.is_primary)
  return _internal_is_primary();
}
inline void FinishVolumeSyncRequest::_internal_set_is_primary(bool value) {
  
  is_primary_ = value;
}
inline void FinishVolumeSyncRequest::set_is_primary(bool value) {
  _internal_set_is_primary(value);
  // @@protoc_insertion_point(field_set:pos_rpc.FinishVolumeSyncRequest.is_primary)
}

// -------------------------------------------------------------------

// FinishVolumeSyncResponse

// .pos_rpc.PosResult result = 1;
inline void FinishVolumeSyncResponse::clear_result() {
  result_ = 0;
}
inline ::pos_rpc::PosResult FinishVolumeSyncResponse::_internal_result() const {
  return static_cast< ::pos_rpc::PosResult >(result_);
}
inline ::pos_rpc::PosResult FinishVolumeSyncResponse::result() const {
  // @@protoc_insertion_point(field_get:pos_rpc.FinishVolumeSyncResponse.result)
  return _internal_result();
}
inline void FinishVolumeSyncResponse::_internal_set_result(::pos_rpc::PosResult value) {
  
  result_ = value;
}
inline void FinishVolumeSyncResponse::set_result(::pos_rpc::PosResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:pos_rpc.FinishVolumeSyncResponse.result)
}

// string reason = 2;
inline bool FinishVolumeSyncResponse::_internal_has_reason() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FinishVolumeSyncResponse::has_reason() const {
  return _internal_has_reason();
}
inline void FinishVolumeSyncResponse::clear_reason() {
  reason_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FinishVolumeSyncResponse::reason() const {
  // @@protoc_insertion_point(field_get:pos_rpc.FinishVolumeSyncResponse.reason)
  return _internal_reason();
}
inline void FinishVolumeSyncResponse::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:pos_rpc.FinishVolumeSyncResponse.reason)
}
inline std::string* FinishVolumeSyncResponse::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:pos_rpc.FinishVolumeSyncResponse.reason)
  return _internal_mutable_reason();
}
inline const std::string& FinishVolumeSyncResponse::_internal_reason() const {
  return reason_.Get();
}
inline void FinishVolumeSyncResponse::_internal_set_reason(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FinishVolumeSyncResponse::set_reason(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pos_rpc.FinishVolumeSyncResponse.reason)
}
inline void FinishVolumeSyncResponse::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pos_rpc.FinishVolumeSyncResponse.reason)
}
inline void FinishVolumeSyncResponse::set_reason(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pos_rpc.FinishVolumeSyncResponse.reason)
}
inline std::string* FinishVolumeSyncResponse::_internal_mutable_reason() {
  _has_bits_[0] |= 0x00000001u;
  return reason_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FinishVolumeSyncResponse::release_reason() {
  // @@protoc_insertion_point(field_release:pos_rpc.FinishVolumeSyncResponse.reason)
  if (!_internal_has_reason()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return reason_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FinishVolumeSyncResponse::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pos_rpc.FinishVolumeSyncResponse.reason)
}

// -------------------------------------------------------------------

// SuspendWriteRequest

// string array_name = 1;
inline void SuspendWriteRequest::clear_array_name() {
  array_name_.ClearToEmpty();
}
inline const std::string& SuspendWriteRequest::array_name() const {
  // @@protoc_insertion_point(field_get:pos_rpc.SuspendWriteRequest.array_name)
  return _internal_array_name();
}
inline void SuspendWriteRequest::set_array_name(const std::string& value) {
  _internal_set_array_name(value);
  // @@protoc_insertion_point(field_set:pos_rpc.SuspendWriteRequest.array_name)
}
inline std::string* SuspendWriteRequest::mutable_array_name() {
  // @@protoc_insertion_point(field_mutable:pos_rpc.SuspendWriteRequest.array_name)
  return _internal_mutable_array_name();
}
inline const std::string& SuspendWriteRequest::_internal_array_name() const {
  return array_name_.Get();
}
inline void SuspendWriteRequest::_internal_set_array_name(const std::string& value) {
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SuspendWriteRequest::set_array_name(std::string&& value) {
  
  array_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pos_rpc.SuspendWriteRequest.array_name)
}
inline void SuspendWriteRequest::set_array_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pos_rpc.SuspendWriteRequest.array_name)
}
inline void SuspendWriteRequest::set_array_name(const char* value,
    size_t size) {
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pos_rpc.SuspendWriteRequest.array_name)
}
inline std::string* SuspendWriteRequest::_internal_mutable_array_name() {
  
  return array_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SuspendWriteRequest::release_array_name() {
  // @@protoc_insertion_point(field_release:pos_rpc.SuspendWriteRequest.array_name)
  return array_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SuspendWriteRequest::set_allocated_array_name(std::string* array_name) {
  if (array_name != nullptr) {
    
  } else {
    
  }
  array_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), array_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pos_rpc.SuspendWriteRequest.array_name)
}

// string volume_name = 2;
inline void SuspendWriteRequest::clear_volume_name() {
  volume_name_.ClearToEmpty();
}
inline const std::string& SuspendWriteRequest::volume_name() const {
  // @@protoc_insertion_point(field_get:pos_rpc.SuspendWriteRequest.volume_name)
  return _internal_volume_name();
}
inline void SuspendWriteRequest::set_volume_name(const std::string& value) {
  _internal_set_volume_name(value);
  // @@protoc_insertion_point(field_set:pos_rpc.SuspendWriteRequest.volume_name)
}
inline std::string* SuspendWriteRequest::mutable_volume_name() {
  // @@protoc_insertion_point(field_mutable:pos_rpc.SuspendWriteRequest.volume_name)
  return _internal_mutable_volume_name();
}
inline const std::string& SuspendWriteRequest::_internal_volume_name() const {
  return volume_name_.Get();
}
inline void SuspendWriteRequest::_internal_set_volume_name(const std::string& value) {
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SuspendWriteRequest::set_volume_name(std::string&& value) {
  
  volume_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pos_rpc.SuspendWriteRequest.volume_name)
}
inline void SuspendWriteRequest::set_volume_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pos_rpc.SuspendWriteRequest.volume_name)
}
inline void SuspendWriteRequest::set_volume_name(const char* value,
    size_t size) {
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pos_rpc.SuspendWriteRequest.volume_name)
}
inline std::string* SuspendWriteRequest::_internal_mutable_volume_name() {
  
  return volume_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SuspendWriteRequest::release_volume_name() {
  // @@protoc_insertion_point(field_release:pos_rpc.SuspendWriteRequest.volume_name)
  return volume_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SuspendWriteRequest::set_allocated_volume_name(std::string* volume_name) {
  if (volume_name != nullptr) {
    
  } else {
    
  }
  volume_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), volume_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pos_rpc.SuspendWriteRequest.volume_name)
}

// -------------------------------------------------------------------

// SuspendWriteResponse

// .pos_rpc.PosResult result = 1;
inline void SuspendWriteResponse::clear_result() {
  result_ = 0;
}
inline ::pos_rpc::PosResult SuspendWriteResponse::_internal_result() const {
  return static_cast< ::pos_rpc::PosResult >(result_);
}
inline ::pos_rpc::PosResult SuspendWriteResponse::result() const {
  // @@protoc_insertion_point(field_get:pos_rpc.SuspendWriteResponse.result)
  return _internal_result();
}
inline void SuspendWriteResponse::_internal_set_result(::pos_rpc::PosResult value) {
  
  result_ = value;
}
inline void SuspendWriteResponse::set_result(::pos_rpc::PosResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:pos_rpc.SuspendWriteResponse.result)
}

// string reason = 2;
inline bool SuspendWriteResponse::_internal_has_reason() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SuspendWriteResponse::has_reason() const {
  return _internal_has_reason();
}
inline void SuspendWriteResponse::clear_reason() {
  reason_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SuspendWriteResponse::reason() const {
  // @@protoc_insertion_point(field_get:pos_rpc.SuspendWriteResponse.reason)
  return _internal_reason();
}
inline void SuspendWriteResponse::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:pos_rpc.SuspendWriteResponse.reason)
}
inline std::string* SuspendWriteResponse::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:pos_rpc.SuspendWriteResponse.reason)
  return _internal_mutable_reason();
}
inline const std::string& SuspendWriteResponse::_internal_reason() const {
  return reason_.Get();
}
inline void SuspendWriteResponse::_internal_set_reason(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SuspendWriteResponse::set_reason(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pos_rpc.SuspendWriteResponse.reason)
}
inline void SuspendWriteResponse::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pos_rpc.SuspendWriteResponse.reason)
}
inline void SuspendWriteResponse::set_reason(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pos_rpc.SuspendWriteResponse.reason)
}
inline std::string* SuspendWriteResponse::_internal_mutable_reason() {
  _has_bits_[0] |= 0x00000001u;
  return reason_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SuspendWriteResponse::release_reason() {
  // @@protoc_insertion_point(field_release:pos_rpc.SuspendWriteResponse.reason)
  if (!_internal_has_reason()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return reason_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SuspendWriteResponse::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pos_rpc.SuspendWriteResponse.reason)
}

// -------------------------------------------------------------------

// ResumeWriteRequest

// string array_name = 1;
inline void ResumeWriteRequest::clear_array_name() {
  array_name_.ClearToEmpty();
}
inline const std::string& ResumeWriteRequest::array_name() const {
  // @@protoc_insertion_point(field_get:pos_rpc.ResumeWriteRequest.array_name)
  return _internal_array_name();
}
inline void ResumeWriteRequest::set_array_name(const std::string& value) {
  _internal_set_array_name(value);
  // @@protoc_insertion_point(field_set:pos_rpc.ResumeWriteRequest.array_name)
}
inline std::string* ResumeWriteRequest::mutable_array_name() {
  // @@protoc_insertion_point(field_mutable:pos_rpc.ResumeWriteRequest.array_name)
  return _internal_mutable_array_name();
}
inline const std::string& ResumeWriteRequest::_internal_array_name() const {
  return array_name_.Get();
}
inline void ResumeWriteRequest::_internal_set_array_name(const std::string& value) {
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResumeWriteRequest::set_array_name(std::string&& value) {
  
  array_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pos_rpc.ResumeWriteRequest.array_name)
}
inline void ResumeWriteRequest::set_array_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pos_rpc.ResumeWriteRequest.array_name)
}
inline void ResumeWriteRequest::set_array_name(const char* value,
    size_t size) {
  
  array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pos_rpc.ResumeWriteRequest.array_name)
}
inline std::string* ResumeWriteRequest::_internal_mutable_array_name() {
  
  return array_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResumeWriteRequest::release_array_name() {
  // @@protoc_insertion_point(field_release:pos_rpc.ResumeWriteRequest.array_name)
  return array_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResumeWriteRequest::set_allocated_array_name(std::string* array_name) {
  if (array_name != nullptr) {
    
  } else {
    
  }
  array_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), array_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pos_rpc.ResumeWriteRequest.array_name)
}

// string volume_name = 2;
inline void ResumeWriteRequest::clear_volume_name() {
  volume_name_.ClearToEmpty();
}
inline const std::string& ResumeWriteRequest::volume_name() const {
  // @@protoc_insertion_point(field_get:pos_rpc.ResumeWriteRequest.volume_name)
  return _internal_volume_name();
}
inline void ResumeWriteRequest::set_volume_name(const std::string& value) {
  _internal_set_volume_name(value);
  // @@protoc_insertion_point(field_set:pos_rpc.ResumeWriteRequest.volume_name)
}
inline std::string* ResumeWriteRequest::mutable_volume_name() {
  // @@protoc_insertion_point(field_mutable:pos_rpc.ResumeWriteRequest.volume_name)
  return _internal_mutable_volume_name();
}
inline const std::string& ResumeWriteRequest::_internal_volume_name() const {
  return volume_name_.Get();
}
inline void ResumeWriteRequest::_internal_set_volume_name(const std::string& value) {
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResumeWriteRequest::set_volume_name(std::string&& value) {
  
  volume_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pos_rpc.ResumeWriteRequest.volume_name)
}
inline void ResumeWriteRequest::set_volume_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pos_rpc.ResumeWriteRequest.volume_name)
}
inline void ResumeWriteRequest::set_volume_name(const char* value,
    size_t size) {
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pos_rpc.ResumeWriteRequest.volume_name)
}
inline std::string* ResumeWriteRequest::_internal_mutable_volume_name() {
  
  return volume_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResumeWriteRequest::release_volume_name() {
  // @@protoc_insertion_point(field_release:pos_rpc.ResumeWriteRequest.volume_name)
  return volume_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResumeWriteRequest::set_allocated_volume_name(std::string* volume_name) {
  if (volume_name != nullptr) {
    
  } else {
    
  }
  volume_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), volume_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pos_rpc.ResumeWriteRequest.volume_name)
}

// -------------------------------------------------------------------

// ResumeWriteResponse

// .pos_rpc.PosResult result = 1;
inline void ResumeWriteResponse::clear_result() {
  result_ = 0;
}
inline ::pos_rpc::PosResult ResumeWriteResponse::_internal_result() const {
  return static_cast< ::pos_rpc::PosResult >(result_);
}
inline ::pos_rpc::PosResult ResumeWriteResponse::result() const {
  // @@protoc_insertion_point(field_get:pos_rpc.ResumeWriteResponse.result)
  return _internal_result();
}
inline void ResumeWriteResponse::_internal_set_result(::pos_rpc::PosResult value) {
  
  result_ = value;
}
inline void ResumeWriteResponse::set_result(::pos_rpc::PosResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:pos_rpc.ResumeWriteResponse.result)
}

// string reason = 2;
inline bool ResumeWriteResponse::_internal_has_reason() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ResumeWriteResponse::has_reason() const {
  return _internal_has_reason();
}
inline void ResumeWriteResponse::clear_reason() {
  reason_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ResumeWriteResponse::reason() const {
  // @@protoc_insertion_point(field_get:pos_rpc.ResumeWriteResponse.reason)
  return _internal_reason();
}
inline void ResumeWriteResponse::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:pos_rpc.ResumeWriteResponse.reason)
}
inline std::string* ResumeWriteResponse::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:pos_rpc.ResumeWriteResponse.reason)
  return _internal_mutable_reason();
}
inline const std::string& ResumeWriteResponse::_internal_reason() const {
  return reason_.Get();
}
inline void ResumeWriteResponse::_internal_set_reason(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResumeWriteResponse::set_reason(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pos_rpc.ResumeWriteResponse.reason)
}
inline void ResumeWriteResponse::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pos_rpc.ResumeWriteResponse.reason)
}
inline void ResumeWriteResponse::set_reason(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pos_rpc.ResumeWriteResponse.reason)
}
inline std::string* ResumeWriteResponse::_internal_mutable_reason() {
  _has_bits_[0] |= 0x00000001u;
  return reason_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResumeWriteResponse::release_reason() {
  // @@protoc_insertion_point(field_release:pos_rpc.ResumeWriteResponse.reason)
  if (!_internal_has_reason()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return reason_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResumeWriteResponse::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pos_rpc.ResumeWriteResponse.reason)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pos_rpc

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pos_rpc::HealthCheckResponse_ServingStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pos_rpc::HealthCheckResponse_ServingStatus>() {
  return ::pos_rpc::HealthCheckResponse_ServingStatus_descriptor();
}
template <> struct is_proto_enum< ::pos_rpc::ArrayInfo_ArrayState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pos_rpc::ArrayInfo_ArrayState>() {
  return ::pos_rpc::ArrayInfo_ArrayState_descriptor();
}
template <> struct is_proto_enum< ::pos_rpc::VolumeInfo_VolumeState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pos_rpc::VolumeInfo_VolumeState>() {
  return ::pos_rpc::VolumeInfo_VolumeState_descriptor();
}
template <> struct is_proto_enum< ::pos_rpc::PosResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pos_rpc::PosResult>() {
  return ::pos_rpc::PosResult_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pos_5frpc_2eproto
