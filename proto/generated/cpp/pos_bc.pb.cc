// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pos_bc.proto

#include "pos_bc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace pos_bc {
constexpr SegmentInfoDataProto::SegmentInfoDataProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : valid_block_count_(0u)
  , occupied_stripe_count_(0u)
  , state_(0)
{}
struct SegmentInfoDataProtoDefaultTypeInternal {
  constexpr SegmentInfoDataProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SegmentInfoDataProtoDefaultTypeInternal() {}
  union {
    SegmentInfoDataProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SegmentInfoDataProtoDefaultTypeInternal _SegmentInfoDataProto_default_instance_;
constexpr SegmentCtxExtendedProto::SegmentCtxExtendedProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SegmentCtxExtendedProtoDefaultTypeInternal {
  constexpr SegmentCtxExtendedProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SegmentCtxExtendedProtoDefaultTypeInternal() {}
  union {
    SegmentCtxExtendedProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SegmentCtxExtendedProtoDefaultTypeInternal _SegmentCtxExtendedProto_default_instance_;
}  // namespace pos_bc
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pos_5fbc_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_pos_5fbc_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pos_5fbc_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pos_5fbc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pos_bc::SegmentInfoDataProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pos_bc::SegmentInfoDataProto, valid_block_count_),
  PROTOBUF_FIELD_OFFSET(::pos_bc::SegmentInfoDataProto, occupied_stripe_count_),
  PROTOBUF_FIELD_OFFSET(::pos_bc::SegmentInfoDataProto, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pos_bc::SegmentCtxExtendedProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pos_bc::SegmentInfoDataProto)},
  { 8, -1, sizeof(::pos_bc::SegmentCtxExtendedProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pos_bc::_SegmentInfoDataProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pos_bc::_SegmentCtxExtendedProto_default_instance_),
};

const char descriptor_table_protodef_pos_5fbc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014pos_bc.proto\022\006pos_bc\"{\n\024SegmentInfoDat"
  "aProto\022\031\n\021valid_block_count\030\001 \001(\r\022\035\n\025occ"
  "upied_stripe_count\030\002 \001(\r\022#\n\005state\030\003 \001(\0162"
  "\024.pos_bc.SegmentStateJ\004\010\004\020\025\" \n\027SegmentCt"
  "xExtendedProtoJ\005\010\001\020\351\007*C\n\014SegmentState\022\010\n"
  "\004FREE\020\000\022\t\n\005NVRAM\020\001\022\007\n\003SSD\020\002\022\n\n\006VICTIM\020\003\022"
  "\t\n\005ERROR\020\004b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pos_5fbc_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pos_5fbc_2eproto = {
  false, false, 258, descriptor_table_protodef_pos_5fbc_2eproto, "pos_bc.proto", 
  &descriptor_table_pos_5fbc_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_pos_5fbc_2eproto::offsets,
  file_level_metadata_pos_5fbc_2eproto, file_level_enum_descriptors_pos_5fbc_2eproto, file_level_service_descriptors_pos_5fbc_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_pos_5fbc_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pos_5fbc_2eproto);
  return descriptor_table_pos_5fbc_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_pos_5fbc_2eproto(&descriptor_table_pos_5fbc_2eproto);
namespace pos_bc {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SegmentState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pos_5fbc_2eproto);
  return file_level_enum_descriptors_pos_5fbc_2eproto[0];
}
bool SegmentState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SegmentInfoDataProto::_Internal {
 public:
};

SegmentInfoDataProto::SegmentInfoDataProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pos_bc.SegmentInfoDataProto)
}
SegmentInfoDataProto::SegmentInfoDataProto(const SegmentInfoDataProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&valid_block_count_, &from.valid_block_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&valid_block_count_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:pos_bc.SegmentInfoDataProto)
}

void SegmentInfoDataProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&valid_block_count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&valid_block_count_)) + sizeof(state_));
}

SegmentInfoDataProto::~SegmentInfoDataProto() {
  // @@protoc_insertion_point(destructor:pos_bc.SegmentInfoDataProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SegmentInfoDataProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SegmentInfoDataProto::ArenaDtor(void* object) {
  SegmentInfoDataProto* _this = reinterpret_cast< SegmentInfoDataProto* >(object);
  (void)_this;
}
void SegmentInfoDataProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SegmentInfoDataProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SegmentInfoDataProto::Clear() {
// @@protoc_insertion_point(message_clear_start:pos_bc.SegmentInfoDataProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&valid_block_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&valid_block_count_)) + sizeof(state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SegmentInfoDataProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 valid_block_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          valid_block_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 occupied_stripe_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          occupied_stripe_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pos_bc.SegmentState state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::pos_bc::SegmentState>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SegmentInfoDataProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pos_bc.SegmentInfoDataProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 valid_block_count = 1;
  if (this->valid_block_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_valid_block_count(), target);
  }

  // uint32 occupied_stripe_count = 2;
  if (this->occupied_stripe_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_occupied_stripe_count(), target);
  }

  // .pos_bc.SegmentState state = 3;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pos_bc.SegmentInfoDataProto)
  return target;
}

size_t SegmentInfoDataProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pos_bc.SegmentInfoDataProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 valid_block_count = 1;
  if (this->valid_block_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_valid_block_count());
  }

  // uint32 occupied_stripe_count = 2;
  if (this->occupied_stripe_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_occupied_stripe_count());
  }

  // .pos_bc.SegmentState state = 3;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SegmentInfoDataProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pos_bc.SegmentInfoDataProto)
  GOOGLE_DCHECK_NE(&from, this);
  const SegmentInfoDataProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SegmentInfoDataProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pos_bc.SegmentInfoDataProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pos_bc.SegmentInfoDataProto)
    MergeFrom(*source);
  }
}

void SegmentInfoDataProto::MergeFrom(const SegmentInfoDataProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pos_bc.SegmentInfoDataProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.valid_block_count() != 0) {
    _internal_set_valid_block_count(from._internal_valid_block_count());
  }
  if (from.occupied_stripe_count() != 0) {
    _internal_set_occupied_stripe_count(from._internal_occupied_stripe_count());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void SegmentInfoDataProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pos_bc.SegmentInfoDataProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SegmentInfoDataProto::CopyFrom(const SegmentInfoDataProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pos_bc.SegmentInfoDataProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentInfoDataProto::IsInitialized() const {
  return true;
}

void SegmentInfoDataProto::InternalSwap(SegmentInfoDataProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SegmentInfoDataProto, state_)
      + sizeof(SegmentInfoDataProto::state_)
      - PROTOBUF_FIELD_OFFSET(SegmentInfoDataProto, valid_block_count_)>(
          reinterpret_cast<char*>(&valid_block_count_),
          reinterpret_cast<char*>(&other->valid_block_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SegmentInfoDataProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SegmentCtxExtendedProto::_Internal {
 public:
};

SegmentCtxExtendedProto::SegmentCtxExtendedProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pos_bc.SegmentCtxExtendedProto)
}
SegmentCtxExtendedProto::SegmentCtxExtendedProto(const SegmentCtxExtendedProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pos_bc.SegmentCtxExtendedProto)
}

void SegmentCtxExtendedProto::SharedCtor() {
}

SegmentCtxExtendedProto::~SegmentCtxExtendedProto() {
  // @@protoc_insertion_point(destructor:pos_bc.SegmentCtxExtendedProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SegmentCtxExtendedProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SegmentCtxExtendedProto::ArenaDtor(void* object) {
  SegmentCtxExtendedProto* _this = reinterpret_cast< SegmentCtxExtendedProto* >(object);
  (void)_this;
}
void SegmentCtxExtendedProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SegmentCtxExtendedProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SegmentCtxExtendedProto::Clear() {
// @@protoc_insertion_point(message_clear_start:pos_bc.SegmentCtxExtendedProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SegmentCtxExtendedProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SegmentCtxExtendedProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pos_bc.SegmentCtxExtendedProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pos_bc.SegmentCtxExtendedProto)
  return target;
}

size_t SegmentCtxExtendedProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pos_bc.SegmentCtxExtendedProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SegmentCtxExtendedProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pos_bc.SegmentCtxExtendedProto)
  GOOGLE_DCHECK_NE(&from, this);
  const SegmentCtxExtendedProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SegmentCtxExtendedProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pos_bc.SegmentCtxExtendedProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pos_bc.SegmentCtxExtendedProto)
    MergeFrom(*source);
  }
}

void SegmentCtxExtendedProto::MergeFrom(const SegmentCtxExtendedProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pos_bc.SegmentCtxExtendedProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SegmentCtxExtendedProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pos_bc.SegmentCtxExtendedProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SegmentCtxExtendedProto::CopyFrom(const SegmentCtxExtendedProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pos_bc.SegmentCtxExtendedProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentCtxExtendedProto::IsInitialized() const {
  return true;
}

void SegmentCtxExtendedProto::InternalSwap(SegmentCtxExtendedProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SegmentCtxExtendedProto::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pos_bc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pos_bc::SegmentInfoDataProto* Arena::CreateMaybeMessage< ::pos_bc::SegmentInfoDataProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pos_bc::SegmentInfoDataProto >(arena);
}
template<> PROTOBUF_NOINLINE ::pos_bc::SegmentCtxExtendedProto* Arena::CreateMaybeMessage< ::pos_bc::SegmentCtxExtendedProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pos_bc::SegmentCtxExtendedProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
