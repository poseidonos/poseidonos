// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: cli.proto

#include "cli.pb.h"
#include "cli.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace grpc_cli {

static const char* PosCli_method_names[] = {
  "/grpc_cli.PosCli/SystemInfo",
  "/grpc_cli.PosCli/SystemStop",
  "/grpc_cli.PosCli/GetSystemProperty",
  "/grpc_cli.PosCli/SetSystemProperty",
  "/grpc_cli.PosCli/StartTelemetry",
  "/grpc_cli.PosCli/StopTelemetry",
  "/grpc_cli.PosCli/ResetEventWrr",
  "/grpc_cli.PosCli/ResetMbr",
  "/grpc_cli.PosCli/StopRebuilding",
  "/grpc_cli.PosCli/UpdateEventWrr",
  "/grpc_cli.PosCli/AddSpare",
  "/grpc_cli.PosCli/RemoveSpare",
  "/grpc_cli.PosCli/CreateArray",
  "/grpc_cli.PosCli/DeleteArray",
  "/grpc_cli.PosCli/MountArray",
  "/grpc_cli.PosCli/UnmountArray",
  "/grpc_cli.PosCli/ListArray",
  "/grpc_cli.PosCli/ArrayInfo",
};

std::unique_ptr< PosCli::Stub> PosCli::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PosCli::Stub> stub(new PosCli::Stub(channel, options));
  return stub;
}

PosCli::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SystemInfo_(PosCli_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SystemStop_(PosCli_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSystemProperty_(PosCli_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetSystemProperty_(PosCli_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StartTelemetry_(PosCli_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopTelemetry_(PosCli_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ResetEventWrr_(PosCli_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ResetMbr_(PosCli_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopRebuilding_(PosCli_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateEventWrr_(PosCli_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddSpare_(PosCli_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveSpare_(PosCli_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateArray_(PosCli_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteArray_(PosCli_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MountArray_(PosCli_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnmountArray_(PosCli_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListArray_(PosCli_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ArrayInfo_(PosCli_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status PosCli::Stub::SystemInfo(::grpc::ClientContext* context, const ::grpc_cli::SystemInfoRequest& request, ::grpc_cli::SystemInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpc_cli::SystemInfoRequest, ::grpc_cli::SystemInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SystemInfo_, context, request, response);
}

void PosCli::Stub::experimental_async::SystemInfo(::grpc::ClientContext* context, const ::grpc_cli::SystemInfoRequest* request, ::grpc_cli::SystemInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpc_cli::SystemInfoRequest, ::grpc_cli::SystemInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SystemInfo_, context, request, response, std::move(f));
}

void PosCli::Stub::experimental_async::SystemInfo(::grpc::ClientContext* context, const ::grpc_cli::SystemInfoRequest* request, ::grpc_cli::SystemInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SystemInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpc_cli::SystemInfoResponse>* PosCli::Stub::PrepareAsyncSystemInfoRaw(::grpc::ClientContext* context, const ::grpc_cli::SystemInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpc_cli::SystemInfoResponse, ::grpc_cli::SystemInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SystemInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpc_cli::SystemInfoResponse>* PosCli::Stub::AsyncSystemInfoRaw(::grpc::ClientContext* context, const ::grpc_cli::SystemInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSystemInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PosCli::Stub::SystemStop(::grpc::ClientContext* context, const ::grpc_cli::SystemStopRequest& request, ::grpc_cli::SystemStopResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpc_cli::SystemStopRequest, ::grpc_cli::SystemStopResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SystemStop_, context, request, response);
}

void PosCli::Stub::experimental_async::SystemStop(::grpc::ClientContext* context, const ::grpc_cli::SystemStopRequest* request, ::grpc_cli::SystemStopResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpc_cli::SystemStopRequest, ::grpc_cli::SystemStopResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SystemStop_, context, request, response, std::move(f));
}

void PosCli::Stub::experimental_async::SystemStop(::grpc::ClientContext* context, const ::grpc_cli::SystemStopRequest* request, ::grpc_cli::SystemStopResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SystemStop_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpc_cli::SystemStopResponse>* PosCli::Stub::PrepareAsyncSystemStopRaw(::grpc::ClientContext* context, const ::grpc_cli::SystemStopRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpc_cli::SystemStopResponse, ::grpc_cli::SystemStopRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SystemStop_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpc_cli::SystemStopResponse>* PosCli::Stub::AsyncSystemStopRaw(::grpc::ClientContext* context, const ::grpc_cli::SystemStopRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSystemStopRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PosCli::Stub::GetSystemProperty(::grpc::ClientContext* context, const ::grpc_cli::GetSystemPropertyRequest& request, ::grpc_cli::GetSystemPropertyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpc_cli::GetSystemPropertyRequest, ::grpc_cli::GetSystemPropertyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSystemProperty_, context, request, response);
}

void PosCli::Stub::experimental_async::GetSystemProperty(::grpc::ClientContext* context, const ::grpc_cli::GetSystemPropertyRequest* request, ::grpc_cli::GetSystemPropertyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpc_cli::GetSystemPropertyRequest, ::grpc_cli::GetSystemPropertyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSystemProperty_, context, request, response, std::move(f));
}

void PosCli::Stub::experimental_async::GetSystemProperty(::grpc::ClientContext* context, const ::grpc_cli::GetSystemPropertyRequest* request, ::grpc_cli::GetSystemPropertyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSystemProperty_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpc_cli::GetSystemPropertyResponse>* PosCli::Stub::PrepareAsyncGetSystemPropertyRaw(::grpc::ClientContext* context, const ::grpc_cli::GetSystemPropertyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpc_cli::GetSystemPropertyResponse, ::grpc_cli::GetSystemPropertyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSystemProperty_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpc_cli::GetSystemPropertyResponse>* PosCli::Stub::AsyncGetSystemPropertyRaw(::grpc::ClientContext* context, const ::grpc_cli::GetSystemPropertyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSystemPropertyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PosCli::Stub::SetSystemProperty(::grpc::ClientContext* context, const ::grpc_cli::SetSystemPropertyRequest& request, ::grpc_cli::SetSystemPropertyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpc_cli::SetSystemPropertyRequest, ::grpc_cli::SetSystemPropertyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetSystemProperty_, context, request, response);
}

void PosCli::Stub::experimental_async::SetSystemProperty(::grpc::ClientContext* context, const ::grpc_cli::SetSystemPropertyRequest* request, ::grpc_cli::SetSystemPropertyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpc_cli::SetSystemPropertyRequest, ::grpc_cli::SetSystemPropertyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSystemProperty_, context, request, response, std::move(f));
}

void PosCli::Stub::experimental_async::SetSystemProperty(::grpc::ClientContext* context, const ::grpc_cli::SetSystemPropertyRequest* request, ::grpc_cli::SetSystemPropertyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSystemProperty_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpc_cli::SetSystemPropertyResponse>* PosCli::Stub::PrepareAsyncSetSystemPropertyRaw(::grpc::ClientContext* context, const ::grpc_cli::SetSystemPropertyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpc_cli::SetSystemPropertyResponse, ::grpc_cli::SetSystemPropertyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetSystemProperty_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpc_cli::SetSystemPropertyResponse>* PosCli::Stub::AsyncSetSystemPropertyRaw(::grpc::ClientContext* context, const ::grpc_cli::SetSystemPropertyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetSystemPropertyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PosCli::Stub::StartTelemetry(::grpc::ClientContext* context, const ::grpc_cli::StartTelemetryRequest& request, ::grpc_cli::StartTelemetryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpc_cli::StartTelemetryRequest, ::grpc_cli::StartTelemetryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StartTelemetry_, context, request, response);
}

void PosCli::Stub::experimental_async::StartTelemetry(::grpc::ClientContext* context, const ::grpc_cli::StartTelemetryRequest* request, ::grpc_cli::StartTelemetryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpc_cli::StartTelemetryRequest, ::grpc_cli::StartTelemetryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartTelemetry_, context, request, response, std::move(f));
}

void PosCli::Stub::experimental_async::StartTelemetry(::grpc::ClientContext* context, const ::grpc_cli::StartTelemetryRequest* request, ::grpc_cli::StartTelemetryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartTelemetry_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpc_cli::StartTelemetryResponse>* PosCli::Stub::PrepareAsyncStartTelemetryRaw(::grpc::ClientContext* context, const ::grpc_cli::StartTelemetryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpc_cli::StartTelemetryResponse, ::grpc_cli::StartTelemetryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StartTelemetry_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpc_cli::StartTelemetryResponse>* PosCli::Stub::AsyncStartTelemetryRaw(::grpc::ClientContext* context, const ::grpc_cli::StartTelemetryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStartTelemetryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PosCli::Stub::StopTelemetry(::grpc::ClientContext* context, const ::grpc_cli::StopTelemetryRequest& request, ::grpc_cli::StopTelemetryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpc_cli::StopTelemetryRequest, ::grpc_cli::StopTelemetryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StopTelemetry_, context, request, response);
}

void PosCli::Stub::experimental_async::StopTelemetry(::grpc::ClientContext* context, const ::grpc_cli::StopTelemetryRequest* request, ::grpc_cli::StopTelemetryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpc_cli::StopTelemetryRequest, ::grpc_cli::StopTelemetryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopTelemetry_, context, request, response, std::move(f));
}

void PosCli::Stub::experimental_async::StopTelemetry(::grpc::ClientContext* context, const ::grpc_cli::StopTelemetryRequest* request, ::grpc_cli::StopTelemetryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopTelemetry_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpc_cli::StopTelemetryResponse>* PosCli::Stub::PrepareAsyncStopTelemetryRaw(::grpc::ClientContext* context, const ::grpc_cli::StopTelemetryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpc_cli::StopTelemetryResponse, ::grpc_cli::StopTelemetryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StopTelemetry_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpc_cli::StopTelemetryResponse>* PosCli::Stub::AsyncStopTelemetryRaw(::grpc::ClientContext* context, const ::grpc_cli::StopTelemetryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStopTelemetryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PosCli::Stub::ResetEventWrr(::grpc::ClientContext* context, const ::grpc_cli::ResetEventWrrRequest& request, ::grpc_cli::ResetEventWrrResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpc_cli::ResetEventWrrRequest, ::grpc_cli::ResetEventWrrResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ResetEventWrr_, context, request, response);
}

void PosCli::Stub::experimental_async::ResetEventWrr(::grpc::ClientContext* context, const ::grpc_cli::ResetEventWrrRequest* request, ::grpc_cli::ResetEventWrrResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpc_cli::ResetEventWrrRequest, ::grpc_cli::ResetEventWrrResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResetEventWrr_, context, request, response, std::move(f));
}

void PosCli::Stub::experimental_async::ResetEventWrr(::grpc::ClientContext* context, const ::grpc_cli::ResetEventWrrRequest* request, ::grpc_cli::ResetEventWrrResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResetEventWrr_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpc_cli::ResetEventWrrResponse>* PosCli::Stub::PrepareAsyncResetEventWrrRaw(::grpc::ClientContext* context, const ::grpc_cli::ResetEventWrrRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpc_cli::ResetEventWrrResponse, ::grpc_cli::ResetEventWrrRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ResetEventWrr_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpc_cli::ResetEventWrrResponse>* PosCli::Stub::AsyncResetEventWrrRaw(::grpc::ClientContext* context, const ::grpc_cli::ResetEventWrrRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncResetEventWrrRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PosCli::Stub::ResetMbr(::grpc::ClientContext* context, const ::grpc_cli::ResetMbrRequest& request, ::grpc_cli::ResetMbrResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpc_cli::ResetMbrRequest, ::grpc_cli::ResetMbrResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ResetMbr_, context, request, response);
}

void PosCli::Stub::experimental_async::ResetMbr(::grpc::ClientContext* context, const ::grpc_cli::ResetMbrRequest* request, ::grpc_cli::ResetMbrResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpc_cli::ResetMbrRequest, ::grpc_cli::ResetMbrResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResetMbr_, context, request, response, std::move(f));
}

void PosCli::Stub::experimental_async::ResetMbr(::grpc::ClientContext* context, const ::grpc_cli::ResetMbrRequest* request, ::grpc_cli::ResetMbrResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResetMbr_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpc_cli::ResetMbrResponse>* PosCli::Stub::PrepareAsyncResetMbrRaw(::grpc::ClientContext* context, const ::grpc_cli::ResetMbrRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpc_cli::ResetMbrResponse, ::grpc_cli::ResetMbrRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ResetMbr_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpc_cli::ResetMbrResponse>* PosCli::Stub::AsyncResetMbrRaw(::grpc::ClientContext* context, const ::grpc_cli::ResetMbrRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncResetMbrRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PosCli::Stub::StopRebuilding(::grpc::ClientContext* context, const ::grpc_cli::StopRebuildingRequest& request, ::grpc_cli::StopRebuildingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpc_cli::StopRebuildingRequest, ::grpc_cli::StopRebuildingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StopRebuilding_, context, request, response);
}

void PosCli::Stub::experimental_async::StopRebuilding(::grpc::ClientContext* context, const ::grpc_cli::StopRebuildingRequest* request, ::grpc_cli::StopRebuildingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpc_cli::StopRebuildingRequest, ::grpc_cli::StopRebuildingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopRebuilding_, context, request, response, std::move(f));
}

void PosCli::Stub::experimental_async::StopRebuilding(::grpc::ClientContext* context, const ::grpc_cli::StopRebuildingRequest* request, ::grpc_cli::StopRebuildingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopRebuilding_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpc_cli::StopRebuildingResponse>* PosCli::Stub::PrepareAsyncStopRebuildingRaw(::grpc::ClientContext* context, const ::grpc_cli::StopRebuildingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpc_cli::StopRebuildingResponse, ::grpc_cli::StopRebuildingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StopRebuilding_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpc_cli::StopRebuildingResponse>* PosCli::Stub::AsyncStopRebuildingRaw(::grpc::ClientContext* context, const ::grpc_cli::StopRebuildingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStopRebuildingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PosCli::Stub::UpdateEventWrr(::grpc::ClientContext* context, const ::grpc_cli::UpdateEventWrrRequest& request, ::grpc_cli::UpdateEventWrrResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpc_cli::UpdateEventWrrRequest, ::grpc_cli::UpdateEventWrrResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateEventWrr_, context, request, response);
}

void PosCli::Stub::experimental_async::UpdateEventWrr(::grpc::ClientContext* context, const ::grpc_cli::UpdateEventWrrRequest* request, ::grpc_cli::UpdateEventWrrResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpc_cli::UpdateEventWrrRequest, ::grpc_cli::UpdateEventWrrResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateEventWrr_, context, request, response, std::move(f));
}

void PosCli::Stub::experimental_async::UpdateEventWrr(::grpc::ClientContext* context, const ::grpc_cli::UpdateEventWrrRequest* request, ::grpc_cli::UpdateEventWrrResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateEventWrr_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpc_cli::UpdateEventWrrResponse>* PosCli::Stub::PrepareAsyncUpdateEventWrrRaw(::grpc::ClientContext* context, const ::grpc_cli::UpdateEventWrrRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpc_cli::UpdateEventWrrResponse, ::grpc_cli::UpdateEventWrrRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateEventWrr_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpc_cli::UpdateEventWrrResponse>* PosCli::Stub::AsyncUpdateEventWrrRaw(::grpc::ClientContext* context, const ::grpc_cli::UpdateEventWrrRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateEventWrrRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PosCli::Stub::AddSpare(::grpc::ClientContext* context, const ::grpc_cli::AddSpareRequest& request, ::grpc_cli::AddSpareResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpc_cli::AddSpareRequest, ::grpc_cli::AddSpareResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddSpare_, context, request, response);
}

void PosCli::Stub::experimental_async::AddSpare(::grpc::ClientContext* context, const ::grpc_cli::AddSpareRequest* request, ::grpc_cli::AddSpareResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpc_cli::AddSpareRequest, ::grpc_cli::AddSpareResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddSpare_, context, request, response, std::move(f));
}

void PosCli::Stub::experimental_async::AddSpare(::grpc::ClientContext* context, const ::grpc_cli::AddSpareRequest* request, ::grpc_cli::AddSpareResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddSpare_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpc_cli::AddSpareResponse>* PosCli::Stub::PrepareAsyncAddSpareRaw(::grpc::ClientContext* context, const ::grpc_cli::AddSpareRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpc_cli::AddSpareResponse, ::grpc_cli::AddSpareRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddSpare_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpc_cli::AddSpareResponse>* PosCli::Stub::AsyncAddSpareRaw(::grpc::ClientContext* context, const ::grpc_cli::AddSpareRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddSpareRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PosCli::Stub::RemoveSpare(::grpc::ClientContext* context, const ::grpc_cli::RemoveSpareRequest& request, ::grpc_cli::RemoveSpareResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpc_cli::RemoveSpareRequest, ::grpc_cli::RemoveSpareResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RemoveSpare_, context, request, response);
}

void PosCli::Stub::experimental_async::RemoveSpare(::grpc::ClientContext* context, const ::grpc_cli::RemoveSpareRequest* request, ::grpc_cli::RemoveSpareResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpc_cli::RemoveSpareRequest, ::grpc_cli::RemoveSpareResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveSpare_, context, request, response, std::move(f));
}

void PosCli::Stub::experimental_async::RemoveSpare(::grpc::ClientContext* context, const ::grpc_cli::RemoveSpareRequest* request, ::grpc_cli::RemoveSpareResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveSpare_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpc_cli::RemoveSpareResponse>* PosCli::Stub::PrepareAsyncRemoveSpareRaw(::grpc::ClientContext* context, const ::grpc_cli::RemoveSpareRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpc_cli::RemoveSpareResponse, ::grpc_cli::RemoveSpareRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RemoveSpare_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpc_cli::RemoveSpareResponse>* PosCli::Stub::AsyncRemoveSpareRaw(::grpc::ClientContext* context, const ::grpc_cli::RemoveSpareRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoveSpareRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PosCli::Stub::CreateArray(::grpc::ClientContext* context, const ::grpc_cli::CreateArrayRequest& request, ::grpc_cli::CreateArrayResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpc_cli::CreateArrayRequest, ::grpc_cli::CreateArrayResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateArray_, context, request, response);
}

void PosCli::Stub::experimental_async::CreateArray(::grpc::ClientContext* context, const ::grpc_cli::CreateArrayRequest* request, ::grpc_cli::CreateArrayResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpc_cli::CreateArrayRequest, ::grpc_cli::CreateArrayResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateArray_, context, request, response, std::move(f));
}

void PosCli::Stub::experimental_async::CreateArray(::grpc::ClientContext* context, const ::grpc_cli::CreateArrayRequest* request, ::grpc_cli::CreateArrayResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateArray_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpc_cli::CreateArrayResponse>* PosCli::Stub::PrepareAsyncCreateArrayRaw(::grpc::ClientContext* context, const ::grpc_cli::CreateArrayRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpc_cli::CreateArrayResponse, ::grpc_cli::CreateArrayRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateArray_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpc_cli::CreateArrayResponse>* PosCli::Stub::AsyncCreateArrayRaw(::grpc::ClientContext* context, const ::grpc_cli::CreateArrayRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateArrayRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PosCli::Stub::DeleteArray(::grpc::ClientContext* context, const ::grpc_cli::DeleteArrayRequest& request, ::grpc_cli::DeleteArrayResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpc_cli::DeleteArrayRequest, ::grpc_cli::DeleteArrayResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteArray_, context, request, response);
}

void PosCli::Stub::experimental_async::DeleteArray(::grpc::ClientContext* context, const ::grpc_cli::DeleteArrayRequest* request, ::grpc_cli::DeleteArrayResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpc_cli::DeleteArrayRequest, ::grpc_cli::DeleteArrayResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteArray_, context, request, response, std::move(f));
}

void PosCli::Stub::experimental_async::DeleteArray(::grpc::ClientContext* context, const ::grpc_cli::DeleteArrayRequest* request, ::grpc_cli::DeleteArrayResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteArray_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpc_cli::DeleteArrayResponse>* PosCli::Stub::PrepareAsyncDeleteArrayRaw(::grpc::ClientContext* context, const ::grpc_cli::DeleteArrayRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpc_cli::DeleteArrayResponse, ::grpc_cli::DeleteArrayRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteArray_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpc_cli::DeleteArrayResponse>* PosCli::Stub::AsyncDeleteArrayRaw(::grpc::ClientContext* context, const ::grpc_cli::DeleteArrayRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteArrayRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PosCli::Stub::MountArray(::grpc::ClientContext* context, const ::grpc_cli::MountArrayRequest& request, ::grpc_cli::MountArrayResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpc_cli::MountArrayRequest, ::grpc_cli::MountArrayResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MountArray_, context, request, response);
}

void PosCli::Stub::experimental_async::MountArray(::grpc::ClientContext* context, const ::grpc_cli::MountArrayRequest* request, ::grpc_cli::MountArrayResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpc_cli::MountArrayRequest, ::grpc_cli::MountArrayResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MountArray_, context, request, response, std::move(f));
}

void PosCli::Stub::experimental_async::MountArray(::grpc::ClientContext* context, const ::grpc_cli::MountArrayRequest* request, ::grpc_cli::MountArrayResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MountArray_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpc_cli::MountArrayResponse>* PosCli::Stub::PrepareAsyncMountArrayRaw(::grpc::ClientContext* context, const ::grpc_cli::MountArrayRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpc_cli::MountArrayResponse, ::grpc_cli::MountArrayRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MountArray_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpc_cli::MountArrayResponse>* PosCli::Stub::AsyncMountArrayRaw(::grpc::ClientContext* context, const ::grpc_cli::MountArrayRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMountArrayRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PosCli::Stub::UnmountArray(::grpc::ClientContext* context, const ::grpc_cli::UnmountArrayRequest& request, ::grpc_cli::UnmountArrayResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpc_cli::UnmountArrayRequest, ::grpc_cli::UnmountArrayResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UnmountArray_, context, request, response);
}

void PosCli::Stub::experimental_async::UnmountArray(::grpc::ClientContext* context, const ::grpc_cli::UnmountArrayRequest* request, ::grpc_cli::UnmountArrayResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpc_cli::UnmountArrayRequest, ::grpc_cli::UnmountArrayResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnmountArray_, context, request, response, std::move(f));
}

void PosCli::Stub::experimental_async::UnmountArray(::grpc::ClientContext* context, const ::grpc_cli::UnmountArrayRequest* request, ::grpc_cli::UnmountArrayResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnmountArray_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpc_cli::UnmountArrayResponse>* PosCli::Stub::PrepareAsyncUnmountArrayRaw(::grpc::ClientContext* context, const ::grpc_cli::UnmountArrayRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpc_cli::UnmountArrayResponse, ::grpc_cli::UnmountArrayRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UnmountArray_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpc_cli::UnmountArrayResponse>* PosCli::Stub::AsyncUnmountArrayRaw(::grpc::ClientContext* context, const ::grpc_cli::UnmountArrayRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUnmountArrayRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PosCli::Stub::ListArray(::grpc::ClientContext* context, const ::grpc_cli::ListArrayRequest& request, ::grpc_cli::ListArrayResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpc_cli::ListArrayRequest, ::grpc_cli::ListArrayResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListArray_, context, request, response);
}

void PosCli::Stub::experimental_async::ListArray(::grpc::ClientContext* context, const ::grpc_cli::ListArrayRequest* request, ::grpc_cli::ListArrayResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpc_cli::ListArrayRequest, ::grpc_cli::ListArrayResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListArray_, context, request, response, std::move(f));
}

void PosCli::Stub::experimental_async::ListArray(::grpc::ClientContext* context, const ::grpc_cli::ListArrayRequest* request, ::grpc_cli::ListArrayResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListArray_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpc_cli::ListArrayResponse>* PosCli::Stub::PrepareAsyncListArrayRaw(::grpc::ClientContext* context, const ::grpc_cli::ListArrayRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpc_cli::ListArrayResponse, ::grpc_cli::ListArrayRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListArray_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpc_cli::ListArrayResponse>* PosCli::Stub::AsyncListArrayRaw(::grpc::ClientContext* context, const ::grpc_cli::ListArrayRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListArrayRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PosCli::Stub::ArrayInfo(::grpc::ClientContext* context, const ::grpc_cli::ArrayInfoRequest& request, ::grpc_cli::ArrayInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpc_cli::ArrayInfoRequest, ::grpc_cli::ArrayInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ArrayInfo_, context, request, response);
}

void PosCli::Stub::experimental_async::ArrayInfo(::grpc::ClientContext* context, const ::grpc_cli::ArrayInfoRequest* request, ::grpc_cli::ArrayInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpc_cli::ArrayInfoRequest, ::grpc_cli::ArrayInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ArrayInfo_, context, request, response, std::move(f));
}

void PosCli::Stub::experimental_async::ArrayInfo(::grpc::ClientContext* context, const ::grpc_cli::ArrayInfoRequest* request, ::grpc_cli::ArrayInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ArrayInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpc_cli::ArrayInfoResponse>* PosCli::Stub::PrepareAsyncArrayInfoRaw(::grpc::ClientContext* context, const ::grpc_cli::ArrayInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpc_cli::ArrayInfoResponse, ::grpc_cli::ArrayInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ArrayInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpc_cli::ArrayInfoResponse>* PosCli::Stub::AsyncArrayInfoRaw(::grpc::ClientContext* context, const ::grpc_cli::ArrayInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncArrayInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

PosCli::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PosCli_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PosCli::Service, ::grpc_cli::SystemInfoRequest, ::grpc_cli::SystemInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PosCli::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpc_cli::SystemInfoRequest* req,
             ::grpc_cli::SystemInfoResponse* resp) {
               return service->SystemInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PosCli_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PosCli::Service, ::grpc_cli::SystemStopRequest, ::grpc_cli::SystemStopResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PosCli::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpc_cli::SystemStopRequest* req,
             ::grpc_cli::SystemStopResponse* resp) {
               return service->SystemStop(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PosCli_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PosCli::Service, ::grpc_cli::GetSystemPropertyRequest, ::grpc_cli::GetSystemPropertyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PosCli::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpc_cli::GetSystemPropertyRequest* req,
             ::grpc_cli::GetSystemPropertyResponse* resp) {
               return service->GetSystemProperty(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PosCli_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PosCli::Service, ::grpc_cli::SetSystemPropertyRequest, ::grpc_cli::SetSystemPropertyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PosCli::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpc_cli::SetSystemPropertyRequest* req,
             ::grpc_cli::SetSystemPropertyResponse* resp) {
               return service->SetSystemProperty(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PosCli_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PosCli::Service, ::grpc_cli::StartTelemetryRequest, ::grpc_cli::StartTelemetryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PosCli::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpc_cli::StartTelemetryRequest* req,
             ::grpc_cli::StartTelemetryResponse* resp) {
               return service->StartTelemetry(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PosCli_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PosCli::Service, ::grpc_cli::StopTelemetryRequest, ::grpc_cli::StopTelemetryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PosCli::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpc_cli::StopTelemetryRequest* req,
             ::grpc_cli::StopTelemetryResponse* resp) {
               return service->StopTelemetry(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PosCli_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PosCli::Service, ::grpc_cli::ResetEventWrrRequest, ::grpc_cli::ResetEventWrrResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PosCli::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpc_cli::ResetEventWrrRequest* req,
             ::grpc_cli::ResetEventWrrResponse* resp) {
               return service->ResetEventWrr(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PosCli_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PosCli::Service, ::grpc_cli::ResetMbrRequest, ::grpc_cli::ResetMbrResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PosCli::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpc_cli::ResetMbrRequest* req,
             ::grpc_cli::ResetMbrResponse* resp) {
               return service->ResetMbr(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PosCli_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PosCli::Service, ::grpc_cli::StopRebuildingRequest, ::grpc_cli::StopRebuildingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PosCli::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpc_cli::StopRebuildingRequest* req,
             ::grpc_cli::StopRebuildingResponse* resp) {
               return service->StopRebuilding(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PosCli_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PosCli::Service, ::grpc_cli::UpdateEventWrrRequest, ::grpc_cli::UpdateEventWrrResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PosCli::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpc_cli::UpdateEventWrrRequest* req,
             ::grpc_cli::UpdateEventWrrResponse* resp) {
               return service->UpdateEventWrr(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PosCli_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PosCli::Service, ::grpc_cli::AddSpareRequest, ::grpc_cli::AddSpareResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PosCli::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpc_cli::AddSpareRequest* req,
             ::grpc_cli::AddSpareResponse* resp) {
               return service->AddSpare(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PosCli_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PosCli::Service, ::grpc_cli::RemoveSpareRequest, ::grpc_cli::RemoveSpareResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PosCli::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpc_cli::RemoveSpareRequest* req,
             ::grpc_cli::RemoveSpareResponse* resp) {
               return service->RemoveSpare(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PosCli_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PosCli::Service, ::grpc_cli::CreateArrayRequest, ::grpc_cli::CreateArrayResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PosCli::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpc_cli::CreateArrayRequest* req,
             ::grpc_cli::CreateArrayResponse* resp) {
               return service->CreateArray(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PosCli_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PosCli::Service, ::grpc_cli::DeleteArrayRequest, ::grpc_cli::DeleteArrayResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PosCli::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpc_cli::DeleteArrayRequest* req,
             ::grpc_cli::DeleteArrayResponse* resp) {
               return service->DeleteArray(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PosCli_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PosCli::Service, ::grpc_cli::MountArrayRequest, ::grpc_cli::MountArrayResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PosCli::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpc_cli::MountArrayRequest* req,
             ::grpc_cli::MountArrayResponse* resp) {
               return service->MountArray(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PosCli_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PosCli::Service, ::grpc_cli::UnmountArrayRequest, ::grpc_cli::UnmountArrayResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PosCli::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpc_cli::UnmountArrayRequest* req,
             ::grpc_cli::UnmountArrayResponse* resp) {
               return service->UnmountArray(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PosCli_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PosCli::Service, ::grpc_cli::ListArrayRequest, ::grpc_cli::ListArrayResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PosCli::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpc_cli::ListArrayRequest* req,
             ::grpc_cli::ListArrayResponse* resp) {
               return service->ListArray(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PosCli_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PosCli::Service, ::grpc_cli::ArrayInfoRequest, ::grpc_cli::ArrayInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PosCli::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpc_cli::ArrayInfoRequest* req,
             ::grpc_cli::ArrayInfoResponse* resp) {
               return service->ArrayInfo(ctx, req, resp);
             }, this)));
}

PosCli::Service::~Service() {
}

::grpc::Status PosCli::Service::SystemInfo(::grpc::ServerContext* context, const ::grpc_cli::SystemInfoRequest* request, ::grpc_cli::SystemInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PosCli::Service::SystemStop(::grpc::ServerContext* context, const ::grpc_cli::SystemStopRequest* request, ::grpc_cli::SystemStopResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PosCli::Service::GetSystemProperty(::grpc::ServerContext* context, const ::grpc_cli::GetSystemPropertyRequest* request, ::grpc_cli::GetSystemPropertyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PosCli::Service::SetSystemProperty(::grpc::ServerContext* context, const ::grpc_cli::SetSystemPropertyRequest* request, ::grpc_cli::SetSystemPropertyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PosCli::Service::StartTelemetry(::grpc::ServerContext* context, const ::grpc_cli::StartTelemetryRequest* request, ::grpc_cli::StartTelemetryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PosCli::Service::StopTelemetry(::grpc::ServerContext* context, const ::grpc_cli::StopTelemetryRequest* request, ::grpc_cli::StopTelemetryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PosCli::Service::ResetEventWrr(::grpc::ServerContext* context, const ::grpc_cli::ResetEventWrrRequest* request, ::grpc_cli::ResetEventWrrResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PosCli::Service::ResetMbr(::grpc::ServerContext* context, const ::grpc_cli::ResetMbrRequest* request, ::grpc_cli::ResetMbrResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PosCli::Service::StopRebuilding(::grpc::ServerContext* context, const ::grpc_cli::StopRebuildingRequest* request, ::grpc_cli::StopRebuildingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PosCli::Service::UpdateEventWrr(::grpc::ServerContext* context, const ::grpc_cli::UpdateEventWrrRequest* request, ::grpc_cli::UpdateEventWrrResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PosCli::Service::AddSpare(::grpc::ServerContext* context, const ::grpc_cli::AddSpareRequest* request, ::grpc_cli::AddSpareResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PosCli::Service::RemoveSpare(::grpc::ServerContext* context, const ::grpc_cli::RemoveSpareRequest* request, ::grpc_cli::RemoveSpareResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PosCli::Service::CreateArray(::grpc::ServerContext* context, const ::grpc_cli::CreateArrayRequest* request, ::grpc_cli::CreateArrayResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PosCli::Service::DeleteArray(::grpc::ServerContext* context, const ::grpc_cli::DeleteArrayRequest* request, ::grpc_cli::DeleteArrayResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PosCli::Service::MountArray(::grpc::ServerContext* context, const ::grpc_cli::MountArrayRequest* request, ::grpc_cli::MountArrayResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PosCli::Service::UnmountArray(::grpc::ServerContext* context, const ::grpc_cli::UnmountArrayRequest* request, ::grpc_cli::UnmountArrayResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PosCli::Service::ListArray(::grpc::ServerContext* context, const ::grpc_cli::ListArrayRequest* request, ::grpc_cli::ListArrayResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PosCli::Service::ArrayInfo(::grpc::ServerContext* context, const ::grpc_cli::ArrayInfoRequest* request, ::grpc_cli::ArrayInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpc_cli

