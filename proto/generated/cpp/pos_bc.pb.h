// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pos_bc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pos_5fbc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pos_5fbc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pos_5fbc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pos_5fbc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pos_5fbc_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_pos_5fbc_2eproto_metadata_getter(int index);
namespace pos_bc {
class SegmentCtxExtendedProto;
struct SegmentCtxExtendedProtoDefaultTypeInternal;
extern SegmentCtxExtendedProtoDefaultTypeInternal _SegmentCtxExtendedProto_default_instance_;
class SegmentInfoDataProto;
struct SegmentInfoDataProtoDefaultTypeInternal;
extern SegmentInfoDataProtoDefaultTypeInternal _SegmentInfoDataProto_default_instance_;
}  // namespace pos_bc
PROTOBUF_NAMESPACE_OPEN
template<> ::pos_bc::SegmentCtxExtendedProto* Arena::CreateMaybeMessage<::pos_bc::SegmentCtxExtendedProto>(Arena*);
template<> ::pos_bc::SegmentInfoDataProto* Arena::CreateMaybeMessage<::pos_bc::SegmentInfoDataProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pos_bc {

enum SegmentState : int {
  FREE = 0,
  NVRAM = 1,
  SSD = 2,
  VICTIM = 3,
  ERROR = 4,
  SegmentState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SegmentState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SegmentState_IsValid(int value);
constexpr SegmentState SegmentState_MIN = FREE;
constexpr SegmentState SegmentState_MAX = ERROR;
constexpr int SegmentState_ARRAYSIZE = SegmentState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SegmentState_descriptor();
template<typename T>
inline const std::string& SegmentState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SegmentState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SegmentState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SegmentState_descriptor(), enum_t_value);
}
inline bool SegmentState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SegmentState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SegmentState>(
    SegmentState_descriptor(), name, value);
}
// ===================================================================

class SegmentInfoDataProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pos_bc.SegmentInfoDataProto) */ {
 public:
  inline SegmentInfoDataProto() : SegmentInfoDataProto(nullptr) {}
  virtual ~SegmentInfoDataProto();
  explicit constexpr SegmentInfoDataProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SegmentInfoDataProto(const SegmentInfoDataProto& from);
  SegmentInfoDataProto(SegmentInfoDataProto&& from) noexcept
    : SegmentInfoDataProto() {
    *this = ::std::move(from);
  }

  inline SegmentInfoDataProto& operator=(const SegmentInfoDataProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SegmentInfoDataProto& operator=(SegmentInfoDataProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SegmentInfoDataProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const SegmentInfoDataProto* internal_default_instance() {
    return reinterpret_cast<const SegmentInfoDataProto*>(
               &_SegmentInfoDataProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SegmentInfoDataProto& a, SegmentInfoDataProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SegmentInfoDataProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SegmentInfoDataProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SegmentInfoDataProto* New() const final {
    return CreateMaybeMessage<SegmentInfoDataProto>(nullptr);
  }

  SegmentInfoDataProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SegmentInfoDataProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SegmentInfoDataProto& from);
  void MergeFrom(const SegmentInfoDataProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SegmentInfoDataProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pos_bc.SegmentInfoDataProto";
  }
  protected:
  explicit SegmentInfoDataProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_pos_5fbc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValidBlockCountFieldNumber = 1,
    kOccupiedStripeCountFieldNumber = 2,
    kStateFieldNumber = 3,
  };
  // uint32 valid_block_count = 1;
  void clear_valid_block_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 valid_block_count() const;
  void set_valid_block_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_valid_block_count() const;
  void _internal_set_valid_block_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 occupied_stripe_count = 2;
  void clear_occupied_stripe_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 occupied_stripe_count() const;
  void set_occupied_stripe_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_occupied_stripe_count() const;
  void _internal_set_occupied_stripe_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .pos_bc.SegmentState state = 3;
  void clear_state();
  ::pos_bc::SegmentState state() const;
  void set_state(::pos_bc::SegmentState value);
  private:
  ::pos_bc::SegmentState _internal_state() const;
  void _internal_set_state(::pos_bc::SegmentState value);
  public:

  // @@protoc_insertion_point(class_scope:pos_bc.SegmentInfoDataProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 valid_block_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 occupied_stripe_count_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pos_5fbc_2eproto;
};
// -------------------------------------------------------------------

class SegmentCtxExtendedProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pos_bc.SegmentCtxExtendedProto) */ {
 public:
  inline SegmentCtxExtendedProto() : SegmentCtxExtendedProto(nullptr) {}
  virtual ~SegmentCtxExtendedProto();
  explicit constexpr SegmentCtxExtendedProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SegmentCtxExtendedProto(const SegmentCtxExtendedProto& from);
  SegmentCtxExtendedProto(SegmentCtxExtendedProto&& from) noexcept
    : SegmentCtxExtendedProto() {
    *this = ::std::move(from);
  }

  inline SegmentCtxExtendedProto& operator=(const SegmentCtxExtendedProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SegmentCtxExtendedProto& operator=(SegmentCtxExtendedProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SegmentCtxExtendedProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const SegmentCtxExtendedProto* internal_default_instance() {
    return reinterpret_cast<const SegmentCtxExtendedProto*>(
               &_SegmentCtxExtendedProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SegmentCtxExtendedProto& a, SegmentCtxExtendedProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SegmentCtxExtendedProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SegmentCtxExtendedProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SegmentCtxExtendedProto* New() const final {
    return CreateMaybeMessage<SegmentCtxExtendedProto>(nullptr);
  }

  SegmentCtxExtendedProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SegmentCtxExtendedProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SegmentCtxExtendedProto& from);
  void MergeFrom(const SegmentCtxExtendedProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SegmentCtxExtendedProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pos_bc.SegmentCtxExtendedProto";
  }
  protected:
  explicit SegmentCtxExtendedProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_pos_5fbc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pos_bc.SegmentCtxExtendedProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pos_5fbc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SegmentInfoDataProto

// uint32 valid_block_count = 1;
inline void SegmentInfoDataProto::clear_valid_block_count() {
  valid_block_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SegmentInfoDataProto::_internal_valid_block_count() const {
  return valid_block_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SegmentInfoDataProto::valid_block_count() const {
  // @@protoc_insertion_point(field_get:pos_bc.SegmentInfoDataProto.valid_block_count)
  return _internal_valid_block_count();
}
inline void SegmentInfoDataProto::_internal_set_valid_block_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  valid_block_count_ = value;
}
inline void SegmentInfoDataProto::set_valid_block_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_valid_block_count(value);
  // @@protoc_insertion_point(field_set:pos_bc.SegmentInfoDataProto.valid_block_count)
}

// uint32 occupied_stripe_count = 2;
inline void SegmentInfoDataProto::clear_occupied_stripe_count() {
  occupied_stripe_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SegmentInfoDataProto::_internal_occupied_stripe_count() const {
  return occupied_stripe_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SegmentInfoDataProto::occupied_stripe_count() const {
  // @@protoc_insertion_point(field_get:pos_bc.SegmentInfoDataProto.occupied_stripe_count)
  return _internal_occupied_stripe_count();
}
inline void SegmentInfoDataProto::_internal_set_occupied_stripe_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  occupied_stripe_count_ = value;
}
inline void SegmentInfoDataProto::set_occupied_stripe_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_occupied_stripe_count(value);
  // @@protoc_insertion_point(field_set:pos_bc.SegmentInfoDataProto.occupied_stripe_count)
}

// .pos_bc.SegmentState state = 3;
inline void SegmentInfoDataProto::clear_state() {
  state_ = 0;
}
inline ::pos_bc::SegmentState SegmentInfoDataProto::_internal_state() const {
  return static_cast< ::pos_bc::SegmentState >(state_);
}
inline ::pos_bc::SegmentState SegmentInfoDataProto::state() const {
  // @@protoc_insertion_point(field_get:pos_bc.SegmentInfoDataProto.state)
  return _internal_state();
}
inline void SegmentInfoDataProto::_internal_set_state(::pos_bc::SegmentState value) {
  
  state_ = value;
}
inline void SegmentInfoDataProto::set_state(::pos_bc::SegmentState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:pos_bc.SegmentInfoDataProto.state)
}

// -------------------------------------------------------------------

// SegmentCtxExtendedProto

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pos_bc

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pos_bc::SegmentState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pos_bc::SegmentState>() {
  return ::pos_bc::SegmentState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pos_5fbc_2eproto
