// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pos_rpc.proto

#include "pos_rpc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace pos_rpc {
constexpr HealthCheckRequest::HealthCheckRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct HealthCheckRequestDefaultTypeInternal {
  constexpr HealthCheckRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HealthCheckRequestDefaultTypeInternal() {}
  union {
    HealthCheckRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HealthCheckRequestDefaultTypeInternal _HealthCheckRequest_default_instance_;
constexpr HealthCheckResponse::HealthCheckResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reason_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(0)
{}
struct HealthCheckResponseDefaultTypeInternal {
  constexpr HealthCheckResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HealthCheckResponseDefaultTypeInternal() {}
  union {
    HealthCheckResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HealthCheckResponseDefaultTypeInternal _HealthCheckResponse_default_instance_;
constexpr CreateArrayRequest::CreateArrayRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : array_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , capacity_(PROTOBUF_ULONGLONG(0)){}
struct CreateArrayRequestDefaultTypeInternal {
  constexpr CreateArrayRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateArrayRequestDefaultTypeInternal() {}
  union {
    CreateArrayRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateArrayRequestDefaultTypeInternal _CreateArrayRequest_default_instance_;
constexpr DeleteArrayRequest::DeleteArrayRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : array_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeleteArrayRequestDefaultTypeInternal {
  constexpr DeleteArrayRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteArrayRequestDefaultTypeInternal() {}
  union {
    DeleteArrayRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteArrayRequestDefaultTypeInternal _DeleteArrayRequest_default_instance_;
constexpr CreateVolumeRequest::CreateVolumeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : array_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , volume_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , capacity_(PROTOBUF_ULONGLONG(0)){}
struct CreateVolumeRequestDefaultTypeInternal {
  constexpr CreateVolumeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateVolumeRequestDefaultTypeInternal() {}
  union {
    CreateVolumeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateVolumeRequestDefaultTypeInternal _CreateVolumeRequest_default_instance_;
constexpr DeleteVolumeRequest::DeleteVolumeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : array_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , volume_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeleteVolumeRequestDefaultTypeInternal {
  constexpr DeleteVolumeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteVolumeRequestDefaultTypeInternal() {}
  union {
    DeleteVolumeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteVolumeRequestDefaultTypeInternal _DeleteVolumeRequest_default_instance_;
constexpr MountVolumeRequest::MountVolumeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : array_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , volume_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct MountVolumeRequestDefaultTypeInternal {
  constexpr MountVolumeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MountVolumeRequestDefaultTypeInternal() {}
  union {
    MountVolumeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MountVolumeRequestDefaultTypeInternal _MountVolumeRequest_default_instance_;
constexpr UnmountVolumeRequest::UnmountVolumeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : array_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , volume_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct UnmountVolumeRequestDefaultTypeInternal {
  constexpr UnmountVolumeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UnmountVolumeRequestDefaultTypeInternal() {}
  union {
    UnmountVolumeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UnmountVolumeRequestDefaultTypeInternal _UnmountVolumeRequest_default_instance_;
constexpr UpdateVoluemMetaRequest::UpdateVoluemMetaRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : array_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct UpdateVoluemMetaRequestDefaultTypeInternal {
  constexpr UpdateVoluemMetaRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateVoluemMetaRequestDefaultTypeInternal() {}
  union {
    UpdateVoluemMetaRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateVoluemMetaRequestDefaultTypeInternal _UpdateVoluemMetaRequest_default_instance_;
constexpr PosResponse::PosResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reason_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_(0)
{}
struct PosResponseDefaultTypeInternal {
  constexpr PosResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PosResponseDefaultTypeInternal() {}
  union {
    PosResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PosResponseDefaultTypeInternal _PosResponse_default_instance_;
constexpr GetArrayListRequest::GetArrayListRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetArrayListRequestDefaultTypeInternal {
  constexpr GetArrayListRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetArrayListRequestDefaultTypeInternal() {}
  union {
    GetArrayListRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetArrayListRequestDefaultTypeInternal _GetArrayListRequest_default_instance_;
constexpr ArrayInfo::ArrayInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : array_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , total_capacity_(PROTOBUF_ULONGLONG(0))
  , used_capacity_(PROTOBUF_ULONGLONG(0))
  , state_(0)
{}
struct ArrayInfoDefaultTypeInternal {
  constexpr ArrayInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ArrayInfoDefaultTypeInternal() {}
  union {
    ArrayInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ArrayInfoDefaultTypeInternal _ArrayInfo_default_instance_;
constexpr ArrayListResponse::ArrayListResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : infos_()
  , reason_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_(0)
{}
struct ArrayListResponseDefaultTypeInternal {
  constexpr ArrayListResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ArrayListResponseDefaultTypeInternal() {}
  union {
    ArrayListResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ArrayListResponseDefaultTypeInternal _ArrayListResponse_default_instance_;
constexpr GetVolumeListRequest::GetVolumeListRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : array_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetVolumeListRequestDefaultTypeInternal {
  constexpr GetVolumeListRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetVolumeListRequestDefaultTypeInternal() {}
  union {
    GetVolumeListRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetVolumeListRequestDefaultTypeInternal _GetVolumeListRequest_default_instance_;
constexpr VolumeInfo::VolumeInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : volume_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , total_capacity_(PROTOBUF_ULONGLONG(0))
  , used_capacity_(PROTOBUF_ULONGLONG(0))
  , state_(0)
{}
struct VolumeInfoDefaultTypeInternal {
  constexpr VolumeInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VolumeInfoDefaultTypeInternal() {}
  union {
    VolumeInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VolumeInfoDefaultTypeInternal _VolumeInfo_default_instance_;
constexpr VolumeListResponse::VolumeListResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : infos_()
  , reason_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_(0)
{}
struct VolumeListResponseDefaultTypeInternal {
  constexpr VolumeListResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VolumeListResponseDefaultTypeInternal() {}
  union {
    VolumeListResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VolumeListResponseDefaultTypeInternal _VolumeListResponse_default_instance_;
constexpr Chunk::Chunk(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : content_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ChunkDefaultTypeInternal {
  constexpr ChunkDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChunkDefaultTypeInternal() {}
  union {
    Chunk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChunkDefaultTypeInternal _Chunk_default_instance_;
constexpr ReadBlocksRequest::ReadBlocksRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : array_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , volume_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , rba_(PROTOBUF_ULONGLONG(0))
  , num_blocks_(PROTOBUF_ULONGLONG(0)){}
struct ReadBlocksRequestDefaultTypeInternal {
  constexpr ReadBlocksRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReadBlocksRequestDefaultTypeInternal() {}
  union {
    ReadBlocksRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReadBlocksRequestDefaultTypeInternal _ReadBlocksRequest_default_instance_;
constexpr ReadBlocksResponse::ReadBlocksResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_()
  , reason_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_(0)
{}
struct ReadBlocksResponseDefaultTypeInternal {
  constexpr ReadBlocksResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReadBlocksResponseDefaultTypeInternal() {}
  union {
    ReadBlocksResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReadBlocksResponseDefaultTypeInternal _ReadBlocksResponse_default_instance_;
constexpr WriteBlocksRequest::WriteBlocksRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_()
  , array_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , volume_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , rba_(PROTOBUF_ULONGLONG(0))
  , num_blocks_(PROTOBUF_ULONGLONG(0))
  , lsn_(PROTOBUF_ULONGLONG(0)){}
struct WriteBlocksRequestDefaultTypeInternal {
  constexpr WriteBlocksRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WriteBlocksRequestDefaultTypeInternal() {}
  union {
    WriteBlocksRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WriteBlocksRequestDefaultTypeInternal _WriteBlocksRequest_default_instance_;
constexpr WriteBlocksResponse::WriteBlocksResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reason_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_(0)
{}
struct WriteBlocksResponseDefaultTypeInternal {
  constexpr WriteBlocksResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WriteBlocksResponseDefaultTypeInternal() {}
  union {
    WriteBlocksResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WriteBlocksResponseDefaultTypeInternal _WriteBlocksResponse_default_instance_;
constexpr WriteHostBlocksRequest::WriteHostBlocksRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : array_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , volume_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , rba_(PROTOBUF_ULONGLONG(0))
  , num_blocks_(PROTOBUF_ULONGLONG(0))
  , lsn_(PROTOBUF_ULONGLONG(0)){}
struct WriteHostBlocksRequestDefaultTypeInternal {
  constexpr WriteHostBlocksRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WriteHostBlocksRequestDefaultTypeInternal() {}
  union {
    WriteHostBlocksRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WriteHostBlocksRequestDefaultTypeInternal _WriteHostBlocksRequest_default_instance_;
constexpr WriteHostBlocksResponse::WriteHostBlocksResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reason_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_(0)
{}
struct WriteHostBlocksResponseDefaultTypeInternal {
  constexpr WriteHostBlocksResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WriteHostBlocksResponseDefaultTypeInternal() {}
  union {
    WriteHostBlocksResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WriteHostBlocksResponseDefaultTypeInternal _WriteHostBlocksResponse_default_instance_;
constexpr CompleteHostWriteRequest::CompleteHostWriteRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : array_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , volume_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lsn_(PROTOBUF_ULONGLONG(0)){}
struct CompleteHostWriteRequestDefaultTypeInternal {
  constexpr CompleteHostWriteRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CompleteHostWriteRequestDefaultTypeInternal() {}
  union {
    CompleteHostWriteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CompleteHostWriteRequestDefaultTypeInternal _CompleteHostWriteRequest_default_instance_;
constexpr CompleteHostWriteResponse::CompleteHostWriteResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reason_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_(0)
{}
struct CompleteHostWriteResponseDefaultTypeInternal {
  constexpr CompleteHostWriteResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CompleteHostWriteResponseDefaultTypeInternal() {}
  union {
    CompleteHostWriteResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CompleteHostWriteResponseDefaultTypeInternal _CompleteHostWriteResponse_default_instance_;
constexpr StartVolumeSyncRequest::StartVolumeSyncRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : array_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , volume_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , is_primary_(false){}
struct StartVolumeSyncRequestDefaultTypeInternal {
  constexpr StartVolumeSyncRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StartVolumeSyncRequestDefaultTypeInternal() {}
  union {
    StartVolumeSyncRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StartVolumeSyncRequestDefaultTypeInternal _StartVolumeSyncRequest_default_instance_;
constexpr StartVolumeSyncResponse::StartVolumeSyncResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reason_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_(0)
{}
struct StartVolumeSyncResponseDefaultTypeInternal {
  constexpr StartVolumeSyncResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StartVolumeSyncResponseDefaultTypeInternal() {}
  union {
    StartVolumeSyncResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StartVolumeSyncResponseDefaultTypeInternal _StartVolumeSyncResponse_default_instance_;
constexpr FinishVolumeSyncRequest::FinishVolumeSyncRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : array_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , volume_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , is_primary_(false){}
struct FinishVolumeSyncRequestDefaultTypeInternal {
  constexpr FinishVolumeSyncRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FinishVolumeSyncRequestDefaultTypeInternal() {}
  union {
    FinishVolumeSyncRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FinishVolumeSyncRequestDefaultTypeInternal _FinishVolumeSyncRequest_default_instance_;
constexpr FinishVolumeSyncResponse::FinishVolumeSyncResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reason_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_(0)
{}
struct FinishVolumeSyncResponseDefaultTypeInternal {
  constexpr FinishVolumeSyncResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FinishVolumeSyncResponseDefaultTypeInternal() {}
  union {
    FinishVolumeSyncResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FinishVolumeSyncResponseDefaultTypeInternal _FinishVolumeSyncResponse_default_instance_;
constexpr SuspendWriteRequest::SuspendWriteRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : array_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , volume_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SuspendWriteRequestDefaultTypeInternal {
  constexpr SuspendWriteRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SuspendWriteRequestDefaultTypeInternal() {}
  union {
    SuspendWriteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SuspendWriteRequestDefaultTypeInternal _SuspendWriteRequest_default_instance_;
constexpr SuspendWriteResponse::SuspendWriteResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reason_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_(0)
{}
struct SuspendWriteResponseDefaultTypeInternal {
  constexpr SuspendWriteResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SuspendWriteResponseDefaultTypeInternal() {}
  union {
    SuspendWriteResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SuspendWriteResponseDefaultTypeInternal _SuspendWriteResponse_default_instance_;
constexpr ResumeWriteRequest::ResumeWriteRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : array_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , volume_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ResumeWriteRequestDefaultTypeInternal {
  constexpr ResumeWriteRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResumeWriteRequestDefaultTypeInternal() {}
  union {
    ResumeWriteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResumeWriteRequestDefaultTypeInternal _ResumeWriteRequest_default_instance_;
constexpr ResumeWriteResponse::ResumeWriteResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reason_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_(0)
{}
struct ResumeWriteResponseDefaultTypeInternal {
  constexpr ResumeWriteResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResumeWriteResponseDefaultTypeInternal() {}
  union {
    ResumeWriteResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResumeWriteResponseDefaultTypeInternal _ResumeWriteResponse_default_instance_;
}  // namespace pos_rpc
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pos_5frpc_2eproto[33];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_pos_5frpc_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pos_5frpc_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pos_5frpc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pos_rpc::HealthCheckRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pos_rpc::HealthCheckResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::HealthCheckResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pos_rpc::HealthCheckResponse, status_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::HealthCheckResponse, reason_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pos_rpc::CreateArrayRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pos_rpc::CreateArrayRequest, array_name_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::CreateArrayRequest, capacity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pos_rpc::DeleteArrayRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pos_rpc::DeleteArrayRequest, array_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pos_rpc::CreateVolumeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pos_rpc::CreateVolumeRequest, array_name_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::CreateVolumeRequest, volume_name_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::CreateVolumeRequest, capacity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pos_rpc::DeleteVolumeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pos_rpc::DeleteVolumeRequest, array_name_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::DeleteVolumeRequest, volume_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pos_rpc::MountVolumeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pos_rpc::MountVolumeRequest, array_name_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::MountVolumeRequest, volume_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pos_rpc::UnmountVolumeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pos_rpc::UnmountVolumeRequest, array_name_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::UnmountVolumeRequest, volume_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pos_rpc::UpdateVoluemMetaRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pos_rpc::UpdateVoluemMetaRequest, array_name_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::PosResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::PosResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pos_rpc::PosResponse, result_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::PosResponse, reason_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pos_rpc::GetArrayListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pos_rpc::ArrayInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pos_rpc::ArrayInfo, array_name_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::ArrayInfo, total_capacity_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::ArrayInfo, used_capacity_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::ArrayInfo, state_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::ArrayListResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::ArrayListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pos_rpc::ArrayListResponse, result_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::ArrayListResponse, reason_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::ArrayListResponse, infos_),
  ~0u,
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pos_rpc::GetVolumeListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pos_rpc::GetVolumeListRequest, array_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pos_rpc::VolumeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pos_rpc::VolumeInfo, volume_name_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::VolumeInfo, total_capacity_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::VolumeInfo, used_capacity_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::VolumeInfo, state_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::VolumeListResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::VolumeListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pos_rpc::VolumeListResponse, result_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::VolumeListResponse, reason_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::VolumeListResponse, infos_),
  ~0u,
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pos_rpc::Chunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pos_rpc::Chunk, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pos_rpc::ReadBlocksRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pos_rpc::ReadBlocksRequest, array_name_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::ReadBlocksRequest, volume_name_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::ReadBlocksRequest, rba_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::ReadBlocksRequest, num_blocks_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::ReadBlocksResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::ReadBlocksResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pos_rpc::ReadBlocksResponse, result_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::ReadBlocksResponse, reason_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::ReadBlocksResponse, data_),
  ~0u,
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pos_rpc::WriteBlocksRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pos_rpc::WriteBlocksRequest, array_name_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::WriteBlocksRequest, volume_name_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::WriteBlocksRequest, rba_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::WriteBlocksRequest, num_blocks_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::WriteBlocksRequest, lsn_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::WriteBlocksRequest, data_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::WriteBlocksResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::WriteBlocksResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pos_rpc::WriteBlocksResponse, result_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::WriteBlocksResponse, reason_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pos_rpc::WriteHostBlocksRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pos_rpc::WriteHostBlocksRequest, array_name_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::WriteHostBlocksRequest, volume_name_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::WriteHostBlocksRequest, rba_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::WriteHostBlocksRequest, num_blocks_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::WriteHostBlocksRequest, lsn_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::WriteHostBlocksResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::WriteHostBlocksResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pos_rpc::WriteHostBlocksResponse, result_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::WriteHostBlocksResponse, reason_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pos_rpc::CompleteHostWriteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pos_rpc::CompleteHostWriteRequest, array_name_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::CompleteHostWriteRequest, volume_name_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::CompleteHostWriteRequest, lsn_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::CompleteHostWriteResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::CompleteHostWriteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pos_rpc::CompleteHostWriteResponse, result_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::CompleteHostWriteResponse, reason_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pos_rpc::StartVolumeSyncRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pos_rpc::StartVolumeSyncRequest, array_name_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::StartVolumeSyncRequest, volume_name_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::StartVolumeSyncRequest, is_primary_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::StartVolumeSyncResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::StartVolumeSyncResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pos_rpc::StartVolumeSyncResponse, result_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::StartVolumeSyncResponse, reason_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pos_rpc::FinishVolumeSyncRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pos_rpc::FinishVolumeSyncRequest, array_name_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::FinishVolumeSyncRequest, volume_name_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::FinishVolumeSyncRequest, is_primary_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::FinishVolumeSyncResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::FinishVolumeSyncResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pos_rpc::FinishVolumeSyncResponse, result_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::FinishVolumeSyncResponse, reason_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pos_rpc::SuspendWriteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pos_rpc::SuspendWriteRequest, array_name_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::SuspendWriteRequest, volume_name_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::SuspendWriteResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::SuspendWriteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pos_rpc::SuspendWriteResponse, result_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::SuspendWriteResponse, reason_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pos_rpc::ResumeWriteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pos_rpc::ResumeWriteRequest, array_name_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::ResumeWriteRequest, volume_name_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::ResumeWriteResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::ResumeWriteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pos_rpc::ResumeWriteResponse, result_),
  PROTOBUF_FIELD_OFFSET(::pos_rpc::ResumeWriteResponse, reason_),
  ~0u,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pos_rpc::HealthCheckRequest)},
  { 5, 12, sizeof(::pos_rpc::HealthCheckResponse)},
  { 14, -1, sizeof(::pos_rpc::CreateArrayRequest)},
  { 21, -1, sizeof(::pos_rpc::DeleteArrayRequest)},
  { 27, -1, sizeof(::pos_rpc::CreateVolumeRequest)},
  { 35, -1, sizeof(::pos_rpc::DeleteVolumeRequest)},
  { 42, -1, sizeof(::pos_rpc::MountVolumeRequest)},
  { 49, -1, sizeof(::pos_rpc::UnmountVolumeRequest)},
  { 56, -1, sizeof(::pos_rpc::UpdateVoluemMetaRequest)},
  { 62, 69, sizeof(::pos_rpc::PosResponse)},
  { 71, -1, sizeof(::pos_rpc::GetArrayListRequest)},
  { 76, -1, sizeof(::pos_rpc::ArrayInfo)},
  { 85, 93, sizeof(::pos_rpc::ArrayListResponse)},
  { 96, -1, sizeof(::pos_rpc::GetVolumeListRequest)},
  { 102, -1, sizeof(::pos_rpc::VolumeInfo)},
  { 111, 119, sizeof(::pos_rpc::VolumeListResponse)},
  { 122, -1, sizeof(::pos_rpc::Chunk)},
  { 128, -1, sizeof(::pos_rpc::ReadBlocksRequest)},
  { 137, 145, sizeof(::pos_rpc::ReadBlocksResponse)},
  { 148, -1, sizeof(::pos_rpc::WriteBlocksRequest)},
  { 159, 166, sizeof(::pos_rpc::WriteBlocksResponse)},
  { 168, -1, sizeof(::pos_rpc::WriteHostBlocksRequest)},
  { 178, 185, sizeof(::pos_rpc::WriteHostBlocksResponse)},
  { 187, -1, sizeof(::pos_rpc::CompleteHostWriteRequest)},
  { 195, 202, sizeof(::pos_rpc::CompleteHostWriteResponse)},
  { 204, -1, sizeof(::pos_rpc::StartVolumeSyncRequest)},
  { 212, 219, sizeof(::pos_rpc::StartVolumeSyncResponse)},
  { 221, -1, sizeof(::pos_rpc::FinishVolumeSyncRequest)},
  { 229, 236, sizeof(::pos_rpc::FinishVolumeSyncResponse)},
  { 238, -1, sizeof(::pos_rpc::SuspendWriteRequest)},
  { 245, 252, sizeof(::pos_rpc::SuspendWriteResponse)},
  { 254, -1, sizeof(::pos_rpc::ResumeWriteRequest)},
  { 261, 268, sizeof(::pos_rpc::ResumeWriteResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pos_rpc::_HealthCheckRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pos_rpc::_HealthCheckResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pos_rpc::_CreateArrayRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pos_rpc::_DeleteArrayRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pos_rpc::_CreateVolumeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pos_rpc::_DeleteVolumeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pos_rpc::_MountVolumeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pos_rpc::_UnmountVolumeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pos_rpc::_UpdateVoluemMetaRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pos_rpc::_PosResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pos_rpc::_GetArrayListRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pos_rpc::_ArrayInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pos_rpc::_ArrayListResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pos_rpc::_GetVolumeListRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pos_rpc::_VolumeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pos_rpc::_VolumeListResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pos_rpc::_Chunk_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pos_rpc::_ReadBlocksRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pos_rpc::_ReadBlocksResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pos_rpc::_WriteBlocksRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pos_rpc::_WriteBlocksResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pos_rpc::_WriteHostBlocksRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pos_rpc::_WriteHostBlocksResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pos_rpc::_CompleteHostWriteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pos_rpc::_CompleteHostWriteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pos_rpc::_StartVolumeSyncRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pos_rpc::_StartVolumeSyncResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pos_rpc::_FinishVolumeSyncRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pos_rpc::_FinishVolumeSyncResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pos_rpc::_SuspendWriteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pos_rpc::_SuspendWriteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pos_rpc::_ResumeWriteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pos_rpc::_ResumeWriteResponse_default_instance_),
};

const char descriptor_table_protodef_pos_5frpc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rpos_rpc.proto\022\007pos_rpc\"\024\n\022HealthCheckR"
  "equest\"\255\001\n\023HealthCheckResponse\022:\n\006status"
  "\030\001 \001(\0162*.pos_rpc.HealthCheckResponse.Ser"
  "vingStatus\022\023\n\006reason\030\002 \001(\tH\000\210\001\001\":\n\rServi"
  "ngStatus\022\013\n\007UNKNOWN\020\000\022\013\n\007SERVING\020\001\022\017\n\013NO"
  "T_SERVING\020\002B\t\n\007_reason\":\n\022CreateArrayReq"
  "uest\022\022\n\narray_name\030\001 \001(\t\022\020\n\010capacity\030\002 \001"
  "(\004\"(\n\022DeleteArrayRequest\022\022\n\narray_name\030\001"
  " \001(\t\"P\n\023CreateVolumeRequest\022\022\n\narray_nam"
  "e\030\001 \001(\t\022\023\n\013volume_name\030\002 \001(\t\022\020\n\010capacity"
  "\030\003 \001(\004\">\n\023DeleteVolumeRequest\022\022\n\narray_n"
  "ame\030\001 \001(\t\022\023\n\013volume_name\030\002 \001(\t\"=\n\022MountV"
  "olumeRequest\022\022\n\narray_name\030\001 \001(\t\022\023\n\013volu"
  "me_name\030\002 \001(\t\"\?\n\024UnmountVolumeRequest\022\022\n"
  "\narray_name\030\001 \001(\t\022\023\n\013volume_name\030\002 \001(\t\"-"
  "\n\027UpdateVoluemMetaRequest\022\022\n\narray_name\030"
  "\001 \001(\t\"Q\n\013PosResponse\022\"\n\006result\030\001 \001(\0162\022.p"
  "os_rpc.PosResult\022\023\n\006reason\030\002 \001(\tH\000\210\001\001B\t\n"
  "\007_reason\"\025\n\023GetArrayListRequest\"\320\001\n\tArra"
  "yInfo\022\022\n\narray_name\030\001 \001(\t\022\026\n\016total_capac"
  "ity\030\002 \001(\004\022\025\n\rused_capacity\030\003 \001(\004\022,\n\005stat"
  "e\030\004 \001(\0162\035.pos_rpc.ArrayInfo.ArrayState\"R"
  "\n\nArrayState\022\013\n\007OFFLINE\020\000\022\t\n\005PAUSE\020\001\022\n\n\006"
  "NORMAL\020\002\022\010\n\004BUSY\020\003\022\010\n\004STOP\020\004\022\014\n\010SNAPSHOT"
  "\020\005\"z\n\021ArrayListResponse\022\"\n\006result\030\001 \001(\0162"
  "\022.pos_rpc.PosResult\022\023\n\006reason\030\002 \001(\tH\000\210\001\001"
  "\022!\n\005infos\030\003 \003(\0132\022.pos_rpc.ArrayInfoB\t\n\007_"
  "reason\"*\n\024GetVolumeListRequest\022\022\n\narray_"
  "name\030\001 \001(\t\"\270\001\n\nVolumeInfo\022\023\n\013volume_name"
  "\030\001 \001(\t\022\026\n\016total_capacity\030\002 \001(\004\022\025\n\rused_c"
  "apacity\030\003 \001(\004\022.\n\005state\030\004 \001(\0162\037.pos_rpc.V"
  "olumeInfo.VolumeState\"6\n\013VolumeState\022\013\n\007"
  "UNKNOWN\020\000\022\013\n\007MOUNTED\020\001\022\r\n\tUNMOUNTED\020\002\"|\n"
  "\022VolumeListResponse\022\"\n\006result\030\001 \001(\0162\022.po"
  "s_rpc.PosResult\022\023\n\006reason\030\002 \001(\tH\000\210\001\001\022\"\n\005"
  "infos\030\003 \003(\0132\023.pos_rpc.VolumeInfoB\t\n\007_rea"
  "son\"\030\n\005Chunk\022\017\n\007content\030\001 \001(\014\"]\n\021ReadBlo"
  "cksRequest\022\022\n\narray_name\030\001 \001(\t\022\023\n\013volume"
  "_name\030\002 \001(\t\022\013\n\003rba\030\003 \001(\004\022\022\n\nnum_blocks\030\004"
  " \001(\004\"v\n\022ReadBlocksResponse\022\"\n\006result\030\001 \001"
  "(\0162\022.pos_rpc.PosResult\022\023\n\006reason\030\002 \001(\tH\000"
  "\210\001\001\022\034\n\004data\030\003 \003(\0132\016.pos_rpc.ChunkB\t\n\007_re"
  "ason\"\211\001\n\022WriteBlocksRequest\022\022\n\narray_nam"
  "e\030\001 \001(\t\022\023\n\013volume_name\030\002 \001(\t\022\013\n\003rba\030\003 \001("
  "\004\022\022\n\nnum_blocks\030\004 \001(\004\022\013\n\003lsn\030\005 \001(\004\022\034\n\004da"
  "ta\030\006 \003(\0132\016.pos_rpc.Chunk\"Y\n\023WriteBlocksR"
  "esponse\022\"\n\006result\030\001 \001(\0162\022.pos_rpc.PosRes"
  "ult\022\023\n\006reason\030\002 \001(\tH\000\210\001\001B\t\n\007_reason\"o\n\026W"
  "riteHostBlocksRequest\022\022\n\narray_name\030\001 \001("
  "\t\022\023\n\013volume_name\030\002 \001(\t\022\013\n\003rba\030\003 \001(\004\022\022\n\nn"
  "um_blocks\030\004 \001(\004\022\013\n\003lsn\030\005 \001(\004\"]\n\027WriteHos"
  "tBlocksResponse\022\"\n\006result\030\001 \001(\0162\022.pos_rp"
  "c.PosResult\022\023\n\006reason\030\002 \001(\tH\000\210\001\001B\t\n\007_rea"
  "son\"P\n\030CompleteHostWriteRequest\022\022\n\narray"
  "_name\030\001 \001(\t\022\023\n\013volume_name\030\002 \001(\t\022\013\n\003lsn\030"
  "\003 \001(\004\"_\n\031CompleteHostWriteResponse\022\"\n\006re"
  "sult\030\001 \001(\0162\022.pos_rpc.PosResult\022\023\n\006reason"
  "\030\002 \001(\tH\000\210\001\001B\t\n\007_reason\"U\n\026StartVolumeSyn"
  "cRequest\022\022\n\narray_name\030\001 \001(\t\022\023\n\013volume_n"
  "ame\030\002 \001(\t\022\022\n\nis_primary\030\003 \001(\010\"]\n\027StartVo"
  "lumeSyncResponse\022\"\n\006result\030\001 \001(\0162\022.pos_r"
  "pc.PosResult\022\023\n\006reason\030\002 \001(\tH\000\210\001\001B\t\n\007_re"
  "ason\"V\n\027FinishVolumeSyncRequest\022\022\n\narray"
  "_name\030\001 \001(\t\022\023\n\013volume_name\030\002 \001(\t\022\022\n\nis_p"
  "rimary\030\003 \001(\010\"^\n\030FinishVolumeSyncResponse"
  "\022\"\n\006result\030\001 \001(\0162\022.pos_rpc.PosResult\022\023\n\006"
  "reason\030\002 \001(\tH\000\210\001\001B\t\n\007_reason\">\n\023SuspendW"
  "riteRequest\022\022\n\narray_name\030\001 \001(\t\022\023\n\013volum"
  "e_name\030\002 \001(\t\"Z\n\024SuspendWriteResponse\022\"\n\006"
  "result\030\001 \001(\0162\022.pos_rpc.PosResult\022\023\n\006reas"
  "on\030\002 \001(\tH\000\210\001\001B\t\n\007_reason\"=\n\022ResumeWriteR"
  "equest\022\022\n\narray_name\030\001 \001(\t\022\023\n\013volume_nam"
  "e\030\002 \001(\t\"Y\n\023ResumeWriteResponse\022\"\n\006result"
  "\030\001 \001(\0162\022.pos_rpc.PosResult\022\023\n\006reason\030\002 \001"
  "(\tH\000\210\001\001B\t\n\007_reason*\"\n\tPosResult\022\013\n\007SUCCE"
  "SS\020\000\022\010\n\004FAIL\020\0012L\n\006Health\022B\n\005Check\022\033.pos_"
  "rpc.HealthCheckRequest\032\034.pos_rpc.HealthC"
  "heckResponse2\230\005\n\rPosManagement\022B\n\013Create"
  "Array\022\033.pos_rpc.CreateArrayRequest\032\024.pos"
  "_rpc.PosResponse\"\000\022B\n\013DeleteArray\022\033.pos_"
  "rpc.DeleteArrayRequest\032\024.pos_rpc.PosResp"
  "onse\"\000\022D\n\014CreateVolume\022\034.pos_rpc.CreateV"
  "olumeRequest\032\024.pos_rpc.PosResponse\"\000\022D\n\014"
  "DeleteVolume\022\034.pos_rpc.DeleteVolumeReque"
  "st\032\024.pos_rpc.PosResponse\"\000\022B\n\013MountVolum"
  "e\022\033.pos_rpc.MountVolumeRequest\032\024.pos_rpc"
  ".PosResponse\"\000\022F\n\rUnmountVolume\022\035.pos_rp"
  "c.UnmountVolumeRequest\032\024.pos_rpc.PosResp"
  "onse\"\000\022L\n\020UpdateVoluemMeta\022 .pos_rpc.Upd"
  "ateVoluemMetaRequest\032\024.pos_rpc.PosRespon"
  "se\"\000\022J\n\014GetArrayList\022\034.pos_rpc.GetArrayL"
  "istRequest\032\032.pos_rpc.ArrayListResponse\"\000"
  "\022M\n\rGetVolumeList\022\035.pos_rpc.GetVolumeLis"
  "tRequest\032\033.pos_rpc.VolumeListResponse\"\0002"
  "\322\002\n\005PosIo\022G\n\nReadBlocks\022\032.pos_rpc.ReadBl"
  "ocksRequest\032\033.pos_rpc.ReadBlocksResponse"
  "\"\000\022J\n\013WriteBlocks\022\033.pos_rpc.WriteBlocksR"
  "equest\032\034.pos_rpc.WriteBlocksResponse\"\000\022V"
  "\n\017WriteHostBlocks\022\037.pos_rpc.WriteHostBlo"
  "cksRequest\032 .pos_rpc.WriteHostBlocksResp"
  "onse\"\000\022\\\n\021CompleteHostWrite\022!.pos_rpc.Co"
  "mpleteHostWriteRequest\032\".pos_rpc.Complet"
  "eHostWriteResponse\"\0002\332\002\n\nPosControl\022V\n\017S"
  "tartVolumeSync\022\037.pos_rpc.StartVolumeSync"
  "Request\032 .pos_rpc.StartVolumeSyncRespons"
  "e\"\000\022Y\n\020FinishVolumeSync\022 .pos_rpc.Finish"
  "VolumeSyncRequest\032!.pos_rpc.FinishVolume"
  "SyncResponse\"\000\022M\n\014SuspendWrite\022\034.pos_rpc"
  ".SuspendWriteRequest\032\035.pos_rpc.SuspendWr"
  "iteResponse\"\000\022J\n\013ResumeWrite\022\033.pos_rpc.R"
  "esumeWriteRequest\032\034.pos_rpc.ResumeWriteR"
  "esponse\"\000b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pos_5frpc_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pos_5frpc_2eproto = {
  false, false, 4457, descriptor_table_protodef_pos_5frpc_2eproto, "pos_rpc.proto", 
  &descriptor_table_pos_5frpc_2eproto_once, nullptr, 0, 33,
  schemas, file_default_instances, TableStruct_pos_5frpc_2eproto::offsets,
  file_level_metadata_pos_5frpc_2eproto, file_level_enum_descriptors_pos_5frpc_2eproto, file_level_service_descriptors_pos_5frpc_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_pos_5frpc_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pos_5frpc_2eproto);
  return descriptor_table_pos_5frpc_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_pos_5frpc_2eproto(&descriptor_table_pos_5frpc_2eproto);
namespace pos_rpc {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HealthCheckResponse_ServingStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pos_5frpc_2eproto);
  return file_level_enum_descriptors_pos_5frpc_2eproto[0];
}
bool HealthCheckResponse_ServingStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr HealthCheckResponse_ServingStatus HealthCheckResponse::UNKNOWN;
constexpr HealthCheckResponse_ServingStatus HealthCheckResponse::SERVING;
constexpr HealthCheckResponse_ServingStatus HealthCheckResponse::NOT_SERVING;
constexpr HealthCheckResponse_ServingStatus HealthCheckResponse::ServingStatus_MIN;
constexpr HealthCheckResponse_ServingStatus HealthCheckResponse::ServingStatus_MAX;
constexpr int HealthCheckResponse::ServingStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ArrayInfo_ArrayState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pos_5frpc_2eproto);
  return file_level_enum_descriptors_pos_5frpc_2eproto[1];
}
bool ArrayInfo_ArrayState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ArrayInfo_ArrayState ArrayInfo::OFFLINE;
constexpr ArrayInfo_ArrayState ArrayInfo::PAUSE;
constexpr ArrayInfo_ArrayState ArrayInfo::NORMAL;
constexpr ArrayInfo_ArrayState ArrayInfo::BUSY;
constexpr ArrayInfo_ArrayState ArrayInfo::STOP;
constexpr ArrayInfo_ArrayState ArrayInfo::SNAPSHOT;
constexpr ArrayInfo_ArrayState ArrayInfo::ArrayState_MIN;
constexpr ArrayInfo_ArrayState ArrayInfo::ArrayState_MAX;
constexpr int ArrayInfo::ArrayState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VolumeInfo_VolumeState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pos_5frpc_2eproto);
  return file_level_enum_descriptors_pos_5frpc_2eproto[2];
}
bool VolumeInfo_VolumeState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr VolumeInfo_VolumeState VolumeInfo::UNKNOWN;
constexpr VolumeInfo_VolumeState VolumeInfo::MOUNTED;
constexpr VolumeInfo_VolumeState VolumeInfo::UNMOUNTED;
constexpr VolumeInfo_VolumeState VolumeInfo::VolumeState_MIN;
constexpr VolumeInfo_VolumeState VolumeInfo::VolumeState_MAX;
constexpr int VolumeInfo::VolumeState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PosResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pos_5frpc_2eproto);
  return file_level_enum_descriptors_pos_5frpc_2eproto[3];
}
bool PosResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class HealthCheckRequest::_Internal {
 public:
};

HealthCheckRequest::HealthCheckRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pos_rpc.HealthCheckRequest)
}
HealthCheckRequest::HealthCheckRequest(const HealthCheckRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pos_rpc.HealthCheckRequest)
}

void HealthCheckRequest::SharedCtor() {
}

HealthCheckRequest::~HealthCheckRequest() {
  // @@protoc_insertion_point(destructor:pos_rpc.HealthCheckRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HealthCheckRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HealthCheckRequest::ArenaDtor(void* object) {
  HealthCheckRequest* _this = reinterpret_cast< HealthCheckRequest* >(object);
  (void)_this;
}
void HealthCheckRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HealthCheckRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HealthCheckRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pos_rpc.HealthCheckRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HealthCheckRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HealthCheckRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pos_rpc.HealthCheckRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pos_rpc.HealthCheckRequest)
  return target;
}

size_t HealthCheckRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pos_rpc.HealthCheckRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HealthCheckRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pos_rpc.HealthCheckRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HealthCheckRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HealthCheckRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pos_rpc.HealthCheckRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pos_rpc.HealthCheckRequest)
    MergeFrom(*source);
  }
}

void HealthCheckRequest::MergeFrom(const HealthCheckRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pos_rpc.HealthCheckRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void HealthCheckRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pos_rpc.HealthCheckRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HealthCheckRequest::CopyFrom(const HealthCheckRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pos_rpc.HealthCheckRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthCheckRequest::IsInitialized() const {
  return true;
}

void HealthCheckRequest::InternalSwap(HealthCheckRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HealthCheckRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HealthCheckResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<HealthCheckResponse>()._has_bits_);
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

HealthCheckResponse::HealthCheckResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pos_rpc.HealthCheckResponse)
}
HealthCheckResponse::HealthCheckResponse(const HealthCheckResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_reason()) {
    reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reason(), 
      GetArena());
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:pos_rpc.HealthCheckResponse)
}

void HealthCheckResponse::SharedCtor() {
reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
status_ = 0;
}

HealthCheckResponse::~HealthCheckResponse() {
  // @@protoc_insertion_point(destructor:pos_rpc.HealthCheckResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HealthCheckResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HealthCheckResponse::ArenaDtor(void* object) {
  HealthCheckResponse* _this = reinterpret_cast< HealthCheckResponse* >(object);
  (void)_this;
}
void HealthCheckResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HealthCheckResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HealthCheckResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pos_rpc.HealthCheckResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    reason_.ClearNonDefaultToEmpty();
  }
  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HealthCheckResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pos_rpc.HealthCheckResponse.ServingStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::pos_rpc::HealthCheckResponse_ServingStatus>(val));
        } else goto handle_unusual;
        continue;
      // string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pos_rpc.HealthCheckResponse.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HealthCheckResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pos_rpc.HealthCheckResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pos_rpc.HealthCheckResponse.ServingStatus status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // string reason = 2;
  if (_internal_has_reason()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pos_rpc.HealthCheckResponse.reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pos_rpc.HealthCheckResponse)
  return target;
}

size_t HealthCheckResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pos_rpc.HealthCheckResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reason = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // .pos_rpc.HealthCheckResponse.ServingStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HealthCheckResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pos_rpc.HealthCheckResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HealthCheckResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HealthCheckResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pos_rpc.HealthCheckResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pos_rpc.HealthCheckResponse)
    MergeFrom(*source);
  }
}

void HealthCheckResponse::MergeFrom(const HealthCheckResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pos_rpc.HealthCheckResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_reason()) {
    _internal_set_reason(from._internal_reason());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void HealthCheckResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pos_rpc.HealthCheckResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HealthCheckResponse::CopyFrom(const HealthCheckResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pos_rpc.HealthCheckResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthCheckResponse::IsInitialized() const {
  return true;
}

void HealthCheckResponse::InternalSwap(HealthCheckResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HealthCheckResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CreateArrayRequest::_Internal {
 public:
};

CreateArrayRequest::CreateArrayRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pos_rpc.CreateArrayRequest)
}
CreateArrayRequest::CreateArrayRequest(const CreateArrayRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  array_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_array_name().empty()) {
    array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_array_name(), 
      GetArena());
  }
  capacity_ = from.capacity_;
  // @@protoc_insertion_point(copy_constructor:pos_rpc.CreateArrayRequest)
}

void CreateArrayRequest::SharedCtor() {
array_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
capacity_ = PROTOBUF_ULONGLONG(0);
}

CreateArrayRequest::~CreateArrayRequest() {
  // @@protoc_insertion_point(destructor:pos_rpc.CreateArrayRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateArrayRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  array_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateArrayRequest::ArenaDtor(void* object) {
  CreateArrayRequest* _this = reinterpret_cast< CreateArrayRequest* >(object);
  (void)_this;
}
void CreateArrayRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateArrayRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateArrayRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pos_rpc.CreateArrayRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  array_name_.ClearToEmpty();
  capacity_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateArrayRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string array_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_array_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pos_rpc.CreateArrayRequest.array_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 capacity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateArrayRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pos_rpc.CreateArrayRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string array_name = 1;
  if (this->array_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_array_name().data(), static_cast<int>(this->_internal_array_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pos_rpc.CreateArrayRequest.array_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_array_name(), target);
  }

  // uint64 capacity = 2;
  if (this->capacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_capacity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pos_rpc.CreateArrayRequest)
  return target;
}

size_t CreateArrayRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pos_rpc.CreateArrayRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string array_name = 1;
  if (this->array_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_array_name());
  }

  // uint64 capacity = 2;
  if (this->capacity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_capacity());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateArrayRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pos_rpc.CreateArrayRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateArrayRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateArrayRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pos_rpc.CreateArrayRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pos_rpc.CreateArrayRequest)
    MergeFrom(*source);
  }
}

void CreateArrayRequest::MergeFrom(const CreateArrayRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pos_rpc.CreateArrayRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.array_name().size() > 0) {
    _internal_set_array_name(from._internal_array_name());
  }
  if (from.capacity() != 0) {
    _internal_set_capacity(from._internal_capacity());
  }
}

void CreateArrayRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pos_rpc.CreateArrayRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateArrayRequest::CopyFrom(const CreateArrayRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pos_rpc.CreateArrayRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateArrayRequest::IsInitialized() const {
  return true;
}

void CreateArrayRequest::InternalSwap(CreateArrayRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  array_name_.Swap(&other->array_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(capacity_, other->capacity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateArrayRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DeleteArrayRequest::_Internal {
 public:
};

DeleteArrayRequest::DeleteArrayRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pos_rpc.DeleteArrayRequest)
}
DeleteArrayRequest::DeleteArrayRequest(const DeleteArrayRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  array_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_array_name().empty()) {
    array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_array_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pos_rpc.DeleteArrayRequest)
}

void DeleteArrayRequest::SharedCtor() {
array_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteArrayRequest::~DeleteArrayRequest() {
  // @@protoc_insertion_point(destructor:pos_rpc.DeleteArrayRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteArrayRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  array_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteArrayRequest::ArenaDtor(void* object) {
  DeleteArrayRequest* _this = reinterpret_cast< DeleteArrayRequest* >(object);
  (void)_this;
}
void DeleteArrayRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteArrayRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteArrayRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pos_rpc.DeleteArrayRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  array_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteArrayRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string array_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_array_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pos_rpc.DeleteArrayRequest.array_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteArrayRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pos_rpc.DeleteArrayRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string array_name = 1;
  if (this->array_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_array_name().data(), static_cast<int>(this->_internal_array_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pos_rpc.DeleteArrayRequest.array_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_array_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pos_rpc.DeleteArrayRequest)
  return target;
}

size_t DeleteArrayRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pos_rpc.DeleteArrayRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string array_name = 1;
  if (this->array_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_array_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteArrayRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pos_rpc.DeleteArrayRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteArrayRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteArrayRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pos_rpc.DeleteArrayRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pos_rpc.DeleteArrayRequest)
    MergeFrom(*source);
  }
}

void DeleteArrayRequest::MergeFrom(const DeleteArrayRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pos_rpc.DeleteArrayRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.array_name().size() > 0) {
    _internal_set_array_name(from._internal_array_name());
  }
}

void DeleteArrayRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pos_rpc.DeleteArrayRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteArrayRequest::CopyFrom(const DeleteArrayRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pos_rpc.DeleteArrayRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteArrayRequest::IsInitialized() const {
  return true;
}

void DeleteArrayRequest::InternalSwap(DeleteArrayRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  array_name_.Swap(&other->array_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteArrayRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CreateVolumeRequest::_Internal {
 public:
};

CreateVolumeRequest::CreateVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pos_rpc.CreateVolumeRequest)
}
CreateVolumeRequest::CreateVolumeRequest(const CreateVolumeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  array_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_array_name().empty()) {
    array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_array_name(), 
      GetArena());
  }
  volume_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_volume_name().empty()) {
    volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_volume_name(), 
      GetArena());
  }
  capacity_ = from.capacity_;
  // @@protoc_insertion_point(copy_constructor:pos_rpc.CreateVolumeRequest)
}

void CreateVolumeRequest::SharedCtor() {
array_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
volume_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
capacity_ = PROTOBUF_ULONGLONG(0);
}

CreateVolumeRequest::~CreateVolumeRequest() {
  // @@protoc_insertion_point(destructor:pos_rpc.CreateVolumeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateVolumeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  array_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  volume_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateVolumeRequest::ArenaDtor(void* object) {
  CreateVolumeRequest* _this = reinterpret_cast< CreateVolumeRequest* >(object);
  (void)_this;
}
void CreateVolumeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateVolumeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateVolumeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pos_rpc.CreateVolumeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  array_name_.ClearToEmpty();
  volume_name_.ClearToEmpty();
  capacity_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateVolumeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string array_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_array_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pos_rpc.CreateVolumeRequest.array_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string volume_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_volume_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pos_rpc.CreateVolumeRequest.volume_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 capacity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateVolumeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pos_rpc.CreateVolumeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string array_name = 1;
  if (this->array_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_array_name().data(), static_cast<int>(this->_internal_array_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pos_rpc.CreateVolumeRequest.array_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_array_name(), target);
  }

  // string volume_name = 2;
  if (this->volume_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_volume_name().data(), static_cast<int>(this->_internal_volume_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pos_rpc.CreateVolumeRequest.volume_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_volume_name(), target);
  }

  // uint64 capacity = 3;
  if (this->capacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_capacity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pos_rpc.CreateVolumeRequest)
  return target;
}

size_t CreateVolumeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pos_rpc.CreateVolumeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string array_name = 1;
  if (this->array_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_array_name());
  }

  // string volume_name = 2;
  if (this->volume_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_volume_name());
  }

  // uint64 capacity = 3;
  if (this->capacity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_capacity());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateVolumeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pos_rpc.CreateVolumeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateVolumeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateVolumeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pos_rpc.CreateVolumeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pos_rpc.CreateVolumeRequest)
    MergeFrom(*source);
  }
}

void CreateVolumeRequest::MergeFrom(const CreateVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pos_rpc.CreateVolumeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.array_name().size() > 0) {
    _internal_set_array_name(from._internal_array_name());
  }
  if (from.volume_name().size() > 0) {
    _internal_set_volume_name(from._internal_volume_name());
  }
  if (from.capacity() != 0) {
    _internal_set_capacity(from._internal_capacity());
  }
}

void CreateVolumeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pos_rpc.CreateVolumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateVolumeRequest::CopyFrom(const CreateVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pos_rpc.CreateVolumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateVolumeRequest::IsInitialized() const {
  return true;
}

void CreateVolumeRequest::InternalSwap(CreateVolumeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  array_name_.Swap(&other->array_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  volume_name_.Swap(&other->volume_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(capacity_, other->capacity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateVolumeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DeleteVolumeRequest::_Internal {
 public:
};

DeleteVolumeRequest::DeleteVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pos_rpc.DeleteVolumeRequest)
}
DeleteVolumeRequest::DeleteVolumeRequest(const DeleteVolumeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  array_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_array_name().empty()) {
    array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_array_name(), 
      GetArena());
  }
  volume_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_volume_name().empty()) {
    volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_volume_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pos_rpc.DeleteVolumeRequest)
}

void DeleteVolumeRequest::SharedCtor() {
array_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
volume_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteVolumeRequest::~DeleteVolumeRequest() {
  // @@protoc_insertion_point(destructor:pos_rpc.DeleteVolumeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteVolumeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  array_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  volume_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteVolumeRequest::ArenaDtor(void* object) {
  DeleteVolumeRequest* _this = reinterpret_cast< DeleteVolumeRequest* >(object);
  (void)_this;
}
void DeleteVolumeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteVolumeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteVolumeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pos_rpc.DeleteVolumeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  array_name_.ClearToEmpty();
  volume_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteVolumeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string array_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_array_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pos_rpc.DeleteVolumeRequest.array_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string volume_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_volume_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pos_rpc.DeleteVolumeRequest.volume_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteVolumeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pos_rpc.DeleteVolumeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string array_name = 1;
  if (this->array_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_array_name().data(), static_cast<int>(this->_internal_array_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pos_rpc.DeleteVolumeRequest.array_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_array_name(), target);
  }

  // string volume_name = 2;
  if (this->volume_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_volume_name().data(), static_cast<int>(this->_internal_volume_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pos_rpc.DeleteVolumeRequest.volume_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_volume_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pos_rpc.DeleteVolumeRequest)
  return target;
}

size_t DeleteVolumeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pos_rpc.DeleteVolumeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string array_name = 1;
  if (this->array_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_array_name());
  }

  // string volume_name = 2;
  if (this->volume_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_volume_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteVolumeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pos_rpc.DeleteVolumeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteVolumeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteVolumeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pos_rpc.DeleteVolumeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pos_rpc.DeleteVolumeRequest)
    MergeFrom(*source);
  }
}

void DeleteVolumeRequest::MergeFrom(const DeleteVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pos_rpc.DeleteVolumeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.array_name().size() > 0) {
    _internal_set_array_name(from._internal_array_name());
  }
  if (from.volume_name().size() > 0) {
    _internal_set_volume_name(from._internal_volume_name());
  }
}

void DeleteVolumeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pos_rpc.DeleteVolumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteVolumeRequest::CopyFrom(const DeleteVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pos_rpc.DeleteVolumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteVolumeRequest::IsInitialized() const {
  return true;
}

void DeleteVolumeRequest::InternalSwap(DeleteVolumeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  array_name_.Swap(&other->array_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  volume_name_.Swap(&other->volume_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteVolumeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MountVolumeRequest::_Internal {
 public:
};

MountVolumeRequest::MountVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pos_rpc.MountVolumeRequest)
}
MountVolumeRequest::MountVolumeRequest(const MountVolumeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  array_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_array_name().empty()) {
    array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_array_name(), 
      GetArena());
  }
  volume_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_volume_name().empty()) {
    volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_volume_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pos_rpc.MountVolumeRequest)
}

void MountVolumeRequest::SharedCtor() {
array_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
volume_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MountVolumeRequest::~MountVolumeRequest() {
  // @@protoc_insertion_point(destructor:pos_rpc.MountVolumeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MountVolumeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  array_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  volume_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MountVolumeRequest::ArenaDtor(void* object) {
  MountVolumeRequest* _this = reinterpret_cast< MountVolumeRequest* >(object);
  (void)_this;
}
void MountVolumeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MountVolumeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MountVolumeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pos_rpc.MountVolumeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  array_name_.ClearToEmpty();
  volume_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MountVolumeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string array_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_array_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pos_rpc.MountVolumeRequest.array_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string volume_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_volume_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pos_rpc.MountVolumeRequest.volume_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MountVolumeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pos_rpc.MountVolumeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string array_name = 1;
  if (this->array_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_array_name().data(), static_cast<int>(this->_internal_array_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pos_rpc.MountVolumeRequest.array_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_array_name(), target);
  }

  // string volume_name = 2;
  if (this->volume_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_volume_name().data(), static_cast<int>(this->_internal_volume_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pos_rpc.MountVolumeRequest.volume_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_volume_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pos_rpc.MountVolumeRequest)
  return target;
}

size_t MountVolumeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pos_rpc.MountVolumeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string array_name = 1;
  if (this->array_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_array_name());
  }

  // string volume_name = 2;
  if (this->volume_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_volume_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MountVolumeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pos_rpc.MountVolumeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MountVolumeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MountVolumeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pos_rpc.MountVolumeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pos_rpc.MountVolumeRequest)
    MergeFrom(*source);
  }
}

void MountVolumeRequest::MergeFrom(const MountVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pos_rpc.MountVolumeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.array_name().size() > 0) {
    _internal_set_array_name(from._internal_array_name());
  }
  if (from.volume_name().size() > 0) {
    _internal_set_volume_name(from._internal_volume_name());
  }
}

void MountVolumeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pos_rpc.MountVolumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MountVolumeRequest::CopyFrom(const MountVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pos_rpc.MountVolumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MountVolumeRequest::IsInitialized() const {
  return true;
}

void MountVolumeRequest::InternalSwap(MountVolumeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  array_name_.Swap(&other->array_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  volume_name_.Swap(&other->volume_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MountVolumeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UnmountVolumeRequest::_Internal {
 public:
};

UnmountVolumeRequest::UnmountVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pos_rpc.UnmountVolumeRequest)
}
UnmountVolumeRequest::UnmountVolumeRequest(const UnmountVolumeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  array_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_array_name().empty()) {
    array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_array_name(), 
      GetArena());
  }
  volume_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_volume_name().empty()) {
    volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_volume_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pos_rpc.UnmountVolumeRequest)
}

void UnmountVolumeRequest::SharedCtor() {
array_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
volume_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UnmountVolumeRequest::~UnmountVolumeRequest() {
  // @@protoc_insertion_point(destructor:pos_rpc.UnmountVolumeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnmountVolumeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  array_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  volume_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UnmountVolumeRequest::ArenaDtor(void* object) {
  UnmountVolumeRequest* _this = reinterpret_cast< UnmountVolumeRequest* >(object);
  (void)_this;
}
void UnmountVolumeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnmountVolumeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UnmountVolumeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pos_rpc.UnmountVolumeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  array_name_.ClearToEmpty();
  volume_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnmountVolumeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string array_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_array_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pos_rpc.UnmountVolumeRequest.array_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string volume_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_volume_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pos_rpc.UnmountVolumeRequest.volume_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnmountVolumeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pos_rpc.UnmountVolumeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string array_name = 1;
  if (this->array_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_array_name().data(), static_cast<int>(this->_internal_array_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pos_rpc.UnmountVolumeRequest.array_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_array_name(), target);
  }

  // string volume_name = 2;
  if (this->volume_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_volume_name().data(), static_cast<int>(this->_internal_volume_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pos_rpc.UnmountVolumeRequest.volume_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_volume_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pos_rpc.UnmountVolumeRequest)
  return target;
}

size_t UnmountVolumeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pos_rpc.UnmountVolumeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string array_name = 1;
  if (this->array_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_array_name());
  }

  // string volume_name = 2;
  if (this->volume_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_volume_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnmountVolumeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pos_rpc.UnmountVolumeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UnmountVolumeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnmountVolumeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pos_rpc.UnmountVolumeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pos_rpc.UnmountVolumeRequest)
    MergeFrom(*source);
  }
}

void UnmountVolumeRequest::MergeFrom(const UnmountVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pos_rpc.UnmountVolumeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.array_name().size() > 0) {
    _internal_set_array_name(from._internal_array_name());
  }
  if (from.volume_name().size() > 0) {
    _internal_set_volume_name(from._internal_volume_name());
  }
}

void UnmountVolumeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pos_rpc.UnmountVolumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnmountVolumeRequest::CopyFrom(const UnmountVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pos_rpc.UnmountVolumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnmountVolumeRequest::IsInitialized() const {
  return true;
}

void UnmountVolumeRequest::InternalSwap(UnmountVolumeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  array_name_.Swap(&other->array_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  volume_name_.Swap(&other->volume_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata UnmountVolumeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UpdateVoluemMetaRequest::_Internal {
 public:
};

UpdateVoluemMetaRequest::UpdateVoluemMetaRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pos_rpc.UpdateVoluemMetaRequest)
}
UpdateVoluemMetaRequest::UpdateVoluemMetaRequest(const UpdateVoluemMetaRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  array_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_array_name().empty()) {
    array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_array_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pos_rpc.UpdateVoluemMetaRequest)
}

void UpdateVoluemMetaRequest::SharedCtor() {
array_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UpdateVoluemMetaRequest::~UpdateVoluemMetaRequest() {
  // @@protoc_insertion_point(destructor:pos_rpc.UpdateVoluemMetaRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateVoluemMetaRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  array_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdateVoluemMetaRequest::ArenaDtor(void* object) {
  UpdateVoluemMetaRequest* _this = reinterpret_cast< UpdateVoluemMetaRequest* >(object);
  (void)_this;
}
void UpdateVoluemMetaRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateVoluemMetaRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateVoluemMetaRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pos_rpc.UpdateVoluemMetaRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  array_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateVoluemMetaRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string array_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_array_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pos_rpc.UpdateVoluemMetaRequest.array_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateVoluemMetaRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pos_rpc.UpdateVoluemMetaRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string array_name = 1;
  if (this->array_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_array_name().data(), static_cast<int>(this->_internal_array_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pos_rpc.UpdateVoluemMetaRequest.array_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_array_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pos_rpc.UpdateVoluemMetaRequest)
  return target;
}

size_t UpdateVoluemMetaRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pos_rpc.UpdateVoluemMetaRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string array_name = 1;
  if (this->array_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_array_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateVoluemMetaRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pos_rpc.UpdateVoluemMetaRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateVoluemMetaRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateVoluemMetaRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pos_rpc.UpdateVoluemMetaRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pos_rpc.UpdateVoluemMetaRequest)
    MergeFrom(*source);
  }
}

void UpdateVoluemMetaRequest::MergeFrom(const UpdateVoluemMetaRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pos_rpc.UpdateVoluemMetaRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.array_name().size() > 0) {
    _internal_set_array_name(from._internal_array_name());
  }
}

void UpdateVoluemMetaRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pos_rpc.UpdateVoluemMetaRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateVoluemMetaRequest::CopyFrom(const UpdateVoluemMetaRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pos_rpc.UpdateVoluemMetaRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateVoluemMetaRequest::IsInitialized() const {
  return true;
}

void UpdateVoluemMetaRequest::InternalSwap(UpdateVoluemMetaRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  array_name_.Swap(&other->array_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateVoluemMetaRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PosResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<PosResponse>()._has_bits_);
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PosResponse::PosResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pos_rpc.PosResponse)
}
PosResponse::PosResponse(const PosResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_reason()) {
    reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reason(), 
      GetArena());
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:pos_rpc.PosResponse)
}

void PosResponse::SharedCtor() {
reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
result_ = 0;
}

PosResponse::~PosResponse() {
  // @@protoc_insertion_point(destructor:pos_rpc.PosResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PosResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PosResponse::ArenaDtor(void* object) {
  PosResponse* _this = reinterpret_cast< PosResponse* >(object);
  (void)_this;
}
void PosResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PosResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PosResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pos_rpc.PosResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    reason_.ClearNonDefaultToEmpty();
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PosResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pos_rpc.PosResult result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::pos_rpc::PosResult>(val));
        } else goto handle_unusual;
        continue;
      // string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pos_rpc.PosResponse.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PosResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pos_rpc.PosResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pos_rpc.PosResult result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // string reason = 2;
  if (_internal_has_reason()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pos_rpc.PosResponse.reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pos_rpc.PosResponse)
  return target;
}

size_t PosResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pos_rpc.PosResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reason = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // .pos_rpc.PosResult result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PosResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pos_rpc.PosResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PosResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PosResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pos_rpc.PosResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pos_rpc.PosResponse)
    MergeFrom(*source);
  }
}

void PosResponse::MergeFrom(const PosResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pos_rpc.PosResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_reason()) {
    _internal_set_reason(from._internal_reason());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void PosResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pos_rpc.PosResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PosResponse::CopyFrom(const PosResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pos_rpc.PosResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PosResponse::IsInitialized() const {
  return true;
}

void PosResponse::InternalSwap(PosResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PosResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetArrayListRequest::_Internal {
 public:
};

GetArrayListRequest::GetArrayListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pos_rpc.GetArrayListRequest)
}
GetArrayListRequest::GetArrayListRequest(const GetArrayListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pos_rpc.GetArrayListRequest)
}

void GetArrayListRequest::SharedCtor() {
}

GetArrayListRequest::~GetArrayListRequest() {
  // @@protoc_insertion_point(destructor:pos_rpc.GetArrayListRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetArrayListRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetArrayListRequest::ArenaDtor(void* object) {
  GetArrayListRequest* _this = reinterpret_cast< GetArrayListRequest* >(object);
  (void)_this;
}
void GetArrayListRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetArrayListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetArrayListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pos_rpc.GetArrayListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetArrayListRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetArrayListRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pos_rpc.GetArrayListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pos_rpc.GetArrayListRequest)
  return target;
}

size_t GetArrayListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pos_rpc.GetArrayListRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetArrayListRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pos_rpc.GetArrayListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetArrayListRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetArrayListRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pos_rpc.GetArrayListRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pos_rpc.GetArrayListRequest)
    MergeFrom(*source);
  }
}

void GetArrayListRequest::MergeFrom(const GetArrayListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pos_rpc.GetArrayListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetArrayListRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pos_rpc.GetArrayListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetArrayListRequest::CopyFrom(const GetArrayListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pos_rpc.GetArrayListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetArrayListRequest::IsInitialized() const {
  return true;
}

void GetArrayListRequest::InternalSwap(GetArrayListRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetArrayListRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ArrayInfo::_Internal {
 public:
};

ArrayInfo::ArrayInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pos_rpc.ArrayInfo)
}
ArrayInfo::ArrayInfo(const ArrayInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  array_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_array_name().empty()) {
    array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_array_name(), 
      GetArena());
  }
  ::memcpy(&total_capacity_, &from.total_capacity_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&total_capacity_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:pos_rpc.ArrayInfo)
}

void ArrayInfo::SharedCtor() {
array_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&total_capacity_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&total_capacity_)) + sizeof(state_));
}

ArrayInfo::~ArrayInfo() {
  // @@protoc_insertion_point(destructor:pos_rpc.ArrayInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ArrayInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  array_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ArrayInfo::ArenaDtor(void* object) {
  ArrayInfo* _this = reinterpret_cast< ArrayInfo* >(object);
  (void)_this;
}
void ArrayInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ArrayInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ArrayInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:pos_rpc.ArrayInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  array_name_.ClearToEmpty();
  ::memset(&total_capacity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&total_capacity_)) + sizeof(state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArrayInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string array_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_array_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pos_rpc.ArrayInfo.array_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 total_capacity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 used_capacity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          used_capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pos_rpc.ArrayInfo.ArrayState state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::pos_rpc::ArrayInfo_ArrayState>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ArrayInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pos_rpc.ArrayInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string array_name = 1;
  if (this->array_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_array_name().data(), static_cast<int>(this->_internal_array_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pos_rpc.ArrayInfo.array_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_array_name(), target);
  }

  // uint64 total_capacity = 2;
  if (this->total_capacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_total_capacity(), target);
  }

  // uint64 used_capacity = 3;
  if (this->used_capacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_used_capacity(), target);
  }

  // .pos_rpc.ArrayInfo.ArrayState state = 4;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pos_rpc.ArrayInfo)
  return target;
}

size_t ArrayInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pos_rpc.ArrayInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string array_name = 1;
  if (this->array_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_array_name());
  }

  // uint64 total_capacity = 2;
  if (this->total_capacity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_total_capacity());
  }

  // uint64 used_capacity = 3;
  if (this->used_capacity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_used_capacity());
  }

  // .pos_rpc.ArrayInfo.ArrayState state = 4;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArrayInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pos_rpc.ArrayInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ArrayInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ArrayInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pos_rpc.ArrayInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pos_rpc.ArrayInfo)
    MergeFrom(*source);
  }
}

void ArrayInfo::MergeFrom(const ArrayInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pos_rpc.ArrayInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.array_name().size() > 0) {
    _internal_set_array_name(from._internal_array_name());
  }
  if (from.total_capacity() != 0) {
    _internal_set_total_capacity(from._internal_total_capacity());
  }
  if (from.used_capacity() != 0) {
    _internal_set_used_capacity(from._internal_used_capacity());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void ArrayInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pos_rpc.ArrayInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArrayInfo::CopyFrom(const ArrayInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pos_rpc.ArrayInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArrayInfo::IsInitialized() const {
  return true;
}

void ArrayInfo::InternalSwap(ArrayInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  array_name_.Swap(&other->array_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ArrayInfo, state_)
      + sizeof(ArrayInfo::state_)
      - PROTOBUF_FIELD_OFFSET(ArrayInfo, total_capacity_)>(
          reinterpret_cast<char*>(&total_capacity_),
          reinterpret_cast<char*>(&other->total_capacity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ArrayInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ArrayListResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ArrayListResponse>()._has_bits_);
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ArrayListResponse::ArrayListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  infos_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pos_rpc.ArrayListResponse)
}
ArrayListResponse::ArrayListResponse(const ArrayListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      infos_(from.infos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_reason()) {
    reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reason(), 
      GetArena());
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:pos_rpc.ArrayListResponse)
}

void ArrayListResponse::SharedCtor() {
reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
result_ = 0;
}

ArrayListResponse::~ArrayListResponse() {
  // @@protoc_insertion_point(destructor:pos_rpc.ArrayListResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ArrayListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ArrayListResponse::ArenaDtor(void* object) {
  ArrayListResponse* _this = reinterpret_cast< ArrayListResponse* >(object);
  (void)_this;
}
void ArrayListResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ArrayListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ArrayListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pos_rpc.ArrayListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infos_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    reason_.ClearNonDefaultToEmpty();
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArrayListResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pos_rpc.PosResult result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::pos_rpc::PosResult>(val));
        } else goto handle_unusual;
        continue;
      // string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pos_rpc.ArrayListResponse.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pos_rpc.ArrayInfo infos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ArrayListResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pos_rpc.ArrayListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pos_rpc.PosResult result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // string reason = 2;
  if (_internal_has_reason()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pos_rpc.ArrayListResponse.reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reason(), target);
  }

  // repeated .pos_rpc.ArrayInfo infos = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_infos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pos_rpc.ArrayListResponse)
  return target;
}

size_t ArrayListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pos_rpc.ArrayListResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pos_rpc.ArrayInfo infos = 3;
  total_size += 1UL * this->_internal_infos_size();
  for (const auto& msg : this->infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string reason = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // .pos_rpc.PosResult result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArrayListResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pos_rpc.ArrayListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ArrayListResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ArrayListResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pos_rpc.ArrayListResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pos_rpc.ArrayListResponse)
    MergeFrom(*source);
  }
}

void ArrayListResponse::MergeFrom(const ArrayListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pos_rpc.ArrayListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infos_.MergeFrom(from.infos_);
  if (from._internal_has_reason()) {
    _internal_set_reason(from._internal_reason());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void ArrayListResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pos_rpc.ArrayListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArrayListResponse::CopyFrom(const ArrayListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pos_rpc.ArrayListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArrayListResponse::IsInitialized() const {
  return true;
}

void ArrayListResponse::InternalSwap(ArrayListResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  infos_.InternalSwap(&other->infos_);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ArrayListResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetVolumeListRequest::_Internal {
 public:
};

GetVolumeListRequest::GetVolumeListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pos_rpc.GetVolumeListRequest)
}
GetVolumeListRequest::GetVolumeListRequest(const GetVolumeListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  array_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_array_name().empty()) {
    array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_array_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pos_rpc.GetVolumeListRequest)
}

void GetVolumeListRequest::SharedCtor() {
array_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetVolumeListRequest::~GetVolumeListRequest() {
  // @@protoc_insertion_point(destructor:pos_rpc.GetVolumeListRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetVolumeListRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  array_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetVolumeListRequest::ArenaDtor(void* object) {
  GetVolumeListRequest* _this = reinterpret_cast< GetVolumeListRequest* >(object);
  (void)_this;
}
void GetVolumeListRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetVolumeListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetVolumeListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pos_rpc.GetVolumeListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  array_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetVolumeListRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string array_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_array_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pos_rpc.GetVolumeListRequest.array_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetVolumeListRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pos_rpc.GetVolumeListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string array_name = 1;
  if (this->array_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_array_name().data(), static_cast<int>(this->_internal_array_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pos_rpc.GetVolumeListRequest.array_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_array_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pos_rpc.GetVolumeListRequest)
  return target;
}

size_t GetVolumeListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pos_rpc.GetVolumeListRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string array_name = 1;
  if (this->array_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_array_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetVolumeListRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pos_rpc.GetVolumeListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetVolumeListRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetVolumeListRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pos_rpc.GetVolumeListRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pos_rpc.GetVolumeListRequest)
    MergeFrom(*source);
  }
}

void GetVolumeListRequest::MergeFrom(const GetVolumeListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pos_rpc.GetVolumeListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.array_name().size() > 0) {
    _internal_set_array_name(from._internal_array_name());
  }
}

void GetVolumeListRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pos_rpc.GetVolumeListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetVolumeListRequest::CopyFrom(const GetVolumeListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pos_rpc.GetVolumeListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetVolumeListRequest::IsInitialized() const {
  return true;
}

void GetVolumeListRequest::InternalSwap(GetVolumeListRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  array_name_.Swap(&other->array_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetVolumeListRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VolumeInfo::_Internal {
 public:
};

VolumeInfo::VolumeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pos_rpc.VolumeInfo)
}
VolumeInfo::VolumeInfo(const VolumeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  volume_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_volume_name().empty()) {
    volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_volume_name(), 
      GetArena());
  }
  ::memcpy(&total_capacity_, &from.total_capacity_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&total_capacity_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:pos_rpc.VolumeInfo)
}

void VolumeInfo::SharedCtor() {
volume_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&total_capacity_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&total_capacity_)) + sizeof(state_));
}

VolumeInfo::~VolumeInfo() {
  // @@protoc_insertion_point(destructor:pos_rpc.VolumeInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VolumeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  volume_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VolumeInfo::ArenaDtor(void* object) {
  VolumeInfo* _this = reinterpret_cast< VolumeInfo* >(object);
  (void)_this;
}
void VolumeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VolumeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VolumeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:pos_rpc.VolumeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  volume_name_.ClearToEmpty();
  ::memset(&total_capacity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&total_capacity_)) + sizeof(state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VolumeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string volume_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_volume_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pos_rpc.VolumeInfo.volume_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 total_capacity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 used_capacity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          used_capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pos_rpc.VolumeInfo.VolumeState state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::pos_rpc::VolumeInfo_VolumeState>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VolumeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pos_rpc.VolumeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string volume_name = 1;
  if (this->volume_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_volume_name().data(), static_cast<int>(this->_internal_volume_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pos_rpc.VolumeInfo.volume_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_volume_name(), target);
  }

  // uint64 total_capacity = 2;
  if (this->total_capacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_total_capacity(), target);
  }

  // uint64 used_capacity = 3;
  if (this->used_capacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_used_capacity(), target);
  }

  // .pos_rpc.VolumeInfo.VolumeState state = 4;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pos_rpc.VolumeInfo)
  return target;
}

size_t VolumeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pos_rpc.VolumeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string volume_name = 1;
  if (this->volume_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_volume_name());
  }

  // uint64 total_capacity = 2;
  if (this->total_capacity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_total_capacity());
  }

  // uint64 used_capacity = 3;
  if (this->used_capacity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_used_capacity());
  }

  // .pos_rpc.VolumeInfo.VolumeState state = 4;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VolumeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pos_rpc.VolumeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const VolumeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VolumeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pos_rpc.VolumeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pos_rpc.VolumeInfo)
    MergeFrom(*source);
  }
}

void VolumeInfo::MergeFrom(const VolumeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pos_rpc.VolumeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.volume_name().size() > 0) {
    _internal_set_volume_name(from._internal_volume_name());
  }
  if (from.total_capacity() != 0) {
    _internal_set_total_capacity(from._internal_total_capacity());
  }
  if (from.used_capacity() != 0) {
    _internal_set_used_capacity(from._internal_used_capacity());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void VolumeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pos_rpc.VolumeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VolumeInfo::CopyFrom(const VolumeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pos_rpc.VolumeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VolumeInfo::IsInitialized() const {
  return true;
}

void VolumeInfo::InternalSwap(VolumeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  volume_name_.Swap(&other->volume_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VolumeInfo, state_)
      + sizeof(VolumeInfo::state_)
      - PROTOBUF_FIELD_OFFSET(VolumeInfo, total_capacity_)>(
          reinterpret_cast<char*>(&total_capacity_),
          reinterpret_cast<char*>(&other->total_capacity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VolumeInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VolumeListResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<VolumeListResponse>()._has_bits_);
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

VolumeListResponse::VolumeListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  infos_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pos_rpc.VolumeListResponse)
}
VolumeListResponse::VolumeListResponse(const VolumeListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      infos_(from.infos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_reason()) {
    reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reason(), 
      GetArena());
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:pos_rpc.VolumeListResponse)
}

void VolumeListResponse::SharedCtor() {
reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
result_ = 0;
}

VolumeListResponse::~VolumeListResponse() {
  // @@protoc_insertion_point(destructor:pos_rpc.VolumeListResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VolumeListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VolumeListResponse::ArenaDtor(void* object) {
  VolumeListResponse* _this = reinterpret_cast< VolumeListResponse* >(object);
  (void)_this;
}
void VolumeListResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VolumeListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VolumeListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pos_rpc.VolumeListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infos_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    reason_.ClearNonDefaultToEmpty();
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VolumeListResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pos_rpc.PosResult result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::pos_rpc::PosResult>(val));
        } else goto handle_unusual;
        continue;
      // string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pos_rpc.VolumeListResponse.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pos_rpc.VolumeInfo infos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VolumeListResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pos_rpc.VolumeListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pos_rpc.PosResult result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // string reason = 2;
  if (_internal_has_reason()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pos_rpc.VolumeListResponse.reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reason(), target);
  }

  // repeated .pos_rpc.VolumeInfo infos = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_infos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pos_rpc.VolumeListResponse)
  return target;
}

size_t VolumeListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pos_rpc.VolumeListResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pos_rpc.VolumeInfo infos = 3;
  total_size += 1UL * this->_internal_infos_size();
  for (const auto& msg : this->infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string reason = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // .pos_rpc.PosResult result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VolumeListResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pos_rpc.VolumeListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const VolumeListResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VolumeListResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pos_rpc.VolumeListResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pos_rpc.VolumeListResponse)
    MergeFrom(*source);
  }
}

void VolumeListResponse::MergeFrom(const VolumeListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pos_rpc.VolumeListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infos_.MergeFrom(from.infos_);
  if (from._internal_has_reason()) {
    _internal_set_reason(from._internal_reason());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void VolumeListResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pos_rpc.VolumeListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VolumeListResponse::CopyFrom(const VolumeListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pos_rpc.VolumeListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VolumeListResponse::IsInitialized() const {
  return true;
}

void VolumeListResponse::InternalSwap(VolumeListResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  infos_.InternalSwap(&other->infos_);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VolumeListResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Chunk::_Internal {
 public:
};

Chunk::Chunk(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pos_rpc.Chunk)
}
Chunk::Chunk(const Chunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_content(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pos_rpc.Chunk)
}

void Chunk::SharedCtor() {
content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Chunk::~Chunk() {
  // @@protoc_insertion_point(destructor:pos_rpc.Chunk)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Chunk::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Chunk::ArenaDtor(void* object) {
  Chunk* _this = reinterpret_cast< Chunk* >(object);
  (void)_this;
}
void Chunk::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Chunk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Chunk::Clear() {
// @@protoc_insertion_point(message_clear_start:pos_rpc.Chunk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Chunk::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes content = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Chunk::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pos_rpc.Chunk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes content = 1;
  if (this->content().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pos_rpc.Chunk)
  return target;
}

size_t Chunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pos_rpc.Chunk)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes content = 1;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_content());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Chunk::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pos_rpc.Chunk)
  GOOGLE_DCHECK_NE(&from, this);
  const Chunk* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Chunk>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pos_rpc.Chunk)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pos_rpc.Chunk)
    MergeFrom(*source);
  }
}

void Chunk::MergeFrom(const Chunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pos_rpc.Chunk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.content().size() > 0) {
    _internal_set_content(from._internal_content());
  }
}

void Chunk::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pos_rpc.Chunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Chunk::CopyFrom(const Chunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pos_rpc.Chunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chunk::IsInitialized() const {
  return true;
}

void Chunk::InternalSwap(Chunk* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Chunk::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ReadBlocksRequest::_Internal {
 public:
};

ReadBlocksRequest::ReadBlocksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pos_rpc.ReadBlocksRequest)
}
ReadBlocksRequest::ReadBlocksRequest(const ReadBlocksRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  array_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_array_name().empty()) {
    array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_array_name(), 
      GetArena());
  }
  volume_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_volume_name().empty()) {
    volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_volume_name(), 
      GetArena());
  }
  ::memcpy(&rba_, &from.rba_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_blocks_) -
    reinterpret_cast<char*>(&rba_)) + sizeof(num_blocks_));
  // @@protoc_insertion_point(copy_constructor:pos_rpc.ReadBlocksRequest)
}

void ReadBlocksRequest::SharedCtor() {
array_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
volume_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&rba_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_blocks_) -
    reinterpret_cast<char*>(&rba_)) + sizeof(num_blocks_));
}

ReadBlocksRequest::~ReadBlocksRequest() {
  // @@protoc_insertion_point(destructor:pos_rpc.ReadBlocksRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadBlocksRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  array_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  volume_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReadBlocksRequest::ArenaDtor(void* object) {
  ReadBlocksRequest* _this = reinterpret_cast< ReadBlocksRequest* >(object);
  (void)_this;
}
void ReadBlocksRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadBlocksRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReadBlocksRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pos_rpc.ReadBlocksRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  array_name_.ClearToEmpty();
  volume_name_.ClearToEmpty();
  ::memset(&rba_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_blocks_) -
      reinterpret_cast<char*>(&rba_)) + sizeof(num_blocks_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadBlocksRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string array_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_array_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pos_rpc.ReadBlocksRequest.array_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string volume_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_volume_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pos_rpc.ReadBlocksRequest.volume_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 rba = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          rba_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 num_blocks = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          num_blocks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadBlocksRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pos_rpc.ReadBlocksRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string array_name = 1;
  if (this->array_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_array_name().data(), static_cast<int>(this->_internal_array_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pos_rpc.ReadBlocksRequest.array_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_array_name(), target);
  }

  // string volume_name = 2;
  if (this->volume_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_volume_name().data(), static_cast<int>(this->_internal_volume_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pos_rpc.ReadBlocksRequest.volume_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_volume_name(), target);
  }

  // uint64 rba = 3;
  if (this->rba() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_rba(), target);
  }

  // uint64 num_blocks = 4;
  if (this->num_blocks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_num_blocks(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pos_rpc.ReadBlocksRequest)
  return target;
}

size_t ReadBlocksRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pos_rpc.ReadBlocksRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string array_name = 1;
  if (this->array_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_array_name());
  }

  // string volume_name = 2;
  if (this->volume_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_volume_name());
  }

  // uint64 rba = 3;
  if (this->rba() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_rba());
  }

  // uint64 num_blocks = 4;
  if (this->num_blocks() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_num_blocks());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadBlocksRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pos_rpc.ReadBlocksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadBlocksRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadBlocksRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pos_rpc.ReadBlocksRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pos_rpc.ReadBlocksRequest)
    MergeFrom(*source);
  }
}

void ReadBlocksRequest::MergeFrom(const ReadBlocksRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pos_rpc.ReadBlocksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.array_name().size() > 0) {
    _internal_set_array_name(from._internal_array_name());
  }
  if (from.volume_name().size() > 0) {
    _internal_set_volume_name(from._internal_volume_name());
  }
  if (from.rba() != 0) {
    _internal_set_rba(from._internal_rba());
  }
  if (from.num_blocks() != 0) {
    _internal_set_num_blocks(from._internal_num_blocks());
  }
}

void ReadBlocksRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pos_rpc.ReadBlocksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadBlocksRequest::CopyFrom(const ReadBlocksRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pos_rpc.ReadBlocksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadBlocksRequest::IsInitialized() const {
  return true;
}

void ReadBlocksRequest::InternalSwap(ReadBlocksRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  array_name_.Swap(&other->array_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  volume_name_.Swap(&other->volume_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReadBlocksRequest, num_blocks_)
      + sizeof(ReadBlocksRequest::num_blocks_)
      - PROTOBUF_FIELD_OFFSET(ReadBlocksRequest, rba_)>(
          reinterpret_cast<char*>(&rba_),
          reinterpret_cast<char*>(&other->rba_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadBlocksRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ReadBlocksResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ReadBlocksResponse>()._has_bits_);
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ReadBlocksResponse::ReadBlocksResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pos_rpc.ReadBlocksResponse)
}
ReadBlocksResponse::ReadBlocksResponse(const ReadBlocksResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_reason()) {
    reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reason(), 
      GetArena());
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:pos_rpc.ReadBlocksResponse)
}

void ReadBlocksResponse::SharedCtor() {
reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
result_ = 0;
}

ReadBlocksResponse::~ReadBlocksResponse() {
  // @@protoc_insertion_point(destructor:pos_rpc.ReadBlocksResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadBlocksResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReadBlocksResponse::ArenaDtor(void* object) {
  ReadBlocksResponse* _this = reinterpret_cast< ReadBlocksResponse* >(object);
  (void)_this;
}
void ReadBlocksResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadBlocksResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReadBlocksResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pos_rpc.ReadBlocksResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    reason_.ClearNonDefaultToEmpty();
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadBlocksResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pos_rpc.PosResult result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::pos_rpc::PosResult>(val));
        } else goto handle_unusual;
        continue;
      // string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pos_rpc.ReadBlocksResponse.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pos_rpc.Chunk data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadBlocksResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pos_rpc.ReadBlocksResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pos_rpc.PosResult result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // string reason = 2;
  if (_internal_has_reason()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pos_rpc.ReadBlocksResponse.reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reason(), target);
  }

  // repeated .pos_rpc.Chunk data = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pos_rpc.ReadBlocksResponse)
  return target;
}

size_t ReadBlocksResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pos_rpc.ReadBlocksResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pos_rpc.Chunk data = 3;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string reason = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // .pos_rpc.PosResult result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadBlocksResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pos_rpc.ReadBlocksResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadBlocksResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadBlocksResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pos_rpc.ReadBlocksResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pos_rpc.ReadBlocksResponse)
    MergeFrom(*source);
  }
}

void ReadBlocksResponse::MergeFrom(const ReadBlocksResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pos_rpc.ReadBlocksResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from._internal_has_reason()) {
    _internal_set_reason(from._internal_reason());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void ReadBlocksResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pos_rpc.ReadBlocksResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadBlocksResponse::CopyFrom(const ReadBlocksResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pos_rpc.ReadBlocksResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadBlocksResponse::IsInitialized() const {
  return true;
}

void ReadBlocksResponse::InternalSwap(ReadBlocksResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadBlocksResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WriteBlocksRequest::_Internal {
 public:
};

WriteBlocksRequest::WriteBlocksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pos_rpc.WriteBlocksRequest)
}
WriteBlocksRequest::WriteBlocksRequest(const WriteBlocksRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  array_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_array_name().empty()) {
    array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_array_name(), 
      GetArena());
  }
  volume_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_volume_name().empty()) {
    volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_volume_name(), 
      GetArena());
  }
  ::memcpy(&rba_, &from.rba_,
    static_cast<size_t>(reinterpret_cast<char*>(&lsn_) -
    reinterpret_cast<char*>(&rba_)) + sizeof(lsn_));
  // @@protoc_insertion_point(copy_constructor:pos_rpc.WriteBlocksRequest)
}

void WriteBlocksRequest::SharedCtor() {
array_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
volume_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&rba_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lsn_) -
    reinterpret_cast<char*>(&rba_)) + sizeof(lsn_));
}

WriteBlocksRequest::~WriteBlocksRequest() {
  // @@protoc_insertion_point(destructor:pos_rpc.WriteBlocksRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WriteBlocksRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  array_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  volume_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WriteBlocksRequest::ArenaDtor(void* object) {
  WriteBlocksRequest* _this = reinterpret_cast< WriteBlocksRequest* >(object);
  (void)_this;
}
void WriteBlocksRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WriteBlocksRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WriteBlocksRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pos_rpc.WriteBlocksRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  array_name_.ClearToEmpty();
  volume_name_.ClearToEmpty();
  ::memset(&rba_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lsn_) -
      reinterpret_cast<char*>(&rba_)) + sizeof(lsn_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WriteBlocksRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string array_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_array_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pos_rpc.WriteBlocksRequest.array_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string volume_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_volume_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pos_rpc.WriteBlocksRequest.volume_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 rba = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          rba_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 num_blocks = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          num_blocks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 lsn = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          lsn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pos_rpc.Chunk data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriteBlocksRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pos_rpc.WriteBlocksRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string array_name = 1;
  if (this->array_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_array_name().data(), static_cast<int>(this->_internal_array_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pos_rpc.WriteBlocksRequest.array_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_array_name(), target);
  }

  // string volume_name = 2;
  if (this->volume_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_volume_name().data(), static_cast<int>(this->_internal_volume_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pos_rpc.WriteBlocksRequest.volume_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_volume_name(), target);
  }

  // uint64 rba = 3;
  if (this->rba() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_rba(), target);
  }

  // uint64 num_blocks = 4;
  if (this->num_blocks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_num_blocks(), target);
  }

  // uint64 lsn = 5;
  if (this->lsn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_lsn(), target);
  }

  // repeated .pos_rpc.Chunk data = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pos_rpc.WriteBlocksRequest)
  return target;
}

size_t WriteBlocksRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pos_rpc.WriteBlocksRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pos_rpc.Chunk data = 6;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string array_name = 1;
  if (this->array_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_array_name());
  }

  // string volume_name = 2;
  if (this->volume_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_volume_name());
  }

  // uint64 rba = 3;
  if (this->rba() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_rba());
  }

  // uint64 num_blocks = 4;
  if (this->num_blocks() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_num_blocks());
  }

  // uint64 lsn = 5;
  if (this->lsn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_lsn());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteBlocksRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pos_rpc.WriteBlocksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteBlocksRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WriteBlocksRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pos_rpc.WriteBlocksRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pos_rpc.WriteBlocksRequest)
    MergeFrom(*source);
  }
}

void WriteBlocksRequest::MergeFrom(const WriteBlocksRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pos_rpc.WriteBlocksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.array_name().size() > 0) {
    _internal_set_array_name(from._internal_array_name());
  }
  if (from.volume_name().size() > 0) {
    _internal_set_volume_name(from._internal_volume_name());
  }
  if (from.rba() != 0) {
    _internal_set_rba(from._internal_rba());
  }
  if (from.num_blocks() != 0) {
    _internal_set_num_blocks(from._internal_num_blocks());
  }
  if (from.lsn() != 0) {
    _internal_set_lsn(from._internal_lsn());
  }
}

void WriteBlocksRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pos_rpc.WriteBlocksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteBlocksRequest::CopyFrom(const WriteBlocksRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pos_rpc.WriteBlocksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteBlocksRequest::IsInitialized() const {
  return true;
}

void WriteBlocksRequest::InternalSwap(WriteBlocksRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  array_name_.Swap(&other->array_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  volume_name_.Swap(&other->volume_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WriteBlocksRequest, lsn_)
      + sizeof(WriteBlocksRequest::lsn_)
      - PROTOBUF_FIELD_OFFSET(WriteBlocksRequest, rba_)>(
          reinterpret_cast<char*>(&rba_),
          reinterpret_cast<char*>(&other->rba_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteBlocksRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WriteBlocksResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<WriteBlocksResponse>()._has_bits_);
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

WriteBlocksResponse::WriteBlocksResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pos_rpc.WriteBlocksResponse)
}
WriteBlocksResponse::WriteBlocksResponse(const WriteBlocksResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_reason()) {
    reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reason(), 
      GetArena());
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:pos_rpc.WriteBlocksResponse)
}

void WriteBlocksResponse::SharedCtor() {
reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
result_ = 0;
}

WriteBlocksResponse::~WriteBlocksResponse() {
  // @@protoc_insertion_point(destructor:pos_rpc.WriteBlocksResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WriteBlocksResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WriteBlocksResponse::ArenaDtor(void* object) {
  WriteBlocksResponse* _this = reinterpret_cast< WriteBlocksResponse* >(object);
  (void)_this;
}
void WriteBlocksResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WriteBlocksResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WriteBlocksResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pos_rpc.WriteBlocksResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    reason_.ClearNonDefaultToEmpty();
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WriteBlocksResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pos_rpc.PosResult result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::pos_rpc::PosResult>(val));
        } else goto handle_unusual;
        continue;
      // string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pos_rpc.WriteBlocksResponse.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriteBlocksResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pos_rpc.WriteBlocksResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pos_rpc.PosResult result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // string reason = 2;
  if (_internal_has_reason()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pos_rpc.WriteBlocksResponse.reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pos_rpc.WriteBlocksResponse)
  return target;
}

size_t WriteBlocksResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pos_rpc.WriteBlocksResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reason = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // .pos_rpc.PosResult result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteBlocksResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pos_rpc.WriteBlocksResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteBlocksResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WriteBlocksResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pos_rpc.WriteBlocksResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pos_rpc.WriteBlocksResponse)
    MergeFrom(*source);
  }
}

void WriteBlocksResponse::MergeFrom(const WriteBlocksResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pos_rpc.WriteBlocksResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_reason()) {
    _internal_set_reason(from._internal_reason());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void WriteBlocksResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pos_rpc.WriteBlocksResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteBlocksResponse::CopyFrom(const WriteBlocksResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pos_rpc.WriteBlocksResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteBlocksResponse::IsInitialized() const {
  return true;
}

void WriteBlocksResponse::InternalSwap(WriteBlocksResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteBlocksResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WriteHostBlocksRequest::_Internal {
 public:
};

WriteHostBlocksRequest::WriteHostBlocksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pos_rpc.WriteHostBlocksRequest)
}
WriteHostBlocksRequest::WriteHostBlocksRequest(const WriteHostBlocksRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  array_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_array_name().empty()) {
    array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_array_name(), 
      GetArena());
  }
  volume_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_volume_name().empty()) {
    volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_volume_name(), 
      GetArena());
  }
  ::memcpy(&rba_, &from.rba_,
    static_cast<size_t>(reinterpret_cast<char*>(&lsn_) -
    reinterpret_cast<char*>(&rba_)) + sizeof(lsn_));
  // @@protoc_insertion_point(copy_constructor:pos_rpc.WriteHostBlocksRequest)
}

void WriteHostBlocksRequest::SharedCtor() {
array_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
volume_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&rba_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lsn_) -
    reinterpret_cast<char*>(&rba_)) + sizeof(lsn_));
}

WriteHostBlocksRequest::~WriteHostBlocksRequest() {
  // @@protoc_insertion_point(destructor:pos_rpc.WriteHostBlocksRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WriteHostBlocksRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  array_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  volume_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WriteHostBlocksRequest::ArenaDtor(void* object) {
  WriteHostBlocksRequest* _this = reinterpret_cast< WriteHostBlocksRequest* >(object);
  (void)_this;
}
void WriteHostBlocksRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WriteHostBlocksRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WriteHostBlocksRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pos_rpc.WriteHostBlocksRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  array_name_.ClearToEmpty();
  volume_name_.ClearToEmpty();
  ::memset(&rba_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lsn_) -
      reinterpret_cast<char*>(&rba_)) + sizeof(lsn_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WriteHostBlocksRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string array_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_array_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pos_rpc.WriteHostBlocksRequest.array_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string volume_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_volume_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pos_rpc.WriteHostBlocksRequest.volume_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 rba = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          rba_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 num_blocks = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          num_blocks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 lsn = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          lsn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriteHostBlocksRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pos_rpc.WriteHostBlocksRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string array_name = 1;
  if (this->array_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_array_name().data(), static_cast<int>(this->_internal_array_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pos_rpc.WriteHostBlocksRequest.array_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_array_name(), target);
  }

  // string volume_name = 2;
  if (this->volume_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_volume_name().data(), static_cast<int>(this->_internal_volume_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pos_rpc.WriteHostBlocksRequest.volume_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_volume_name(), target);
  }

  // uint64 rba = 3;
  if (this->rba() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_rba(), target);
  }

  // uint64 num_blocks = 4;
  if (this->num_blocks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_num_blocks(), target);
  }

  // uint64 lsn = 5;
  if (this->lsn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_lsn(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pos_rpc.WriteHostBlocksRequest)
  return target;
}

size_t WriteHostBlocksRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pos_rpc.WriteHostBlocksRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string array_name = 1;
  if (this->array_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_array_name());
  }

  // string volume_name = 2;
  if (this->volume_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_volume_name());
  }

  // uint64 rba = 3;
  if (this->rba() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_rba());
  }

  // uint64 num_blocks = 4;
  if (this->num_blocks() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_num_blocks());
  }

  // uint64 lsn = 5;
  if (this->lsn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_lsn());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteHostBlocksRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pos_rpc.WriteHostBlocksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteHostBlocksRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WriteHostBlocksRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pos_rpc.WriteHostBlocksRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pos_rpc.WriteHostBlocksRequest)
    MergeFrom(*source);
  }
}

void WriteHostBlocksRequest::MergeFrom(const WriteHostBlocksRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pos_rpc.WriteHostBlocksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.array_name().size() > 0) {
    _internal_set_array_name(from._internal_array_name());
  }
  if (from.volume_name().size() > 0) {
    _internal_set_volume_name(from._internal_volume_name());
  }
  if (from.rba() != 0) {
    _internal_set_rba(from._internal_rba());
  }
  if (from.num_blocks() != 0) {
    _internal_set_num_blocks(from._internal_num_blocks());
  }
  if (from.lsn() != 0) {
    _internal_set_lsn(from._internal_lsn());
  }
}

void WriteHostBlocksRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pos_rpc.WriteHostBlocksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteHostBlocksRequest::CopyFrom(const WriteHostBlocksRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pos_rpc.WriteHostBlocksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteHostBlocksRequest::IsInitialized() const {
  return true;
}

void WriteHostBlocksRequest::InternalSwap(WriteHostBlocksRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  array_name_.Swap(&other->array_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  volume_name_.Swap(&other->volume_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WriteHostBlocksRequest, lsn_)
      + sizeof(WriteHostBlocksRequest::lsn_)
      - PROTOBUF_FIELD_OFFSET(WriteHostBlocksRequest, rba_)>(
          reinterpret_cast<char*>(&rba_),
          reinterpret_cast<char*>(&other->rba_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteHostBlocksRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WriteHostBlocksResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<WriteHostBlocksResponse>()._has_bits_);
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

WriteHostBlocksResponse::WriteHostBlocksResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pos_rpc.WriteHostBlocksResponse)
}
WriteHostBlocksResponse::WriteHostBlocksResponse(const WriteHostBlocksResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_reason()) {
    reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reason(), 
      GetArena());
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:pos_rpc.WriteHostBlocksResponse)
}

void WriteHostBlocksResponse::SharedCtor() {
reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
result_ = 0;
}

WriteHostBlocksResponse::~WriteHostBlocksResponse() {
  // @@protoc_insertion_point(destructor:pos_rpc.WriteHostBlocksResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WriteHostBlocksResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WriteHostBlocksResponse::ArenaDtor(void* object) {
  WriteHostBlocksResponse* _this = reinterpret_cast< WriteHostBlocksResponse* >(object);
  (void)_this;
}
void WriteHostBlocksResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WriteHostBlocksResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WriteHostBlocksResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pos_rpc.WriteHostBlocksResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    reason_.ClearNonDefaultToEmpty();
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WriteHostBlocksResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pos_rpc.PosResult result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::pos_rpc::PosResult>(val));
        } else goto handle_unusual;
        continue;
      // string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pos_rpc.WriteHostBlocksResponse.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriteHostBlocksResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pos_rpc.WriteHostBlocksResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pos_rpc.PosResult result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // string reason = 2;
  if (_internal_has_reason()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pos_rpc.WriteHostBlocksResponse.reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pos_rpc.WriteHostBlocksResponse)
  return target;
}

size_t WriteHostBlocksResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pos_rpc.WriteHostBlocksResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reason = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // .pos_rpc.PosResult result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteHostBlocksResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pos_rpc.WriteHostBlocksResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteHostBlocksResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WriteHostBlocksResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pos_rpc.WriteHostBlocksResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pos_rpc.WriteHostBlocksResponse)
    MergeFrom(*source);
  }
}

void WriteHostBlocksResponse::MergeFrom(const WriteHostBlocksResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pos_rpc.WriteHostBlocksResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_reason()) {
    _internal_set_reason(from._internal_reason());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void WriteHostBlocksResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pos_rpc.WriteHostBlocksResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteHostBlocksResponse::CopyFrom(const WriteHostBlocksResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pos_rpc.WriteHostBlocksResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteHostBlocksResponse::IsInitialized() const {
  return true;
}

void WriteHostBlocksResponse::InternalSwap(WriteHostBlocksResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteHostBlocksResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CompleteHostWriteRequest::_Internal {
 public:
};

CompleteHostWriteRequest::CompleteHostWriteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pos_rpc.CompleteHostWriteRequest)
}
CompleteHostWriteRequest::CompleteHostWriteRequest(const CompleteHostWriteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  array_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_array_name().empty()) {
    array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_array_name(), 
      GetArena());
  }
  volume_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_volume_name().empty()) {
    volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_volume_name(), 
      GetArena());
  }
  lsn_ = from.lsn_;
  // @@protoc_insertion_point(copy_constructor:pos_rpc.CompleteHostWriteRequest)
}

void CompleteHostWriteRequest::SharedCtor() {
array_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
volume_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
lsn_ = PROTOBUF_ULONGLONG(0);
}

CompleteHostWriteRequest::~CompleteHostWriteRequest() {
  // @@protoc_insertion_point(destructor:pos_rpc.CompleteHostWriteRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CompleteHostWriteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  array_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  volume_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CompleteHostWriteRequest::ArenaDtor(void* object) {
  CompleteHostWriteRequest* _this = reinterpret_cast< CompleteHostWriteRequest* >(object);
  (void)_this;
}
void CompleteHostWriteRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CompleteHostWriteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CompleteHostWriteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pos_rpc.CompleteHostWriteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  array_name_.ClearToEmpty();
  volume_name_.ClearToEmpty();
  lsn_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompleteHostWriteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string array_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_array_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pos_rpc.CompleteHostWriteRequest.array_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string volume_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_volume_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pos_rpc.CompleteHostWriteRequest.volume_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 lsn = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          lsn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CompleteHostWriteRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pos_rpc.CompleteHostWriteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string array_name = 1;
  if (this->array_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_array_name().data(), static_cast<int>(this->_internal_array_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pos_rpc.CompleteHostWriteRequest.array_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_array_name(), target);
  }

  // string volume_name = 2;
  if (this->volume_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_volume_name().data(), static_cast<int>(this->_internal_volume_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pos_rpc.CompleteHostWriteRequest.volume_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_volume_name(), target);
  }

  // uint64 lsn = 3;
  if (this->lsn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_lsn(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pos_rpc.CompleteHostWriteRequest)
  return target;
}

size_t CompleteHostWriteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pos_rpc.CompleteHostWriteRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string array_name = 1;
  if (this->array_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_array_name());
  }

  // string volume_name = 2;
  if (this->volume_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_volume_name());
  }

  // uint64 lsn = 3;
  if (this->lsn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_lsn());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompleteHostWriteRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pos_rpc.CompleteHostWriteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CompleteHostWriteRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CompleteHostWriteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pos_rpc.CompleteHostWriteRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pos_rpc.CompleteHostWriteRequest)
    MergeFrom(*source);
  }
}

void CompleteHostWriteRequest::MergeFrom(const CompleteHostWriteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pos_rpc.CompleteHostWriteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.array_name().size() > 0) {
    _internal_set_array_name(from._internal_array_name());
  }
  if (from.volume_name().size() > 0) {
    _internal_set_volume_name(from._internal_volume_name());
  }
  if (from.lsn() != 0) {
    _internal_set_lsn(from._internal_lsn());
  }
}

void CompleteHostWriteRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pos_rpc.CompleteHostWriteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompleteHostWriteRequest::CopyFrom(const CompleteHostWriteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pos_rpc.CompleteHostWriteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompleteHostWriteRequest::IsInitialized() const {
  return true;
}

void CompleteHostWriteRequest::InternalSwap(CompleteHostWriteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  array_name_.Swap(&other->array_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  volume_name_.Swap(&other->volume_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(lsn_, other->lsn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompleteHostWriteRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CompleteHostWriteResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CompleteHostWriteResponse>()._has_bits_);
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CompleteHostWriteResponse::CompleteHostWriteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pos_rpc.CompleteHostWriteResponse)
}
CompleteHostWriteResponse::CompleteHostWriteResponse(const CompleteHostWriteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_reason()) {
    reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reason(), 
      GetArena());
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:pos_rpc.CompleteHostWriteResponse)
}

void CompleteHostWriteResponse::SharedCtor() {
reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
result_ = 0;
}

CompleteHostWriteResponse::~CompleteHostWriteResponse() {
  // @@protoc_insertion_point(destructor:pos_rpc.CompleteHostWriteResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CompleteHostWriteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CompleteHostWriteResponse::ArenaDtor(void* object) {
  CompleteHostWriteResponse* _this = reinterpret_cast< CompleteHostWriteResponse* >(object);
  (void)_this;
}
void CompleteHostWriteResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CompleteHostWriteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CompleteHostWriteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pos_rpc.CompleteHostWriteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    reason_.ClearNonDefaultToEmpty();
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompleteHostWriteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pos_rpc.PosResult result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::pos_rpc::PosResult>(val));
        } else goto handle_unusual;
        continue;
      // string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pos_rpc.CompleteHostWriteResponse.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CompleteHostWriteResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pos_rpc.CompleteHostWriteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pos_rpc.PosResult result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // string reason = 2;
  if (_internal_has_reason()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pos_rpc.CompleteHostWriteResponse.reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pos_rpc.CompleteHostWriteResponse)
  return target;
}

size_t CompleteHostWriteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pos_rpc.CompleteHostWriteResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reason = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // .pos_rpc.PosResult result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompleteHostWriteResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pos_rpc.CompleteHostWriteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CompleteHostWriteResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CompleteHostWriteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pos_rpc.CompleteHostWriteResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pos_rpc.CompleteHostWriteResponse)
    MergeFrom(*source);
  }
}

void CompleteHostWriteResponse::MergeFrom(const CompleteHostWriteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pos_rpc.CompleteHostWriteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_reason()) {
    _internal_set_reason(from._internal_reason());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void CompleteHostWriteResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pos_rpc.CompleteHostWriteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompleteHostWriteResponse::CopyFrom(const CompleteHostWriteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pos_rpc.CompleteHostWriteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompleteHostWriteResponse::IsInitialized() const {
  return true;
}

void CompleteHostWriteResponse::InternalSwap(CompleteHostWriteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompleteHostWriteResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StartVolumeSyncRequest::_Internal {
 public:
};

StartVolumeSyncRequest::StartVolumeSyncRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pos_rpc.StartVolumeSyncRequest)
}
StartVolumeSyncRequest::StartVolumeSyncRequest(const StartVolumeSyncRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  array_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_array_name().empty()) {
    array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_array_name(), 
      GetArena());
  }
  volume_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_volume_name().empty()) {
    volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_volume_name(), 
      GetArena());
  }
  is_primary_ = from.is_primary_;
  // @@protoc_insertion_point(copy_constructor:pos_rpc.StartVolumeSyncRequest)
}

void StartVolumeSyncRequest::SharedCtor() {
array_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
volume_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
is_primary_ = false;
}

StartVolumeSyncRequest::~StartVolumeSyncRequest() {
  // @@protoc_insertion_point(destructor:pos_rpc.StartVolumeSyncRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StartVolumeSyncRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  array_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  volume_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StartVolumeSyncRequest::ArenaDtor(void* object) {
  StartVolumeSyncRequest* _this = reinterpret_cast< StartVolumeSyncRequest* >(object);
  (void)_this;
}
void StartVolumeSyncRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartVolumeSyncRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StartVolumeSyncRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pos_rpc.StartVolumeSyncRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  array_name_.ClearToEmpty();
  volume_name_.ClearToEmpty();
  is_primary_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartVolumeSyncRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string array_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_array_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pos_rpc.StartVolumeSyncRequest.array_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string volume_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_volume_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pos_rpc.StartVolumeSyncRequest.volume_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_primary = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_primary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartVolumeSyncRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pos_rpc.StartVolumeSyncRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string array_name = 1;
  if (this->array_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_array_name().data(), static_cast<int>(this->_internal_array_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pos_rpc.StartVolumeSyncRequest.array_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_array_name(), target);
  }

  // string volume_name = 2;
  if (this->volume_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_volume_name().data(), static_cast<int>(this->_internal_volume_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pos_rpc.StartVolumeSyncRequest.volume_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_volume_name(), target);
  }

  // bool is_primary = 3;
  if (this->is_primary() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_primary(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pos_rpc.StartVolumeSyncRequest)
  return target;
}

size_t StartVolumeSyncRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pos_rpc.StartVolumeSyncRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string array_name = 1;
  if (this->array_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_array_name());
  }

  // string volume_name = 2;
  if (this->volume_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_volume_name());
  }

  // bool is_primary = 3;
  if (this->is_primary() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartVolumeSyncRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pos_rpc.StartVolumeSyncRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StartVolumeSyncRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StartVolumeSyncRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pos_rpc.StartVolumeSyncRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pos_rpc.StartVolumeSyncRequest)
    MergeFrom(*source);
  }
}

void StartVolumeSyncRequest::MergeFrom(const StartVolumeSyncRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pos_rpc.StartVolumeSyncRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.array_name().size() > 0) {
    _internal_set_array_name(from._internal_array_name());
  }
  if (from.volume_name().size() > 0) {
    _internal_set_volume_name(from._internal_volume_name());
  }
  if (from.is_primary() != 0) {
    _internal_set_is_primary(from._internal_is_primary());
  }
}

void StartVolumeSyncRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pos_rpc.StartVolumeSyncRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartVolumeSyncRequest::CopyFrom(const StartVolumeSyncRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pos_rpc.StartVolumeSyncRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartVolumeSyncRequest::IsInitialized() const {
  return true;
}

void StartVolumeSyncRequest::InternalSwap(StartVolumeSyncRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  array_name_.Swap(&other->array_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  volume_name_.Swap(&other->volume_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(is_primary_, other->is_primary_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartVolumeSyncRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StartVolumeSyncResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<StartVolumeSyncResponse>()._has_bits_);
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StartVolumeSyncResponse::StartVolumeSyncResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pos_rpc.StartVolumeSyncResponse)
}
StartVolumeSyncResponse::StartVolumeSyncResponse(const StartVolumeSyncResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_reason()) {
    reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reason(), 
      GetArena());
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:pos_rpc.StartVolumeSyncResponse)
}

void StartVolumeSyncResponse::SharedCtor() {
reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
result_ = 0;
}

StartVolumeSyncResponse::~StartVolumeSyncResponse() {
  // @@protoc_insertion_point(destructor:pos_rpc.StartVolumeSyncResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StartVolumeSyncResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StartVolumeSyncResponse::ArenaDtor(void* object) {
  StartVolumeSyncResponse* _this = reinterpret_cast< StartVolumeSyncResponse* >(object);
  (void)_this;
}
void StartVolumeSyncResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartVolumeSyncResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StartVolumeSyncResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pos_rpc.StartVolumeSyncResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    reason_.ClearNonDefaultToEmpty();
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartVolumeSyncResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pos_rpc.PosResult result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::pos_rpc::PosResult>(val));
        } else goto handle_unusual;
        continue;
      // string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pos_rpc.StartVolumeSyncResponse.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartVolumeSyncResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pos_rpc.StartVolumeSyncResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pos_rpc.PosResult result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // string reason = 2;
  if (_internal_has_reason()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pos_rpc.StartVolumeSyncResponse.reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pos_rpc.StartVolumeSyncResponse)
  return target;
}

size_t StartVolumeSyncResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pos_rpc.StartVolumeSyncResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reason = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // .pos_rpc.PosResult result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartVolumeSyncResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pos_rpc.StartVolumeSyncResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StartVolumeSyncResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StartVolumeSyncResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pos_rpc.StartVolumeSyncResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pos_rpc.StartVolumeSyncResponse)
    MergeFrom(*source);
  }
}

void StartVolumeSyncResponse::MergeFrom(const StartVolumeSyncResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pos_rpc.StartVolumeSyncResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_reason()) {
    _internal_set_reason(from._internal_reason());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void StartVolumeSyncResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pos_rpc.StartVolumeSyncResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartVolumeSyncResponse::CopyFrom(const StartVolumeSyncResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pos_rpc.StartVolumeSyncResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartVolumeSyncResponse::IsInitialized() const {
  return true;
}

void StartVolumeSyncResponse::InternalSwap(StartVolumeSyncResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartVolumeSyncResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FinishVolumeSyncRequest::_Internal {
 public:
};

FinishVolumeSyncRequest::FinishVolumeSyncRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pos_rpc.FinishVolumeSyncRequest)
}
FinishVolumeSyncRequest::FinishVolumeSyncRequest(const FinishVolumeSyncRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  array_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_array_name().empty()) {
    array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_array_name(), 
      GetArena());
  }
  volume_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_volume_name().empty()) {
    volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_volume_name(), 
      GetArena());
  }
  is_primary_ = from.is_primary_;
  // @@protoc_insertion_point(copy_constructor:pos_rpc.FinishVolumeSyncRequest)
}

void FinishVolumeSyncRequest::SharedCtor() {
array_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
volume_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
is_primary_ = false;
}

FinishVolumeSyncRequest::~FinishVolumeSyncRequest() {
  // @@protoc_insertion_point(destructor:pos_rpc.FinishVolumeSyncRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FinishVolumeSyncRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  array_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  volume_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FinishVolumeSyncRequest::ArenaDtor(void* object) {
  FinishVolumeSyncRequest* _this = reinterpret_cast< FinishVolumeSyncRequest* >(object);
  (void)_this;
}
void FinishVolumeSyncRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FinishVolumeSyncRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FinishVolumeSyncRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pos_rpc.FinishVolumeSyncRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  array_name_.ClearToEmpty();
  volume_name_.ClearToEmpty();
  is_primary_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FinishVolumeSyncRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string array_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_array_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pos_rpc.FinishVolumeSyncRequest.array_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string volume_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_volume_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pos_rpc.FinishVolumeSyncRequest.volume_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_primary = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_primary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FinishVolumeSyncRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pos_rpc.FinishVolumeSyncRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string array_name = 1;
  if (this->array_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_array_name().data(), static_cast<int>(this->_internal_array_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pos_rpc.FinishVolumeSyncRequest.array_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_array_name(), target);
  }

  // string volume_name = 2;
  if (this->volume_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_volume_name().data(), static_cast<int>(this->_internal_volume_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pos_rpc.FinishVolumeSyncRequest.volume_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_volume_name(), target);
  }

  // bool is_primary = 3;
  if (this->is_primary() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_primary(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pos_rpc.FinishVolumeSyncRequest)
  return target;
}

size_t FinishVolumeSyncRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pos_rpc.FinishVolumeSyncRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string array_name = 1;
  if (this->array_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_array_name());
  }

  // string volume_name = 2;
  if (this->volume_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_volume_name());
  }

  // bool is_primary = 3;
  if (this->is_primary() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FinishVolumeSyncRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pos_rpc.FinishVolumeSyncRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FinishVolumeSyncRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FinishVolumeSyncRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pos_rpc.FinishVolumeSyncRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pos_rpc.FinishVolumeSyncRequest)
    MergeFrom(*source);
  }
}

void FinishVolumeSyncRequest::MergeFrom(const FinishVolumeSyncRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pos_rpc.FinishVolumeSyncRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.array_name().size() > 0) {
    _internal_set_array_name(from._internal_array_name());
  }
  if (from.volume_name().size() > 0) {
    _internal_set_volume_name(from._internal_volume_name());
  }
  if (from.is_primary() != 0) {
    _internal_set_is_primary(from._internal_is_primary());
  }
}

void FinishVolumeSyncRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pos_rpc.FinishVolumeSyncRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FinishVolumeSyncRequest::CopyFrom(const FinishVolumeSyncRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pos_rpc.FinishVolumeSyncRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinishVolumeSyncRequest::IsInitialized() const {
  return true;
}

void FinishVolumeSyncRequest::InternalSwap(FinishVolumeSyncRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  array_name_.Swap(&other->array_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  volume_name_.Swap(&other->volume_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(is_primary_, other->is_primary_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FinishVolumeSyncRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FinishVolumeSyncResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<FinishVolumeSyncResponse>()._has_bits_);
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FinishVolumeSyncResponse::FinishVolumeSyncResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pos_rpc.FinishVolumeSyncResponse)
}
FinishVolumeSyncResponse::FinishVolumeSyncResponse(const FinishVolumeSyncResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_reason()) {
    reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reason(), 
      GetArena());
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:pos_rpc.FinishVolumeSyncResponse)
}

void FinishVolumeSyncResponse::SharedCtor() {
reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
result_ = 0;
}

FinishVolumeSyncResponse::~FinishVolumeSyncResponse() {
  // @@protoc_insertion_point(destructor:pos_rpc.FinishVolumeSyncResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FinishVolumeSyncResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FinishVolumeSyncResponse::ArenaDtor(void* object) {
  FinishVolumeSyncResponse* _this = reinterpret_cast< FinishVolumeSyncResponse* >(object);
  (void)_this;
}
void FinishVolumeSyncResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FinishVolumeSyncResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FinishVolumeSyncResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pos_rpc.FinishVolumeSyncResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    reason_.ClearNonDefaultToEmpty();
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FinishVolumeSyncResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pos_rpc.PosResult result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::pos_rpc::PosResult>(val));
        } else goto handle_unusual;
        continue;
      // string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pos_rpc.FinishVolumeSyncResponse.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FinishVolumeSyncResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pos_rpc.FinishVolumeSyncResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pos_rpc.PosResult result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // string reason = 2;
  if (_internal_has_reason()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pos_rpc.FinishVolumeSyncResponse.reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pos_rpc.FinishVolumeSyncResponse)
  return target;
}

size_t FinishVolumeSyncResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pos_rpc.FinishVolumeSyncResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reason = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // .pos_rpc.PosResult result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FinishVolumeSyncResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pos_rpc.FinishVolumeSyncResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FinishVolumeSyncResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FinishVolumeSyncResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pos_rpc.FinishVolumeSyncResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pos_rpc.FinishVolumeSyncResponse)
    MergeFrom(*source);
  }
}

void FinishVolumeSyncResponse::MergeFrom(const FinishVolumeSyncResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pos_rpc.FinishVolumeSyncResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_reason()) {
    _internal_set_reason(from._internal_reason());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void FinishVolumeSyncResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pos_rpc.FinishVolumeSyncResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FinishVolumeSyncResponse::CopyFrom(const FinishVolumeSyncResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pos_rpc.FinishVolumeSyncResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinishVolumeSyncResponse::IsInitialized() const {
  return true;
}

void FinishVolumeSyncResponse::InternalSwap(FinishVolumeSyncResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FinishVolumeSyncResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SuspendWriteRequest::_Internal {
 public:
};

SuspendWriteRequest::SuspendWriteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pos_rpc.SuspendWriteRequest)
}
SuspendWriteRequest::SuspendWriteRequest(const SuspendWriteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  array_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_array_name().empty()) {
    array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_array_name(), 
      GetArena());
  }
  volume_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_volume_name().empty()) {
    volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_volume_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pos_rpc.SuspendWriteRequest)
}

void SuspendWriteRequest::SharedCtor() {
array_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
volume_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SuspendWriteRequest::~SuspendWriteRequest() {
  // @@protoc_insertion_point(destructor:pos_rpc.SuspendWriteRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SuspendWriteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  array_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  volume_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SuspendWriteRequest::ArenaDtor(void* object) {
  SuspendWriteRequest* _this = reinterpret_cast< SuspendWriteRequest* >(object);
  (void)_this;
}
void SuspendWriteRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SuspendWriteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SuspendWriteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pos_rpc.SuspendWriteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  array_name_.ClearToEmpty();
  volume_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SuspendWriteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string array_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_array_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pos_rpc.SuspendWriteRequest.array_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string volume_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_volume_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pos_rpc.SuspendWriteRequest.volume_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SuspendWriteRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pos_rpc.SuspendWriteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string array_name = 1;
  if (this->array_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_array_name().data(), static_cast<int>(this->_internal_array_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pos_rpc.SuspendWriteRequest.array_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_array_name(), target);
  }

  // string volume_name = 2;
  if (this->volume_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_volume_name().data(), static_cast<int>(this->_internal_volume_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pos_rpc.SuspendWriteRequest.volume_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_volume_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pos_rpc.SuspendWriteRequest)
  return target;
}

size_t SuspendWriteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pos_rpc.SuspendWriteRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string array_name = 1;
  if (this->array_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_array_name());
  }

  // string volume_name = 2;
  if (this->volume_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_volume_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SuspendWriteRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pos_rpc.SuspendWriteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SuspendWriteRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SuspendWriteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pos_rpc.SuspendWriteRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pos_rpc.SuspendWriteRequest)
    MergeFrom(*source);
  }
}

void SuspendWriteRequest::MergeFrom(const SuspendWriteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pos_rpc.SuspendWriteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.array_name().size() > 0) {
    _internal_set_array_name(from._internal_array_name());
  }
  if (from.volume_name().size() > 0) {
    _internal_set_volume_name(from._internal_volume_name());
  }
}

void SuspendWriteRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pos_rpc.SuspendWriteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SuspendWriteRequest::CopyFrom(const SuspendWriteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pos_rpc.SuspendWriteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuspendWriteRequest::IsInitialized() const {
  return true;
}

void SuspendWriteRequest::InternalSwap(SuspendWriteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  array_name_.Swap(&other->array_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  volume_name_.Swap(&other->volume_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SuspendWriteRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SuspendWriteResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SuspendWriteResponse>()._has_bits_);
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SuspendWriteResponse::SuspendWriteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pos_rpc.SuspendWriteResponse)
}
SuspendWriteResponse::SuspendWriteResponse(const SuspendWriteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_reason()) {
    reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reason(), 
      GetArena());
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:pos_rpc.SuspendWriteResponse)
}

void SuspendWriteResponse::SharedCtor() {
reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
result_ = 0;
}

SuspendWriteResponse::~SuspendWriteResponse() {
  // @@protoc_insertion_point(destructor:pos_rpc.SuspendWriteResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SuspendWriteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SuspendWriteResponse::ArenaDtor(void* object) {
  SuspendWriteResponse* _this = reinterpret_cast< SuspendWriteResponse* >(object);
  (void)_this;
}
void SuspendWriteResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SuspendWriteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SuspendWriteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pos_rpc.SuspendWriteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    reason_.ClearNonDefaultToEmpty();
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SuspendWriteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pos_rpc.PosResult result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::pos_rpc::PosResult>(val));
        } else goto handle_unusual;
        continue;
      // string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pos_rpc.SuspendWriteResponse.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SuspendWriteResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pos_rpc.SuspendWriteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pos_rpc.PosResult result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // string reason = 2;
  if (_internal_has_reason()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pos_rpc.SuspendWriteResponse.reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pos_rpc.SuspendWriteResponse)
  return target;
}

size_t SuspendWriteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pos_rpc.SuspendWriteResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reason = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // .pos_rpc.PosResult result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SuspendWriteResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pos_rpc.SuspendWriteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SuspendWriteResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SuspendWriteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pos_rpc.SuspendWriteResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pos_rpc.SuspendWriteResponse)
    MergeFrom(*source);
  }
}

void SuspendWriteResponse::MergeFrom(const SuspendWriteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pos_rpc.SuspendWriteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_reason()) {
    _internal_set_reason(from._internal_reason());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void SuspendWriteResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pos_rpc.SuspendWriteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SuspendWriteResponse::CopyFrom(const SuspendWriteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pos_rpc.SuspendWriteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuspendWriteResponse::IsInitialized() const {
  return true;
}

void SuspendWriteResponse::InternalSwap(SuspendWriteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SuspendWriteResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ResumeWriteRequest::_Internal {
 public:
};

ResumeWriteRequest::ResumeWriteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pos_rpc.ResumeWriteRequest)
}
ResumeWriteRequest::ResumeWriteRequest(const ResumeWriteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  array_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_array_name().empty()) {
    array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_array_name(), 
      GetArena());
  }
  volume_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_volume_name().empty()) {
    volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_volume_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pos_rpc.ResumeWriteRequest)
}

void ResumeWriteRequest::SharedCtor() {
array_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
volume_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ResumeWriteRequest::~ResumeWriteRequest() {
  // @@protoc_insertion_point(destructor:pos_rpc.ResumeWriteRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResumeWriteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  array_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  volume_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResumeWriteRequest::ArenaDtor(void* object) {
  ResumeWriteRequest* _this = reinterpret_cast< ResumeWriteRequest* >(object);
  (void)_this;
}
void ResumeWriteRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResumeWriteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResumeWriteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pos_rpc.ResumeWriteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  array_name_.ClearToEmpty();
  volume_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResumeWriteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string array_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_array_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pos_rpc.ResumeWriteRequest.array_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string volume_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_volume_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pos_rpc.ResumeWriteRequest.volume_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResumeWriteRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pos_rpc.ResumeWriteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string array_name = 1;
  if (this->array_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_array_name().data(), static_cast<int>(this->_internal_array_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pos_rpc.ResumeWriteRequest.array_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_array_name(), target);
  }

  // string volume_name = 2;
  if (this->volume_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_volume_name().data(), static_cast<int>(this->_internal_volume_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pos_rpc.ResumeWriteRequest.volume_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_volume_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pos_rpc.ResumeWriteRequest)
  return target;
}

size_t ResumeWriteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pos_rpc.ResumeWriteRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string array_name = 1;
  if (this->array_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_array_name());
  }

  // string volume_name = 2;
  if (this->volume_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_volume_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResumeWriteRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pos_rpc.ResumeWriteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ResumeWriteRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResumeWriteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pos_rpc.ResumeWriteRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pos_rpc.ResumeWriteRequest)
    MergeFrom(*source);
  }
}

void ResumeWriteRequest::MergeFrom(const ResumeWriteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pos_rpc.ResumeWriteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.array_name().size() > 0) {
    _internal_set_array_name(from._internal_array_name());
  }
  if (from.volume_name().size() > 0) {
    _internal_set_volume_name(from._internal_volume_name());
  }
}

void ResumeWriteRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pos_rpc.ResumeWriteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResumeWriteRequest::CopyFrom(const ResumeWriteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pos_rpc.ResumeWriteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResumeWriteRequest::IsInitialized() const {
  return true;
}

void ResumeWriteRequest::InternalSwap(ResumeWriteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  array_name_.Swap(&other->array_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  volume_name_.Swap(&other->volume_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ResumeWriteRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ResumeWriteResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ResumeWriteResponse>()._has_bits_);
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ResumeWriteResponse::ResumeWriteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pos_rpc.ResumeWriteResponse)
}
ResumeWriteResponse::ResumeWriteResponse(const ResumeWriteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_reason()) {
    reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reason(), 
      GetArena());
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:pos_rpc.ResumeWriteResponse)
}

void ResumeWriteResponse::SharedCtor() {
reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
result_ = 0;
}

ResumeWriteResponse::~ResumeWriteResponse() {
  // @@protoc_insertion_point(destructor:pos_rpc.ResumeWriteResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResumeWriteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResumeWriteResponse::ArenaDtor(void* object) {
  ResumeWriteResponse* _this = reinterpret_cast< ResumeWriteResponse* >(object);
  (void)_this;
}
void ResumeWriteResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResumeWriteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResumeWriteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pos_rpc.ResumeWriteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    reason_.ClearNonDefaultToEmpty();
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResumeWriteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pos_rpc.PosResult result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::pos_rpc::PosResult>(val));
        } else goto handle_unusual;
        continue;
      // string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pos_rpc.ResumeWriteResponse.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResumeWriteResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pos_rpc.ResumeWriteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pos_rpc.PosResult result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // string reason = 2;
  if (_internal_has_reason()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pos_rpc.ResumeWriteResponse.reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pos_rpc.ResumeWriteResponse)
  return target;
}

size_t ResumeWriteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pos_rpc.ResumeWriteResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reason = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // .pos_rpc.PosResult result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResumeWriteResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pos_rpc.ResumeWriteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ResumeWriteResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResumeWriteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pos_rpc.ResumeWriteResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pos_rpc.ResumeWriteResponse)
    MergeFrom(*source);
  }
}

void ResumeWriteResponse::MergeFrom(const ResumeWriteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pos_rpc.ResumeWriteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_reason()) {
    _internal_set_reason(from._internal_reason());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void ResumeWriteResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pos_rpc.ResumeWriteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResumeWriteResponse::CopyFrom(const ResumeWriteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pos_rpc.ResumeWriteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResumeWriteResponse::IsInitialized() const {
  return true;
}

void ResumeWriteResponse::InternalSwap(ResumeWriteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResumeWriteResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pos_rpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pos_rpc::HealthCheckRequest* Arena::CreateMaybeMessage< ::pos_rpc::HealthCheckRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pos_rpc::HealthCheckRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pos_rpc::HealthCheckResponse* Arena::CreateMaybeMessage< ::pos_rpc::HealthCheckResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pos_rpc::HealthCheckResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::pos_rpc::CreateArrayRequest* Arena::CreateMaybeMessage< ::pos_rpc::CreateArrayRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pos_rpc::CreateArrayRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pos_rpc::DeleteArrayRequest* Arena::CreateMaybeMessage< ::pos_rpc::DeleteArrayRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pos_rpc::DeleteArrayRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pos_rpc::CreateVolumeRequest* Arena::CreateMaybeMessage< ::pos_rpc::CreateVolumeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pos_rpc::CreateVolumeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pos_rpc::DeleteVolumeRequest* Arena::CreateMaybeMessage< ::pos_rpc::DeleteVolumeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pos_rpc::DeleteVolumeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pos_rpc::MountVolumeRequest* Arena::CreateMaybeMessage< ::pos_rpc::MountVolumeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pos_rpc::MountVolumeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pos_rpc::UnmountVolumeRequest* Arena::CreateMaybeMessage< ::pos_rpc::UnmountVolumeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pos_rpc::UnmountVolumeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pos_rpc::UpdateVoluemMetaRequest* Arena::CreateMaybeMessage< ::pos_rpc::UpdateVoluemMetaRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pos_rpc::UpdateVoluemMetaRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pos_rpc::PosResponse* Arena::CreateMaybeMessage< ::pos_rpc::PosResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pos_rpc::PosResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::pos_rpc::GetArrayListRequest* Arena::CreateMaybeMessage< ::pos_rpc::GetArrayListRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pos_rpc::GetArrayListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pos_rpc::ArrayInfo* Arena::CreateMaybeMessage< ::pos_rpc::ArrayInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pos_rpc::ArrayInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::pos_rpc::ArrayListResponse* Arena::CreateMaybeMessage< ::pos_rpc::ArrayListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pos_rpc::ArrayListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::pos_rpc::GetVolumeListRequest* Arena::CreateMaybeMessage< ::pos_rpc::GetVolumeListRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pos_rpc::GetVolumeListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pos_rpc::VolumeInfo* Arena::CreateMaybeMessage< ::pos_rpc::VolumeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pos_rpc::VolumeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::pos_rpc::VolumeListResponse* Arena::CreateMaybeMessage< ::pos_rpc::VolumeListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pos_rpc::VolumeListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::pos_rpc::Chunk* Arena::CreateMaybeMessage< ::pos_rpc::Chunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pos_rpc::Chunk >(arena);
}
template<> PROTOBUF_NOINLINE ::pos_rpc::ReadBlocksRequest* Arena::CreateMaybeMessage< ::pos_rpc::ReadBlocksRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pos_rpc::ReadBlocksRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pos_rpc::ReadBlocksResponse* Arena::CreateMaybeMessage< ::pos_rpc::ReadBlocksResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pos_rpc::ReadBlocksResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::pos_rpc::WriteBlocksRequest* Arena::CreateMaybeMessage< ::pos_rpc::WriteBlocksRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pos_rpc::WriteBlocksRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pos_rpc::WriteBlocksResponse* Arena::CreateMaybeMessage< ::pos_rpc::WriteBlocksResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pos_rpc::WriteBlocksResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::pos_rpc::WriteHostBlocksRequest* Arena::CreateMaybeMessage< ::pos_rpc::WriteHostBlocksRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pos_rpc::WriteHostBlocksRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pos_rpc::WriteHostBlocksResponse* Arena::CreateMaybeMessage< ::pos_rpc::WriteHostBlocksResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pos_rpc::WriteHostBlocksResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::pos_rpc::CompleteHostWriteRequest* Arena::CreateMaybeMessage< ::pos_rpc::CompleteHostWriteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pos_rpc::CompleteHostWriteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pos_rpc::CompleteHostWriteResponse* Arena::CreateMaybeMessage< ::pos_rpc::CompleteHostWriteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pos_rpc::CompleteHostWriteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::pos_rpc::StartVolumeSyncRequest* Arena::CreateMaybeMessage< ::pos_rpc::StartVolumeSyncRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pos_rpc::StartVolumeSyncRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pos_rpc::StartVolumeSyncResponse* Arena::CreateMaybeMessage< ::pos_rpc::StartVolumeSyncResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pos_rpc::StartVolumeSyncResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::pos_rpc::FinishVolumeSyncRequest* Arena::CreateMaybeMessage< ::pos_rpc::FinishVolumeSyncRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pos_rpc::FinishVolumeSyncRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pos_rpc::FinishVolumeSyncResponse* Arena::CreateMaybeMessage< ::pos_rpc::FinishVolumeSyncResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pos_rpc::FinishVolumeSyncResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::pos_rpc::SuspendWriteRequest* Arena::CreateMaybeMessage< ::pos_rpc::SuspendWriteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pos_rpc::SuspendWriteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pos_rpc::SuspendWriteResponse* Arena::CreateMaybeMessage< ::pos_rpc::SuspendWriteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pos_rpc::SuspendWriteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::pos_rpc::ResumeWriteRequest* Arena::CreateMaybeMessage< ::pos_rpc::ResumeWriteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pos_rpc::ResumeWriteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pos_rpc::ResumeWriteResponse* Arena::CreateMaybeMessage< ::pos_rpc::ResumeWriteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pos_rpc::ResumeWriteResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
