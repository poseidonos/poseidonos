// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: pos_rpc.proto

#include "pos_rpc.pb.h"
#include "pos_rpc.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace pos_rpc {

static const char* Health_method_names[] = {
  "/pos_rpc.Health/Check",
};

std::unique_ptr< Health::Stub> Health::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Health::Stub> stub(new Health::Stub(channel, options));
  return stub;
}

Health::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Check_(Health_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Health::Stub::Check(::grpc::ClientContext* context, const ::pos_rpc::HealthCheckRequest& request, ::pos_rpc::HealthCheckResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pos_rpc::HealthCheckRequest, ::pos_rpc::HealthCheckResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Check_, context, request, response);
}

void Health::Stub::experimental_async::Check(::grpc::ClientContext* context, const ::pos_rpc::HealthCheckRequest* request, ::pos_rpc::HealthCheckResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pos_rpc::HealthCheckRequest, ::pos_rpc::HealthCheckResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Check_, context, request, response, std::move(f));
}

void Health::Stub::experimental_async::Check(::grpc::ClientContext* context, const ::pos_rpc::HealthCheckRequest* request, ::pos_rpc::HealthCheckResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Check_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pos_rpc::HealthCheckResponse>* Health::Stub::PrepareAsyncCheckRaw(::grpc::ClientContext* context, const ::pos_rpc::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pos_rpc::HealthCheckResponse, ::pos_rpc::HealthCheckRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Check_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pos_rpc::HealthCheckResponse>* Health::Stub::AsyncCheckRaw(::grpc::ClientContext* context, const ::pos_rpc::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCheckRaw(context, request, cq);
  result->StartCall();
  return result;
}

Health::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Health_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Health::Service, ::pos_rpc::HealthCheckRequest, ::pos_rpc::HealthCheckResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Health::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pos_rpc::HealthCheckRequest* req,
             ::pos_rpc::HealthCheckResponse* resp) {
               return service->Check(ctx, req, resp);
             }, this)));
}

Health::Service::~Service() {
}

::grpc::Status Health::Service::Check(::grpc::ServerContext* context, const ::pos_rpc::HealthCheckRequest* request, ::pos_rpc::HealthCheckResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* PosManagement_method_names[] = {
  "/pos_rpc.PosManagement/UpdateVoluemMeta",
  "/pos_rpc.PosManagement/GetVolumeList",
};

std::unique_ptr< PosManagement::Stub> PosManagement::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PosManagement::Stub> stub(new PosManagement::Stub(channel, options));
  return stub;
}

PosManagement::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_UpdateVoluemMeta_(PosManagement_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetVolumeList_(PosManagement_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status PosManagement::Stub::UpdateVoluemMeta(::grpc::ClientContext* context, const ::pos_rpc::UpdateVoluemMetaRequest& request, ::pos_rpc::PosResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pos_rpc::UpdateVoluemMetaRequest, ::pos_rpc::PosResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateVoluemMeta_, context, request, response);
}

void PosManagement::Stub::experimental_async::UpdateVoluemMeta(::grpc::ClientContext* context, const ::pos_rpc::UpdateVoluemMetaRequest* request, ::pos_rpc::PosResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pos_rpc::UpdateVoluemMetaRequest, ::pos_rpc::PosResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateVoluemMeta_, context, request, response, std::move(f));
}

void PosManagement::Stub::experimental_async::UpdateVoluemMeta(::grpc::ClientContext* context, const ::pos_rpc::UpdateVoluemMetaRequest* request, ::pos_rpc::PosResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateVoluemMeta_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pos_rpc::PosResponse>* PosManagement::Stub::PrepareAsyncUpdateVoluemMetaRaw(::grpc::ClientContext* context, const ::pos_rpc::UpdateVoluemMetaRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pos_rpc::PosResponse, ::pos_rpc::UpdateVoluemMetaRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateVoluemMeta_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pos_rpc::PosResponse>* PosManagement::Stub::AsyncUpdateVoluemMetaRaw(::grpc::ClientContext* context, const ::pos_rpc::UpdateVoluemMetaRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateVoluemMetaRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PosManagement::Stub::GetVolumeList(::grpc::ClientContext* context, const ::pos_rpc::GetVolumeListRequest& request, ::pos_rpc::VolumeListResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pos_rpc::GetVolumeListRequest, ::pos_rpc::VolumeListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetVolumeList_, context, request, response);
}

void PosManagement::Stub::experimental_async::GetVolumeList(::grpc::ClientContext* context, const ::pos_rpc::GetVolumeListRequest* request, ::pos_rpc::VolumeListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pos_rpc::GetVolumeListRequest, ::pos_rpc::VolumeListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVolumeList_, context, request, response, std::move(f));
}

void PosManagement::Stub::experimental_async::GetVolumeList(::grpc::ClientContext* context, const ::pos_rpc::GetVolumeListRequest* request, ::pos_rpc::VolumeListResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVolumeList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pos_rpc::VolumeListResponse>* PosManagement::Stub::PrepareAsyncGetVolumeListRaw(::grpc::ClientContext* context, const ::pos_rpc::GetVolumeListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pos_rpc::VolumeListResponse, ::pos_rpc::GetVolumeListRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetVolumeList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pos_rpc::VolumeListResponse>* PosManagement::Stub::AsyncGetVolumeListRaw(::grpc::ClientContext* context, const ::pos_rpc::GetVolumeListRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetVolumeListRaw(context, request, cq);
  result->StartCall();
  return result;
}

PosManagement::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PosManagement_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PosManagement::Service, ::pos_rpc::UpdateVoluemMetaRequest, ::pos_rpc::PosResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PosManagement::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pos_rpc::UpdateVoluemMetaRequest* req,
             ::pos_rpc::PosResponse* resp) {
               return service->UpdateVoluemMeta(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PosManagement_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PosManagement::Service, ::pos_rpc::GetVolumeListRequest, ::pos_rpc::VolumeListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PosManagement::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pos_rpc::GetVolumeListRequest* req,
             ::pos_rpc::VolumeListResponse* resp) {
               return service->GetVolumeList(ctx, req, resp);
             }, this)));
}

PosManagement::Service::~Service() {
}

::grpc::Status PosManagement::Service::UpdateVoluemMeta(::grpc::ServerContext* context, const ::pos_rpc::UpdateVoluemMetaRequest* request, ::pos_rpc::PosResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PosManagement::Service::GetVolumeList(::grpc::ServerContext* context, const ::pos_rpc::GetVolumeListRequest* request, ::pos_rpc::VolumeListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* PosIo_method_names[] = {
  "/pos_rpc.PosIo/ReadBlocks",
  "/pos_rpc.PosIo/WriteBlocks",
  "/pos_rpc.PosIo/WriteHostBlocks",
  "/pos_rpc.PosIo/ReadBlocksSync",
  "/pos_rpc.PosIo/WriteBlocksSync",
  "/pos_rpc.PosIo/WriteHostBlocksSync",
  "/pos_rpc.PosIo/CompleteHostWrite",
};

std::unique_ptr< PosIo::Stub> PosIo::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PosIo::Stub> stub(new PosIo::Stub(channel, options));
  return stub;
}

PosIo::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ReadBlocks_(PosIo_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WriteBlocks_(PosIo_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WriteHostBlocks_(PosIo_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReadBlocksSync_(PosIo_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WriteBlocksSync_(PosIo_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WriteHostBlocksSync_(PosIo_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CompleteHostWrite_(PosIo_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status PosIo::Stub::ReadBlocks(::grpc::ClientContext* context, const ::pos_rpc::ReadBlocksRequest& request, ::pos_rpc::ReadBlocksResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pos_rpc::ReadBlocksRequest, ::pos_rpc::ReadBlocksResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReadBlocks_, context, request, response);
}

void PosIo::Stub::experimental_async::ReadBlocks(::grpc::ClientContext* context, const ::pos_rpc::ReadBlocksRequest* request, ::pos_rpc::ReadBlocksResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pos_rpc::ReadBlocksRequest, ::pos_rpc::ReadBlocksResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadBlocks_, context, request, response, std::move(f));
}

void PosIo::Stub::experimental_async::ReadBlocks(::grpc::ClientContext* context, const ::pos_rpc::ReadBlocksRequest* request, ::pos_rpc::ReadBlocksResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadBlocks_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pos_rpc::ReadBlocksResponse>* PosIo::Stub::PrepareAsyncReadBlocksRaw(::grpc::ClientContext* context, const ::pos_rpc::ReadBlocksRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pos_rpc::ReadBlocksResponse, ::pos_rpc::ReadBlocksRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReadBlocks_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pos_rpc::ReadBlocksResponse>* PosIo::Stub::AsyncReadBlocksRaw(::grpc::ClientContext* context, const ::pos_rpc::ReadBlocksRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReadBlocksRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PosIo::Stub::WriteBlocks(::grpc::ClientContext* context, const ::pos_rpc::WriteBlocksRequest& request, ::pos_rpc::WriteBlocksResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pos_rpc::WriteBlocksRequest, ::pos_rpc::WriteBlocksResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_WriteBlocks_, context, request, response);
}

void PosIo::Stub::experimental_async::WriteBlocks(::grpc::ClientContext* context, const ::pos_rpc::WriteBlocksRequest* request, ::pos_rpc::WriteBlocksResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pos_rpc::WriteBlocksRequest, ::pos_rpc::WriteBlocksResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WriteBlocks_, context, request, response, std::move(f));
}

void PosIo::Stub::experimental_async::WriteBlocks(::grpc::ClientContext* context, const ::pos_rpc::WriteBlocksRequest* request, ::pos_rpc::WriteBlocksResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WriteBlocks_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pos_rpc::WriteBlocksResponse>* PosIo::Stub::PrepareAsyncWriteBlocksRaw(::grpc::ClientContext* context, const ::pos_rpc::WriteBlocksRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pos_rpc::WriteBlocksResponse, ::pos_rpc::WriteBlocksRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_WriteBlocks_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pos_rpc::WriteBlocksResponse>* PosIo::Stub::AsyncWriteBlocksRaw(::grpc::ClientContext* context, const ::pos_rpc::WriteBlocksRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncWriteBlocksRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PosIo::Stub::WriteHostBlocks(::grpc::ClientContext* context, const ::pos_rpc::WriteHostBlocksRequest& request, ::pos_rpc::WriteHostBlocksResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pos_rpc::WriteHostBlocksRequest, ::pos_rpc::WriteHostBlocksResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_WriteHostBlocks_, context, request, response);
}

void PosIo::Stub::experimental_async::WriteHostBlocks(::grpc::ClientContext* context, const ::pos_rpc::WriteHostBlocksRequest* request, ::pos_rpc::WriteHostBlocksResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pos_rpc::WriteHostBlocksRequest, ::pos_rpc::WriteHostBlocksResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WriteHostBlocks_, context, request, response, std::move(f));
}

void PosIo::Stub::experimental_async::WriteHostBlocks(::grpc::ClientContext* context, const ::pos_rpc::WriteHostBlocksRequest* request, ::pos_rpc::WriteHostBlocksResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WriteHostBlocks_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pos_rpc::WriteHostBlocksResponse>* PosIo::Stub::PrepareAsyncWriteHostBlocksRaw(::grpc::ClientContext* context, const ::pos_rpc::WriteHostBlocksRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pos_rpc::WriteHostBlocksResponse, ::pos_rpc::WriteHostBlocksRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_WriteHostBlocks_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pos_rpc::WriteHostBlocksResponse>* PosIo::Stub::AsyncWriteHostBlocksRaw(::grpc::ClientContext* context, const ::pos_rpc::WriteHostBlocksRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncWriteHostBlocksRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PosIo::Stub::ReadBlocksSync(::grpc::ClientContext* context, const ::pos_rpc::ReadBlocksSyncRequest& request, ::pos_rpc::ReadBlocksSyncResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pos_rpc::ReadBlocksSyncRequest, ::pos_rpc::ReadBlocksSyncResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReadBlocksSync_, context, request, response);
}

void PosIo::Stub::experimental_async::ReadBlocksSync(::grpc::ClientContext* context, const ::pos_rpc::ReadBlocksSyncRequest* request, ::pos_rpc::ReadBlocksSyncResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pos_rpc::ReadBlocksSyncRequest, ::pos_rpc::ReadBlocksSyncResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadBlocksSync_, context, request, response, std::move(f));
}

void PosIo::Stub::experimental_async::ReadBlocksSync(::grpc::ClientContext* context, const ::pos_rpc::ReadBlocksSyncRequest* request, ::pos_rpc::ReadBlocksSyncResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadBlocksSync_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pos_rpc::ReadBlocksSyncResponse>* PosIo::Stub::PrepareAsyncReadBlocksSyncRaw(::grpc::ClientContext* context, const ::pos_rpc::ReadBlocksSyncRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pos_rpc::ReadBlocksSyncResponse, ::pos_rpc::ReadBlocksSyncRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReadBlocksSync_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pos_rpc::ReadBlocksSyncResponse>* PosIo::Stub::AsyncReadBlocksSyncRaw(::grpc::ClientContext* context, const ::pos_rpc::ReadBlocksSyncRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReadBlocksSyncRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PosIo::Stub::WriteBlocksSync(::grpc::ClientContext* context, const ::pos_rpc::WriteBlocksSyncRequest& request, ::pos_rpc::WriteBlocksSyncResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pos_rpc::WriteBlocksSyncRequest, ::pos_rpc::WriteBlocksSyncResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_WriteBlocksSync_, context, request, response);
}

void PosIo::Stub::experimental_async::WriteBlocksSync(::grpc::ClientContext* context, const ::pos_rpc::WriteBlocksSyncRequest* request, ::pos_rpc::WriteBlocksSyncResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pos_rpc::WriteBlocksSyncRequest, ::pos_rpc::WriteBlocksSyncResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WriteBlocksSync_, context, request, response, std::move(f));
}

void PosIo::Stub::experimental_async::WriteBlocksSync(::grpc::ClientContext* context, const ::pos_rpc::WriteBlocksSyncRequest* request, ::pos_rpc::WriteBlocksSyncResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WriteBlocksSync_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pos_rpc::WriteBlocksSyncResponse>* PosIo::Stub::PrepareAsyncWriteBlocksSyncRaw(::grpc::ClientContext* context, const ::pos_rpc::WriteBlocksSyncRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pos_rpc::WriteBlocksSyncResponse, ::pos_rpc::WriteBlocksSyncRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_WriteBlocksSync_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pos_rpc::WriteBlocksSyncResponse>* PosIo::Stub::AsyncWriteBlocksSyncRaw(::grpc::ClientContext* context, const ::pos_rpc::WriteBlocksSyncRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncWriteBlocksSyncRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PosIo::Stub::WriteHostBlocksSync(::grpc::ClientContext* context, const ::pos_rpc::WriteHostBlocksSyncRequest& request, ::pos_rpc::WriteHostBlocksSyncResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pos_rpc::WriteHostBlocksSyncRequest, ::pos_rpc::WriteHostBlocksSyncResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_WriteHostBlocksSync_, context, request, response);
}

void PosIo::Stub::experimental_async::WriteHostBlocksSync(::grpc::ClientContext* context, const ::pos_rpc::WriteHostBlocksSyncRequest* request, ::pos_rpc::WriteHostBlocksSyncResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pos_rpc::WriteHostBlocksSyncRequest, ::pos_rpc::WriteHostBlocksSyncResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WriteHostBlocksSync_, context, request, response, std::move(f));
}

void PosIo::Stub::experimental_async::WriteHostBlocksSync(::grpc::ClientContext* context, const ::pos_rpc::WriteHostBlocksSyncRequest* request, ::pos_rpc::WriteHostBlocksSyncResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WriteHostBlocksSync_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pos_rpc::WriteHostBlocksSyncResponse>* PosIo::Stub::PrepareAsyncWriteHostBlocksSyncRaw(::grpc::ClientContext* context, const ::pos_rpc::WriteHostBlocksSyncRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pos_rpc::WriteHostBlocksSyncResponse, ::pos_rpc::WriteHostBlocksSyncRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_WriteHostBlocksSync_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pos_rpc::WriteHostBlocksSyncResponse>* PosIo::Stub::AsyncWriteHostBlocksSyncRaw(::grpc::ClientContext* context, const ::pos_rpc::WriteHostBlocksSyncRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncWriteHostBlocksSyncRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PosIo::Stub::CompleteHostWrite(::grpc::ClientContext* context, const ::pos_rpc::CompleteHostWriteRequest& request, ::pos_rpc::CompleteHostWriteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pos_rpc::CompleteHostWriteRequest, ::pos_rpc::CompleteHostWriteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CompleteHostWrite_, context, request, response);
}

void PosIo::Stub::experimental_async::CompleteHostWrite(::grpc::ClientContext* context, const ::pos_rpc::CompleteHostWriteRequest* request, ::pos_rpc::CompleteHostWriteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pos_rpc::CompleteHostWriteRequest, ::pos_rpc::CompleteHostWriteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CompleteHostWrite_, context, request, response, std::move(f));
}

void PosIo::Stub::experimental_async::CompleteHostWrite(::grpc::ClientContext* context, const ::pos_rpc::CompleteHostWriteRequest* request, ::pos_rpc::CompleteHostWriteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CompleteHostWrite_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pos_rpc::CompleteHostWriteResponse>* PosIo::Stub::PrepareAsyncCompleteHostWriteRaw(::grpc::ClientContext* context, const ::pos_rpc::CompleteHostWriteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pos_rpc::CompleteHostWriteResponse, ::pos_rpc::CompleteHostWriteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CompleteHostWrite_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pos_rpc::CompleteHostWriteResponse>* PosIo::Stub::AsyncCompleteHostWriteRaw(::grpc::ClientContext* context, const ::pos_rpc::CompleteHostWriteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCompleteHostWriteRaw(context, request, cq);
  result->StartCall();
  return result;
}

PosIo::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PosIo_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PosIo::Service, ::pos_rpc::ReadBlocksRequest, ::pos_rpc::ReadBlocksResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PosIo::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pos_rpc::ReadBlocksRequest* req,
             ::pos_rpc::ReadBlocksResponse* resp) {
               return service->ReadBlocks(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PosIo_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PosIo::Service, ::pos_rpc::WriteBlocksRequest, ::pos_rpc::WriteBlocksResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PosIo::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pos_rpc::WriteBlocksRequest* req,
             ::pos_rpc::WriteBlocksResponse* resp) {
               return service->WriteBlocks(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PosIo_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PosIo::Service, ::pos_rpc::WriteHostBlocksRequest, ::pos_rpc::WriteHostBlocksResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PosIo::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pos_rpc::WriteHostBlocksRequest* req,
             ::pos_rpc::WriteHostBlocksResponse* resp) {
               return service->WriteHostBlocks(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PosIo_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PosIo::Service, ::pos_rpc::ReadBlocksSyncRequest, ::pos_rpc::ReadBlocksSyncResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PosIo::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pos_rpc::ReadBlocksSyncRequest* req,
             ::pos_rpc::ReadBlocksSyncResponse* resp) {
               return service->ReadBlocksSync(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PosIo_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PosIo::Service, ::pos_rpc::WriteBlocksSyncRequest, ::pos_rpc::WriteBlocksSyncResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PosIo::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pos_rpc::WriteBlocksSyncRequest* req,
             ::pos_rpc::WriteBlocksSyncResponse* resp) {
               return service->WriteBlocksSync(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PosIo_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PosIo::Service, ::pos_rpc::WriteHostBlocksSyncRequest, ::pos_rpc::WriteHostBlocksSyncResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PosIo::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pos_rpc::WriteHostBlocksSyncRequest* req,
             ::pos_rpc::WriteHostBlocksSyncResponse* resp) {
               return service->WriteHostBlocksSync(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PosIo_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PosIo::Service, ::pos_rpc::CompleteHostWriteRequest, ::pos_rpc::CompleteHostWriteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PosIo::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pos_rpc::CompleteHostWriteRequest* req,
             ::pos_rpc::CompleteHostWriteResponse* resp) {
               return service->CompleteHostWrite(ctx, req, resp);
             }, this)));
}

PosIo::Service::~Service() {
}

::grpc::Status PosIo::Service::ReadBlocks(::grpc::ServerContext* context, const ::pos_rpc::ReadBlocksRequest* request, ::pos_rpc::ReadBlocksResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PosIo::Service::WriteBlocks(::grpc::ServerContext* context, const ::pos_rpc::WriteBlocksRequest* request, ::pos_rpc::WriteBlocksResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PosIo::Service::WriteHostBlocks(::grpc::ServerContext* context, const ::pos_rpc::WriteHostBlocksRequest* request, ::pos_rpc::WriteHostBlocksResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PosIo::Service::ReadBlocksSync(::grpc::ServerContext* context, const ::pos_rpc::ReadBlocksSyncRequest* request, ::pos_rpc::ReadBlocksSyncResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PosIo::Service::WriteBlocksSync(::grpc::ServerContext* context, const ::pos_rpc::WriteBlocksSyncRequest* request, ::pos_rpc::WriteBlocksSyncResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PosIo::Service::WriteHostBlocksSync(::grpc::ServerContext* context, const ::pos_rpc::WriteHostBlocksSyncRequest* request, ::pos_rpc::WriteHostBlocksSyncResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PosIo::Service::CompleteHostWrite(::grpc::ServerContext* context, const ::pos_rpc::CompleteHostWriteRequest* request, ::pos_rpc::CompleteHostWriteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* ReplicationControl_method_names[] = {
  "/pos_rpc.ReplicationControl/StartVolumeSync",
  "/pos_rpc.ReplicationControl/FinishVolumeSync",
  "/pos_rpc.ReplicationControl/SuspendWrite",
  "/pos_rpc.ReplicationControl/ResumeWrite",
  "/pos_rpc.ReplicationControl/ChangeReplicationRole",
};

std::unique_ptr< ReplicationControl::Stub> ReplicationControl::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ReplicationControl::Stub> stub(new ReplicationControl::Stub(channel, options));
  return stub;
}

ReplicationControl::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_StartVolumeSync_(ReplicationControl_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FinishVolumeSync_(ReplicationControl_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SuspendWrite_(ReplicationControl_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ResumeWrite_(ReplicationControl_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ChangeReplicationRole_(ReplicationControl_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ReplicationControl::Stub::StartVolumeSync(::grpc::ClientContext* context, const ::pos_rpc::StartVolumeSyncRequest& request, ::pos_rpc::StartVolumeSyncResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pos_rpc::StartVolumeSyncRequest, ::pos_rpc::StartVolumeSyncResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StartVolumeSync_, context, request, response);
}

void ReplicationControl::Stub::experimental_async::StartVolumeSync(::grpc::ClientContext* context, const ::pos_rpc::StartVolumeSyncRequest* request, ::pos_rpc::StartVolumeSyncResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pos_rpc::StartVolumeSyncRequest, ::pos_rpc::StartVolumeSyncResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartVolumeSync_, context, request, response, std::move(f));
}

void ReplicationControl::Stub::experimental_async::StartVolumeSync(::grpc::ClientContext* context, const ::pos_rpc::StartVolumeSyncRequest* request, ::pos_rpc::StartVolumeSyncResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartVolumeSync_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pos_rpc::StartVolumeSyncResponse>* ReplicationControl::Stub::PrepareAsyncStartVolumeSyncRaw(::grpc::ClientContext* context, const ::pos_rpc::StartVolumeSyncRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pos_rpc::StartVolumeSyncResponse, ::pos_rpc::StartVolumeSyncRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StartVolumeSync_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pos_rpc::StartVolumeSyncResponse>* ReplicationControl::Stub::AsyncStartVolumeSyncRaw(::grpc::ClientContext* context, const ::pos_rpc::StartVolumeSyncRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStartVolumeSyncRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ReplicationControl::Stub::FinishVolumeSync(::grpc::ClientContext* context, const ::pos_rpc::FinishVolumeSyncRequest& request, ::pos_rpc::FinishVolumeSyncResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pos_rpc::FinishVolumeSyncRequest, ::pos_rpc::FinishVolumeSyncResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FinishVolumeSync_, context, request, response);
}

void ReplicationControl::Stub::experimental_async::FinishVolumeSync(::grpc::ClientContext* context, const ::pos_rpc::FinishVolumeSyncRequest* request, ::pos_rpc::FinishVolumeSyncResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pos_rpc::FinishVolumeSyncRequest, ::pos_rpc::FinishVolumeSyncResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FinishVolumeSync_, context, request, response, std::move(f));
}

void ReplicationControl::Stub::experimental_async::FinishVolumeSync(::grpc::ClientContext* context, const ::pos_rpc::FinishVolumeSyncRequest* request, ::pos_rpc::FinishVolumeSyncResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FinishVolumeSync_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pos_rpc::FinishVolumeSyncResponse>* ReplicationControl::Stub::PrepareAsyncFinishVolumeSyncRaw(::grpc::ClientContext* context, const ::pos_rpc::FinishVolumeSyncRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pos_rpc::FinishVolumeSyncResponse, ::pos_rpc::FinishVolumeSyncRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FinishVolumeSync_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pos_rpc::FinishVolumeSyncResponse>* ReplicationControl::Stub::AsyncFinishVolumeSyncRaw(::grpc::ClientContext* context, const ::pos_rpc::FinishVolumeSyncRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFinishVolumeSyncRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ReplicationControl::Stub::SuspendWrite(::grpc::ClientContext* context, const ::pos_rpc::SuspendWriteRequest& request, ::pos_rpc::SuspendWriteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pos_rpc::SuspendWriteRequest, ::pos_rpc::SuspendWriteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SuspendWrite_, context, request, response);
}

void ReplicationControl::Stub::experimental_async::SuspendWrite(::grpc::ClientContext* context, const ::pos_rpc::SuspendWriteRequest* request, ::pos_rpc::SuspendWriteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pos_rpc::SuspendWriteRequest, ::pos_rpc::SuspendWriteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SuspendWrite_, context, request, response, std::move(f));
}

void ReplicationControl::Stub::experimental_async::SuspendWrite(::grpc::ClientContext* context, const ::pos_rpc::SuspendWriteRequest* request, ::pos_rpc::SuspendWriteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SuspendWrite_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pos_rpc::SuspendWriteResponse>* ReplicationControl::Stub::PrepareAsyncSuspendWriteRaw(::grpc::ClientContext* context, const ::pos_rpc::SuspendWriteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pos_rpc::SuspendWriteResponse, ::pos_rpc::SuspendWriteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SuspendWrite_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pos_rpc::SuspendWriteResponse>* ReplicationControl::Stub::AsyncSuspendWriteRaw(::grpc::ClientContext* context, const ::pos_rpc::SuspendWriteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSuspendWriteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ReplicationControl::Stub::ResumeWrite(::grpc::ClientContext* context, const ::pos_rpc::ResumeWriteRequest& request, ::pos_rpc::ResumeWriteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pos_rpc::ResumeWriteRequest, ::pos_rpc::ResumeWriteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ResumeWrite_, context, request, response);
}

void ReplicationControl::Stub::experimental_async::ResumeWrite(::grpc::ClientContext* context, const ::pos_rpc::ResumeWriteRequest* request, ::pos_rpc::ResumeWriteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pos_rpc::ResumeWriteRequest, ::pos_rpc::ResumeWriteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResumeWrite_, context, request, response, std::move(f));
}

void ReplicationControl::Stub::experimental_async::ResumeWrite(::grpc::ClientContext* context, const ::pos_rpc::ResumeWriteRequest* request, ::pos_rpc::ResumeWriteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResumeWrite_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pos_rpc::ResumeWriteResponse>* ReplicationControl::Stub::PrepareAsyncResumeWriteRaw(::grpc::ClientContext* context, const ::pos_rpc::ResumeWriteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pos_rpc::ResumeWriteResponse, ::pos_rpc::ResumeWriteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ResumeWrite_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pos_rpc::ResumeWriteResponse>* ReplicationControl::Stub::AsyncResumeWriteRaw(::grpc::ClientContext* context, const ::pos_rpc::ResumeWriteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncResumeWriteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ReplicationControl::Stub::ChangeReplicationRole(::grpc::ClientContext* context, const ::pos_rpc::ChangeReplicationRoleRequest& request, ::pos_rpc::ChangeReplicationRoleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pos_rpc::ChangeReplicationRoleRequest, ::pos_rpc::ChangeReplicationRoleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ChangeReplicationRole_, context, request, response);
}

void ReplicationControl::Stub::experimental_async::ChangeReplicationRole(::grpc::ClientContext* context, const ::pos_rpc::ChangeReplicationRoleRequest* request, ::pos_rpc::ChangeReplicationRoleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pos_rpc::ChangeReplicationRoleRequest, ::pos_rpc::ChangeReplicationRoleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ChangeReplicationRole_, context, request, response, std::move(f));
}

void ReplicationControl::Stub::experimental_async::ChangeReplicationRole(::grpc::ClientContext* context, const ::pos_rpc::ChangeReplicationRoleRequest* request, ::pos_rpc::ChangeReplicationRoleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ChangeReplicationRole_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pos_rpc::ChangeReplicationRoleResponse>* ReplicationControl::Stub::PrepareAsyncChangeReplicationRoleRaw(::grpc::ClientContext* context, const ::pos_rpc::ChangeReplicationRoleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pos_rpc::ChangeReplicationRoleResponse, ::pos_rpc::ChangeReplicationRoleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ChangeReplicationRole_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pos_rpc::ChangeReplicationRoleResponse>* ReplicationControl::Stub::AsyncChangeReplicationRoleRaw(::grpc::ClientContext* context, const ::pos_rpc::ChangeReplicationRoleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncChangeReplicationRoleRaw(context, request, cq);
  result->StartCall();
  return result;
}

ReplicationControl::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ReplicationControl_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ReplicationControl::Service, ::pos_rpc::StartVolumeSyncRequest, ::pos_rpc::StartVolumeSyncResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ReplicationControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pos_rpc::StartVolumeSyncRequest* req,
             ::pos_rpc::StartVolumeSyncResponse* resp) {
               return service->StartVolumeSync(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ReplicationControl_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ReplicationControl::Service, ::pos_rpc::FinishVolumeSyncRequest, ::pos_rpc::FinishVolumeSyncResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ReplicationControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pos_rpc::FinishVolumeSyncRequest* req,
             ::pos_rpc::FinishVolumeSyncResponse* resp) {
               return service->FinishVolumeSync(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ReplicationControl_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ReplicationControl::Service, ::pos_rpc::SuspendWriteRequest, ::pos_rpc::SuspendWriteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ReplicationControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pos_rpc::SuspendWriteRequest* req,
             ::pos_rpc::SuspendWriteResponse* resp) {
               return service->SuspendWrite(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ReplicationControl_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ReplicationControl::Service, ::pos_rpc::ResumeWriteRequest, ::pos_rpc::ResumeWriteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ReplicationControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pos_rpc::ResumeWriteRequest* req,
             ::pos_rpc::ResumeWriteResponse* resp) {
               return service->ResumeWrite(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ReplicationControl_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ReplicationControl::Service, ::pos_rpc::ChangeReplicationRoleRequest, ::pos_rpc::ChangeReplicationRoleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ReplicationControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pos_rpc::ChangeReplicationRoleRequest* req,
             ::pos_rpc::ChangeReplicationRoleResponse* resp) {
               return service->ChangeReplicationRole(ctx, req, resp);
             }, this)));
}

ReplicationControl::Service::~Service() {
}

::grpc::Status ReplicationControl::Service::StartVolumeSync(::grpc::ServerContext* context, const ::pos_rpc::StartVolumeSyncRequest* request, ::pos_rpc::StartVolumeSyncResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ReplicationControl::Service::FinishVolumeSync(::grpc::ServerContext* context, const ::pos_rpc::FinishVolumeSyncRequest* request, ::pos_rpc::FinishVolumeSyncResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ReplicationControl::Service::SuspendWrite(::grpc::ServerContext* context, const ::pos_rpc::SuspendWriteRequest* request, ::pos_rpc::SuspendWriteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ReplicationControl::Service::ResumeWrite(::grpc::ServerContext* context, const ::pos_rpc::ResumeWriteRequest* request, ::pos_rpc::ResumeWriteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ReplicationControl::Service::ChangeReplicationRole(::grpc::ServerContext* context, const ::pos_rpc::ChangeReplicationRoleRequest* request, ::pos_rpc::ChangeReplicationRoleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace pos_rpc

