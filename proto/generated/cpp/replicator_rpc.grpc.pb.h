// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: replicator_rpc.proto
#ifndef GRPC_replicator_5frpc_2eproto__INCLUDED
#define GRPC_replicator_5frpc_2eproto__INCLUDED

#include "replicator_rpc.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace replicator_rpc {

// /////////////////////////////////////////////////////////////////////////////////
//
class ReplicatorIo final {
 public:
  static constexpr char const* service_full_name() {
    return "replicator_rpc.ReplicatorIo";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // HA side server
    virtual ::grpc::Status CompleteRead(::grpc::ClientContext* context, const ::replicator_rpc::CompleteReadRequest& request, ::replicator_rpc::CompleteReadResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::replicator_rpc::CompleteReadResponse>> AsyncCompleteRead(::grpc::ClientContext* context, const ::replicator_rpc::CompleteReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::replicator_rpc::CompleteReadResponse>>(AsyncCompleteReadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::replicator_rpc::CompleteReadResponse>> PrepareAsyncCompleteRead(::grpc::ClientContext* context, const ::replicator_rpc::CompleteReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::replicator_rpc::CompleteReadResponse>>(PrepareAsyncCompleteReadRaw(context, request, cq));
    }
    virtual ::grpc::Status CompleteWrite(::grpc::ClientContext* context, const ::replicator_rpc::CompleteWriteRequest& request, ::replicator_rpc::CompleteWriteResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::replicator_rpc::CompleteWriteResponse>> AsyncCompleteWrite(::grpc::ClientContext* context, const ::replicator_rpc::CompleteWriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::replicator_rpc::CompleteWriteResponse>>(AsyncCompleteWriteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::replicator_rpc::CompleteWriteResponse>> PrepareAsyncCompleteWrite(::grpc::ClientContext* context, const ::replicator_rpc::CompleteWriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::replicator_rpc::CompleteWriteResponse>>(PrepareAsyncCompleteWriteRaw(context, request, cq));
    }
    virtual ::grpc::Status PushHostWrite(::grpc::ClientContext* context, const ::replicator_rpc::PushHostWriteRequest& request, ::replicator_rpc::PushHostWriteResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::replicator_rpc::PushHostWriteResponse>> AsyncPushHostWrite(::grpc::ClientContext* context, const ::replicator_rpc::PushHostWriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::replicator_rpc::PushHostWriteResponse>>(AsyncPushHostWriteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::replicator_rpc::PushHostWriteResponse>> PrepareAsyncPushHostWrite(::grpc::ClientContext* context, const ::replicator_rpc::PushHostWriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::replicator_rpc::PushHostWriteResponse>>(PrepareAsyncPushHostWriteRaw(context, request, cq));
    }
    virtual ::grpc::Status PushDirtyLog(::grpc::ClientContext* context, const ::replicator_rpc::PushDirtyLogRequest& request, ::replicator_rpc::PushDirtyLogResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::replicator_rpc::PushDirtyLogResponse>> AsyncPushDirtyLog(::grpc::ClientContext* context, const ::replicator_rpc::PushDirtyLogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::replicator_rpc::PushDirtyLogResponse>>(AsyncPushDirtyLogRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::replicator_rpc::PushDirtyLogResponse>> PrepareAsyncPushDirtyLog(::grpc::ClientContext* context, const ::replicator_rpc::PushDirtyLogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::replicator_rpc::PushDirtyLogResponse>>(PrepareAsyncPushDirtyLogRaw(context, request, cq));
    }
    virtual ::grpc::Status TransferDirtyLog(::grpc::ClientContext* context, const ::replicator_rpc::TransferDirtyLogRequest& request, ::replicator_rpc::TransferDirtyLogResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::replicator_rpc::TransferDirtyLogResponse>> AsyncTransferDirtyLog(::grpc::ClientContext* context, const ::replicator_rpc::TransferDirtyLogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::replicator_rpc::TransferDirtyLogResponse>>(AsyncTransferDirtyLogRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::replicator_rpc::TransferDirtyLogResponse>> PrepareAsyncTransferDirtyLog(::grpc::ClientContext* context, const ::replicator_rpc::TransferDirtyLogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::replicator_rpc::TransferDirtyLogResponse>>(PrepareAsyncTransferDirtyLogRaw(context, request, cq));
    }
    virtual ::grpc::Status TransferHostWrite(::grpc::ClientContext* context, const ::replicator_rpc::TransferHostWriteRequest& request, ::replicator_rpc::TransferHostWriteResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::replicator_rpc::TransferHostWriteResponse>> AsyncTransferHostWrite(::grpc::ClientContext* context, const ::replicator_rpc::TransferHostWriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::replicator_rpc::TransferHostWriteResponse>>(AsyncTransferHostWriteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::replicator_rpc::TransferHostWriteResponse>> PrepareAsyncTransferHostWrite(::grpc::ClientContext* context, const ::replicator_rpc::TransferHostWriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::replicator_rpc::TransferHostWriteResponse>>(PrepareAsyncTransferHostWriteRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // HA side server
      virtual void CompleteRead(::grpc::ClientContext* context, const ::replicator_rpc::CompleteReadRequest* request, ::replicator_rpc::CompleteReadResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CompleteRead(::grpc::ClientContext* context, const ::replicator_rpc::CompleteReadRequest* request, ::replicator_rpc::CompleteReadResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CompleteRead(::grpc::ClientContext* context, const ::replicator_rpc::CompleteReadRequest* request, ::replicator_rpc::CompleteReadResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void CompleteWrite(::grpc::ClientContext* context, const ::replicator_rpc::CompleteWriteRequest* request, ::replicator_rpc::CompleteWriteResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CompleteWrite(::grpc::ClientContext* context, const ::replicator_rpc::CompleteWriteRequest* request, ::replicator_rpc::CompleteWriteResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CompleteWrite(::grpc::ClientContext* context, const ::replicator_rpc::CompleteWriteRequest* request, ::replicator_rpc::CompleteWriteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void PushHostWrite(::grpc::ClientContext* context, const ::replicator_rpc::PushHostWriteRequest* request, ::replicator_rpc::PushHostWriteResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PushHostWrite(::grpc::ClientContext* context, const ::replicator_rpc::PushHostWriteRequest* request, ::replicator_rpc::PushHostWriteResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PushHostWrite(::grpc::ClientContext* context, const ::replicator_rpc::PushHostWriteRequest* request, ::replicator_rpc::PushHostWriteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void PushDirtyLog(::grpc::ClientContext* context, const ::replicator_rpc::PushDirtyLogRequest* request, ::replicator_rpc::PushDirtyLogResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PushDirtyLog(::grpc::ClientContext* context, const ::replicator_rpc::PushDirtyLogRequest* request, ::replicator_rpc::PushDirtyLogResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PushDirtyLog(::grpc::ClientContext* context, const ::replicator_rpc::PushDirtyLogRequest* request, ::replicator_rpc::PushDirtyLogResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void TransferDirtyLog(::grpc::ClientContext* context, const ::replicator_rpc::TransferDirtyLogRequest* request, ::replicator_rpc::TransferDirtyLogResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void TransferDirtyLog(::grpc::ClientContext* context, const ::replicator_rpc::TransferDirtyLogRequest* request, ::replicator_rpc::TransferDirtyLogResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void TransferDirtyLog(::grpc::ClientContext* context, const ::replicator_rpc::TransferDirtyLogRequest* request, ::replicator_rpc::TransferDirtyLogResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void TransferHostWrite(::grpc::ClientContext* context, const ::replicator_rpc::TransferHostWriteRequest* request, ::replicator_rpc::TransferHostWriteResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void TransferHostWrite(::grpc::ClientContext* context, const ::replicator_rpc::TransferHostWriteRequest* request, ::replicator_rpc::TransferHostWriteResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void TransferHostWrite(::grpc::ClientContext* context, const ::replicator_rpc::TransferHostWriteRequest* request, ::replicator_rpc::TransferHostWriteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::replicator_rpc::CompleteReadResponse>* AsyncCompleteReadRaw(::grpc::ClientContext* context, const ::replicator_rpc::CompleteReadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::replicator_rpc::CompleteReadResponse>* PrepareAsyncCompleteReadRaw(::grpc::ClientContext* context, const ::replicator_rpc::CompleteReadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::replicator_rpc::CompleteWriteResponse>* AsyncCompleteWriteRaw(::grpc::ClientContext* context, const ::replicator_rpc::CompleteWriteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::replicator_rpc::CompleteWriteResponse>* PrepareAsyncCompleteWriteRaw(::grpc::ClientContext* context, const ::replicator_rpc::CompleteWriteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::replicator_rpc::PushHostWriteResponse>* AsyncPushHostWriteRaw(::grpc::ClientContext* context, const ::replicator_rpc::PushHostWriteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::replicator_rpc::PushHostWriteResponse>* PrepareAsyncPushHostWriteRaw(::grpc::ClientContext* context, const ::replicator_rpc::PushHostWriteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::replicator_rpc::PushDirtyLogResponse>* AsyncPushDirtyLogRaw(::grpc::ClientContext* context, const ::replicator_rpc::PushDirtyLogRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::replicator_rpc::PushDirtyLogResponse>* PrepareAsyncPushDirtyLogRaw(::grpc::ClientContext* context, const ::replicator_rpc::PushDirtyLogRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::replicator_rpc::TransferDirtyLogResponse>* AsyncTransferDirtyLogRaw(::grpc::ClientContext* context, const ::replicator_rpc::TransferDirtyLogRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::replicator_rpc::TransferDirtyLogResponse>* PrepareAsyncTransferDirtyLogRaw(::grpc::ClientContext* context, const ::replicator_rpc::TransferDirtyLogRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::replicator_rpc::TransferHostWriteResponse>* AsyncTransferHostWriteRaw(::grpc::ClientContext* context, const ::replicator_rpc::TransferHostWriteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::replicator_rpc::TransferHostWriteResponse>* PrepareAsyncTransferHostWriteRaw(::grpc::ClientContext* context, const ::replicator_rpc::TransferHostWriteRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CompleteRead(::grpc::ClientContext* context, const ::replicator_rpc::CompleteReadRequest& request, ::replicator_rpc::CompleteReadResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::replicator_rpc::CompleteReadResponse>> AsyncCompleteRead(::grpc::ClientContext* context, const ::replicator_rpc::CompleteReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::replicator_rpc::CompleteReadResponse>>(AsyncCompleteReadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::replicator_rpc::CompleteReadResponse>> PrepareAsyncCompleteRead(::grpc::ClientContext* context, const ::replicator_rpc::CompleteReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::replicator_rpc::CompleteReadResponse>>(PrepareAsyncCompleteReadRaw(context, request, cq));
    }
    ::grpc::Status CompleteWrite(::grpc::ClientContext* context, const ::replicator_rpc::CompleteWriteRequest& request, ::replicator_rpc::CompleteWriteResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::replicator_rpc::CompleteWriteResponse>> AsyncCompleteWrite(::grpc::ClientContext* context, const ::replicator_rpc::CompleteWriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::replicator_rpc::CompleteWriteResponse>>(AsyncCompleteWriteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::replicator_rpc::CompleteWriteResponse>> PrepareAsyncCompleteWrite(::grpc::ClientContext* context, const ::replicator_rpc::CompleteWriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::replicator_rpc::CompleteWriteResponse>>(PrepareAsyncCompleteWriteRaw(context, request, cq));
    }
    ::grpc::Status PushHostWrite(::grpc::ClientContext* context, const ::replicator_rpc::PushHostWriteRequest& request, ::replicator_rpc::PushHostWriteResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::replicator_rpc::PushHostWriteResponse>> AsyncPushHostWrite(::grpc::ClientContext* context, const ::replicator_rpc::PushHostWriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::replicator_rpc::PushHostWriteResponse>>(AsyncPushHostWriteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::replicator_rpc::PushHostWriteResponse>> PrepareAsyncPushHostWrite(::grpc::ClientContext* context, const ::replicator_rpc::PushHostWriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::replicator_rpc::PushHostWriteResponse>>(PrepareAsyncPushHostWriteRaw(context, request, cq));
    }
    ::grpc::Status PushDirtyLog(::grpc::ClientContext* context, const ::replicator_rpc::PushDirtyLogRequest& request, ::replicator_rpc::PushDirtyLogResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::replicator_rpc::PushDirtyLogResponse>> AsyncPushDirtyLog(::grpc::ClientContext* context, const ::replicator_rpc::PushDirtyLogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::replicator_rpc::PushDirtyLogResponse>>(AsyncPushDirtyLogRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::replicator_rpc::PushDirtyLogResponse>> PrepareAsyncPushDirtyLog(::grpc::ClientContext* context, const ::replicator_rpc::PushDirtyLogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::replicator_rpc::PushDirtyLogResponse>>(PrepareAsyncPushDirtyLogRaw(context, request, cq));
    }
    ::grpc::Status TransferDirtyLog(::grpc::ClientContext* context, const ::replicator_rpc::TransferDirtyLogRequest& request, ::replicator_rpc::TransferDirtyLogResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::replicator_rpc::TransferDirtyLogResponse>> AsyncTransferDirtyLog(::grpc::ClientContext* context, const ::replicator_rpc::TransferDirtyLogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::replicator_rpc::TransferDirtyLogResponse>>(AsyncTransferDirtyLogRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::replicator_rpc::TransferDirtyLogResponse>> PrepareAsyncTransferDirtyLog(::grpc::ClientContext* context, const ::replicator_rpc::TransferDirtyLogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::replicator_rpc::TransferDirtyLogResponse>>(PrepareAsyncTransferDirtyLogRaw(context, request, cq));
    }
    ::grpc::Status TransferHostWrite(::grpc::ClientContext* context, const ::replicator_rpc::TransferHostWriteRequest& request, ::replicator_rpc::TransferHostWriteResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::replicator_rpc::TransferHostWriteResponse>> AsyncTransferHostWrite(::grpc::ClientContext* context, const ::replicator_rpc::TransferHostWriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::replicator_rpc::TransferHostWriteResponse>>(AsyncTransferHostWriteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::replicator_rpc::TransferHostWriteResponse>> PrepareAsyncTransferHostWrite(::grpc::ClientContext* context, const ::replicator_rpc::TransferHostWriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::replicator_rpc::TransferHostWriteResponse>>(PrepareAsyncTransferHostWriteRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void CompleteRead(::grpc::ClientContext* context, const ::replicator_rpc::CompleteReadRequest* request, ::replicator_rpc::CompleteReadResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CompleteRead(::grpc::ClientContext* context, const ::replicator_rpc::CompleteReadRequest* request, ::replicator_rpc::CompleteReadResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CompleteRead(::grpc::ClientContext* context, const ::replicator_rpc::CompleteReadRequest* request, ::replicator_rpc::CompleteReadResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CompleteWrite(::grpc::ClientContext* context, const ::replicator_rpc::CompleteWriteRequest* request, ::replicator_rpc::CompleteWriteResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CompleteWrite(::grpc::ClientContext* context, const ::replicator_rpc::CompleteWriteRequest* request, ::replicator_rpc::CompleteWriteResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CompleteWrite(::grpc::ClientContext* context, const ::replicator_rpc::CompleteWriteRequest* request, ::replicator_rpc::CompleteWriteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void PushHostWrite(::grpc::ClientContext* context, const ::replicator_rpc::PushHostWriteRequest* request, ::replicator_rpc::PushHostWriteResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PushHostWrite(::grpc::ClientContext* context, const ::replicator_rpc::PushHostWriteRequest* request, ::replicator_rpc::PushHostWriteResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PushHostWrite(::grpc::ClientContext* context, const ::replicator_rpc::PushHostWriteRequest* request, ::replicator_rpc::PushHostWriteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void PushDirtyLog(::grpc::ClientContext* context, const ::replicator_rpc::PushDirtyLogRequest* request, ::replicator_rpc::PushDirtyLogResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PushDirtyLog(::grpc::ClientContext* context, const ::replicator_rpc::PushDirtyLogRequest* request, ::replicator_rpc::PushDirtyLogResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PushDirtyLog(::grpc::ClientContext* context, const ::replicator_rpc::PushDirtyLogRequest* request, ::replicator_rpc::PushDirtyLogResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void TransferDirtyLog(::grpc::ClientContext* context, const ::replicator_rpc::TransferDirtyLogRequest* request, ::replicator_rpc::TransferDirtyLogResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void TransferDirtyLog(::grpc::ClientContext* context, const ::replicator_rpc::TransferDirtyLogRequest* request, ::replicator_rpc::TransferDirtyLogResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void TransferDirtyLog(::grpc::ClientContext* context, const ::replicator_rpc::TransferDirtyLogRequest* request, ::replicator_rpc::TransferDirtyLogResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void TransferHostWrite(::grpc::ClientContext* context, const ::replicator_rpc::TransferHostWriteRequest* request, ::replicator_rpc::TransferHostWriteResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void TransferHostWrite(::grpc::ClientContext* context, const ::replicator_rpc::TransferHostWriteRequest* request, ::replicator_rpc::TransferHostWriteResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void TransferHostWrite(::grpc::ClientContext* context, const ::replicator_rpc::TransferHostWriteRequest* request, ::replicator_rpc::TransferHostWriteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::replicator_rpc::CompleteReadResponse>* AsyncCompleteReadRaw(::grpc::ClientContext* context, const ::replicator_rpc::CompleteReadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::replicator_rpc::CompleteReadResponse>* PrepareAsyncCompleteReadRaw(::grpc::ClientContext* context, const ::replicator_rpc::CompleteReadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::replicator_rpc::CompleteWriteResponse>* AsyncCompleteWriteRaw(::grpc::ClientContext* context, const ::replicator_rpc::CompleteWriteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::replicator_rpc::CompleteWriteResponse>* PrepareAsyncCompleteWriteRaw(::grpc::ClientContext* context, const ::replicator_rpc::CompleteWriteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::replicator_rpc::PushHostWriteResponse>* AsyncPushHostWriteRaw(::grpc::ClientContext* context, const ::replicator_rpc::PushHostWriteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::replicator_rpc::PushHostWriteResponse>* PrepareAsyncPushHostWriteRaw(::grpc::ClientContext* context, const ::replicator_rpc::PushHostWriteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::replicator_rpc::PushDirtyLogResponse>* AsyncPushDirtyLogRaw(::grpc::ClientContext* context, const ::replicator_rpc::PushDirtyLogRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::replicator_rpc::PushDirtyLogResponse>* PrepareAsyncPushDirtyLogRaw(::grpc::ClientContext* context, const ::replicator_rpc::PushDirtyLogRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::replicator_rpc::TransferDirtyLogResponse>* AsyncTransferDirtyLogRaw(::grpc::ClientContext* context, const ::replicator_rpc::TransferDirtyLogRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::replicator_rpc::TransferDirtyLogResponse>* PrepareAsyncTransferDirtyLogRaw(::grpc::ClientContext* context, const ::replicator_rpc::TransferDirtyLogRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::replicator_rpc::TransferHostWriteResponse>* AsyncTransferHostWriteRaw(::grpc::ClientContext* context, const ::replicator_rpc::TransferHostWriteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::replicator_rpc::TransferHostWriteResponse>* PrepareAsyncTransferHostWriteRaw(::grpc::ClientContext* context, const ::replicator_rpc::TransferHostWriteRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CompleteRead_;
    const ::grpc::internal::RpcMethod rpcmethod_CompleteWrite_;
    const ::grpc::internal::RpcMethod rpcmethod_PushHostWrite_;
    const ::grpc::internal::RpcMethod rpcmethod_PushDirtyLog_;
    const ::grpc::internal::RpcMethod rpcmethod_TransferDirtyLog_;
    const ::grpc::internal::RpcMethod rpcmethod_TransferHostWrite_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // HA side server
    virtual ::grpc::Status CompleteRead(::grpc::ServerContext* context, const ::replicator_rpc::CompleteReadRequest* request, ::replicator_rpc::CompleteReadResponse* response);
    virtual ::grpc::Status CompleteWrite(::grpc::ServerContext* context, const ::replicator_rpc::CompleteWriteRequest* request, ::replicator_rpc::CompleteWriteResponse* response);
    virtual ::grpc::Status PushHostWrite(::grpc::ServerContext* context, const ::replicator_rpc::PushHostWriteRequest* request, ::replicator_rpc::PushHostWriteResponse* response);
    virtual ::grpc::Status PushDirtyLog(::grpc::ServerContext* context, const ::replicator_rpc::PushDirtyLogRequest* request, ::replicator_rpc::PushDirtyLogResponse* response);
    virtual ::grpc::Status TransferDirtyLog(::grpc::ServerContext* context, const ::replicator_rpc::TransferDirtyLogRequest* request, ::replicator_rpc::TransferDirtyLogResponse* response);
    virtual ::grpc::Status TransferHostWrite(::grpc::ServerContext* context, const ::replicator_rpc::TransferHostWriteRequest* request, ::replicator_rpc::TransferHostWriteResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CompleteRead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CompleteRead() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CompleteRead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CompleteRead(::grpc::ServerContext* /*context*/, const ::replicator_rpc::CompleteReadRequest* /*request*/, ::replicator_rpc::CompleteReadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCompleteRead(::grpc::ServerContext* context, ::replicator_rpc::CompleteReadRequest* request, ::grpc::ServerAsyncResponseWriter< ::replicator_rpc::CompleteReadResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CompleteWrite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CompleteWrite() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CompleteWrite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CompleteWrite(::grpc::ServerContext* /*context*/, const ::replicator_rpc::CompleteWriteRequest* /*request*/, ::replicator_rpc::CompleteWriteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCompleteWrite(::grpc::ServerContext* context, ::replicator_rpc::CompleteWriteRequest* request, ::grpc::ServerAsyncResponseWriter< ::replicator_rpc::CompleteWriteResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PushHostWrite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PushHostWrite() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_PushHostWrite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushHostWrite(::grpc::ServerContext* /*context*/, const ::replicator_rpc::PushHostWriteRequest* /*request*/, ::replicator_rpc::PushHostWriteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushHostWrite(::grpc::ServerContext* context, ::replicator_rpc::PushHostWriteRequest* request, ::grpc::ServerAsyncResponseWriter< ::replicator_rpc::PushHostWriteResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PushDirtyLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PushDirtyLog() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_PushDirtyLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushDirtyLog(::grpc::ServerContext* /*context*/, const ::replicator_rpc::PushDirtyLogRequest* /*request*/, ::replicator_rpc::PushDirtyLogResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushDirtyLog(::grpc::ServerContext* context, ::replicator_rpc::PushDirtyLogRequest* request, ::grpc::ServerAsyncResponseWriter< ::replicator_rpc::PushDirtyLogResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TransferDirtyLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TransferDirtyLog() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_TransferDirtyLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferDirtyLog(::grpc::ServerContext* /*context*/, const ::replicator_rpc::TransferDirtyLogRequest* /*request*/, ::replicator_rpc::TransferDirtyLogResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTransferDirtyLog(::grpc::ServerContext* context, ::replicator_rpc::TransferDirtyLogRequest* request, ::grpc::ServerAsyncResponseWriter< ::replicator_rpc::TransferDirtyLogResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TransferHostWrite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TransferHostWrite() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_TransferHostWrite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferHostWrite(::grpc::ServerContext* /*context*/, const ::replicator_rpc::TransferHostWriteRequest* /*request*/, ::replicator_rpc::TransferHostWriteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTransferHostWrite(::grpc::ServerContext* context, ::replicator_rpc::TransferHostWriteRequest* request, ::grpc::ServerAsyncResponseWriter< ::replicator_rpc::TransferHostWriteResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CompleteRead<WithAsyncMethod_CompleteWrite<WithAsyncMethod_PushHostWrite<WithAsyncMethod_PushDirtyLog<WithAsyncMethod_TransferDirtyLog<WithAsyncMethod_TransferHostWrite<Service > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CompleteRead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CompleteRead() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::replicator_rpc::CompleteReadRequest, ::replicator_rpc::CompleteReadResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::replicator_rpc::CompleteReadRequest* request, ::replicator_rpc::CompleteReadResponse* response) { return this->CompleteRead(context, request, response); }));}
    void SetMessageAllocatorFor_CompleteRead(
        ::grpc::experimental::MessageAllocator< ::replicator_rpc::CompleteReadRequest, ::replicator_rpc::CompleteReadResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::replicator_rpc::CompleteReadRequest, ::replicator_rpc::CompleteReadResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CompleteRead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CompleteRead(::grpc::ServerContext* /*context*/, const ::replicator_rpc::CompleteReadRequest* /*request*/, ::replicator_rpc::CompleteReadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CompleteRead(
      ::grpc::CallbackServerContext* /*context*/, const ::replicator_rpc::CompleteReadRequest* /*request*/, ::replicator_rpc::CompleteReadResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CompleteRead(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::replicator_rpc::CompleteReadRequest* /*request*/, ::replicator_rpc::CompleteReadResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CompleteWrite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CompleteWrite() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::replicator_rpc::CompleteWriteRequest, ::replicator_rpc::CompleteWriteResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::replicator_rpc::CompleteWriteRequest* request, ::replicator_rpc::CompleteWriteResponse* response) { return this->CompleteWrite(context, request, response); }));}
    void SetMessageAllocatorFor_CompleteWrite(
        ::grpc::experimental::MessageAllocator< ::replicator_rpc::CompleteWriteRequest, ::replicator_rpc::CompleteWriteResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::replicator_rpc::CompleteWriteRequest, ::replicator_rpc::CompleteWriteResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CompleteWrite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CompleteWrite(::grpc::ServerContext* /*context*/, const ::replicator_rpc::CompleteWriteRequest* /*request*/, ::replicator_rpc::CompleteWriteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CompleteWrite(
      ::grpc::CallbackServerContext* /*context*/, const ::replicator_rpc::CompleteWriteRequest* /*request*/, ::replicator_rpc::CompleteWriteResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CompleteWrite(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::replicator_rpc::CompleteWriteRequest* /*request*/, ::replicator_rpc::CompleteWriteResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PushHostWrite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_PushHostWrite() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::replicator_rpc::PushHostWriteRequest, ::replicator_rpc::PushHostWriteResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::replicator_rpc::PushHostWriteRequest* request, ::replicator_rpc::PushHostWriteResponse* response) { return this->PushHostWrite(context, request, response); }));}
    void SetMessageAllocatorFor_PushHostWrite(
        ::grpc::experimental::MessageAllocator< ::replicator_rpc::PushHostWriteRequest, ::replicator_rpc::PushHostWriteResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::replicator_rpc::PushHostWriteRequest, ::replicator_rpc::PushHostWriteResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_PushHostWrite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushHostWrite(::grpc::ServerContext* /*context*/, const ::replicator_rpc::PushHostWriteRequest* /*request*/, ::replicator_rpc::PushHostWriteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PushHostWrite(
      ::grpc::CallbackServerContext* /*context*/, const ::replicator_rpc::PushHostWriteRequest* /*request*/, ::replicator_rpc::PushHostWriteResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PushHostWrite(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::replicator_rpc::PushHostWriteRequest* /*request*/, ::replicator_rpc::PushHostWriteResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PushDirtyLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_PushDirtyLog() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::replicator_rpc::PushDirtyLogRequest, ::replicator_rpc::PushDirtyLogResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::replicator_rpc::PushDirtyLogRequest* request, ::replicator_rpc::PushDirtyLogResponse* response) { return this->PushDirtyLog(context, request, response); }));}
    void SetMessageAllocatorFor_PushDirtyLog(
        ::grpc::experimental::MessageAllocator< ::replicator_rpc::PushDirtyLogRequest, ::replicator_rpc::PushDirtyLogResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::replicator_rpc::PushDirtyLogRequest, ::replicator_rpc::PushDirtyLogResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_PushDirtyLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushDirtyLog(::grpc::ServerContext* /*context*/, const ::replicator_rpc::PushDirtyLogRequest* /*request*/, ::replicator_rpc::PushDirtyLogResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PushDirtyLog(
      ::grpc::CallbackServerContext* /*context*/, const ::replicator_rpc::PushDirtyLogRequest* /*request*/, ::replicator_rpc::PushDirtyLogResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PushDirtyLog(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::replicator_rpc::PushDirtyLogRequest* /*request*/, ::replicator_rpc::PushDirtyLogResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_TransferDirtyLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_TransferDirtyLog() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::replicator_rpc::TransferDirtyLogRequest, ::replicator_rpc::TransferDirtyLogResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::replicator_rpc::TransferDirtyLogRequest* request, ::replicator_rpc::TransferDirtyLogResponse* response) { return this->TransferDirtyLog(context, request, response); }));}
    void SetMessageAllocatorFor_TransferDirtyLog(
        ::grpc::experimental::MessageAllocator< ::replicator_rpc::TransferDirtyLogRequest, ::replicator_rpc::TransferDirtyLogResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::replicator_rpc::TransferDirtyLogRequest, ::replicator_rpc::TransferDirtyLogResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_TransferDirtyLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferDirtyLog(::grpc::ServerContext* /*context*/, const ::replicator_rpc::TransferDirtyLogRequest* /*request*/, ::replicator_rpc::TransferDirtyLogResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* TransferDirtyLog(
      ::grpc::CallbackServerContext* /*context*/, const ::replicator_rpc::TransferDirtyLogRequest* /*request*/, ::replicator_rpc::TransferDirtyLogResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* TransferDirtyLog(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::replicator_rpc::TransferDirtyLogRequest* /*request*/, ::replicator_rpc::TransferDirtyLogResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_TransferHostWrite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_TransferHostWrite() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::replicator_rpc::TransferHostWriteRequest, ::replicator_rpc::TransferHostWriteResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::replicator_rpc::TransferHostWriteRequest* request, ::replicator_rpc::TransferHostWriteResponse* response) { return this->TransferHostWrite(context, request, response); }));}
    void SetMessageAllocatorFor_TransferHostWrite(
        ::grpc::experimental::MessageAllocator< ::replicator_rpc::TransferHostWriteRequest, ::replicator_rpc::TransferHostWriteResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::replicator_rpc::TransferHostWriteRequest, ::replicator_rpc::TransferHostWriteResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_TransferHostWrite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferHostWrite(::grpc::ServerContext* /*context*/, const ::replicator_rpc::TransferHostWriteRequest* /*request*/, ::replicator_rpc::TransferHostWriteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* TransferHostWrite(
      ::grpc::CallbackServerContext* /*context*/, const ::replicator_rpc::TransferHostWriteRequest* /*request*/, ::replicator_rpc::TransferHostWriteResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* TransferHostWrite(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::replicator_rpc::TransferHostWriteRequest* /*request*/, ::replicator_rpc::TransferHostWriteResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_CompleteRead<ExperimentalWithCallbackMethod_CompleteWrite<ExperimentalWithCallbackMethod_PushHostWrite<ExperimentalWithCallbackMethod_PushDirtyLog<ExperimentalWithCallbackMethod_TransferDirtyLog<ExperimentalWithCallbackMethod_TransferHostWrite<Service > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_CompleteRead<ExperimentalWithCallbackMethod_CompleteWrite<ExperimentalWithCallbackMethod_PushHostWrite<ExperimentalWithCallbackMethod_PushDirtyLog<ExperimentalWithCallbackMethod_TransferDirtyLog<ExperimentalWithCallbackMethod_TransferHostWrite<Service > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CompleteRead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CompleteRead() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CompleteRead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CompleteRead(::grpc::ServerContext* /*context*/, const ::replicator_rpc::CompleteReadRequest* /*request*/, ::replicator_rpc::CompleteReadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CompleteWrite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CompleteWrite() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CompleteWrite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CompleteWrite(::grpc::ServerContext* /*context*/, const ::replicator_rpc::CompleteWriteRequest* /*request*/, ::replicator_rpc::CompleteWriteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PushHostWrite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PushHostWrite() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_PushHostWrite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushHostWrite(::grpc::ServerContext* /*context*/, const ::replicator_rpc::PushHostWriteRequest* /*request*/, ::replicator_rpc::PushHostWriteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PushDirtyLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PushDirtyLog() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_PushDirtyLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushDirtyLog(::grpc::ServerContext* /*context*/, const ::replicator_rpc::PushDirtyLogRequest* /*request*/, ::replicator_rpc::PushDirtyLogResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TransferDirtyLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TransferDirtyLog() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_TransferDirtyLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferDirtyLog(::grpc::ServerContext* /*context*/, const ::replicator_rpc::TransferDirtyLogRequest* /*request*/, ::replicator_rpc::TransferDirtyLogResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TransferHostWrite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TransferHostWrite() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_TransferHostWrite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferHostWrite(::grpc::ServerContext* /*context*/, const ::replicator_rpc::TransferHostWriteRequest* /*request*/, ::replicator_rpc::TransferHostWriteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CompleteRead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CompleteRead() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CompleteRead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CompleteRead(::grpc::ServerContext* /*context*/, const ::replicator_rpc::CompleteReadRequest* /*request*/, ::replicator_rpc::CompleteReadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCompleteRead(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CompleteWrite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CompleteWrite() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CompleteWrite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CompleteWrite(::grpc::ServerContext* /*context*/, const ::replicator_rpc::CompleteWriteRequest* /*request*/, ::replicator_rpc::CompleteWriteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCompleteWrite(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PushHostWrite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PushHostWrite() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_PushHostWrite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushHostWrite(::grpc::ServerContext* /*context*/, const ::replicator_rpc::PushHostWriteRequest* /*request*/, ::replicator_rpc::PushHostWriteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushHostWrite(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PushDirtyLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PushDirtyLog() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_PushDirtyLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushDirtyLog(::grpc::ServerContext* /*context*/, const ::replicator_rpc::PushDirtyLogRequest* /*request*/, ::replicator_rpc::PushDirtyLogResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushDirtyLog(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TransferDirtyLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TransferDirtyLog() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_TransferDirtyLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferDirtyLog(::grpc::ServerContext* /*context*/, const ::replicator_rpc::TransferDirtyLogRequest* /*request*/, ::replicator_rpc::TransferDirtyLogResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTransferDirtyLog(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TransferHostWrite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TransferHostWrite() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_TransferHostWrite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferHostWrite(::grpc::ServerContext* /*context*/, const ::replicator_rpc::TransferHostWriteRequest* /*request*/, ::replicator_rpc::TransferHostWriteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTransferHostWrite(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CompleteRead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CompleteRead() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CompleteRead(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CompleteRead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CompleteRead(::grpc::ServerContext* /*context*/, const ::replicator_rpc::CompleteReadRequest* /*request*/, ::replicator_rpc::CompleteReadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CompleteRead(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CompleteRead(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CompleteWrite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CompleteWrite() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CompleteWrite(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CompleteWrite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CompleteWrite(::grpc::ServerContext* /*context*/, const ::replicator_rpc::CompleteWriteRequest* /*request*/, ::replicator_rpc::CompleteWriteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CompleteWrite(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CompleteWrite(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PushHostWrite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_PushHostWrite() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PushHostWrite(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_PushHostWrite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushHostWrite(::grpc::ServerContext* /*context*/, const ::replicator_rpc::PushHostWriteRequest* /*request*/, ::replicator_rpc::PushHostWriteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PushHostWrite(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PushHostWrite(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PushDirtyLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_PushDirtyLog() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PushDirtyLog(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_PushDirtyLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushDirtyLog(::grpc::ServerContext* /*context*/, const ::replicator_rpc::PushDirtyLogRequest* /*request*/, ::replicator_rpc::PushDirtyLogResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PushDirtyLog(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PushDirtyLog(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_TransferDirtyLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_TransferDirtyLog() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TransferDirtyLog(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_TransferDirtyLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferDirtyLog(::grpc::ServerContext* /*context*/, const ::replicator_rpc::TransferDirtyLogRequest* /*request*/, ::replicator_rpc::TransferDirtyLogResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* TransferDirtyLog(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* TransferDirtyLog(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_TransferHostWrite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_TransferHostWrite() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TransferHostWrite(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_TransferHostWrite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferHostWrite(::grpc::ServerContext* /*context*/, const ::replicator_rpc::TransferHostWriteRequest* /*request*/, ::replicator_rpc::TransferHostWriteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* TransferHostWrite(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* TransferHostWrite(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CompleteRead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CompleteRead() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::replicator_rpc::CompleteReadRequest, ::replicator_rpc::CompleteReadResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::replicator_rpc::CompleteReadRequest, ::replicator_rpc::CompleteReadResponse>* streamer) {
                       return this->StreamedCompleteRead(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CompleteRead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CompleteRead(::grpc::ServerContext* /*context*/, const ::replicator_rpc::CompleteReadRequest* /*request*/, ::replicator_rpc::CompleteReadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCompleteRead(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::replicator_rpc::CompleteReadRequest,::replicator_rpc::CompleteReadResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CompleteWrite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CompleteWrite() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::replicator_rpc::CompleteWriteRequest, ::replicator_rpc::CompleteWriteResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::replicator_rpc::CompleteWriteRequest, ::replicator_rpc::CompleteWriteResponse>* streamer) {
                       return this->StreamedCompleteWrite(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CompleteWrite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CompleteWrite(::grpc::ServerContext* /*context*/, const ::replicator_rpc::CompleteWriteRequest* /*request*/, ::replicator_rpc::CompleteWriteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCompleteWrite(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::replicator_rpc::CompleteWriteRequest,::replicator_rpc::CompleteWriteResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PushHostWrite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PushHostWrite() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::replicator_rpc::PushHostWriteRequest, ::replicator_rpc::PushHostWriteResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::replicator_rpc::PushHostWriteRequest, ::replicator_rpc::PushHostWriteResponse>* streamer) {
                       return this->StreamedPushHostWrite(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PushHostWrite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PushHostWrite(::grpc::ServerContext* /*context*/, const ::replicator_rpc::PushHostWriteRequest* /*request*/, ::replicator_rpc::PushHostWriteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPushHostWrite(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::replicator_rpc::PushHostWriteRequest,::replicator_rpc::PushHostWriteResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PushDirtyLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PushDirtyLog() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::replicator_rpc::PushDirtyLogRequest, ::replicator_rpc::PushDirtyLogResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::replicator_rpc::PushDirtyLogRequest, ::replicator_rpc::PushDirtyLogResponse>* streamer) {
                       return this->StreamedPushDirtyLog(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PushDirtyLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PushDirtyLog(::grpc::ServerContext* /*context*/, const ::replicator_rpc::PushDirtyLogRequest* /*request*/, ::replicator_rpc::PushDirtyLogResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPushDirtyLog(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::replicator_rpc::PushDirtyLogRequest,::replicator_rpc::PushDirtyLogResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TransferDirtyLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TransferDirtyLog() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::replicator_rpc::TransferDirtyLogRequest, ::replicator_rpc::TransferDirtyLogResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::replicator_rpc::TransferDirtyLogRequest, ::replicator_rpc::TransferDirtyLogResponse>* streamer) {
                       return this->StreamedTransferDirtyLog(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TransferDirtyLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TransferDirtyLog(::grpc::ServerContext* /*context*/, const ::replicator_rpc::TransferDirtyLogRequest* /*request*/, ::replicator_rpc::TransferDirtyLogResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTransferDirtyLog(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::replicator_rpc::TransferDirtyLogRequest,::replicator_rpc::TransferDirtyLogResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TransferHostWrite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TransferHostWrite() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::replicator_rpc::TransferHostWriteRequest, ::replicator_rpc::TransferHostWriteResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::replicator_rpc::TransferHostWriteRequest, ::replicator_rpc::TransferHostWriteResponse>* streamer) {
                       return this->StreamedTransferHostWrite(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TransferHostWrite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TransferHostWrite(::grpc::ServerContext* /*context*/, const ::replicator_rpc::TransferHostWriteRequest* /*request*/, ::replicator_rpc::TransferHostWriteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTransferHostWrite(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::replicator_rpc::TransferHostWriteRequest,::replicator_rpc::TransferHostWriteResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CompleteRead<WithStreamedUnaryMethod_CompleteWrite<WithStreamedUnaryMethod_PushHostWrite<WithStreamedUnaryMethod_PushDirtyLog<WithStreamedUnaryMethod_TransferDirtyLog<WithStreamedUnaryMethod_TransferHostWrite<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CompleteRead<WithStreamedUnaryMethod_CompleteWrite<WithStreamedUnaryMethod_PushHostWrite<WithStreamedUnaryMethod_PushDirtyLog<WithStreamedUnaryMethod_TransferDirtyLog<WithStreamedUnaryMethod_TransferHostWrite<Service > > > > > > StreamedService;
};

}  // namespace replicator_rpc


#endif  // GRPC_replicator_5frpc_2eproto__INCLUDED
