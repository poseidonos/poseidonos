// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cli.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cli_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cli_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cli_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cli_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[74]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cli_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_cli_2eproto_metadata_getter(int index);
namespace grpc_cli {
class AddSpareRequest;
struct AddSpareRequestDefaultTypeInternal;
extern AddSpareRequestDefaultTypeInternal _AddSpareRequest_default_instance_;
class AddSpareRequest_Param;
struct AddSpareRequest_ParamDefaultTypeInternal;
extern AddSpareRequest_ParamDefaultTypeInternal _AddSpareRequest_Param_default_instance_;
class AddSpareRequest_SpareDeviceName;
struct AddSpareRequest_SpareDeviceNameDefaultTypeInternal;
extern AddSpareRequest_SpareDeviceNameDefaultTypeInternal _AddSpareRequest_SpareDeviceName_default_instance_;
class AddSpareResponse;
struct AddSpareResponseDefaultTypeInternal;
extern AddSpareResponseDefaultTypeInternal _AddSpareResponse_default_instance_;
class AddSpareResponse_Result;
struct AddSpareResponse_ResultDefaultTypeInternal;
extern AddSpareResponse_ResultDefaultTypeInternal _AddSpareResponse_Result_default_instance_;
class Array;
struct ArrayDefaultTypeInternal;
extern ArrayDefaultTypeInternal _Array_default_instance_;
class ArrayInfoRequest;
struct ArrayInfoRequestDefaultTypeInternal;
extern ArrayInfoRequestDefaultTypeInternal _ArrayInfoRequest_default_instance_;
class ArrayInfoRequest_Param;
struct ArrayInfoRequest_ParamDefaultTypeInternal;
extern ArrayInfoRequest_ParamDefaultTypeInternal _ArrayInfoRequest_Param_default_instance_;
class ArrayInfoResponse;
struct ArrayInfoResponseDefaultTypeInternal;
extern ArrayInfoResponseDefaultTypeInternal _ArrayInfoResponse_default_instance_;
class ArrayInfoResponse_Result;
struct ArrayInfoResponse_ResultDefaultTypeInternal;
extern ArrayInfoResponse_ResultDefaultTypeInternal _ArrayInfoResponse_Result_default_instance_;
class CreateArrayRequest;
struct CreateArrayRequestDefaultTypeInternal;
extern CreateArrayRequestDefaultTypeInternal _CreateArrayRequest_default_instance_;
class CreateArrayRequest_Param;
struct CreateArrayRequest_ParamDefaultTypeInternal;
extern CreateArrayRequest_ParamDefaultTypeInternal _CreateArrayRequest_Param_default_instance_;
class CreateArrayResponse;
struct CreateArrayResponseDefaultTypeInternal;
extern CreateArrayResponseDefaultTypeInternal _CreateArrayResponse_default_instance_;
class CreateArrayResponse_Result;
struct CreateArrayResponse_ResultDefaultTypeInternal;
extern CreateArrayResponse_ResultDefaultTypeInternal _CreateArrayResponse_Result_default_instance_;
class DeleteArrayRequest;
struct DeleteArrayRequestDefaultTypeInternal;
extern DeleteArrayRequestDefaultTypeInternal _DeleteArrayRequest_default_instance_;
class DeleteArrayRequest_Param;
struct DeleteArrayRequest_ParamDefaultTypeInternal;
extern DeleteArrayRequest_ParamDefaultTypeInternal _DeleteArrayRequest_Param_default_instance_;
class DeleteArrayResponse;
struct DeleteArrayResponseDefaultTypeInternal;
extern DeleteArrayResponseDefaultTypeInternal _DeleteArrayResponse_default_instance_;
class DeleteArrayResponse_Result;
struct DeleteArrayResponse_ResultDefaultTypeInternal;
extern DeleteArrayResponse_ResultDefaultTypeInternal _DeleteArrayResponse_Result_default_instance_;
class Device;
struct DeviceDefaultTypeInternal;
extern DeviceDefaultTypeInternal _Device_default_instance_;
class DeviceNameList;
struct DeviceNameListDefaultTypeInternal;
extern DeviceNameListDefaultTypeInternal _DeviceNameList_default_instance_;
class GetSystemPropertyRequest;
struct GetSystemPropertyRequestDefaultTypeInternal;
extern GetSystemPropertyRequestDefaultTypeInternal _GetSystemPropertyRequest_default_instance_;
class GetSystemPropertyResponse;
struct GetSystemPropertyResponseDefaultTypeInternal;
extern GetSystemPropertyResponseDefaultTypeInternal _GetSystemPropertyResponse_default_instance_;
class GetSystemPropertyResponse_Result;
struct GetSystemPropertyResponse_ResultDefaultTypeInternal;
extern GetSystemPropertyResponse_ResultDefaultTypeInternal _GetSystemPropertyResponse_Result_default_instance_;
class GetSystemPropertyResponse_Result_Data;
struct GetSystemPropertyResponse_Result_DataDefaultTypeInternal;
extern GetSystemPropertyResponse_Result_DataDefaultTypeInternal _GetSystemPropertyResponse_Result_Data_default_instance_;
class ListArrayRequest;
struct ListArrayRequestDefaultTypeInternal;
extern ListArrayRequestDefaultTypeInternal _ListArrayRequest_default_instance_;
class ListArrayResponse;
struct ListArrayResponseDefaultTypeInternal;
extern ListArrayResponseDefaultTypeInternal _ListArrayResponse_default_instance_;
class ListArrayResponse_Result;
struct ListArrayResponse_ResultDefaultTypeInternal;
extern ListArrayResponse_ResultDefaultTypeInternal _ListArrayResponse_Result_default_instance_;
class ListArrayResponse_Result_ArrayList;
struct ListArrayResponse_Result_ArrayListDefaultTypeInternal;
extern ListArrayResponse_Result_ArrayListDefaultTypeInternal _ListArrayResponse_Result_ArrayList_default_instance_;
class MountArrayRequest;
struct MountArrayRequestDefaultTypeInternal;
extern MountArrayRequestDefaultTypeInternal _MountArrayRequest_default_instance_;
class MountArrayRequest_Param;
struct MountArrayRequest_ParamDefaultTypeInternal;
extern MountArrayRequest_ParamDefaultTypeInternal _MountArrayRequest_Param_default_instance_;
class MountArrayResponse;
struct MountArrayResponseDefaultTypeInternal;
extern MountArrayResponseDefaultTypeInternal _MountArrayResponse_default_instance_;
class MountArrayResponse_Result;
struct MountArrayResponse_ResultDefaultTypeInternal;
extern MountArrayResponse_ResultDefaultTypeInternal _MountArrayResponse_Result_default_instance_;
class PosInfo;
struct PosInfoDefaultTypeInternal;
extern PosInfoDefaultTypeInternal _PosInfo_default_instance_;
class RemoveSpareRequest;
struct RemoveSpareRequestDefaultTypeInternal;
extern RemoveSpareRequestDefaultTypeInternal _RemoveSpareRequest_default_instance_;
class RemoveSpareRequest_Param;
struct RemoveSpareRequest_ParamDefaultTypeInternal;
extern RemoveSpareRequest_ParamDefaultTypeInternal _RemoveSpareRequest_Param_default_instance_;
class RemoveSpareRequest_SpareDeviceName;
struct RemoveSpareRequest_SpareDeviceNameDefaultTypeInternal;
extern RemoveSpareRequest_SpareDeviceNameDefaultTypeInternal _RemoveSpareRequest_SpareDeviceName_default_instance_;
class RemoveSpareResponse;
struct RemoveSpareResponseDefaultTypeInternal;
extern RemoveSpareResponseDefaultTypeInternal _RemoveSpareResponse_default_instance_;
class RemoveSpareResponse_Result;
struct RemoveSpareResponse_ResultDefaultTypeInternal;
extern RemoveSpareResponse_ResultDefaultTypeInternal _RemoveSpareResponse_Result_default_instance_;
class ResetEventWrrRequest;
struct ResetEventWrrRequestDefaultTypeInternal;
extern ResetEventWrrRequestDefaultTypeInternal _ResetEventWrrRequest_default_instance_;
class ResetEventWrrResponse;
struct ResetEventWrrResponseDefaultTypeInternal;
extern ResetEventWrrResponseDefaultTypeInternal _ResetEventWrrResponse_default_instance_;
class ResetEventWrrResponse_Result;
struct ResetEventWrrResponse_ResultDefaultTypeInternal;
extern ResetEventWrrResponse_ResultDefaultTypeInternal _ResetEventWrrResponse_Result_default_instance_;
class ResetMbrRequest;
struct ResetMbrRequestDefaultTypeInternal;
extern ResetMbrRequestDefaultTypeInternal _ResetMbrRequest_default_instance_;
class ResetMbrResponse;
struct ResetMbrResponseDefaultTypeInternal;
extern ResetMbrResponseDefaultTypeInternal _ResetMbrResponse_default_instance_;
class ResetMbrResponse_Result;
struct ResetMbrResponse_ResultDefaultTypeInternal;
extern ResetMbrResponse_ResultDefaultTypeInternal _ResetMbrResponse_Result_default_instance_;
class SetSystemPropertyRequest;
struct SetSystemPropertyRequestDefaultTypeInternal;
extern SetSystemPropertyRequestDefaultTypeInternal _SetSystemPropertyRequest_default_instance_;
class SetSystemPropertyRequest_Param;
struct SetSystemPropertyRequest_ParamDefaultTypeInternal;
extern SetSystemPropertyRequest_ParamDefaultTypeInternal _SetSystemPropertyRequest_Param_default_instance_;
class SetSystemPropertyResponse;
struct SetSystemPropertyResponseDefaultTypeInternal;
extern SetSystemPropertyResponseDefaultTypeInternal _SetSystemPropertyResponse_default_instance_;
class SetSystemPropertyResponse_Result;
struct SetSystemPropertyResponse_ResultDefaultTypeInternal;
extern SetSystemPropertyResponse_ResultDefaultTypeInternal _SetSystemPropertyResponse_Result_default_instance_;
class StartTelemetryRequest;
struct StartTelemetryRequestDefaultTypeInternal;
extern StartTelemetryRequestDefaultTypeInternal _StartTelemetryRequest_default_instance_;
class StartTelemetryResponse;
struct StartTelemetryResponseDefaultTypeInternal;
extern StartTelemetryResponseDefaultTypeInternal _StartTelemetryResponse_default_instance_;
class StartTelemetryResponse_Result;
struct StartTelemetryResponse_ResultDefaultTypeInternal;
extern StartTelemetryResponse_ResultDefaultTypeInternal _StartTelemetryResponse_Result_default_instance_;
class Status;
struct StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
class StopRebuildingRequest;
struct StopRebuildingRequestDefaultTypeInternal;
extern StopRebuildingRequestDefaultTypeInternal _StopRebuildingRequest_default_instance_;
class StopRebuildingRequest_Param;
struct StopRebuildingRequest_ParamDefaultTypeInternal;
extern StopRebuildingRequest_ParamDefaultTypeInternal _StopRebuildingRequest_Param_default_instance_;
class StopRebuildingResponse;
struct StopRebuildingResponseDefaultTypeInternal;
extern StopRebuildingResponseDefaultTypeInternal _StopRebuildingResponse_default_instance_;
class StopRebuildingResponse_Result;
struct StopRebuildingResponse_ResultDefaultTypeInternal;
extern StopRebuildingResponse_ResultDefaultTypeInternal _StopRebuildingResponse_Result_default_instance_;
class StopTelemetryRequest;
struct StopTelemetryRequestDefaultTypeInternal;
extern StopTelemetryRequestDefaultTypeInternal _StopTelemetryRequest_default_instance_;
class StopTelemetryResponse;
struct StopTelemetryResponseDefaultTypeInternal;
extern StopTelemetryResponseDefaultTypeInternal _StopTelemetryResponse_default_instance_;
class StopTelemetryResponse_Result;
struct StopTelemetryResponse_ResultDefaultTypeInternal;
extern StopTelemetryResponse_ResultDefaultTypeInternal _StopTelemetryResponse_Result_default_instance_;
class SystemInfoRequest;
struct SystemInfoRequestDefaultTypeInternal;
extern SystemInfoRequestDefaultTypeInternal _SystemInfoRequest_default_instance_;
class SystemInfoResponse;
struct SystemInfoResponseDefaultTypeInternal;
extern SystemInfoResponseDefaultTypeInternal _SystemInfoResponse_default_instance_;
class SystemInfoResponse_Result;
struct SystemInfoResponse_ResultDefaultTypeInternal;
extern SystemInfoResponse_ResultDefaultTypeInternal _SystemInfoResponse_Result_default_instance_;
class SystemInfoResponse_Result_Data;
struct SystemInfoResponse_Result_DataDefaultTypeInternal;
extern SystemInfoResponse_Result_DataDefaultTypeInternal _SystemInfoResponse_Result_Data_default_instance_;
class SystemStopRequest;
struct SystemStopRequestDefaultTypeInternal;
extern SystemStopRequestDefaultTypeInternal _SystemStopRequest_default_instance_;
class SystemStopResponse;
struct SystemStopResponseDefaultTypeInternal;
extern SystemStopResponseDefaultTypeInternal _SystemStopResponse_default_instance_;
class SystemStopResponse_Result;
struct SystemStopResponse_ResultDefaultTypeInternal;
extern SystemStopResponse_ResultDefaultTypeInternal _SystemStopResponse_Result_default_instance_;
class UnmountArrayRequest;
struct UnmountArrayRequestDefaultTypeInternal;
extern UnmountArrayRequestDefaultTypeInternal _UnmountArrayRequest_default_instance_;
class UnmountArrayRequest_Param;
struct UnmountArrayRequest_ParamDefaultTypeInternal;
extern UnmountArrayRequest_ParamDefaultTypeInternal _UnmountArrayRequest_Param_default_instance_;
class UnmountArrayResponse;
struct UnmountArrayResponseDefaultTypeInternal;
extern UnmountArrayResponseDefaultTypeInternal _UnmountArrayResponse_default_instance_;
class UnmountArrayResponse_Result;
struct UnmountArrayResponse_ResultDefaultTypeInternal;
extern UnmountArrayResponse_ResultDefaultTypeInternal _UnmountArrayResponse_Result_default_instance_;
class UpdateEventWrrRequest;
struct UpdateEventWrrRequestDefaultTypeInternal;
extern UpdateEventWrrRequestDefaultTypeInternal _UpdateEventWrrRequest_default_instance_;
class UpdateEventWrrRequest_Param;
struct UpdateEventWrrRequest_ParamDefaultTypeInternal;
extern UpdateEventWrrRequest_ParamDefaultTypeInternal _UpdateEventWrrRequest_Param_default_instance_;
class UpdateEventWrrResponse;
struct UpdateEventWrrResponseDefaultTypeInternal;
extern UpdateEventWrrResponseDefaultTypeInternal _UpdateEventWrrResponse_default_instance_;
class UpdateEventWrrResponse_Result;
struct UpdateEventWrrResponse_ResultDefaultTypeInternal;
extern UpdateEventWrrResponse_ResultDefaultTypeInternal _UpdateEventWrrResponse_Result_default_instance_;
}  // namespace grpc_cli
PROTOBUF_NAMESPACE_OPEN
template<> ::grpc_cli::AddSpareRequest* Arena::CreateMaybeMessage<::grpc_cli::AddSpareRequest>(Arena*);
template<> ::grpc_cli::AddSpareRequest_Param* Arena::CreateMaybeMessage<::grpc_cli::AddSpareRequest_Param>(Arena*);
template<> ::grpc_cli::AddSpareRequest_SpareDeviceName* Arena::CreateMaybeMessage<::grpc_cli::AddSpareRequest_SpareDeviceName>(Arena*);
template<> ::grpc_cli::AddSpareResponse* Arena::CreateMaybeMessage<::grpc_cli::AddSpareResponse>(Arena*);
template<> ::grpc_cli::AddSpareResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::AddSpareResponse_Result>(Arena*);
template<> ::grpc_cli::Array* Arena::CreateMaybeMessage<::grpc_cli::Array>(Arena*);
template<> ::grpc_cli::ArrayInfoRequest* Arena::CreateMaybeMessage<::grpc_cli::ArrayInfoRequest>(Arena*);
template<> ::grpc_cli::ArrayInfoRequest_Param* Arena::CreateMaybeMessage<::grpc_cli::ArrayInfoRequest_Param>(Arena*);
template<> ::grpc_cli::ArrayInfoResponse* Arena::CreateMaybeMessage<::grpc_cli::ArrayInfoResponse>(Arena*);
template<> ::grpc_cli::ArrayInfoResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::ArrayInfoResponse_Result>(Arena*);
template<> ::grpc_cli::CreateArrayRequest* Arena::CreateMaybeMessage<::grpc_cli::CreateArrayRequest>(Arena*);
template<> ::grpc_cli::CreateArrayRequest_Param* Arena::CreateMaybeMessage<::grpc_cli::CreateArrayRequest_Param>(Arena*);
template<> ::grpc_cli::CreateArrayResponse* Arena::CreateMaybeMessage<::grpc_cli::CreateArrayResponse>(Arena*);
template<> ::grpc_cli::CreateArrayResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::CreateArrayResponse_Result>(Arena*);
template<> ::grpc_cli::DeleteArrayRequest* Arena::CreateMaybeMessage<::grpc_cli::DeleteArrayRequest>(Arena*);
template<> ::grpc_cli::DeleteArrayRequest_Param* Arena::CreateMaybeMessage<::grpc_cli::DeleteArrayRequest_Param>(Arena*);
template<> ::grpc_cli::DeleteArrayResponse* Arena::CreateMaybeMessage<::grpc_cli::DeleteArrayResponse>(Arena*);
template<> ::grpc_cli::DeleteArrayResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::DeleteArrayResponse_Result>(Arena*);
template<> ::grpc_cli::Device* Arena::CreateMaybeMessage<::grpc_cli::Device>(Arena*);
template<> ::grpc_cli::DeviceNameList* Arena::CreateMaybeMessage<::grpc_cli::DeviceNameList>(Arena*);
template<> ::grpc_cli::GetSystemPropertyRequest* Arena::CreateMaybeMessage<::grpc_cli::GetSystemPropertyRequest>(Arena*);
template<> ::grpc_cli::GetSystemPropertyResponse* Arena::CreateMaybeMessage<::grpc_cli::GetSystemPropertyResponse>(Arena*);
template<> ::grpc_cli::GetSystemPropertyResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::GetSystemPropertyResponse_Result>(Arena*);
template<> ::grpc_cli::GetSystemPropertyResponse_Result_Data* Arena::CreateMaybeMessage<::grpc_cli::GetSystemPropertyResponse_Result_Data>(Arena*);
template<> ::grpc_cli::ListArrayRequest* Arena::CreateMaybeMessage<::grpc_cli::ListArrayRequest>(Arena*);
template<> ::grpc_cli::ListArrayResponse* Arena::CreateMaybeMessage<::grpc_cli::ListArrayResponse>(Arena*);
template<> ::grpc_cli::ListArrayResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::ListArrayResponse_Result>(Arena*);
template<> ::grpc_cli::ListArrayResponse_Result_ArrayList* Arena::CreateMaybeMessage<::grpc_cli::ListArrayResponse_Result_ArrayList>(Arena*);
template<> ::grpc_cli::MountArrayRequest* Arena::CreateMaybeMessage<::grpc_cli::MountArrayRequest>(Arena*);
template<> ::grpc_cli::MountArrayRequest_Param* Arena::CreateMaybeMessage<::grpc_cli::MountArrayRequest_Param>(Arena*);
template<> ::grpc_cli::MountArrayResponse* Arena::CreateMaybeMessage<::grpc_cli::MountArrayResponse>(Arena*);
template<> ::grpc_cli::MountArrayResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::MountArrayResponse_Result>(Arena*);
template<> ::grpc_cli::PosInfo* Arena::CreateMaybeMessage<::grpc_cli::PosInfo>(Arena*);
template<> ::grpc_cli::RemoveSpareRequest* Arena::CreateMaybeMessage<::grpc_cli::RemoveSpareRequest>(Arena*);
template<> ::grpc_cli::RemoveSpareRequest_Param* Arena::CreateMaybeMessage<::grpc_cli::RemoveSpareRequest_Param>(Arena*);
template<> ::grpc_cli::RemoveSpareRequest_SpareDeviceName* Arena::CreateMaybeMessage<::grpc_cli::RemoveSpareRequest_SpareDeviceName>(Arena*);
template<> ::grpc_cli::RemoveSpareResponse* Arena::CreateMaybeMessage<::grpc_cli::RemoveSpareResponse>(Arena*);
template<> ::grpc_cli::RemoveSpareResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::RemoveSpareResponse_Result>(Arena*);
template<> ::grpc_cli::ResetEventWrrRequest* Arena::CreateMaybeMessage<::grpc_cli::ResetEventWrrRequest>(Arena*);
template<> ::grpc_cli::ResetEventWrrResponse* Arena::CreateMaybeMessage<::grpc_cli::ResetEventWrrResponse>(Arena*);
template<> ::grpc_cli::ResetEventWrrResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::ResetEventWrrResponse_Result>(Arena*);
template<> ::grpc_cli::ResetMbrRequest* Arena::CreateMaybeMessage<::grpc_cli::ResetMbrRequest>(Arena*);
template<> ::grpc_cli::ResetMbrResponse* Arena::CreateMaybeMessage<::grpc_cli::ResetMbrResponse>(Arena*);
template<> ::grpc_cli::ResetMbrResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::ResetMbrResponse_Result>(Arena*);
template<> ::grpc_cli::SetSystemPropertyRequest* Arena::CreateMaybeMessage<::grpc_cli::SetSystemPropertyRequest>(Arena*);
template<> ::grpc_cli::SetSystemPropertyRequest_Param* Arena::CreateMaybeMessage<::grpc_cli::SetSystemPropertyRequest_Param>(Arena*);
template<> ::grpc_cli::SetSystemPropertyResponse* Arena::CreateMaybeMessage<::grpc_cli::SetSystemPropertyResponse>(Arena*);
template<> ::grpc_cli::SetSystemPropertyResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::SetSystemPropertyResponse_Result>(Arena*);
template<> ::grpc_cli::StartTelemetryRequest* Arena::CreateMaybeMessage<::grpc_cli::StartTelemetryRequest>(Arena*);
template<> ::grpc_cli::StartTelemetryResponse* Arena::CreateMaybeMessage<::grpc_cli::StartTelemetryResponse>(Arena*);
template<> ::grpc_cli::StartTelemetryResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::StartTelemetryResponse_Result>(Arena*);
template<> ::grpc_cli::Status* Arena::CreateMaybeMessage<::grpc_cli::Status>(Arena*);
template<> ::grpc_cli::StopRebuildingRequest* Arena::CreateMaybeMessage<::grpc_cli::StopRebuildingRequest>(Arena*);
template<> ::grpc_cli::StopRebuildingRequest_Param* Arena::CreateMaybeMessage<::grpc_cli::StopRebuildingRequest_Param>(Arena*);
template<> ::grpc_cli::StopRebuildingResponse* Arena::CreateMaybeMessage<::grpc_cli::StopRebuildingResponse>(Arena*);
template<> ::grpc_cli::StopRebuildingResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::StopRebuildingResponse_Result>(Arena*);
template<> ::grpc_cli::StopTelemetryRequest* Arena::CreateMaybeMessage<::grpc_cli::StopTelemetryRequest>(Arena*);
template<> ::grpc_cli::StopTelemetryResponse* Arena::CreateMaybeMessage<::grpc_cli::StopTelemetryResponse>(Arena*);
template<> ::grpc_cli::StopTelemetryResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::StopTelemetryResponse_Result>(Arena*);
template<> ::grpc_cli::SystemInfoRequest* Arena::CreateMaybeMessage<::grpc_cli::SystemInfoRequest>(Arena*);
template<> ::grpc_cli::SystemInfoResponse* Arena::CreateMaybeMessage<::grpc_cli::SystemInfoResponse>(Arena*);
template<> ::grpc_cli::SystemInfoResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::SystemInfoResponse_Result>(Arena*);
template<> ::grpc_cli::SystemInfoResponse_Result_Data* Arena::CreateMaybeMessage<::grpc_cli::SystemInfoResponse_Result_Data>(Arena*);
template<> ::grpc_cli::SystemStopRequest* Arena::CreateMaybeMessage<::grpc_cli::SystemStopRequest>(Arena*);
template<> ::grpc_cli::SystemStopResponse* Arena::CreateMaybeMessage<::grpc_cli::SystemStopResponse>(Arena*);
template<> ::grpc_cli::SystemStopResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::SystemStopResponse_Result>(Arena*);
template<> ::grpc_cli::UnmountArrayRequest* Arena::CreateMaybeMessage<::grpc_cli::UnmountArrayRequest>(Arena*);
template<> ::grpc_cli::UnmountArrayRequest_Param* Arena::CreateMaybeMessage<::grpc_cli::UnmountArrayRequest_Param>(Arena*);
template<> ::grpc_cli::UnmountArrayResponse* Arena::CreateMaybeMessage<::grpc_cli::UnmountArrayResponse>(Arena*);
template<> ::grpc_cli::UnmountArrayResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::UnmountArrayResponse_Result>(Arena*);
template<> ::grpc_cli::UpdateEventWrrRequest* Arena::CreateMaybeMessage<::grpc_cli::UpdateEventWrrRequest>(Arena*);
template<> ::grpc_cli::UpdateEventWrrRequest_Param* Arena::CreateMaybeMessage<::grpc_cli::UpdateEventWrrRequest_Param>(Arena*);
template<> ::grpc_cli::UpdateEventWrrResponse* Arena::CreateMaybeMessage<::grpc_cli::UpdateEventWrrResponse>(Arena*);
template<> ::grpc_cli::UpdateEventWrrResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::UpdateEventWrrResponse_Result>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpc_cli {

// ===================================================================

class Status PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.Status) */ {
 public:
  inline Status() : Status(nullptr) {}
  virtual ~Status();
  explicit constexpr Status(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Status(const Status& from);
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Status& default_instance() {
    return *internal_default_instance();
  }
  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }
  inline void Swap(Status* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Status* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Status* New() const final {
    return CreateMaybeMessage<Status>(nullptr);
  }

  Status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Status* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.Status";
  }
  protected:
  explicit Status(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kCauseFieldNumber = 4,
    kSolutionFieldNumber = 5,
    kCodeFieldNumber = 1,
  };
  // string event_name = 2;
  bool has_event_name() const;
  private:
  bool _internal_has_event_name() const;
  public:
  void clear_event_name();
  const std::string& event_name() const;
  void set_event_name(const std::string& value);
  void set_event_name(std::string&& value);
  void set_event_name(const char* value);
  void set_event_name(const char* value, size_t size);
  std::string* mutable_event_name();
  std::string* release_event_name();
  void set_allocated_event_name(std::string* event_name);
  private:
  const std::string& _internal_event_name() const;
  void _internal_set_event_name(const std::string& value);
  std::string* _internal_mutable_event_name();
  public:

  // string description = 3;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string cause = 4;
  bool has_cause() const;
  private:
  bool _internal_has_cause() const;
  public:
  void clear_cause();
  const std::string& cause() const;
  void set_cause(const std::string& value);
  void set_cause(std::string&& value);
  void set_cause(const char* value);
  void set_cause(const char* value, size_t size);
  std::string* mutable_cause();
  std::string* release_cause();
  void set_allocated_cause(std::string* cause);
  private:
  const std::string& _internal_cause() const;
  void _internal_set_cause(const std::string& value);
  std::string* _internal_mutable_cause();
  public:

  // string solution = 5;
  bool has_solution() const;
  private:
  bool _internal_has_solution() const;
  public:
  void clear_solution();
  const std::string& solution() const;
  void set_solution(const std::string& value);
  void set_solution(std::string&& value);
  void set_solution(const char* value);
  void set_solution(const char* value, size_t size);
  std::string* mutable_solution();
  std::string* release_solution();
  void set_allocated_solution(std::string* solution);
  private:
  const std::string& _internal_solution() const;
  void _internal_set_solution(const std::string& value);
  std::string* _internal_mutable_solution();
  public:

  // int32 code = 1;
  bool has_code() const;
  private:
  bool _internal_has_code() const;
  public:
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.Status)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cause_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr solution_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class PosInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.PosInfo) */ {
 public:
  inline PosInfo() : PosInfo(nullptr) {}
  virtual ~PosInfo();
  explicit constexpr PosInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PosInfo(const PosInfo& from);
  PosInfo(PosInfo&& from) noexcept
    : PosInfo() {
    *this = ::std::move(from);
  }

  inline PosInfo& operator=(const PosInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PosInfo& operator=(PosInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PosInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PosInfo* internal_default_instance() {
    return reinterpret_cast<const PosInfo*>(
               &_PosInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PosInfo& a, PosInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PosInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PosInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PosInfo* New() const final {
    return CreateMaybeMessage<PosInfo>(nullptr);
  }

  PosInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PosInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PosInfo& from);
  void MergeFrom(const PosInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PosInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.PosInfo";
  }
  protected:
  explicit PosInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.PosInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class SystemInfoRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.SystemInfoRequest) */ {
 public:
  inline SystemInfoRequest() : SystemInfoRequest(nullptr) {}
  virtual ~SystemInfoRequest();
  explicit constexpr SystemInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SystemInfoRequest(const SystemInfoRequest& from);
  SystemInfoRequest(SystemInfoRequest&& from) noexcept
    : SystemInfoRequest() {
    *this = ::std::move(from);
  }

  inline SystemInfoRequest& operator=(const SystemInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemInfoRequest& operator=(SystemInfoRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SystemInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SystemInfoRequest* internal_default_instance() {
    return reinterpret_cast<const SystemInfoRequest*>(
               &_SystemInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SystemInfoRequest& a, SystemInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemInfoRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemInfoRequest* New() const final {
    return CreateMaybeMessage<SystemInfoRequest>(nullptr);
  }

  SystemInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SystemInfoRequest& from);
  void MergeFrom(const SystemInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.SystemInfoRequest";
  }
  protected:
  explicit SystemInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.SystemInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class SystemInfoResponse_Result_Data PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.SystemInfoResponse.Result.Data) */ {
 public:
  inline SystemInfoResponse_Result_Data() : SystemInfoResponse_Result_Data(nullptr) {}
  virtual ~SystemInfoResponse_Result_Data();
  explicit constexpr SystemInfoResponse_Result_Data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SystemInfoResponse_Result_Data(const SystemInfoResponse_Result_Data& from);
  SystemInfoResponse_Result_Data(SystemInfoResponse_Result_Data&& from) noexcept
    : SystemInfoResponse_Result_Data() {
    *this = ::std::move(from);
  }

  inline SystemInfoResponse_Result_Data& operator=(const SystemInfoResponse_Result_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemInfoResponse_Result_Data& operator=(SystemInfoResponse_Result_Data&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SystemInfoResponse_Result_Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const SystemInfoResponse_Result_Data* internal_default_instance() {
    return reinterpret_cast<const SystemInfoResponse_Result_Data*>(
               &_SystemInfoResponse_Result_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SystemInfoResponse_Result_Data& a, SystemInfoResponse_Result_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemInfoResponse_Result_Data* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemInfoResponse_Result_Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemInfoResponse_Result_Data* New() const final {
    return CreateMaybeMessage<SystemInfoResponse_Result_Data>(nullptr);
  }

  SystemInfoResponse_Result_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemInfoResponse_Result_Data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SystemInfoResponse_Result_Data& from);
  void MergeFrom(const SystemInfoResponse_Result_Data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemInfoResponse_Result_Data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.SystemInfoResponse.Result.Data";
  }
  protected:
  explicit SystemInfoResponse_Result_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.SystemInfoResponse.Result.Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class SystemInfoResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.SystemInfoResponse.Result) */ {
 public:
  inline SystemInfoResponse_Result() : SystemInfoResponse_Result(nullptr) {}
  virtual ~SystemInfoResponse_Result();
  explicit constexpr SystemInfoResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SystemInfoResponse_Result(const SystemInfoResponse_Result& from);
  SystemInfoResponse_Result(SystemInfoResponse_Result&& from) noexcept
    : SystemInfoResponse_Result() {
    *this = ::std::move(from);
  }

  inline SystemInfoResponse_Result& operator=(const SystemInfoResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemInfoResponse_Result& operator=(SystemInfoResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SystemInfoResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const SystemInfoResponse_Result* internal_default_instance() {
    return reinterpret_cast<const SystemInfoResponse_Result*>(
               &_SystemInfoResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SystemInfoResponse_Result& a, SystemInfoResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemInfoResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemInfoResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemInfoResponse_Result* New() const final {
    return CreateMaybeMessage<SystemInfoResponse_Result>(nullptr);
  }

  SystemInfoResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemInfoResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SystemInfoResponse_Result& from);
  void MergeFrom(const SystemInfoResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemInfoResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.SystemInfoResponse.Result";
  }
  protected:
  explicit SystemInfoResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef SystemInfoResponse_Result_Data Data;

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // .grpc_cli.SystemInfoResponse.Result.Data data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::grpc_cli::SystemInfoResponse_Result_Data& data() const;
  ::grpc_cli::SystemInfoResponse_Result_Data* release_data();
  ::grpc_cli::SystemInfoResponse_Result_Data* mutable_data();
  void set_allocated_data(::grpc_cli::SystemInfoResponse_Result_Data* data);
  private:
  const ::grpc_cli::SystemInfoResponse_Result_Data& _internal_data() const;
  ::grpc_cli::SystemInfoResponse_Result_Data* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::grpc_cli::SystemInfoResponse_Result_Data* data);
  ::grpc_cli::SystemInfoResponse_Result_Data* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:grpc_cli.SystemInfoResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  ::grpc_cli::SystemInfoResponse_Result_Data* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class SystemInfoResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.SystemInfoResponse) */ {
 public:
  inline SystemInfoResponse() : SystemInfoResponse(nullptr) {}
  virtual ~SystemInfoResponse();
  explicit constexpr SystemInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SystemInfoResponse(const SystemInfoResponse& from);
  SystemInfoResponse(SystemInfoResponse&& from) noexcept
    : SystemInfoResponse() {
    *this = ::std::move(from);
  }

  inline SystemInfoResponse& operator=(const SystemInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemInfoResponse& operator=(SystemInfoResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SystemInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SystemInfoResponse* internal_default_instance() {
    return reinterpret_cast<const SystemInfoResponse*>(
               &_SystemInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SystemInfoResponse& a, SystemInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemInfoResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemInfoResponse* New() const final {
    return CreateMaybeMessage<SystemInfoResponse>(nullptr);
  }

  SystemInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SystemInfoResponse& from);
  void MergeFrom(const SystemInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.SystemInfoResponse";
  }
  protected:
  explicit SystemInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef SystemInfoResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.SystemInfoResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::SystemInfoResponse_Result& result() const;
  ::grpc_cli::SystemInfoResponse_Result* release_result();
  ::grpc_cli::SystemInfoResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::SystemInfoResponse_Result* result);
  private:
  const ::grpc_cli::SystemInfoResponse_Result& _internal_result() const;
  ::grpc_cli::SystemInfoResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::SystemInfoResponse_Result* result);
  ::grpc_cli::SystemInfoResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.SystemInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::SystemInfoResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class SystemStopRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.SystemStopRequest) */ {
 public:
  inline SystemStopRequest() : SystemStopRequest(nullptr) {}
  virtual ~SystemStopRequest();
  explicit constexpr SystemStopRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SystemStopRequest(const SystemStopRequest& from);
  SystemStopRequest(SystemStopRequest&& from) noexcept
    : SystemStopRequest() {
    *this = ::std::move(from);
  }

  inline SystemStopRequest& operator=(const SystemStopRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemStopRequest& operator=(SystemStopRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SystemStopRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SystemStopRequest* internal_default_instance() {
    return reinterpret_cast<const SystemStopRequest*>(
               &_SystemStopRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SystemStopRequest& a, SystemStopRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemStopRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemStopRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemStopRequest* New() const final {
    return CreateMaybeMessage<SystemStopRequest>(nullptr);
  }

  SystemStopRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemStopRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SystemStopRequest& from);
  void MergeFrom(const SystemStopRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemStopRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.SystemStopRequest";
  }
  protected:
  explicit SystemStopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.SystemStopRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class SystemStopResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.SystemStopResponse.Result) */ {
 public:
  inline SystemStopResponse_Result() : SystemStopResponse_Result(nullptr) {}
  virtual ~SystemStopResponse_Result();
  explicit constexpr SystemStopResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SystemStopResponse_Result(const SystemStopResponse_Result& from);
  SystemStopResponse_Result(SystemStopResponse_Result&& from) noexcept
    : SystemStopResponse_Result() {
    *this = ::std::move(from);
  }

  inline SystemStopResponse_Result& operator=(const SystemStopResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemStopResponse_Result& operator=(SystemStopResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SystemStopResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const SystemStopResponse_Result* internal_default_instance() {
    return reinterpret_cast<const SystemStopResponse_Result*>(
               &_SystemStopResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SystemStopResponse_Result& a, SystemStopResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemStopResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemStopResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemStopResponse_Result* New() const final {
    return CreateMaybeMessage<SystemStopResponse_Result>(nullptr);
  }

  SystemStopResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemStopResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SystemStopResponse_Result& from);
  void MergeFrom(const SystemStopResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemStopResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.SystemStopResponse.Result";
  }
  protected:
  explicit SystemStopResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:grpc_cli.SystemStopResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class SystemStopResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.SystemStopResponse) */ {
 public:
  inline SystemStopResponse() : SystemStopResponse(nullptr) {}
  virtual ~SystemStopResponse();
  explicit constexpr SystemStopResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SystemStopResponse(const SystemStopResponse& from);
  SystemStopResponse(SystemStopResponse&& from) noexcept
    : SystemStopResponse() {
    *this = ::std::move(from);
  }

  inline SystemStopResponse& operator=(const SystemStopResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemStopResponse& operator=(SystemStopResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SystemStopResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SystemStopResponse* internal_default_instance() {
    return reinterpret_cast<const SystemStopResponse*>(
               &_SystemStopResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SystemStopResponse& a, SystemStopResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemStopResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemStopResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemStopResponse* New() const final {
    return CreateMaybeMessage<SystemStopResponse>(nullptr);
  }

  SystemStopResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemStopResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SystemStopResponse& from);
  void MergeFrom(const SystemStopResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemStopResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.SystemStopResponse";
  }
  protected:
  explicit SystemStopResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef SystemStopResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.SystemStopResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::SystemStopResponse_Result& result() const;
  ::grpc_cli::SystemStopResponse_Result* release_result();
  ::grpc_cli::SystemStopResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::SystemStopResponse_Result* result);
  private:
  const ::grpc_cli::SystemStopResponse_Result& _internal_result() const;
  ::grpc_cli::SystemStopResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::SystemStopResponse_Result* result);
  ::grpc_cli::SystemStopResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.SystemStopResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::SystemStopResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class GetSystemPropertyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.GetSystemPropertyRequest) */ {
 public:
  inline GetSystemPropertyRequest() : GetSystemPropertyRequest(nullptr) {}
  virtual ~GetSystemPropertyRequest();
  explicit constexpr GetSystemPropertyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSystemPropertyRequest(const GetSystemPropertyRequest& from);
  GetSystemPropertyRequest(GetSystemPropertyRequest&& from) noexcept
    : GetSystemPropertyRequest() {
    *this = ::std::move(from);
  }

  inline GetSystemPropertyRequest& operator=(const GetSystemPropertyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSystemPropertyRequest& operator=(GetSystemPropertyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSystemPropertyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSystemPropertyRequest* internal_default_instance() {
    return reinterpret_cast<const GetSystemPropertyRequest*>(
               &_GetSystemPropertyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetSystemPropertyRequest& a, GetSystemPropertyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSystemPropertyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSystemPropertyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSystemPropertyRequest* New() const final {
    return CreateMaybeMessage<GetSystemPropertyRequest>(nullptr);
  }

  GetSystemPropertyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSystemPropertyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSystemPropertyRequest& from);
  void MergeFrom(const GetSystemPropertyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSystemPropertyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.GetSystemPropertyRequest";
  }
  protected:
  explicit GetSystemPropertyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.GetSystemPropertyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class GetSystemPropertyResponse_Result_Data PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.GetSystemPropertyResponse.Result.Data) */ {
 public:
  inline GetSystemPropertyResponse_Result_Data() : GetSystemPropertyResponse_Result_Data(nullptr) {}
  virtual ~GetSystemPropertyResponse_Result_Data();
  explicit constexpr GetSystemPropertyResponse_Result_Data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSystemPropertyResponse_Result_Data(const GetSystemPropertyResponse_Result_Data& from);
  GetSystemPropertyResponse_Result_Data(GetSystemPropertyResponse_Result_Data&& from) noexcept
    : GetSystemPropertyResponse_Result_Data() {
    *this = ::std::move(from);
  }

  inline GetSystemPropertyResponse_Result_Data& operator=(const GetSystemPropertyResponse_Result_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSystemPropertyResponse_Result_Data& operator=(GetSystemPropertyResponse_Result_Data&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSystemPropertyResponse_Result_Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSystemPropertyResponse_Result_Data* internal_default_instance() {
    return reinterpret_cast<const GetSystemPropertyResponse_Result_Data*>(
               &_GetSystemPropertyResponse_Result_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetSystemPropertyResponse_Result_Data& a, GetSystemPropertyResponse_Result_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSystemPropertyResponse_Result_Data* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSystemPropertyResponse_Result_Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSystemPropertyResponse_Result_Data* New() const final {
    return CreateMaybeMessage<GetSystemPropertyResponse_Result_Data>(nullptr);
  }

  GetSystemPropertyResponse_Result_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSystemPropertyResponse_Result_Data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSystemPropertyResponse_Result_Data& from);
  void MergeFrom(const GetSystemPropertyResponse_Result_Data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSystemPropertyResponse_Result_Data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.GetSystemPropertyResponse.Result.Data";
  }
  protected:
  explicit GetSystemPropertyResponse_Result_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRebuildPolicyFieldNumber = 1,
  };
  // string rebuild_policy = 1;
  void clear_rebuild_policy();
  const std::string& rebuild_policy() const;
  void set_rebuild_policy(const std::string& value);
  void set_rebuild_policy(std::string&& value);
  void set_rebuild_policy(const char* value);
  void set_rebuild_policy(const char* value, size_t size);
  std::string* mutable_rebuild_policy();
  std::string* release_rebuild_policy();
  void set_allocated_rebuild_policy(std::string* rebuild_policy);
  private:
  const std::string& _internal_rebuild_policy() const;
  void _internal_set_rebuild_policy(const std::string& value);
  std::string* _internal_mutable_rebuild_policy();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.GetSystemPropertyResponse.Result.Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rebuild_policy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class GetSystemPropertyResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.GetSystemPropertyResponse.Result) */ {
 public:
  inline GetSystemPropertyResponse_Result() : GetSystemPropertyResponse_Result(nullptr) {}
  virtual ~GetSystemPropertyResponse_Result();
  explicit constexpr GetSystemPropertyResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSystemPropertyResponse_Result(const GetSystemPropertyResponse_Result& from);
  GetSystemPropertyResponse_Result(GetSystemPropertyResponse_Result&& from) noexcept
    : GetSystemPropertyResponse_Result() {
    *this = ::std::move(from);
  }

  inline GetSystemPropertyResponse_Result& operator=(const GetSystemPropertyResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSystemPropertyResponse_Result& operator=(GetSystemPropertyResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSystemPropertyResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSystemPropertyResponse_Result* internal_default_instance() {
    return reinterpret_cast<const GetSystemPropertyResponse_Result*>(
               &_GetSystemPropertyResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetSystemPropertyResponse_Result& a, GetSystemPropertyResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSystemPropertyResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSystemPropertyResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSystemPropertyResponse_Result* New() const final {
    return CreateMaybeMessage<GetSystemPropertyResponse_Result>(nullptr);
  }

  GetSystemPropertyResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSystemPropertyResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSystemPropertyResponse_Result& from);
  void MergeFrom(const GetSystemPropertyResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSystemPropertyResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.GetSystemPropertyResponse.Result";
  }
  protected:
  explicit GetSystemPropertyResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetSystemPropertyResponse_Result_Data Data;

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // .grpc_cli.GetSystemPropertyResponse.Result.Data data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::grpc_cli::GetSystemPropertyResponse_Result_Data& data() const;
  ::grpc_cli::GetSystemPropertyResponse_Result_Data* release_data();
  ::grpc_cli::GetSystemPropertyResponse_Result_Data* mutable_data();
  void set_allocated_data(::grpc_cli::GetSystemPropertyResponse_Result_Data* data);
  private:
  const ::grpc_cli::GetSystemPropertyResponse_Result_Data& _internal_data() const;
  ::grpc_cli::GetSystemPropertyResponse_Result_Data* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::grpc_cli::GetSystemPropertyResponse_Result_Data* data);
  ::grpc_cli::GetSystemPropertyResponse_Result_Data* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:grpc_cli.GetSystemPropertyResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  ::grpc_cli::GetSystemPropertyResponse_Result_Data* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class GetSystemPropertyResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.GetSystemPropertyResponse) */ {
 public:
  inline GetSystemPropertyResponse() : GetSystemPropertyResponse(nullptr) {}
  virtual ~GetSystemPropertyResponse();
  explicit constexpr GetSystemPropertyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSystemPropertyResponse(const GetSystemPropertyResponse& from);
  GetSystemPropertyResponse(GetSystemPropertyResponse&& from) noexcept
    : GetSystemPropertyResponse() {
    *this = ::std::move(from);
  }

  inline GetSystemPropertyResponse& operator=(const GetSystemPropertyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSystemPropertyResponse& operator=(GetSystemPropertyResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSystemPropertyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSystemPropertyResponse* internal_default_instance() {
    return reinterpret_cast<const GetSystemPropertyResponse*>(
               &_GetSystemPropertyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetSystemPropertyResponse& a, GetSystemPropertyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSystemPropertyResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSystemPropertyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSystemPropertyResponse* New() const final {
    return CreateMaybeMessage<GetSystemPropertyResponse>(nullptr);
  }

  GetSystemPropertyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSystemPropertyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSystemPropertyResponse& from);
  void MergeFrom(const GetSystemPropertyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSystemPropertyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.GetSystemPropertyResponse";
  }
  protected:
  explicit GetSystemPropertyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetSystemPropertyResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.GetSystemPropertyResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::GetSystemPropertyResponse_Result& result() const;
  ::grpc_cli::GetSystemPropertyResponse_Result* release_result();
  ::grpc_cli::GetSystemPropertyResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::GetSystemPropertyResponse_Result* result);
  private:
  const ::grpc_cli::GetSystemPropertyResponse_Result& _internal_result() const;
  ::grpc_cli::GetSystemPropertyResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::GetSystemPropertyResponse_Result* result);
  ::grpc_cli::GetSystemPropertyResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.GetSystemPropertyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::GetSystemPropertyResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class SetSystemPropertyRequest_Param PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.SetSystemPropertyRequest.Param) */ {
 public:
  inline SetSystemPropertyRequest_Param() : SetSystemPropertyRequest_Param(nullptr) {}
  virtual ~SetSystemPropertyRequest_Param();
  explicit constexpr SetSystemPropertyRequest_Param(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetSystemPropertyRequest_Param(const SetSystemPropertyRequest_Param& from);
  SetSystemPropertyRequest_Param(SetSystemPropertyRequest_Param&& from) noexcept
    : SetSystemPropertyRequest_Param() {
    *this = ::std::move(from);
  }

  inline SetSystemPropertyRequest_Param& operator=(const SetSystemPropertyRequest_Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetSystemPropertyRequest_Param& operator=(SetSystemPropertyRequest_Param&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetSystemPropertyRequest_Param& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetSystemPropertyRequest_Param* internal_default_instance() {
    return reinterpret_cast<const SetSystemPropertyRequest_Param*>(
               &_SetSystemPropertyRequest_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SetSystemPropertyRequest_Param& a, SetSystemPropertyRequest_Param& b) {
    a.Swap(&b);
  }
  inline void Swap(SetSystemPropertyRequest_Param* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetSystemPropertyRequest_Param* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetSystemPropertyRequest_Param* New() const final {
    return CreateMaybeMessage<SetSystemPropertyRequest_Param>(nullptr);
  }

  SetSystemPropertyRequest_Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetSystemPropertyRequest_Param>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetSystemPropertyRequest_Param& from);
  void MergeFrom(const SetSystemPropertyRequest_Param& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetSystemPropertyRequest_Param* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.SetSystemPropertyRequest.Param";
  }
  protected:
  explicit SetSystemPropertyRequest_Param(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLevelFieldNumber = 1,
  };
  // string level = 1;
  void clear_level();
  const std::string& level() const;
  void set_level(const std::string& value);
  void set_level(std::string&& value);
  void set_level(const char* value);
  void set_level(const char* value, size_t size);
  std::string* mutable_level();
  std::string* release_level();
  void set_allocated_level(std::string* level);
  private:
  const std::string& _internal_level() const;
  void _internal_set_level(const std::string& value);
  std::string* _internal_mutable_level();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.SetSystemPropertyRequest.Param)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class SetSystemPropertyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.SetSystemPropertyRequest) */ {
 public:
  inline SetSystemPropertyRequest() : SetSystemPropertyRequest(nullptr) {}
  virtual ~SetSystemPropertyRequest();
  explicit constexpr SetSystemPropertyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetSystemPropertyRequest(const SetSystemPropertyRequest& from);
  SetSystemPropertyRequest(SetSystemPropertyRequest&& from) noexcept
    : SetSystemPropertyRequest() {
    *this = ::std::move(from);
  }

  inline SetSystemPropertyRequest& operator=(const SetSystemPropertyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetSystemPropertyRequest& operator=(SetSystemPropertyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetSystemPropertyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetSystemPropertyRequest* internal_default_instance() {
    return reinterpret_cast<const SetSystemPropertyRequest*>(
               &_SetSystemPropertyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SetSystemPropertyRequest& a, SetSystemPropertyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetSystemPropertyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetSystemPropertyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetSystemPropertyRequest* New() const final {
    return CreateMaybeMessage<SetSystemPropertyRequest>(nullptr);
  }

  SetSystemPropertyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetSystemPropertyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetSystemPropertyRequest& from);
  void MergeFrom(const SetSystemPropertyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetSystemPropertyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.SetSystemPropertyRequest";
  }
  protected:
  explicit SetSystemPropertyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef SetSystemPropertyRequest_Param Param;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
    kParamFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // .grpc_cli.SetSystemPropertyRequest.Param param = 4;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::grpc_cli::SetSystemPropertyRequest_Param& param() const;
  ::grpc_cli::SetSystemPropertyRequest_Param* release_param();
  ::grpc_cli::SetSystemPropertyRequest_Param* mutable_param();
  void set_allocated_param(::grpc_cli::SetSystemPropertyRequest_Param* param);
  private:
  const ::grpc_cli::SetSystemPropertyRequest_Param& _internal_param() const;
  ::grpc_cli::SetSystemPropertyRequest_Param* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::grpc_cli::SetSystemPropertyRequest_Param* param);
  ::grpc_cli::SetSystemPropertyRequest_Param* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:grpc_cli.SetSystemPropertyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  ::grpc_cli::SetSystemPropertyRequest_Param* param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class SetSystemPropertyResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.SetSystemPropertyResponse.Result) */ {
 public:
  inline SetSystemPropertyResponse_Result() : SetSystemPropertyResponse_Result(nullptr) {}
  virtual ~SetSystemPropertyResponse_Result();
  explicit constexpr SetSystemPropertyResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetSystemPropertyResponse_Result(const SetSystemPropertyResponse_Result& from);
  SetSystemPropertyResponse_Result(SetSystemPropertyResponse_Result&& from) noexcept
    : SetSystemPropertyResponse_Result() {
    *this = ::std::move(from);
  }

  inline SetSystemPropertyResponse_Result& operator=(const SetSystemPropertyResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetSystemPropertyResponse_Result& operator=(SetSystemPropertyResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetSystemPropertyResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetSystemPropertyResponse_Result* internal_default_instance() {
    return reinterpret_cast<const SetSystemPropertyResponse_Result*>(
               &_SetSystemPropertyResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SetSystemPropertyResponse_Result& a, SetSystemPropertyResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(SetSystemPropertyResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetSystemPropertyResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetSystemPropertyResponse_Result* New() const final {
    return CreateMaybeMessage<SetSystemPropertyResponse_Result>(nullptr);
  }

  SetSystemPropertyResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetSystemPropertyResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetSystemPropertyResponse_Result& from);
  void MergeFrom(const SetSystemPropertyResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetSystemPropertyResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.SetSystemPropertyResponse.Result";
  }
  protected:
  explicit SetSystemPropertyResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:grpc_cli.SetSystemPropertyResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class SetSystemPropertyResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.SetSystemPropertyResponse) */ {
 public:
  inline SetSystemPropertyResponse() : SetSystemPropertyResponse(nullptr) {}
  virtual ~SetSystemPropertyResponse();
  explicit constexpr SetSystemPropertyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetSystemPropertyResponse(const SetSystemPropertyResponse& from);
  SetSystemPropertyResponse(SetSystemPropertyResponse&& from) noexcept
    : SetSystemPropertyResponse() {
    *this = ::std::move(from);
  }

  inline SetSystemPropertyResponse& operator=(const SetSystemPropertyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetSystemPropertyResponse& operator=(SetSystemPropertyResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetSystemPropertyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetSystemPropertyResponse* internal_default_instance() {
    return reinterpret_cast<const SetSystemPropertyResponse*>(
               &_SetSystemPropertyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SetSystemPropertyResponse& a, SetSystemPropertyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetSystemPropertyResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetSystemPropertyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetSystemPropertyResponse* New() const final {
    return CreateMaybeMessage<SetSystemPropertyResponse>(nullptr);
  }

  SetSystemPropertyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetSystemPropertyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetSystemPropertyResponse& from);
  void MergeFrom(const SetSystemPropertyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetSystemPropertyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.SetSystemPropertyResponse";
  }
  protected:
  explicit SetSystemPropertyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef SetSystemPropertyResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.SetSystemPropertyResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::SetSystemPropertyResponse_Result& result() const;
  ::grpc_cli::SetSystemPropertyResponse_Result* release_result();
  ::grpc_cli::SetSystemPropertyResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::SetSystemPropertyResponse_Result* result);
  private:
  const ::grpc_cli::SetSystemPropertyResponse_Result& _internal_result() const;
  ::grpc_cli::SetSystemPropertyResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::SetSystemPropertyResponse_Result* result);
  ::grpc_cli::SetSystemPropertyResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.SetSystemPropertyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::SetSystemPropertyResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class StartTelemetryRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.StartTelemetryRequest) */ {
 public:
  inline StartTelemetryRequest() : StartTelemetryRequest(nullptr) {}
  virtual ~StartTelemetryRequest();
  explicit constexpr StartTelemetryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartTelemetryRequest(const StartTelemetryRequest& from);
  StartTelemetryRequest(StartTelemetryRequest&& from) noexcept
    : StartTelemetryRequest() {
    *this = ::std::move(from);
  }

  inline StartTelemetryRequest& operator=(const StartTelemetryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartTelemetryRequest& operator=(StartTelemetryRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartTelemetryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartTelemetryRequest* internal_default_instance() {
    return reinterpret_cast<const StartTelemetryRequest*>(
               &_StartTelemetryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(StartTelemetryRequest& a, StartTelemetryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartTelemetryRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartTelemetryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartTelemetryRequest* New() const final {
    return CreateMaybeMessage<StartTelemetryRequest>(nullptr);
  }

  StartTelemetryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartTelemetryRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartTelemetryRequest& from);
  void MergeFrom(const StartTelemetryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartTelemetryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.StartTelemetryRequest";
  }
  protected:
  explicit StartTelemetryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.StartTelemetryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class StartTelemetryResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.StartTelemetryResponse.Result) */ {
 public:
  inline StartTelemetryResponse_Result() : StartTelemetryResponse_Result(nullptr) {}
  virtual ~StartTelemetryResponse_Result();
  explicit constexpr StartTelemetryResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartTelemetryResponse_Result(const StartTelemetryResponse_Result& from);
  StartTelemetryResponse_Result(StartTelemetryResponse_Result&& from) noexcept
    : StartTelemetryResponse_Result() {
    *this = ::std::move(from);
  }

  inline StartTelemetryResponse_Result& operator=(const StartTelemetryResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartTelemetryResponse_Result& operator=(StartTelemetryResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartTelemetryResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartTelemetryResponse_Result* internal_default_instance() {
    return reinterpret_cast<const StartTelemetryResponse_Result*>(
               &_StartTelemetryResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(StartTelemetryResponse_Result& a, StartTelemetryResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(StartTelemetryResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartTelemetryResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartTelemetryResponse_Result* New() const final {
    return CreateMaybeMessage<StartTelemetryResponse_Result>(nullptr);
  }

  StartTelemetryResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartTelemetryResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartTelemetryResponse_Result& from);
  void MergeFrom(const StartTelemetryResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartTelemetryResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.StartTelemetryResponse.Result";
  }
  protected:
  explicit StartTelemetryResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:grpc_cli.StartTelemetryResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class StartTelemetryResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.StartTelemetryResponse) */ {
 public:
  inline StartTelemetryResponse() : StartTelemetryResponse(nullptr) {}
  virtual ~StartTelemetryResponse();
  explicit constexpr StartTelemetryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartTelemetryResponse(const StartTelemetryResponse& from);
  StartTelemetryResponse(StartTelemetryResponse&& from) noexcept
    : StartTelemetryResponse() {
    *this = ::std::move(from);
  }

  inline StartTelemetryResponse& operator=(const StartTelemetryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartTelemetryResponse& operator=(StartTelemetryResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartTelemetryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartTelemetryResponse* internal_default_instance() {
    return reinterpret_cast<const StartTelemetryResponse*>(
               &_StartTelemetryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(StartTelemetryResponse& a, StartTelemetryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StartTelemetryResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartTelemetryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartTelemetryResponse* New() const final {
    return CreateMaybeMessage<StartTelemetryResponse>(nullptr);
  }

  StartTelemetryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartTelemetryResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartTelemetryResponse& from);
  void MergeFrom(const StartTelemetryResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartTelemetryResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.StartTelemetryResponse";
  }
  protected:
  explicit StartTelemetryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef StartTelemetryResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.StartTelemetryResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::StartTelemetryResponse_Result& result() const;
  ::grpc_cli::StartTelemetryResponse_Result* release_result();
  ::grpc_cli::StartTelemetryResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::StartTelemetryResponse_Result* result);
  private:
  const ::grpc_cli::StartTelemetryResponse_Result& _internal_result() const;
  ::grpc_cli::StartTelemetryResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::StartTelemetryResponse_Result* result);
  ::grpc_cli::StartTelemetryResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.StartTelemetryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::StartTelemetryResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class StopTelemetryRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.StopTelemetryRequest) */ {
 public:
  inline StopTelemetryRequest() : StopTelemetryRequest(nullptr) {}
  virtual ~StopTelemetryRequest();
  explicit constexpr StopTelemetryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopTelemetryRequest(const StopTelemetryRequest& from);
  StopTelemetryRequest(StopTelemetryRequest&& from) noexcept
    : StopTelemetryRequest() {
    *this = ::std::move(from);
  }

  inline StopTelemetryRequest& operator=(const StopTelemetryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopTelemetryRequest& operator=(StopTelemetryRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopTelemetryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopTelemetryRequest* internal_default_instance() {
    return reinterpret_cast<const StopTelemetryRequest*>(
               &_StopTelemetryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(StopTelemetryRequest& a, StopTelemetryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StopTelemetryRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopTelemetryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopTelemetryRequest* New() const final {
    return CreateMaybeMessage<StopTelemetryRequest>(nullptr);
  }

  StopTelemetryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopTelemetryRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopTelemetryRequest& from);
  void MergeFrom(const StopTelemetryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopTelemetryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.StopTelemetryRequest";
  }
  protected:
  explicit StopTelemetryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.StopTelemetryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class StopTelemetryResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.StopTelemetryResponse.Result) */ {
 public:
  inline StopTelemetryResponse_Result() : StopTelemetryResponse_Result(nullptr) {}
  virtual ~StopTelemetryResponse_Result();
  explicit constexpr StopTelemetryResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopTelemetryResponse_Result(const StopTelemetryResponse_Result& from);
  StopTelemetryResponse_Result(StopTelemetryResponse_Result&& from) noexcept
    : StopTelemetryResponse_Result() {
    *this = ::std::move(from);
  }

  inline StopTelemetryResponse_Result& operator=(const StopTelemetryResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopTelemetryResponse_Result& operator=(StopTelemetryResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopTelemetryResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopTelemetryResponse_Result* internal_default_instance() {
    return reinterpret_cast<const StopTelemetryResponse_Result*>(
               &_StopTelemetryResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(StopTelemetryResponse_Result& a, StopTelemetryResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(StopTelemetryResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopTelemetryResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopTelemetryResponse_Result* New() const final {
    return CreateMaybeMessage<StopTelemetryResponse_Result>(nullptr);
  }

  StopTelemetryResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopTelemetryResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopTelemetryResponse_Result& from);
  void MergeFrom(const StopTelemetryResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopTelemetryResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.StopTelemetryResponse.Result";
  }
  protected:
  explicit StopTelemetryResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:grpc_cli.StopTelemetryResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class StopTelemetryResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.StopTelemetryResponse) */ {
 public:
  inline StopTelemetryResponse() : StopTelemetryResponse(nullptr) {}
  virtual ~StopTelemetryResponse();
  explicit constexpr StopTelemetryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopTelemetryResponse(const StopTelemetryResponse& from);
  StopTelemetryResponse(StopTelemetryResponse&& from) noexcept
    : StopTelemetryResponse() {
    *this = ::std::move(from);
  }

  inline StopTelemetryResponse& operator=(const StopTelemetryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopTelemetryResponse& operator=(StopTelemetryResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopTelemetryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopTelemetryResponse* internal_default_instance() {
    return reinterpret_cast<const StopTelemetryResponse*>(
               &_StopTelemetryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(StopTelemetryResponse& a, StopTelemetryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StopTelemetryResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopTelemetryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopTelemetryResponse* New() const final {
    return CreateMaybeMessage<StopTelemetryResponse>(nullptr);
  }

  StopTelemetryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopTelemetryResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopTelemetryResponse& from);
  void MergeFrom(const StopTelemetryResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopTelemetryResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.StopTelemetryResponse";
  }
  protected:
  explicit StopTelemetryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef StopTelemetryResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.StopTelemetryResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::StopTelemetryResponse_Result& result() const;
  ::grpc_cli::StopTelemetryResponse_Result* release_result();
  ::grpc_cli::StopTelemetryResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::StopTelemetryResponse_Result* result);
  private:
  const ::grpc_cli::StopTelemetryResponse_Result& _internal_result() const;
  ::grpc_cli::StopTelemetryResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::StopTelemetryResponse_Result* result);
  ::grpc_cli::StopTelemetryResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.StopTelemetryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::StopTelemetryResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ResetEventWrrRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ResetEventWrrRequest) */ {
 public:
  inline ResetEventWrrRequest() : ResetEventWrrRequest(nullptr) {}
  virtual ~ResetEventWrrRequest();
  explicit constexpr ResetEventWrrRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResetEventWrrRequest(const ResetEventWrrRequest& from);
  ResetEventWrrRequest(ResetEventWrrRequest&& from) noexcept
    : ResetEventWrrRequest() {
    *this = ::std::move(from);
  }

  inline ResetEventWrrRequest& operator=(const ResetEventWrrRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResetEventWrrRequest& operator=(ResetEventWrrRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResetEventWrrRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResetEventWrrRequest* internal_default_instance() {
    return reinterpret_cast<const ResetEventWrrRequest*>(
               &_ResetEventWrrRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ResetEventWrrRequest& a, ResetEventWrrRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ResetEventWrrRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResetEventWrrRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResetEventWrrRequest* New() const final {
    return CreateMaybeMessage<ResetEventWrrRequest>(nullptr);
  }

  ResetEventWrrRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResetEventWrrRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResetEventWrrRequest& from);
  void MergeFrom(const ResetEventWrrRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetEventWrrRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ResetEventWrrRequest";
  }
  protected:
  explicit ResetEventWrrRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.ResetEventWrrRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ResetEventWrrResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ResetEventWrrResponse.Result) */ {
 public:
  inline ResetEventWrrResponse_Result() : ResetEventWrrResponse_Result(nullptr) {}
  virtual ~ResetEventWrrResponse_Result();
  explicit constexpr ResetEventWrrResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResetEventWrrResponse_Result(const ResetEventWrrResponse_Result& from);
  ResetEventWrrResponse_Result(ResetEventWrrResponse_Result&& from) noexcept
    : ResetEventWrrResponse_Result() {
    *this = ::std::move(from);
  }

  inline ResetEventWrrResponse_Result& operator=(const ResetEventWrrResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResetEventWrrResponse_Result& operator=(ResetEventWrrResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResetEventWrrResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResetEventWrrResponse_Result* internal_default_instance() {
    return reinterpret_cast<const ResetEventWrrResponse_Result*>(
               &_ResetEventWrrResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ResetEventWrrResponse_Result& a, ResetEventWrrResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(ResetEventWrrResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResetEventWrrResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResetEventWrrResponse_Result* New() const final {
    return CreateMaybeMessage<ResetEventWrrResponse_Result>(nullptr);
  }

  ResetEventWrrResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResetEventWrrResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResetEventWrrResponse_Result& from);
  void MergeFrom(const ResetEventWrrResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetEventWrrResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ResetEventWrrResponse.Result";
  }
  protected:
  explicit ResetEventWrrResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:grpc_cli.ResetEventWrrResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ResetEventWrrResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ResetEventWrrResponse) */ {
 public:
  inline ResetEventWrrResponse() : ResetEventWrrResponse(nullptr) {}
  virtual ~ResetEventWrrResponse();
  explicit constexpr ResetEventWrrResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResetEventWrrResponse(const ResetEventWrrResponse& from);
  ResetEventWrrResponse(ResetEventWrrResponse&& from) noexcept
    : ResetEventWrrResponse() {
    *this = ::std::move(from);
  }

  inline ResetEventWrrResponse& operator=(const ResetEventWrrResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResetEventWrrResponse& operator=(ResetEventWrrResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResetEventWrrResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResetEventWrrResponse* internal_default_instance() {
    return reinterpret_cast<const ResetEventWrrResponse*>(
               &_ResetEventWrrResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(ResetEventWrrResponse& a, ResetEventWrrResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ResetEventWrrResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResetEventWrrResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResetEventWrrResponse* New() const final {
    return CreateMaybeMessage<ResetEventWrrResponse>(nullptr);
  }

  ResetEventWrrResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResetEventWrrResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResetEventWrrResponse& from);
  void MergeFrom(const ResetEventWrrResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetEventWrrResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ResetEventWrrResponse";
  }
  protected:
  explicit ResetEventWrrResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ResetEventWrrResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.ResetEventWrrResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::ResetEventWrrResponse_Result& result() const;
  ::grpc_cli::ResetEventWrrResponse_Result* release_result();
  ::grpc_cli::ResetEventWrrResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::ResetEventWrrResponse_Result* result);
  private:
  const ::grpc_cli::ResetEventWrrResponse_Result& _internal_result() const;
  ::grpc_cli::ResetEventWrrResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::ResetEventWrrResponse_Result* result);
  ::grpc_cli::ResetEventWrrResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.ResetEventWrrResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::ResetEventWrrResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ResetMbrRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ResetMbrRequest) */ {
 public:
  inline ResetMbrRequest() : ResetMbrRequest(nullptr) {}
  virtual ~ResetMbrRequest();
  explicit constexpr ResetMbrRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResetMbrRequest(const ResetMbrRequest& from);
  ResetMbrRequest(ResetMbrRequest&& from) noexcept
    : ResetMbrRequest() {
    *this = ::std::move(from);
  }

  inline ResetMbrRequest& operator=(const ResetMbrRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResetMbrRequest& operator=(ResetMbrRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResetMbrRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResetMbrRequest* internal_default_instance() {
    return reinterpret_cast<const ResetMbrRequest*>(
               &_ResetMbrRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(ResetMbrRequest& a, ResetMbrRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ResetMbrRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResetMbrRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResetMbrRequest* New() const final {
    return CreateMaybeMessage<ResetMbrRequest>(nullptr);
  }

  ResetMbrRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResetMbrRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResetMbrRequest& from);
  void MergeFrom(const ResetMbrRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetMbrRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ResetMbrRequest";
  }
  protected:
  explicit ResetMbrRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.ResetMbrRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ResetMbrResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ResetMbrResponse.Result) */ {
 public:
  inline ResetMbrResponse_Result() : ResetMbrResponse_Result(nullptr) {}
  virtual ~ResetMbrResponse_Result();
  explicit constexpr ResetMbrResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResetMbrResponse_Result(const ResetMbrResponse_Result& from);
  ResetMbrResponse_Result(ResetMbrResponse_Result&& from) noexcept
    : ResetMbrResponse_Result() {
    *this = ::std::move(from);
  }

  inline ResetMbrResponse_Result& operator=(const ResetMbrResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResetMbrResponse_Result& operator=(ResetMbrResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResetMbrResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResetMbrResponse_Result* internal_default_instance() {
    return reinterpret_cast<const ResetMbrResponse_Result*>(
               &_ResetMbrResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(ResetMbrResponse_Result& a, ResetMbrResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(ResetMbrResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResetMbrResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResetMbrResponse_Result* New() const final {
    return CreateMaybeMessage<ResetMbrResponse_Result>(nullptr);
  }

  ResetMbrResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResetMbrResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResetMbrResponse_Result& from);
  void MergeFrom(const ResetMbrResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetMbrResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ResetMbrResponse.Result";
  }
  protected:
  explicit ResetMbrResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:grpc_cli.ResetMbrResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ResetMbrResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ResetMbrResponse) */ {
 public:
  inline ResetMbrResponse() : ResetMbrResponse(nullptr) {}
  virtual ~ResetMbrResponse();
  explicit constexpr ResetMbrResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResetMbrResponse(const ResetMbrResponse& from);
  ResetMbrResponse(ResetMbrResponse&& from) noexcept
    : ResetMbrResponse() {
    *this = ::std::move(from);
  }

  inline ResetMbrResponse& operator=(const ResetMbrResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResetMbrResponse& operator=(ResetMbrResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResetMbrResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResetMbrResponse* internal_default_instance() {
    return reinterpret_cast<const ResetMbrResponse*>(
               &_ResetMbrResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(ResetMbrResponse& a, ResetMbrResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ResetMbrResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResetMbrResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResetMbrResponse* New() const final {
    return CreateMaybeMessage<ResetMbrResponse>(nullptr);
  }

  ResetMbrResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResetMbrResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResetMbrResponse& from);
  void MergeFrom(const ResetMbrResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetMbrResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ResetMbrResponse";
  }
  protected:
  explicit ResetMbrResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ResetMbrResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.ResetMbrResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::ResetMbrResponse_Result& result() const;
  ::grpc_cli::ResetMbrResponse_Result* release_result();
  ::grpc_cli::ResetMbrResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::ResetMbrResponse_Result* result);
  private:
  const ::grpc_cli::ResetMbrResponse_Result& _internal_result() const;
  ::grpc_cli::ResetMbrResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::ResetMbrResponse_Result* result);
  ::grpc_cli::ResetMbrResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.ResetMbrResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::ResetMbrResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class StopRebuildingRequest_Param PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.StopRebuildingRequest.Param) */ {
 public:
  inline StopRebuildingRequest_Param() : StopRebuildingRequest_Param(nullptr) {}
  virtual ~StopRebuildingRequest_Param();
  explicit constexpr StopRebuildingRequest_Param(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopRebuildingRequest_Param(const StopRebuildingRequest_Param& from);
  StopRebuildingRequest_Param(StopRebuildingRequest_Param&& from) noexcept
    : StopRebuildingRequest_Param() {
    *this = ::std::move(from);
  }

  inline StopRebuildingRequest_Param& operator=(const StopRebuildingRequest_Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopRebuildingRequest_Param& operator=(StopRebuildingRequest_Param&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopRebuildingRequest_Param& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopRebuildingRequest_Param* internal_default_instance() {
    return reinterpret_cast<const StopRebuildingRequest_Param*>(
               &_StopRebuildingRequest_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(StopRebuildingRequest_Param& a, StopRebuildingRequest_Param& b) {
    a.Swap(&b);
  }
  inline void Swap(StopRebuildingRequest_Param* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopRebuildingRequest_Param* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopRebuildingRequest_Param* New() const final {
    return CreateMaybeMessage<StopRebuildingRequest_Param>(nullptr);
  }

  StopRebuildingRequest_Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopRebuildingRequest_Param>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopRebuildingRequest_Param& from);
  void MergeFrom(const StopRebuildingRequest_Param& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopRebuildingRequest_Param* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.StopRebuildingRequest.Param";
  }
  protected:
  explicit StopRebuildingRequest_Param(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.StopRebuildingRequest.Param)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class StopRebuildingRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.StopRebuildingRequest) */ {
 public:
  inline StopRebuildingRequest() : StopRebuildingRequest(nullptr) {}
  virtual ~StopRebuildingRequest();
  explicit constexpr StopRebuildingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopRebuildingRequest(const StopRebuildingRequest& from);
  StopRebuildingRequest(StopRebuildingRequest&& from) noexcept
    : StopRebuildingRequest() {
    *this = ::std::move(from);
  }

  inline StopRebuildingRequest& operator=(const StopRebuildingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopRebuildingRequest& operator=(StopRebuildingRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopRebuildingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopRebuildingRequest* internal_default_instance() {
    return reinterpret_cast<const StopRebuildingRequest*>(
               &_StopRebuildingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(StopRebuildingRequest& a, StopRebuildingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StopRebuildingRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopRebuildingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopRebuildingRequest* New() const final {
    return CreateMaybeMessage<StopRebuildingRequest>(nullptr);
  }

  StopRebuildingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopRebuildingRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopRebuildingRequest& from);
  void MergeFrom(const StopRebuildingRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopRebuildingRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.StopRebuildingRequest";
  }
  protected:
  explicit StopRebuildingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef StopRebuildingRequest_Param Param;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
    kParamFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // .grpc_cli.StopRebuildingRequest.Param param = 4;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::grpc_cli::StopRebuildingRequest_Param& param() const;
  ::grpc_cli::StopRebuildingRequest_Param* release_param();
  ::grpc_cli::StopRebuildingRequest_Param* mutable_param();
  void set_allocated_param(::grpc_cli::StopRebuildingRequest_Param* param);
  private:
  const ::grpc_cli::StopRebuildingRequest_Param& _internal_param() const;
  ::grpc_cli::StopRebuildingRequest_Param* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::grpc_cli::StopRebuildingRequest_Param* param);
  ::grpc_cli::StopRebuildingRequest_Param* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:grpc_cli.StopRebuildingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  ::grpc_cli::StopRebuildingRequest_Param* param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class StopRebuildingResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.StopRebuildingResponse.Result) */ {
 public:
  inline StopRebuildingResponse_Result() : StopRebuildingResponse_Result(nullptr) {}
  virtual ~StopRebuildingResponse_Result();
  explicit constexpr StopRebuildingResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopRebuildingResponse_Result(const StopRebuildingResponse_Result& from);
  StopRebuildingResponse_Result(StopRebuildingResponse_Result&& from) noexcept
    : StopRebuildingResponse_Result() {
    *this = ::std::move(from);
  }

  inline StopRebuildingResponse_Result& operator=(const StopRebuildingResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopRebuildingResponse_Result& operator=(StopRebuildingResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopRebuildingResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopRebuildingResponse_Result* internal_default_instance() {
    return reinterpret_cast<const StopRebuildingResponse_Result*>(
               &_StopRebuildingResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(StopRebuildingResponse_Result& a, StopRebuildingResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(StopRebuildingResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopRebuildingResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopRebuildingResponse_Result* New() const final {
    return CreateMaybeMessage<StopRebuildingResponse_Result>(nullptr);
  }

  StopRebuildingResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopRebuildingResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopRebuildingResponse_Result& from);
  void MergeFrom(const StopRebuildingResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopRebuildingResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.StopRebuildingResponse.Result";
  }
  protected:
  explicit StopRebuildingResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:grpc_cli.StopRebuildingResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class StopRebuildingResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.StopRebuildingResponse) */ {
 public:
  inline StopRebuildingResponse() : StopRebuildingResponse(nullptr) {}
  virtual ~StopRebuildingResponse();
  explicit constexpr StopRebuildingResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopRebuildingResponse(const StopRebuildingResponse& from);
  StopRebuildingResponse(StopRebuildingResponse&& from) noexcept
    : StopRebuildingResponse() {
    *this = ::std::move(from);
  }

  inline StopRebuildingResponse& operator=(const StopRebuildingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopRebuildingResponse& operator=(StopRebuildingResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopRebuildingResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopRebuildingResponse* internal_default_instance() {
    return reinterpret_cast<const StopRebuildingResponse*>(
               &_StopRebuildingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(StopRebuildingResponse& a, StopRebuildingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StopRebuildingResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopRebuildingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopRebuildingResponse* New() const final {
    return CreateMaybeMessage<StopRebuildingResponse>(nullptr);
  }

  StopRebuildingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopRebuildingResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopRebuildingResponse& from);
  void MergeFrom(const StopRebuildingResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopRebuildingResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.StopRebuildingResponse";
  }
  protected:
  explicit StopRebuildingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef StopRebuildingResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.StopRebuildingResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::StopRebuildingResponse_Result& result() const;
  ::grpc_cli::StopRebuildingResponse_Result* release_result();
  ::grpc_cli::StopRebuildingResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::StopRebuildingResponse_Result* result);
  private:
  const ::grpc_cli::StopRebuildingResponse_Result& _internal_result() const;
  ::grpc_cli::StopRebuildingResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::StopRebuildingResponse_Result* result);
  ::grpc_cli::StopRebuildingResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.StopRebuildingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::StopRebuildingResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class UpdateEventWrrRequest_Param PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.UpdateEventWrrRequest.Param) */ {
 public:
  inline UpdateEventWrrRequest_Param() : UpdateEventWrrRequest_Param(nullptr) {}
  virtual ~UpdateEventWrrRequest_Param();
  explicit constexpr UpdateEventWrrRequest_Param(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateEventWrrRequest_Param(const UpdateEventWrrRequest_Param& from);
  UpdateEventWrrRequest_Param(UpdateEventWrrRequest_Param&& from) noexcept
    : UpdateEventWrrRequest_Param() {
    *this = ::std::move(from);
  }

  inline UpdateEventWrrRequest_Param& operator=(const UpdateEventWrrRequest_Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateEventWrrRequest_Param& operator=(UpdateEventWrrRequest_Param&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateEventWrrRequest_Param& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateEventWrrRequest_Param* internal_default_instance() {
    return reinterpret_cast<const UpdateEventWrrRequest_Param*>(
               &_UpdateEventWrrRequest_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(UpdateEventWrrRequest_Param& a, UpdateEventWrrRequest_Param& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateEventWrrRequest_Param* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateEventWrrRequest_Param* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateEventWrrRequest_Param* New() const final {
    return CreateMaybeMessage<UpdateEventWrrRequest_Param>(nullptr);
  }

  UpdateEventWrrRequest_Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateEventWrrRequest_Param>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateEventWrrRequest_Param& from);
  void MergeFrom(const UpdateEventWrrRequest_Param& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateEventWrrRequest_Param* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.UpdateEventWrrRequest.Param";
  }
  protected:
  explicit UpdateEventWrrRequest_Param(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kWeightFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 weight = 2;
  void clear_weight();
  ::PROTOBUF_NAMESPACE_ID::int64 weight() const;
  void set_weight(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_weight() const;
  void _internal_set_weight(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.UpdateEventWrrRequest.Param)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int64 weight_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class UpdateEventWrrRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.UpdateEventWrrRequest) */ {
 public:
  inline UpdateEventWrrRequest() : UpdateEventWrrRequest(nullptr) {}
  virtual ~UpdateEventWrrRequest();
  explicit constexpr UpdateEventWrrRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateEventWrrRequest(const UpdateEventWrrRequest& from);
  UpdateEventWrrRequest(UpdateEventWrrRequest&& from) noexcept
    : UpdateEventWrrRequest() {
    *this = ::std::move(from);
  }

  inline UpdateEventWrrRequest& operator=(const UpdateEventWrrRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateEventWrrRequest& operator=(UpdateEventWrrRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateEventWrrRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateEventWrrRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateEventWrrRequest*>(
               &_UpdateEventWrrRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(UpdateEventWrrRequest& a, UpdateEventWrrRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateEventWrrRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateEventWrrRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateEventWrrRequest* New() const final {
    return CreateMaybeMessage<UpdateEventWrrRequest>(nullptr);
  }

  UpdateEventWrrRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateEventWrrRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateEventWrrRequest& from);
  void MergeFrom(const UpdateEventWrrRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateEventWrrRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.UpdateEventWrrRequest";
  }
  protected:
  explicit UpdateEventWrrRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef UpdateEventWrrRequest_Param Param;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
    kParamFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // .grpc_cli.UpdateEventWrrRequest.Param param = 4;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::grpc_cli::UpdateEventWrrRequest_Param& param() const;
  ::grpc_cli::UpdateEventWrrRequest_Param* release_param();
  ::grpc_cli::UpdateEventWrrRequest_Param* mutable_param();
  void set_allocated_param(::grpc_cli::UpdateEventWrrRequest_Param* param);
  private:
  const ::grpc_cli::UpdateEventWrrRequest_Param& _internal_param() const;
  ::grpc_cli::UpdateEventWrrRequest_Param* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::grpc_cli::UpdateEventWrrRequest_Param* param);
  ::grpc_cli::UpdateEventWrrRequest_Param* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:grpc_cli.UpdateEventWrrRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  ::grpc_cli::UpdateEventWrrRequest_Param* param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class UpdateEventWrrResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.UpdateEventWrrResponse.Result) */ {
 public:
  inline UpdateEventWrrResponse_Result() : UpdateEventWrrResponse_Result(nullptr) {}
  virtual ~UpdateEventWrrResponse_Result();
  explicit constexpr UpdateEventWrrResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateEventWrrResponse_Result(const UpdateEventWrrResponse_Result& from);
  UpdateEventWrrResponse_Result(UpdateEventWrrResponse_Result&& from) noexcept
    : UpdateEventWrrResponse_Result() {
    *this = ::std::move(from);
  }

  inline UpdateEventWrrResponse_Result& operator=(const UpdateEventWrrResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateEventWrrResponse_Result& operator=(UpdateEventWrrResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateEventWrrResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateEventWrrResponse_Result* internal_default_instance() {
    return reinterpret_cast<const UpdateEventWrrResponse_Result*>(
               &_UpdateEventWrrResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(UpdateEventWrrResponse_Result& a, UpdateEventWrrResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateEventWrrResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateEventWrrResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateEventWrrResponse_Result* New() const final {
    return CreateMaybeMessage<UpdateEventWrrResponse_Result>(nullptr);
  }

  UpdateEventWrrResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateEventWrrResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateEventWrrResponse_Result& from);
  void MergeFrom(const UpdateEventWrrResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateEventWrrResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.UpdateEventWrrResponse.Result";
  }
  protected:
  explicit UpdateEventWrrResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:grpc_cli.UpdateEventWrrResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class UpdateEventWrrResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.UpdateEventWrrResponse) */ {
 public:
  inline UpdateEventWrrResponse() : UpdateEventWrrResponse(nullptr) {}
  virtual ~UpdateEventWrrResponse();
  explicit constexpr UpdateEventWrrResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateEventWrrResponse(const UpdateEventWrrResponse& from);
  UpdateEventWrrResponse(UpdateEventWrrResponse&& from) noexcept
    : UpdateEventWrrResponse() {
    *this = ::std::move(from);
  }

  inline UpdateEventWrrResponse& operator=(const UpdateEventWrrResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateEventWrrResponse& operator=(UpdateEventWrrResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateEventWrrResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateEventWrrResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateEventWrrResponse*>(
               &_UpdateEventWrrResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(UpdateEventWrrResponse& a, UpdateEventWrrResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateEventWrrResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateEventWrrResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateEventWrrResponse* New() const final {
    return CreateMaybeMessage<UpdateEventWrrResponse>(nullptr);
  }

  UpdateEventWrrResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateEventWrrResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateEventWrrResponse& from);
  void MergeFrom(const UpdateEventWrrResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateEventWrrResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.UpdateEventWrrResponse";
  }
  protected:
  explicit UpdateEventWrrResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef UpdateEventWrrResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.UpdateEventWrrResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::UpdateEventWrrResponse_Result& result() const;
  ::grpc_cli::UpdateEventWrrResponse_Result* release_result();
  ::grpc_cli::UpdateEventWrrResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::UpdateEventWrrResponse_Result* result);
  private:
  const ::grpc_cli::UpdateEventWrrResponse_Result& _internal_result() const;
  ::grpc_cli::UpdateEventWrrResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::UpdateEventWrrResponse_Result* result);
  ::grpc_cli::UpdateEventWrrResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.UpdateEventWrrResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::UpdateEventWrrResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class AddSpareRequest_SpareDeviceName PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.AddSpareRequest.SpareDeviceName) */ {
 public:
  inline AddSpareRequest_SpareDeviceName() : AddSpareRequest_SpareDeviceName(nullptr) {}
  virtual ~AddSpareRequest_SpareDeviceName();
  explicit constexpr AddSpareRequest_SpareDeviceName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddSpareRequest_SpareDeviceName(const AddSpareRequest_SpareDeviceName& from);
  AddSpareRequest_SpareDeviceName(AddSpareRequest_SpareDeviceName&& from) noexcept
    : AddSpareRequest_SpareDeviceName() {
    *this = ::std::move(from);
  }

  inline AddSpareRequest_SpareDeviceName& operator=(const AddSpareRequest_SpareDeviceName& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddSpareRequest_SpareDeviceName& operator=(AddSpareRequest_SpareDeviceName&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddSpareRequest_SpareDeviceName& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddSpareRequest_SpareDeviceName* internal_default_instance() {
    return reinterpret_cast<const AddSpareRequest_SpareDeviceName*>(
               &_AddSpareRequest_SpareDeviceName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(AddSpareRequest_SpareDeviceName& a, AddSpareRequest_SpareDeviceName& b) {
    a.Swap(&b);
  }
  inline void Swap(AddSpareRequest_SpareDeviceName* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddSpareRequest_SpareDeviceName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddSpareRequest_SpareDeviceName* New() const final {
    return CreateMaybeMessage<AddSpareRequest_SpareDeviceName>(nullptr);
  }

  AddSpareRequest_SpareDeviceName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddSpareRequest_SpareDeviceName>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddSpareRequest_SpareDeviceName& from);
  void MergeFrom(const AddSpareRequest_SpareDeviceName& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddSpareRequest_SpareDeviceName* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.AddSpareRequest.SpareDeviceName";
  }
  protected:
  explicit AddSpareRequest_SpareDeviceName(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceNameFieldNumber = 1,
  };
  // string deviceName = 1;
  void clear_devicename();
  const std::string& devicename() const;
  void set_devicename(const std::string& value);
  void set_devicename(std::string&& value);
  void set_devicename(const char* value);
  void set_devicename(const char* value, size_t size);
  std::string* mutable_devicename();
  std::string* release_devicename();
  void set_allocated_devicename(std::string* devicename);
  private:
  const std::string& _internal_devicename() const;
  void _internal_set_devicename(const std::string& value);
  std::string* _internal_mutable_devicename();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.AddSpareRequest.SpareDeviceName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr devicename_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class AddSpareRequest_Param PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.AddSpareRequest.Param) */ {
 public:
  inline AddSpareRequest_Param() : AddSpareRequest_Param(nullptr) {}
  virtual ~AddSpareRequest_Param();
  explicit constexpr AddSpareRequest_Param(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddSpareRequest_Param(const AddSpareRequest_Param& from);
  AddSpareRequest_Param(AddSpareRequest_Param&& from) noexcept
    : AddSpareRequest_Param() {
    *this = ::std::move(from);
  }

  inline AddSpareRequest_Param& operator=(const AddSpareRequest_Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddSpareRequest_Param& operator=(AddSpareRequest_Param&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddSpareRequest_Param& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddSpareRequest_Param* internal_default_instance() {
    return reinterpret_cast<const AddSpareRequest_Param*>(
               &_AddSpareRequest_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(AddSpareRequest_Param& a, AddSpareRequest_Param& b) {
    a.Swap(&b);
  }
  inline void Swap(AddSpareRequest_Param* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddSpareRequest_Param* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddSpareRequest_Param* New() const final {
    return CreateMaybeMessage<AddSpareRequest_Param>(nullptr);
  }

  AddSpareRequest_Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddSpareRequest_Param>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddSpareRequest_Param& from);
  void MergeFrom(const AddSpareRequest_Param& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddSpareRequest_Param* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.AddSpareRequest.Param";
  }
  protected:
  explicit AddSpareRequest_Param(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpareFieldNumber = 3,
    kArrayFieldNumber = 1,
  };
  // repeated .grpc_cli.AddSpareRequest.SpareDeviceName spare = 3;
  int spare_size() const;
  private:
  int _internal_spare_size() const;
  public:
  void clear_spare();
  ::grpc_cli::AddSpareRequest_SpareDeviceName* mutable_spare(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::AddSpareRequest_SpareDeviceName >*
      mutable_spare();
  private:
  const ::grpc_cli::AddSpareRequest_SpareDeviceName& _internal_spare(int index) const;
  ::grpc_cli::AddSpareRequest_SpareDeviceName* _internal_add_spare();
  public:
  const ::grpc_cli::AddSpareRequest_SpareDeviceName& spare(int index) const;
  ::grpc_cli::AddSpareRequest_SpareDeviceName* add_spare();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::AddSpareRequest_SpareDeviceName >&
      spare() const;

  // string array = 1;
  void clear_array();
  const std::string& array() const;
  void set_array(const std::string& value);
  void set_array(std::string&& value);
  void set_array(const char* value);
  void set_array(const char* value, size_t size);
  std::string* mutable_array();
  std::string* release_array();
  void set_allocated_array(std::string* array);
  private:
  const std::string& _internal_array() const;
  void _internal_set_array(const std::string& value);
  std::string* _internal_mutable_array();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.AddSpareRequest.Param)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::AddSpareRequest_SpareDeviceName > spare_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr array_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class AddSpareRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.AddSpareRequest) */ {
 public:
  inline AddSpareRequest() : AddSpareRequest(nullptr) {}
  virtual ~AddSpareRequest();
  explicit constexpr AddSpareRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddSpareRequest(const AddSpareRequest& from);
  AddSpareRequest(AddSpareRequest&& from) noexcept
    : AddSpareRequest() {
    *this = ::std::move(from);
  }

  inline AddSpareRequest& operator=(const AddSpareRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddSpareRequest& operator=(AddSpareRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddSpareRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddSpareRequest* internal_default_instance() {
    return reinterpret_cast<const AddSpareRequest*>(
               &_AddSpareRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(AddSpareRequest& a, AddSpareRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddSpareRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddSpareRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddSpareRequest* New() const final {
    return CreateMaybeMessage<AddSpareRequest>(nullptr);
  }

  AddSpareRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddSpareRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddSpareRequest& from);
  void MergeFrom(const AddSpareRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddSpareRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.AddSpareRequest";
  }
  protected:
  explicit AddSpareRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef AddSpareRequest_SpareDeviceName SpareDeviceName;
  typedef AddSpareRequest_Param Param;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
    kParamFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // .grpc_cli.AddSpareRequest.Param param = 4;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::grpc_cli::AddSpareRequest_Param& param() const;
  ::grpc_cli::AddSpareRequest_Param* release_param();
  ::grpc_cli::AddSpareRequest_Param* mutable_param();
  void set_allocated_param(::grpc_cli::AddSpareRequest_Param* param);
  private:
  const ::grpc_cli::AddSpareRequest_Param& _internal_param() const;
  ::grpc_cli::AddSpareRequest_Param* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::grpc_cli::AddSpareRequest_Param* param);
  ::grpc_cli::AddSpareRequest_Param* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:grpc_cli.AddSpareRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  ::grpc_cli::AddSpareRequest_Param* param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class AddSpareResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.AddSpareResponse.Result) */ {
 public:
  inline AddSpareResponse_Result() : AddSpareResponse_Result(nullptr) {}
  virtual ~AddSpareResponse_Result();
  explicit constexpr AddSpareResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddSpareResponse_Result(const AddSpareResponse_Result& from);
  AddSpareResponse_Result(AddSpareResponse_Result&& from) noexcept
    : AddSpareResponse_Result() {
    *this = ::std::move(from);
  }

  inline AddSpareResponse_Result& operator=(const AddSpareResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddSpareResponse_Result& operator=(AddSpareResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddSpareResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddSpareResponse_Result* internal_default_instance() {
    return reinterpret_cast<const AddSpareResponse_Result*>(
               &_AddSpareResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(AddSpareResponse_Result& a, AddSpareResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(AddSpareResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddSpareResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddSpareResponse_Result* New() const final {
    return CreateMaybeMessage<AddSpareResponse_Result>(nullptr);
  }

  AddSpareResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddSpareResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddSpareResponse_Result& from);
  void MergeFrom(const AddSpareResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddSpareResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.AddSpareResponse.Result";
  }
  protected:
  explicit AddSpareResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:grpc_cli.AddSpareResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class AddSpareResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.AddSpareResponse) */ {
 public:
  inline AddSpareResponse() : AddSpareResponse(nullptr) {}
  virtual ~AddSpareResponse();
  explicit constexpr AddSpareResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddSpareResponse(const AddSpareResponse& from);
  AddSpareResponse(AddSpareResponse&& from) noexcept
    : AddSpareResponse() {
    *this = ::std::move(from);
  }

  inline AddSpareResponse& operator=(const AddSpareResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddSpareResponse& operator=(AddSpareResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddSpareResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddSpareResponse* internal_default_instance() {
    return reinterpret_cast<const AddSpareResponse*>(
               &_AddSpareResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(AddSpareResponse& a, AddSpareResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddSpareResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddSpareResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddSpareResponse* New() const final {
    return CreateMaybeMessage<AddSpareResponse>(nullptr);
  }

  AddSpareResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddSpareResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddSpareResponse& from);
  void MergeFrom(const AddSpareResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddSpareResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.AddSpareResponse";
  }
  protected:
  explicit AddSpareResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef AddSpareResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.AddSpareResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::AddSpareResponse_Result& result() const;
  ::grpc_cli::AddSpareResponse_Result* release_result();
  ::grpc_cli::AddSpareResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::AddSpareResponse_Result* result);
  private:
  const ::grpc_cli::AddSpareResponse_Result& _internal_result() const;
  ::grpc_cli::AddSpareResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::AddSpareResponse_Result* result);
  ::grpc_cli::AddSpareResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.AddSpareResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::AddSpareResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class DeviceNameList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.DeviceNameList) */ {
 public:
  inline DeviceNameList() : DeviceNameList(nullptr) {}
  virtual ~DeviceNameList();
  explicit constexpr DeviceNameList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceNameList(const DeviceNameList& from);
  DeviceNameList(DeviceNameList&& from) noexcept
    : DeviceNameList() {
    *this = ::std::move(from);
  }

  inline DeviceNameList& operator=(const DeviceNameList& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceNameList& operator=(DeviceNameList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceNameList& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceNameList* internal_default_instance() {
    return reinterpret_cast<const DeviceNameList*>(
               &_DeviceNameList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(DeviceNameList& a, DeviceNameList& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceNameList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceNameList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceNameList* New() const final {
    return CreateMaybeMessage<DeviceNameList>(nullptr);
  }

  DeviceNameList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceNameList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceNameList& from);
  void MergeFrom(const DeviceNameList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceNameList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.DeviceNameList";
  }
  protected:
  explicit DeviceNameList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceNameFieldNumber = 1,
  };
  // string deviceName = 1;
  void clear_devicename();
  const std::string& devicename() const;
  void set_devicename(const std::string& value);
  void set_devicename(std::string&& value);
  void set_devicename(const char* value);
  void set_devicename(const char* value, size_t size);
  std::string* mutable_devicename();
  std::string* release_devicename();
  void set_allocated_devicename(std::string* devicename);
  private:
  const std::string& _internal_devicename() const;
  void _internal_set_devicename(const std::string& value);
  std::string* _internal_mutable_devicename();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.DeviceNameList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr devicename_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class RemoveSpareRequest_SpareDeviceName PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.RemoveSpareRequest.SpareDeviceName) */ {
 public:
  inline RemoveSpareRequest_SpareDeviceName() : RemoveSpareRequest_SpareDeviceName(nullptr) {}
  virtual ~RemoveSpareRequest_SpareDeviceName();
  explicit constexpr RemoveSpareRequest_SpareDeviceName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveSpareRequest_SpareDeviceName(const RemoveSpareRequest_SpareDeviceName& from);
  RemoveSpareRequest_SpareDeviceName(RemoveSpareRequest_SpareDeviceName&& from) noexcept
    : RemoveSpareRequest_SpareDeviceName() {
    *this = ::std::move(from);
  }

  inline RemoveSpareRequest_SpareDeviceName& operator=(const RemoveSpareRequest_SpareDeviceName& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveSpareRequest_SpareDeviceName& operator=(RemoveSpareRequest_SpareDeviceName&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveSpareRequest_SpareDeviceName& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveSpareRequest_SpareDeviceName* internal_default_instance() {
    return reinterpret_cast<const RemoveSpareRequest_SpareDeviceName*>(
               &_RemoveSpareRequest_SpareDeviceName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(RemoveSpareRequest_SpareDeviceName& a, RemoveSpareRequest_SpareDeviceName& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveSpareRequest_SpareDeviceName* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveSpareRequest_SpareDeviceName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveSpareRequest_SpareDeviceName* New() const final {
    return CreateMaybeMessage<RemoveSpareRequest_SpareDeviceName>(nullptr);
  }

  RemoveSpareRequest_SpareDeviceName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveSpareRequest_SpareDeviceName>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveSpareRequest_SpareDeviceName& from);
  void MergeFrom(const RemoveSpareRequest_SpareDeviceName& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveSpareRequest_SpareDeviceName* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.RemoveSpareRequest.SpareDeviceName";
  }
  protected:
  explicit RemoveSpareRequest_SpareDeviceName(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceNameFieldNumber = 1,
  };
  // string deviceName = 1;
  void clear_devicename();
  const std::string& devicename() const;
  void set_devicename(const std::string& value);
  void set_devicename(std::string&& value);
  void set_devicename(const char* value);
  void set_devicename(const char* value, size_t size);
  std::string* mutable_devicename();
  std::string* release_devicename();
  void set_allocated_devicename(std::string* devicename);
  private:
  const std::string& _internal_devicename() const;
  void _internal_set_devicename(const std::string& value);
  std::string* _internal_mutable_devicename();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.RemoveSpareRequest.SpareDeviceName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr devicename_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class RemoveSpareRequest_Param PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.RemoveSpareRequest.Param) */ {
 public:
  inline RemoveSpareRequest_Param() : RemoveSpareRequest_Param(nullptr) {}
  virtual ~RemoveSpareRequest_Param();
  explicit constexpr RemoveSpareRequest_Param(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveSpareRequest_Param(const RemoveSpareRequest_Param& from);
  RemoveSpareRequest_Param(RemoveSpareRequest_Param&& from) noexcept
    : RemoveSpareRequest_Param() {
    *this = ::std::move(from);
  }

  inline RemoveSpareRequest_Param& operator=(const RemoveSpareRequest_Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveSpareRequest_Param& operator=(RemoveSpareRequest_Param&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveSpareRequest_Param& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveSpareRequest_Param* internal_default_instance() {
    return reinterpret_cast<const RemoveSpareRequest_Param*>(
               &_RemoveSpareRequest_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(RemoveSpareRequest_Param& a, RemoveSpareRequest_Param& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveSpareRequest_Param* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveSpareRequest_Param* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveSpareRequest_Param* New() const final {
    return CreateMaybeMessage<RemoveSpareRequest_Param>(nullptr);
  }

  RemoveSpareRequest_Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveSpareRequest_Param>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveSpareRequest_Param& from);
  void MergeFrom(const RemoveSpareRequest_Param& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveSpareRequest_Param* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.RemoveSpareRequest.Param";
  }
  protected:
  explicit RemoveSpareRequest_Param(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpareFieldNumber = 2,
    kArrayFieldNumber = 1,
  };
  // repeated .grpc_cli.RemoveSpareRequest.SpareDeviceName spare = 2;
  int spare_size() const;
  private:
  int _internal_spare_size() const;
  public:
  void clear_spare();
  ::grpc_cli::RemoveSpareRequest_SpareDeviceName* mutable_spare(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::RemoveSpareRequest_SpareDeviceName >*
      mutable_spare();
  private:
  const ::grpc_cli::RemoveSpareRequest_SpareDeviceName& _internal_spare(int index) const;
  ::grpc_cli::RemoveSpareRequest_SpareDeviceName* _internal_add_spare();
  public:
  const ::grpc_cli::RemoveSpareRequest_SpareDeviceName& spare(int index) const;
  ::grpc_cli::RemoveSpareRequest_SpareDeviceName* add_spare();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::RemoveSpareRequest_SpareDeviceName >&
      spare() const;

  // string array = 1;
  void clear_array();
  const std::string& array() const;
  void set_array(const std::string& value);
  void set_array(std::string&& value);
  void set_array(const char* value);
  void set_array(const char* value, size_t size);
  std::string* mutable_array();
  std::string* release_array();
  void set_allocated_array(std::string* array);
  private:
  const std::string& _internal_array() const;
  void _internal_set_array(const std::string& value);
  std::string* _internal_mutable_array();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.RemoveSpareRequest.Param)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::RemoveSpareRequest_SpareDeviceName > spare_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr array_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class RemoveSpareRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.RemoveSpareRequest) */ {
 public:
  inline RemoveSpareRequest() : RemoveSpareRequest(nullptr) {}
  virtual ~RemoveSpareRequest();
  explicit constexpr RemoveSpareRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveSpareRequest(const RemoveSpareRequest& from);
  RemoveSpareRequest(RemoveSpareRequest&& from) noexcept
    : RemoveSpareRequest() {
    *this = ::std::move(from);
  }

  inline RemoveSpareRequest& operator=(const RemoveSpareRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveSpareRequest& operator=(RemoveSpareRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveSpareRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveSpareRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveSpareRequest*>(
               &_RemoveSpareRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(RemoveSpareRequest& a, RemoveSpareRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveSpareRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveSpareRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveSpareRequest* New() const final {
    return CreateMaybeMessage<RemoveSpareRequest>(nullptr);
  }

  RemoveSpareRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveSpareRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveSpareRequest& from);
  void MergeFrom(const RemoveSpareRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveSpareRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.RemoveSpareRequest";
  }
  protected:
  explicit RemoveSpareRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef RemoveSpareRequest_SpareDeviceName SpareDeviceName;
  typedef RemoveSpareRequest_Param Param;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
    kParamFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // .grpc_cli.RemoveSpareRequest.Param param = 4;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::grpc_cli::RemoveSpareRequest_Param& param() const;
  ::grpc_cli::RemoveSpareRequest_Param* release_param();
  ::grpc_cli::RemoveSpareRequest_Param* mutable_param();
  void set_allocated_param(::grpc_cli::RemoveSpareRequest_Param* param);
  private:
  const ::grpc_cli::RemoveSpareRequest_Param& _internal_param() const;
  ::grpc_cli::RemoveSpareRequest_Param* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::grpc_cli::RemoveSpareRequest_Param* param);
  ::grpc_cli::RemoveSpareRequest_Param* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:grpc_cli.RemoveSpareRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  ::grpc_cli::RemoveSpareRequest_Param* param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class RemoveSpareResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.RemoveSpareResponse.Result) */ {
 public:
  inline RemoveSpareResponse_Result() : RemoveSpareResponse_Result(nullptr) {}
  virtual ~RemoveSpareResponse_Result();
  explicit constexpr RemoveSpareResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveSpareResponse_Result(const RemoveSpareResponse_Result& from);
  RemoveSpareResponse_Result(RemoveSpareResponse_Result&& from) noexcept
    : RemoveSpareResponse_Result() {
    *this = ::std::move(from);
  }

  inline RemoveSpareResponse_Result& operator=(const RemoveSpareResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveSpareResponse_Result& operator=(RemoveSpareResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveSpareResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveSpareResponse_Result* internal_default_instance() {
    return reinterpret_cast<const RemoveSpareResponse_Result*>(
               &_RemoveSpareResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(RemoveSpareResponse_Result& a, RemoveSpareResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveSpareResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveSpareResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveSpareResponse_Result* New() const final {
    return CreateMaybeMessage<RemoveSpareResponse_Result>(nullptr);
  }

  RemoveSpareResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveSpareResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveSpareResponse_Result& from);
  void MergeFrom(const RemoveSpareResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveSpareResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.RemoveSpareResponse.Result";
  }
  protected:
  explicit RemoveSpareResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:grpc_cli.RemoveSpareResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class RemoveSpareResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.RemoveSpareResponse) */ {
 public:
  inline RemoveSpareResponse() : RemoveSpareResponse(nullptr) {}
  virtual ~RemoveSpareResponse();
  explicit constexpr RemoveSpareResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveSpareResponse(const RemoveSpareResponse& from);
  RemoveSpareResponse(RemoveSpareResponse&& from) noexcept
    : RemoveSpareResponse() {
    *this = ::std::move(from);
  }

  inline RemoveSpareResponse& operator=(const RemoveSpareResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveSpareResponse& operator=(RemoveSpareResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveSpareResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveSpareResponse* internal_default_instance() {
    return reinterpret_cast<const RemoveSpareResponse*>(
               &_RemoveSpareResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(RemoveSpareResponse& a, RemoveSpareResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveSpareResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveSpareResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveSpareResponse* New() const final {
    return CreateMaybeMessage<RemoveSpareResponse>(nullptr);
  }

  RemoveSpareResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveSpareResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveSpareResponse& from);
  void MergeFrom(const RemoveSpareResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveSpareResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.RemoveSpareResponse";
  }
  protected:
  explicit RemoveSpareResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef RemoveSpareResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.RemoveSpareResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::RemoveSpareResponse_Result& result() const;
  ::grpc_cli::RemoveSpareResponse_Result* release_result();
  ::grpc_cli::RemoveSpareResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::RemoveSpareResponse_Result* result);
  private:
  const ::grpc_cli::RemoveSpareResponse_Result& _internal_result() const;
  ::grpc_cli::RemoveSpareResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::RemoveSpareResponse_Result* result);
  ::grpc_cli::RemoveSpareResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.RemoveSpareResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::RemoveSpareResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class CreateArrayRequest_Param PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.CreateArrayRequest.Param) */ {
 public:
  inline CreateArrayRequest_Param() : CreateArrayRequest_Param(nullptr) {}
  virtual ~CreateArrayRequest_Param();
  explicit constexpr CreateArrayRequest_Param(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateArrayRequest_Param(const CreateArrayRequest_Param& from);
  CreateArrayRequest_Param(CreateArrayRequest_Param&& from) noexcept
    : CreateArrayRequest_Param() {
    *this = ::std::move(from);
  }

  inline CreateArrayRequest_Param& operator=(const CreateArrayRequest_Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateArrayRequest_Param& operator=(CreateArrayRequest_Param&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateArrayRequest_Param& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateArrayRequest_Param* internal_default_instance() {
    return reinterpret_cast<const CreateArrayRequest_Param*>(
               &_CreateArrayRequest_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(CreateArrayRequest_Param& a, CreateArrayRequest_Param& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateArrayRequest_Param* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateArrayRequest_Param* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateArrayRequest_Param* New() const final {
    return CreateMaybeMessage<CreateArrayRequest_Param>(nullptr);
  }

  CreateArrayRequest_Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateArrayRequest_Param>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateArrayRequest_Param& from);
  void MergeFrom(const CreateArrayRequest_Param& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateArrayRequest_Param* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.CreateArrayRequest.Param";
  }
  protected:
  explicit CreateArrayRequest_Param(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBufferFieldNumber = 2,
    kDataFieldNumber = 3,
    kSpareFieldNumber = 4,
    kNameFieldNumber = 1,
    kRaidtypeFieldNumber = 5,
  };
  // repeated .grpc_cli.DeviceNameList buffer = 2;
  int buffer_size() const;
  private:
  int _internal_buffer_size() const;
  public:
  void clear_buffer();
  ::grpc_cli::DeviceNameList* mutable_buffer(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::DeviceNameList >*
      mutable_buffer();
  private:
  const ::grpc_cli::DeviceNameList& _internal_buffer(int index) const;
  ::grpc_cli::DeviceNameList* _internal_add_buffer();
  public:
  const ::grpc_cli::DeviceNameList& buffer(int index) const;
  ::grpc_cli::DeviceNameList* add_buffer();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::DeviceNameList >&
      buffer() const;

  // repeated .grpc_cli.DeviceNameList data = 3;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::grpc_cli::DeviceNameList* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::DeviceNameList >*
      mutable_data();
  private:
  const ::grpc_cli::DeviceNameList& _internal_data(int index) const;
  ::grpc_cli::DeviceNameList* _internal_add_data();
  public:
  const ::grpc_cli::DeviceNameList& data(int index) const;
  ::grpc_cli::DeviceNameList* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::DeviceNameList >&
      data() const;

  // repeated .grpc_cli.DeviceNameList spare = 4;
  int spare_size() const;
  private:
  int _internal_spare_size() const;
  public:
  void clear_spare();
  ::grpc_cli::DeviceNameList* mutable_spare(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::DeviceNameList >*
      mutable_spare();
  private:
  const ::grpc_cli::DeviceNameList& _internal_spare(int index) const;
  ::grpc_cli::DeviceNameList* _internal_add_spare();
  public:
  const ::grpc_cli::DeviceNameList& spare(int index) const;
  ::grpc_cli::DeviceNameList* add_spare();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::DeviceNameList >&
      spare() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string raidtype = 5;
  void clear_raidtype();
  const std::string& raidtype() const;
  void set_raidtype(const std::string& value);
  void set_raidtype(std::string&& value);
  void set_raidtype(const char* value);
  void set_raidtype(const char* value, size_t size);
  std::string* mutable_raidtype();
  std::string* release_raidtype();
  void set_allocated_raidtype(std::string* raidtype);
  private:
  const std::string& _internal_raidtype() const;
  void _internal_set_raidtype(const std::string& value);
  std::string* _internal_mutable_raidtype();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.CreateArrayRequest.Param)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::DeviceNameList > buffer_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::DeviceNameList > data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::DeviceNameList > spare_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raidtype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class CreateArrayRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.CreateArrayRequest) */ {
 public:
  inline CreateArrayRequest() : CreateArrayRequest(nullptr) {}
  virtual ~CreateArrayRequest();
  explicit constexpr CreateArrayRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateArrayRequest(const CreateArrayRequest& from);
  CreateArrayRequest(CreateArrayRequest&& from) noexcept
    : CreateArrayRequest() {
    *this = ::std::move(from);
  }

  inline CreateArrayRequest& operator=(const CreateArrayRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateArrayRequest& operator=(CreateArrayRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateArrayRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateArrayRequest* internal_default_instance() {
    return reinterpret_cast<const CreateArrayRequest*>(
               &_CreateArrayRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(CreateArrayRequest& a, CreateArrayRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateArrayRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateArrayRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateArrayRequest* New() const final {
    return CreateMaybeMessage<CreateArrayRequest>(nullptr);
  }

  CreateArrayRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateArrayRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateArrayRequest& from);
  void MergeFrom(const CreateArrayRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateArrayRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.CreateArrayRequest";
  }
  protected:
  explicit CreateArrayRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CreateArrayRequest_Param Param;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
    kParamFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // .grpc_cli.CreateArrayRequest.Param param = 4;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::grpc_cli::CreateArrayRequest_Param& param() const;
  ::grpc_cli::CreateArrayRequest_Param* release_param();
  ::grpc_cli::CreateArrayRequest_Param* mutable_param();
  void set_allocated_param(::grpc_cli::CreateArrayRequest_Param* param);
  private:
  const ::grpc_cli::CreateArrayRequest_Param& _internal_param() const;
  ::grpc_cli::CreateArrayRequest_Param* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::grpc_cli::CreateArrayRequest_Param* param);
  ::grpc_cli::CreateArrayRequest_Param* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:grpc_cli.CreateArrayRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  ::grpc_cli::CreateArrayRequest_Param* param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class CreateArrayResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.CreateArrayResponse.Result) */ {
 public:
  inline CreateArrayResponse_Result() : CreateArrayResponse_Result(nullptr) {}
  virtual ~CreateArrayResponse_Result();
  explicit constexpr CreateArrayResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateArrayResponse_Result(const CreateArrayResponse_Result& from);
  CreateArrayResponse_Result(CreateArrayResponse_Result&& from) noexcept
    : CreateArrayResponse_Result() {
    *this = ::std::move(from);
  }

  inline CreateArrayResponse_Result& operator=(const CreateArrayResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateArrayResponse_Result& operator=(CreateArrayResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateArrayResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateArrayResponse_Result* internal_default_instance() {
    return reinterpret_cast<const CreateArrayResponse_Result*>(
               &_CreateArrayResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(CreateArrayResponse_Result& a, CreateArrayResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateArrayResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateArrayResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateArrayResponse_Result* New() const final {
    return CreateMaybeMessage<CreateArrayResponse_Result>(nullptr);
  }

  CreateArrayResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateArrayResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateArrayResponse_Result& from);
  void MergeFrom(const CreateArrayResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateArrayResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.CreateArrayResponse.Result";
  }
  protected:
  explicit CreateArrayResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:grpc_cli.CreateArrayResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class CreateArrayResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.CreateArrayResponse) */ {
 public:
  inline CreateArrayResponse() : CreateArrayResponse(nullptr) {}
  virtual ~CreateArrayResponse();
  explicit constexpr CreateArrayResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateArrayResponse(const CreateArrayResponse& from);
  CreateArrayResponse(CreateArrayResponse&& from) noexcept
    : CreateArrayResponse() {
    *this = ::std::move(from);
  }

  inline CreateArrayResponse& operator=(const CreateArrayResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateArrayResponse& operator=(CreateArrayResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateArrayResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateArrayResponse* internal_default_instance() {
    return reinterpret_cast<const CreateArrayResponse*>(
               &_CreateArrayResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(CreateArrayResponse& a, CreateArrayResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateArrayResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateArrayResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateArrayResponse* New() const final {
    return CreateMaybeMessage<CreateArrayResponse>(nullptr);
  }

  CreateArrayResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateArrayResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateArrayResponse& from);
  void MergeFrom(const CreateArrayResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateArrayResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.CreateArrayResponse";
  }
  protected:
  explicit CreateArrayResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CreateArrayResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.CreateArrayResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::CreateArrayResponse_Result& result() const;
  ::grpc_cli::CreateArrayResponse_Result* release_result();
  ::grpc_cli::CreateArrayResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::CreateArrayResponse_Result* result);
  private:
  const ::grpc_cli::CreateArrayResponse_Result& _internal_result() const;
  ::grpc_cli::CreateArrayResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::CreateArrayResponse_Result* result);
  ::grpc_cli::CreateArrayResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.CreateArrayResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::CreateArrayResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class DeleteArrayRequest_Param PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.DeleteArrayRequest.Param) */ {
 public:
  inline DeleteArrayRequest_Param() : DeleteArrayRequest_Param(nullptr) {}
  virtual ~DeleteArrayRequest_Param();
  explicit constexpr DeleteArrayRequest_Param(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteArrayRequest_Param(const DeleteArrayRequest_Param& from);
  DeleteArrayRequest_Param(DeleteArrayRequest_Param&& from) noexcept
    : DeleteArrayRequest_Param() {
    *this = ::std::move(from);
  }

  inline DeleteArrayRequest_Param& operator=(const DeleteArrayRequest_Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteArrayRequest_Param& operator=(DeleteArrayRequest_Param&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteArrayRequest_Param& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteArrayRequest_Param* internal_default_instance() {
    return reinterpret_cast<const DeleteArrayRequest_Param*>(
               &_DeleteArrayRequest_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(DeleteArrayRequest_Param& a, DeleteArrayRequest_Param& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteArrayRequest_Param* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteArrayRequest_Param* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteArrayRequest_Param* New() const final {
    return CreateMaybeMessage<DeleteArrayRequest_Param>(nullptr);
  }

  DeleteArrayRequest_Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteArrayRequest_Param>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteArrayRequest_Param& from);
  void MergeFrom(const DeleteArrayRequest_Param& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteArrayRequest_Param* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.DeleteArrayRequest.Param";
  }
  protected:
  explicit DeleteArrayRequest_Param(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.DeleteArrayRequest.Param)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class DeleteArrayRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.DeleteArrayRequest) */ {
 public:
  inline DeleteArrayRequest() : DeleteArrayRequest(nullptr) {}
  virtual ~DeleteArrayRequest();
  explicit constexpr DeleteArrayRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteArrayRequest(const DeleteArrayRequest& from);
  DeleteArrayRequest(DeleteArrayRequest&& from) noexcept
    : DeleteArrayRequest() {
    *this = ::std::move(from);
  }

  inline DeleteArrayRequest& operator=(const DeleteArrayRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteArrayRequest& operator=(DeleteArrayRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteArrayRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteArrayRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteArrayRequest*>(
               &_DeleteArrayRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(DeleteArrayRequest& a, DeleteArrayRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteArrayRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteArrayRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteArrayRequest* New() const final {
    return CreateMaybeMessage<DeleteArrayRequest>(nullptr);
  }

  DeleteArrayRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteArrayRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteArrayRequest& from);
  void MergeFrom(const DeleteArrayRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteArrayRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.DeleteArrayRequest";
  }
  protected:
  explicit DeleteArrayRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef DeleteArrayRequest_Param Param;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
    kParamFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // .grpc_cli.DeleteArrayRequest.Param param = 4;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::grpc_cli::DeleteArrayRequest_Param& param() const;
  ::grpc_cli::DeleteArrayRequest_Param* release_param();
  ::grpc_cli::DeleteArrayRequest_Param* mutable_param();
  void set_allocated_param(::grpc_cli::DeleteArrayRequest_Param* param);
  private:
  const ::grpc_cli::DeleteArrayRequest_Param& _internal_param() const;
  ::grpc_cli::DeleteArrayRequest_Param* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::grpc_cli::DeleteArrayRequest_Param* param);
  ::grpc_cli::DeleteArrayRequest_Param* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:grpc_cli.DeleteArrayRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  ::grpc_cli::DeleteArrayRequest_Param* param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class DeleteArrayResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.DeleteArrayResponse.Result) */ {
 public:
  inline DeleteArrayResponse_Result() : DeleteArrayResponse_Result(nullptr) {}
  virtual ~DeleteArrayResponse_Result();
  explicit constexpr DeleteArrayResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteArrayResponse_Result(const DeleteArrayResponse_Result& from);
  DeleteArrayResponse_Result(DeleteArrayResponse_Result&& from) noexcept
    : DeleteArrayResponse_Result() {
    *this = ::std::move(from);
  }

  inline DeleteArrayResponse_Result& operator=(const DeleteArrayResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteArrayResponse_Result& operator=(DeleteArrayResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteArrayResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteArrayResponse_Result* internal_default_instance() {
    return reinterpret_cast<const DeleteArrayResponse_Result*>(
               &_DeleteArrayResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(DeleteArrayResponse_Result& a, DeleteArrayResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteArrayResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteArrayResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteArrayResponse_Result* New() const final {
    return CreateMaybeMessage<DeleteArrayResponse_Result>(nullptr);
  }

  DeleteArrayResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteArrayResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteArrayResponse_Result& from);
  void MergeFrom(const DeleteArrayResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteArrayResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.DeleteArrayResponse.Result";
  }
  protected:
  explicit DeleteArrayResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:grpc_cli.DeleteArrayResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class DeleteArrayResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.DeleteArrayResponse) */ {
 public:
  inline DeleteArrayResponse() : DeleteArrayResponse(nullptr) {}
  virtual ~DeleteArrayResponse();
  explicit constexpr DeleteArrayResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteArrayResponse(const DeleteArrayResponse& from);
  DeleteArrayResponse(DeleteArrayResponse&& from) noexcept
    : DeleteArrayResponse() {
    *this = ::std::move(from);
  }

  inline DeleteArrayResponse& operator=(const DeleteArrayResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteArrayResponse& operator=(DeleteArrayResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteArrayResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteArrayResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteArrayResponse*>(
               &_DeleteArrayResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(DeleteArrayResponse& a, DeleteArrayResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteArrayResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteArrayResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteArrayResponse* New() const final {
    return CreateMaybeMessage<DeleteArrayResponse>(nullptr);
  }

  DeleteArrayResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteArrayResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteArrayResponse& from);
  void MergeFrom(const DeleteArrayResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteArrayResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.DeleteArrayResponse";
  }
  protected:
  explicit DeleteArrayResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef DeleteArrayResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.DeleteArrayResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::DeleteArrayResponse_Result& result() const;
  ::grpc_cli::DeleteArrayResponse_Result* release_result();
  ::grpc_cli::DeleteArrayResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::DeleteArrayResponse_Result* result);
  private:
  const ::grpc_cli::DeleteArrayResponse_Result& _internal_result() const;
  ::grpc_cli::DeleteArrayResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::DeleteArrayResponse_Result* result);
  ::grpc_cli::DeleteArrayResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.DeleteArrayResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::DeleteArrayResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class MountArrayRequest_Param PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.MountArrayRequest.Param) */ {
 public:
  inline MountArrayRequest_Param() : MountArrayRequest_Param(nullptr) {}
  virtual ~MountArrayRequest_Param();
  explicit constexpr MountArrayRequest_Param(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MountArrayRequest_Param(const MountArrayRequest_Param& from);
  MountArrayRequest_Param(MountArrayRequest_Param&& from) noexcept
    : MountArrayRequest_Param() {
    *this = ::std::move(from);
  }

  inline MountArrayRequest_Param& operator=(const MountArrayRequest_Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline MountArrayRequest_Param& operator=(MountArrayRequest_Param&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MountArrayRequest_Param& default_instance() {
    return *internal_default_instance();
  }
  static inline const MountArrayRequest_Param* internal_default_instance() {
    return reinterpret_cast<const MountArrayRequest_Param*>(
               &_MountArrayRequest_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(MountArrayRequest_Param& a, MountArrayRequest_Param& b) {
    a.Swap(&b);
  }
  inline void Swap(MountArrayRequest_Param* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MountArrayRequest_Param* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MountArrayRequest_Param* New() const final {
    return CreateMaybeMessage<MountArrayRequest_Param>(nullptr);
  }

  MountArrayRequest_Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MountArrayRequest_Param>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MountArrayRequest_Param& from);
  void MergeFrom(const MountArrayRequest_Param& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MountArrayRequest_Param* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.MountArrayRequest.Param";
  }
  protected:
  explicit MountArrayRequest_Param(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kEnableWriteThroughFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool enableWriteThrough = 2;
  bool has_enablewritethrough() const;
  private:
  bool _internal_has_enablewritethrough() const;
  public:
  void clear_enablewritethrough();
  bool enablewritethrough() const;
  void set_enablewritethrough(bool value);
  private:
  bool _internal_enablewritethrough() const;
  void _internal_set_enablewritethrough(bool value);
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.MountArrayRequest.Param)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  bool enablewritethrough_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class MountArrayRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.MountArrayRequest) */ {
 public:
  inline MountArrayRequest() : MountArrayRequest(nullptr) {}
  virtual ~MountArrayRequest();
  explicit constexpr MountArrayRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MountArrayRequest(const MountArrayRequest& from);
  MountArrayRequest(MountArrayRequest&& from) noexcept
    : MountArrayRequest() {
    *this = ::std::move(from);
  }

  inline MountArrayRequest& operator=(const MountArrayRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MountArrayRequest& operator=(MountArrayRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MountArrayRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MountArrayRequest* internal_default_instance() {
    return reinterpret_cast<const MountArrayRequest*>(
               &_MountArrayRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(MountArrayRequest& a, MountArrayRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MountArrayRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MountArrayRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MountArrayRequest* New() const final {
    return CreateMaybeMessage<MountArrayRequest>(nullptr);
  }

  MountArrayRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MountArrayRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MountArrayRequest& from);
  void MergeFrom(const MountArrayRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MountArrayRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.MountArrayRequest";
  }
  protected:
  explicit MountArrayRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef MountArrayRequest_Param Param;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
    kParamFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // .grpc_cli.MountArrayRequest.Param param = 4;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::grpc_cli::MountArrayRequest_Param& param() const;
  ::grpc_cli::MountArrayRequest_Param* release_param();
  ::grpc_cli::MountArrayRequest_Param* mutable_param();
  void set_allocated_param(::grpc_cli::MountArrayRequest_Param* param);
  private:
  const ::grpc_cli::MountArrayRequest_Param& _internal_param() const;
  ::grpc_cli::MountArrayRequest_Param* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::grpc_cli::MountArrayRequest_Param* param);
  ::grpc_cli::MountArrayRequest_Param* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:grpc_cli.MountArrayRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  ::grpc_cli::MountArrayRequest_Param* param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class MountArrayResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.MountArrayResponse.Result) */ {
 public:
  inline MountArrayResponse_Result() : MountArrayResponse_Result(nullptr) {}
  virtual ~MountArrayResponse_Result();
  explicit constexpr MountArrayResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MountArrayResponse_Result(const MountArrayResponse_Result& from);
  MountArrayResponse_Result(MountArrayResponse_Result&& from) noexcept
    : MountArrayResponse_Result() {
    *this = ::std::move(from);
  }

  inline MountArrayResponse_Result& operator=(const MountArrayResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline MountArrayResponse_Result& operator=(MountArrayResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MountArrayResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const MountArrayResponse_Result* internal_default_instance() {
    return reinterpret_cast<const MountArrayResponse_Result*>(
               &_MountArrayResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(MountArrayResponse_Result& a, MountArrayResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(MountArrayResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MountArrayResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MountArrayResponse_Result* New() const final {
    return CreateMaybeMessage<MountArrayResponse_Result>(nullptr);
  }

  MountArrayResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MountArrayResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MountArrayResponse_Result& from);
  void MergeFrom(const MountArrayResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MountArrayResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.MountArrayResponse.Result";
  }
  protected:
  explicit MountArrayResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:grpc_cli.MountArrayResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class MountArrayResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.MountArrayResponse) */ {
 public:
  inline MountArrayResponse() : MountArrayResponse(nullptr) {}
  virtual ~MountArrayResponse();
  explicit constexpr MountArrayResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MountArrayResponse(const MountArrayResponse& from);
  MountArrayResponse(MountArrayResponse&& from) noexcept
    : MountArrayResponse() {
    *this = ::std::move(from);
  }

  inline MountArrayResponse& operator=(const MountArrayResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MountArrayResponse& operator=(MountArrayResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MountArrayResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MountArrayResponse* internal_default_instance() {
    return reinterpret_cast<const MountArrayResponse*>(
               &_MountArrayResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(MountArrayResponse& a, MountArrayResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MountArrayResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MountArrayResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MountArrayResponse* New() const final {
    return CreateMaybeMessage<MountArrayResponse>(nullptr);
  }

  MountArrayResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MountArrayResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MountArrayResponse& from);
  void MergeFrom(const MountArrayResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MountArrayResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.MountArrayResponse";
  }
  protected:
  explicit MountArrayResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef MountArrayResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.MountArrayResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::MountArrayResponse_Result& result() const;
  ::grpc_cli::MountArrayResponse_Result* release_result();
  ::grpc_cli::MountArrayResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::MountArrayResponse_Result* result);
  private:
  const ::grpc_cli::MountArrayResponse_Result& _internal_result() const;
  ::grpc_cli::MountArrayResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::MountArrayResponse_Result* result);
  ::grpc_cli::MountArrayResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.MountArrayResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::MountArrayResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class UnmountArrayRequest_Param PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.UnmountArrayRequest.Param) */ {
 public:
  inline UnmountArrayRequest_Param() : UnmountArrayRequest_Param(nullptr) {}
  virtual ~UnmountArrayRequest_Param();
  explicit constexpr UnmountArrayRequest_Param(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnmountArrayRequest_Param(const UnmountArrayRequest_Param& from);
  UnmountArrayRequest_Param(UnmountArrayRequest_Param&& from) noexcept
    : UnmountArrayRequest_Param() {
    *this = ::std::move(from);
  }

  inline UnmountArrayRequest_Param& operator=(const UnmountArrayRequest_Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnmountArrayRequest_Param& operator=(UnmountArrayRequest_Param&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnmountArrayRequest_Param& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnmountArrayRequest_Param* internal_default_instance() {
    return reinterpret_cast<const UnmountArrayRequest_Param*>(
               &_UnmountArrayRequest_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(UnmountArrayRequest_Param& a, UnmountArrayRequest_Param& b) {
    a.Swap(&b);
  }
  inline void Swap(UnmountArrayRequest_Param* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnmountArrayRequest_Param* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnmountArrayRequest_Param* New() const final {
    return CreateMaybeMessage<UnmountArrayRequest_Param>(nullptr);
  }

  UnmountArrayRequest_Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnmountArrayRequest_Param>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnmountArrayRequest_Param& from);
  void MergeFrom(const UnmountArrayRequest_Param& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnmountArrayRequest_Param* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.UnmountArrayRequest.Param";
  }
  protected:
  explicit UnmountArrayRequest_Param(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.UnmountArrayRequest.Param)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class UnmountArrayRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.UnmountArrayRequest) */ {
 public:
  inline UnmountArrayRequest() : UnmountArrayRequest(nullptr) {}
  virtual ~UnmountArrayRequest();
  explicit constexpr UnmountArrayRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnmountArrayRequest(const UnmountArrayRequest& from);
  UnmountArrayRequest(UnmountArrayRequest&& from) noexcept
    : UnmountArrayRequest() {
    *this = ::std::move(from);
  }

  inline UnmountArrayRequest& operator=(const UnmountArrayRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnmountArrayRequest& operator=(UnmountArrayRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnmountArrayRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnmountArrayRequest* internal_default_instance() {
    return reinterpret_cast<const UnmountArrayRequest*>(
               &_UnmountArrayRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(UnmountArrayRequest& a, UnmountArrayRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UnmountArrayRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnmountArrayRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnmountArrayRequest* New() const final {
    return CreateMaybeMessage<UnmountArrayRequest>(nullptr);
  }

  UnmountArrayRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnmountArrayRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnmountArrayRequest& from);
  void MergeFrom(const UnmountArrayRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnmountArrayRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.UnmountArrayRequest";
  }
  protected:
  explicit UnmountArrayRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef UnmountArrayRequest_Param Param;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
    kParamFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // .grpc_cli.UnmountArrayRequest.Param param = 4;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::grpc_cli::UnmountArrayRequest_Param& param() const;
  ::grpc_cli::UnmountArrayRequest_Param* release_param();
  ::grpc_cli::UnmountArrayRequest_Param* mutable_param();
  void set_allocated_param(::grpc_cli::UnmountArrayRequest_Param* param);
  private:
  const ::grpc_cli::UnmountArrayRequest_Param& _internal_param() const;
  ::grpc_cli::UnmountArrayRequest_Param* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::grpc_cli::UnmountArrayRequest_Param* param);
  ::grpc_cli::UnmountArrayRequest_Param* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:grpc_cli.UnmountArrayRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  ::grpc_cli::UnmountArrayRequest_Param* param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class UnmountArrayResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.UnmountArrayResponse.Result) */ {
 public:
  inline UnmountArrayResponse_Result() : UnmountArrayResponse_Result(nullptr) {}
  virtual ~UnmountArrayResponse_Result();
  explicit constexpr UnmountArrayResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnmountArrayResponse_Result(const UnmountArrayResponse_Result& from);
  UnmountArrayResponse_Result(UnmountArrayResponse_Result&& from) noexcept
    : UnmountArrayResponse_Result() {
    *this = ::std::move(from);
  }

  inline UnmountArrayResponse_Result& operator=(const UnmountArrayResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnmountArrayResponse_Result& operator=(UnmountArrayResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnmountArrayResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnmountArrayResponse_Result* internal_default_instance() {
    return reinterpret_cast<const UnmountArrayResponse_Result*>(
               &_UnmountArrayResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(UnmountArrayResponse_Result& a, UnmountArrayResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(UnmountArrayResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnmountArrayResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnmountArrayResponse_Result* New() const final {
    return CreateMaybeMessage<UnmountArrayResponse_Result>(nullptr);
  }

  UnmountArrayResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnmountArrayResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnmountArrayResponse_Result& from);
  void MergeFrom(const UnmountArrayResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnmountArrayResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.UnmountArrayResponse.Result";
  }
  protected:
  explicit UnmountArrayResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:grpc_cli.UnmountArrayResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class UnmountArrayResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.UnmountArrayResponse) */ {
 public:
  inline UnmountArrayResponse() : UnmountArrayResponse(nullptr) {}
  virtual ~UnmountArrayResponse();
  explicit constexpr UnmountArrayResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnmountArrayResponse(const UnmountArrayResponse& from);
  UnmountArrayResponse(UnmountArrayResponse&& from) noexcept
    : UnmountArrayResponse() {
    *this = ::std::move(from);
  }

  inline UnmountArrayResponse& operator=(const UnmountArrayResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnmountArrayResponse& operator=(UnmountArrayResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnmountArrayResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnmountArrayResponse* internal_default_instance() {
    return reinterpret_cast<const UnmountArrayResponse*>(
               &_UnmountArrayResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(UnmountArrayResponse& a, UnmountArrayResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UnmountArrayResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnmountArrayResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnmountArrayResponse* New() const final {
    return CreateMaybeMessage<UnmountArrayResponse>(nullptr);
  }

  UnmountArrayResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnmountArrayResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnmountArrayResponse& from);
  void MergeFrom(const UnmountArrayResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnmountArrayResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.UnmountArrayResponse";
  }
  protected:
  explicit UnmountArrayResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef UnmountArrayResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.UnmountArrayResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::UnmountArrayResponse_Result& result() const;
  ::grpc_cli::UnmountArrayResponse_Result* release_result();
  ::grpc_cli::UnmountArrayResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::UnmountArrayResponse_Result* result);
  private:
  const ::grpc_cli::UnmountArrayResponse_Result& _internal_result() const;
  ::grpc_cli::UnmountArrayResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::UnmountArrayResponse_Result* result);
  ::grpc_cli::UnmountArrayResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.UnmountArrayResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::UnmountArrayResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class Device PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.Device) */ {
 public:
  inline Device() : Device(nullptr) {}
  virtual ~Device();
  explicit constexpr Device(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Device(const Device& from);
  Device(Device&& from) noexcept
    : Device() {
    *this = ::std::move(from);
  }

  inline Device& operator=(const Device& from) {
    CopyFrom(from);
    return *this;
  }
  inline Device& operator=(Device&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Device& default_instance() {
    return *internal_default_instance();
  }
  static inline const Device* internal_default_instance() {
    return reinterpret_cast<const Device*>(
               &_Device_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(Device& a, Device& b) {
    a.Swap(&b);
  }
  inline void Swap(Device* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Device* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Device* New() const final {
    return CreateMaybeMessage<Device>(nullptr);
  }

  Device* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Device>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Device& from);
  void MergeFrom(const Device& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Device* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.Device";
  }
  protected:
  explicit Device(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
    kAddressFieldNumber = 3,
    kClassFieldNumber = 4,
    kMnFieldNumber = 5,
    kNumaFieldNumber = 6,
    kSerialFieldNumber = 7,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string address = 3;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // string class = 4;
  void clear_class_();
  const std::string& class_() const;
  void set_class_(const std::string& value);
  void set_class_(std::string&& value);
  void set_class_(const char* value);
  void set_class_(const char* value, size_t size);
  std::string* mutable_class_();
  std::string* release_class_();
  void set_allocated_class_(std::string* class_);
  private:
  const std::string& _internal_class_() const;
  void _internal_set_class_(const std::string& value);
  std::string* _internal_mutable_class_();
  public:

  // string mn = 5;
  void clear_mn();
  const std::string& mn() const;
  void set_mn(const std::string& value);
  void set_mn(std::string&& value);
  void set_mn(const char* value);
  void set_mn(const char* value, size_t size);
  std::string* mutable_mn();
  std::string* release_mn();
  void set_allocated_mn(std::string* mn);
  private:
  const std::string& _internal_mn() const;
  void _internal_set_mn(const std::string& value);
  std::string* _internal_mutable_mn();
  public:

  // string numa = 6;
  void clear_numa();
  const std::string& numa() const;
  void set_numa(const std::string& value);
  void set_numa(std::string&& value);
  void set_numa(const char* value);
  void set_numa(const char* value, size_t size);
  std::string* mutable_numa();
  std::string* release_numa();
  void set_allocated_numa(std::string* numa);
  private:
  const std::string& _internal_numa() const;
  void _internal_set_numa(const std::string& value);
  std::string* _internal_mutable_numa();
  public:

  // string serial = 7;
  void clear_serial();
  const std::string& serial() const;
  void set_serial(const std::string& value);
  void set_serial(std::string&& value);
  void set_serial(const char* value);
  void set_serial(const char* value, size_t size);
  std::string* mutable_serial();
  std::string* release_serial();
  void set_allocated_serial(std::string* serial);
  private:
  const std::string& _internal_serial() const;
  void _internal_set_serial(const std::string& value);
  std::string* _internal_mutable_serial();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.Device)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr class__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mn_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr numa_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serial_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class Array PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.Array) */ {
 public:
  inline Array() : Array(nullptr) {}
  virtual ~Array();
  explicit constexpr Array(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Array(const Array& from);
  Array(Array&& from) noexcept
    : Array() {
    *this = ::std::move(from);
  }

  inline Array& operator=(const Array& from) {
    CopyFrom(from);
    return *this;
  }
  inline Array& operator=(Array&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Array& default_instance() {
    return *internal_default_instance();
  }
  static inline const Array* internal_default_instance() {
    return reinterpret_cast<const Array*>(
               &_Array_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(Array& a, Array& b) {
    a.Swap(&b);
  }
  inline void Swap(Array* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Array* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Array* New() const final {
    return CreateMaybeMessage<Array>(nullptr);
  }

  Array* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Array>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Array& from);
  void MergeFrom(const Array& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Array* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.Array";
  }
  protected:
  explicit Array(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevicelistFieldNumber = 16,
    kNameFieldNumber = 3,
    kStatusFieldNumber = 4,
    kStateFieldNumber = 5,
    kSituationFieldNumber = 6,
    kCreateDatetimeFieldNumber = 7,
    kUpdateDatetimeFieldNumber = 8,
    kRebuildingProgressFieldNumber = 9,
    kGcModeFieldNumber = 12,
    kMetaRaidFieldNumber = 13,
    kDataRaidFieldNumber = 14,
    kIndexFieldNumber = 1,
    kUniqueIdFieldNumber = 2,
    kCapacityFieldNumber = 10,
    kUsedFieldNumber = 11,
    kWriteThroughEnabledFieldNumber = 15,
  };
  // repeated .grpc_cli.Device devicelist = 16;
  int devicelist_size() const;
  private:
  int _internal_devicelist_size() const;
  public:
  void clear_devicelist();
  ::grpc_cli::Device* mutable_devicelist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::Device >*
      mutable_devicelist();
  private:
  const ::grpc_cli::Device& _internal_devicelist(int index) const;
  ::grpc_cli::Device* _internal_add_devicelist();
  public:
  const ::grpc_cli::Device& devicelist(int index) const;
  ::grpc_cli::Device* add_devicelist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::Device >&
      devicelist() const;

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string status = 4;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // string state = 5;
  void clear_state();
  const std::string& state() const;
  void set_state(const std::string& value);
  void set_state(std::string&& value);
  void set_state(const char* value);
  void set_state(const char* value, size_t size);
  std::string* mutable_state();
  std::string* release_state();
  void set_allocated_state(std::string* state);
  private:
  const std::string& _internal_state() const;
  void _internal_set_state(const std::string& value);
  std::string* _internal_mutable_state();
  public:

  // string situation = 6;
  void clear_situation();
  const std::string& situation() const;
  void set_situation(const std::string& value);
  void set_situation(std::string&& value);
  void set_situation(const char* value);
  void set_situation(const char* value, size_t size);
  std::string* mutable_situation();
  std::string* release_situation();
  void set_allocated_situation(std::string* situation);
  private:
  const std::string& _internal_situation() const;
  void _internal_set_situation(const std::string& value);
  std::string* _internal_mutable_situation();
  public:

  // string createDatetime = 7;
  void clear_createdatetime();
  const std::string& createdatetime() const;
  void set_createdatetime(const std::string& value);
  void set_createdatetime(std::string&& value);
  void set_createdatetime(const char* value);
  void set_createdatetime(const char* value, size_t size);
  std::string* mutable_createdatetime();
  std::string* release_createdatetime();
  void set_allocated_createdatetime(std::string* createdatetime);
  private:
  const std::string& _internal_createdatetime() const;
  void _internal_set_createdatetime(const std::string& value);
  std::string* _internal_mutable_createdatetime();
  public:

  // string updateDatetime = 8;
  void clear_updatedatetime();
  const std::string& updatedatetime() const;
  void set_updatedatetime(const std::string& value);
  void set_updatedatetime(std::string&& value);
  void set_updatedatetime(const char* value);
  void set_updatedatetime(const char* value, size_t size);
  std::string* mutable_updatedatetime();
  std::string* release_updatedatetime();
  void set_allocated_updatedatetime(std::string* updatedatetime);
  private:
  const std::string& _internal_updatedatetime() const;
  void _internal_set_updatedatetime(const std::string& value);
  std::string* _internal_mutable_updatedatetime();
  public:

  // string rebuildingProgress = 9;
  void clear_rebuildingprogress();
  const std::string& rebuildingprogress() const;
  void set_rebuildingprogress(const std::string& value);
  void set_rebuildingprogress(std::string&& value);
  void set_rebuildingprogress(const char* value);
  void set_rebuildingprogress(const char* value, size_t size);
  std::string* mutable_rebuildingprogress();
  std::string* release_rebuildingprogress();
  void set_allocated_rebuildingprogress(std::string* rebuildingprogress);
  private:
  const std::string& _internal_rebuildingprogress() const;
  void _internal_set_rebuildingprogress(const std::string& value);
  std::string* _internal_mutable_rebuildingprogress();
  public:

  // string gcMode = 12;
  void clear_gcmode();
  const std::string& gcmode() const;
  void set_gcmode(const std::string& value);
  void set_gcmode(std::string&& value);
  void set_gcmode(const char* value);
  void set_gcmode(const char* value, size_t size);
  std::string* mutable_gcmode();
  std::string* release_gcmode();
  void set_allocated_gcmode(std::string* gcmode);
  private:
  const std::string& _internal_gcmode() const;
  void _internal_set_gcmode(const std::string& value);
  std::string* _internal_mutable_gcmode();
  public:

  // string metaRaid = 13;
  void clear_metaraid();
  const std::string& metaraid() const;
  void set_metaraid(const std::string& value);
  void set_metaraid(std::string&& value);
  void set_metaraid(const char* value);
  void set_metaraid(const char* value, size_t size);
  std::string* mutable_metaraid();
  std::string* release_metaraid();
  void set_allocated_metaraid(std::string* metaraid);
  private:
  const std::string& _internal_metaraid() const;
  void _internal_set_metaraid(const std::string& value);
  std::string* _internal_mutable_metaraid();
  public:

  // string dataRaid = 14;
  void clear_dataraid();
  const std::string& dataraid() const;
  void set_dataraid(const std::string& value);
  void set_dataraid(std::string&& value);
  void set_dataraid(const char* value);
  void set_dataraid(const char* value, size_t size);
  std::string* mutable_dataraid();
  std::string* release_dataraid();
  void set_allocated_dataraid(std::string* dataraid);
  private:
  const std::string& _internal_dataraid() const;
  void _internal_set_dataraid(const std::string& value);
  std::string* _internal_mutable_dataraid();
  public:

  // int32 index = 1;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 unique_id = 2;
  void clear_unique_id();
  ::PROTOBUF_NAMESPACE_ID::int32 unique_id() const;
  void set_unique_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_unique_id() const;
  void _internal_set_unique_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint64 capacity = 10;
  void clear_capacity();
  ::PROTOBUF_NAMESPACE_ID::uint64 capacity() const;
  void set_capacity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_capacity() const;
  void _internal_set_capacity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 used = 11;
  void clear_used();
  ::PROTOBUF_NAMESPACE_ID::uint64 used() const;
  void set_used(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_used() const;
  void _internal_set_used(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool writeThroughEnabled = 15;
  void clear_writethroughenabled();
  bool writethroughenabled() const;
  void set_writethroughenabled(bool value);
  private:
  bool _internal_writethroughenabled() const;
  void _internal_set_writethroughenabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.Array)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::Device > devicelist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr situation_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr createdatetime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr updatedatetime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rebuildingprogress_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gcmode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metaraid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dataraid_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  ::PROTOBUF_NAMESPACE_ID::int32 unique_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 capacity_;
  ::PROTOBUF_NAMESPACE_ID::uint64 used_;
  bool writethroughenabled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ListArrayRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ListArrayRequest) */ {
 public:
  inline ListArrayRequest() : ListArrayRequest(nullptr) {}
  virtual ~ListArrayRequest();
  explicit constexpr ListArrayRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListArrayRequest(const ListArrayRequest& from);
  ListArrayRequest(ListArrayRequest&& from) noexcept
    : ListArrayRequest() {
    *this = ::std::move(from);
  }

  inline ListArrayRequest& operator=(const ListArrayRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListArrayRequest& operator=(ListArrayRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListArrayRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListArrayRequest* internal_default_instance() {
    return reinterpret_cast<const ListArrayRequest*>(
               &_ListArrayRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(ListArrayRequest& a, ListArrayRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListArrayRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListArrayRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListArrayRequest* New() const final {
    return CreateMaybeMessage<ListArrayRequest>(nullptr);
  }

  ListArrayRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListArrayRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListArrayRequest& from);
  void MergeFrom(const ListArrayRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListArrayRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ListArrayRequest";
  }
  protected:
  explicit ListArrayRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.ListArrayRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ListArrayResponse_Result_ArrayList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ListArrayResponse.Result.ArrayList) */ {
 public:
  inline ListArrayResponse_Result_ArrayList() : ListArrayResponse_Result_ArrayList(nullptr) {}
  virtual ~ListArrayResponse_Result_ArrayList();
  explicit constexpr ListArrayResponse_Result_ArrayList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListArrayResponse_Result_ArrayList(const ListArrayResponse_Result_ArrayList& from);
  ListArrayResponse_Result_ArrayList(ListArrayResponse_Result_ArrayList&& from) noexcept
    : ListArrayResponse_Result_ArrayList() {
    *this = ::std::move(from);
  }

  inline ListArrayResponse_Result_ArrayList& operator=(const ListArrayResponse_Result_ArrayList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListArrayResponse_Result_ArrayList& operator=(ListArrayResponse_Result_ArrayList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListArrayResponse_Result_ArrayList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListArrayResponse_Result_ArrayList* internal_default_instance() {
    return reinterpret_cast<const ListArrayResponse_Result_ArrayList*>(
               &_ListArrayResponse_Result_ArrayList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(ListArrayResponse_Result_ArrayList& a, ListArrayResponse_Result_ArrayList& b) {
    a.Swap(&b);
  }
  inline void Swap(ListArrayResponse_Result_ArrayList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListArrayResponse_Result_ArrayList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListArrayResponse_Result_ArrayList* New() const final {
    return CreateMaybeMessage<ListArrayResponse_Result_ArrayList>(nullptr);
  }

  ListArrayResponse_Result_ArrayList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListArrayResponse_Result_ArrayList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListArrayResponse_Result_ArrayList& from);
  void MergeFrom(const ListArrayResponse_Result_ArrayList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListArrayResponse_Result_ArrayList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ListArrayResponse.Result.ArrayList";
  }
  protected:
  explicit ListArrayResponse_Result_ArrayList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrayListFieldNumber = 1,
  };
  // repeated .grpc_cli.Array arrayList = 1;
  int arraylist_size() const;
  private:
  int _internal_arraylist_size() const;
  public:
  void clear_arraylist();
  ::grpc_cli::Array* mutable_arraylist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::Array >*
      mutable_arraylist();
  private:
  const ::grpc_cli::Array& _internal_arraylist(int index) const;
  ::grpc_cli::Array* _internal_add_arraylist();
  public:
  const ::grpc_cli::Array& arraylist(int index) const;
  ::grpc_cli::Array* add_arraylist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::Array >&
      arraylist() const;

  // @@protoc_insertion_point(class_scope:grpc_cli.ListArrayResponse.Result.ArrayList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::Array > arraylist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ListArrayResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ListArrayResponse.Result) */ {
 public:
  inline ListArrayResponse_Result() : ListArrayResponse_Result(nullptr) {}
  virtual ~ListArrayResponse_Result();
  explicit constexpr ListArrayResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListArrayResponse_Result(const ListArrayResponse_Result& from);
  ListArrayResponse_Result(ListArrayResponse_Result&& from) noexcept
    : ListArrayResponse_Result() {
    *this = ::std::move(from);
  }

  inline ListArrayResponse_Result& operator=(const ListArrayResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListArrayResponse_Result& operator=(ListArrayResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListArrayResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListArrayResponse_Result* internal_default_instance() {
    return reinterpret_cast<const ListArrayResponse_Result*>(
               &_ListArrayResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(ListArrayResponse_Result& a, ListArrayResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(ListArrayResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListArrayResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListArrayResponse_Result* New() const final {
    return CreateMaybeMessage<ListArrayResponse_Result>(nullptr);
  }

  ListArrayResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListArrayResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListArrayResponse_Result& from);
  void MergeFrom(const ListArrayResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListArrayResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ListArrayResponse.Result";
  }
  protected:
  explicit ListArrayResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ListArrayResponse_Result_ArrayList ArrayList;

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // .grpc_cli.ListArrayResponse.Result.ArrayList data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::grpc_cli::ListArrayResponse_Result_ArrayList& data() const;
  ::grpc_cli::ListArrayResponse_Result_ArrayList* release_data();
  ::grpc_cli::ListArrayResponse_Result_ArrayList* mutable_data();
  void set_allocated_data(::grpc_cli::ListArrayResponse_Result_ArrayList* data);
  private:
  const ::grpc_cli::ListArrayResponse_Result_ArrayList& _internal_data() const;
  ::grpc_cli::ListArrayResponse_Result_ArrayList* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::grpc_cli::ListArrayResponse_Result_ArrayList* data);
  ::grpc_cli::ListArrayResponse_Result_ArrayList* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:grpc_cli.ListArrayResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  ::grpc_cli::ListArrayResponse_Result_ArrayList* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ListArrayResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ListArrayResponse) */ {
 public:
  inline ListArrayResponse() : ListArrayResponse(nullptr) {}
  virtual ~ListArrayResponse();
  explicit constexpr ListArrayResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListArrayResponse(const ListArrayResponse& from);
  ListArrayResponse(ListArrayResponse&& from) noexcept
    : ListArrayResponse() {
    *this = ::std::move(from);
  }

  inline ListArrayResponse& operator=(const ListArrayResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListArrayResponse& operator=(ListArrayResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListArrayResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListArrayResponse* internal_default_instance() {
    return reinterpret_cast<const ListArrayResponse*>(
               &_ListArrayResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(ListArrayResponse& a, ListArrayResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListArrayResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListArrayResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListArrayResponse* New() const final {
    return CreateMaybeMessage<ListArrayResponse>(nullptr);
  }

  ListArrayResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListArrayResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListArrayResponse& from);
  void MergeFrom(const ListArrayResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListArrayResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ListArrayResponse";
  }
  protected:
  explicit ListArrayResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ListArrayResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.ListArrayResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::ListArrayResponse_Result& result() const;
  ::grpc_cli::ListArrayResponse_Result* release_result();
  ::grpc_cli::ListArrayResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::ListArrayResponse_Result* result);
  private:
  const ::grpc_cli::ListArrayResponse_Result& _internal_result() const;
  ::grpc_cli::ListArrayResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::ListArrayResponse_Result* result);
  ::grpc_cli::ListArrayResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.ListArrayResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::ListArrayResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ArrayInfoRequest_Param PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ArrayInfoRequest.Param) */ {
 public:
  inline ArrayInfoRequest_Param() : ArrayInfoRequest_Param(nullptr) {}
  virtual ~ArrayInfoRequest_Param();
  explicit constexpr ArrayInfoRequest_Param(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArrayInfoRequest_Param(const ArrayInfoRequest_Param& from);
  ArrayInfoRequest_Param(ArrayInfoRequest_Param&& from) noexcept
    : ArrayInfoRequest_Param() {
    *this = ::std::move(from);
  }

  inline ArrayInfoRequest_Param& operator=(const ArrayInfoRequest_Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArrayInfoRequest_Param& operator=(ArrayInfoRequest_Param&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ArrayInfoRequest_Param& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArrayInfoRequest_Param* internal_default_instance() {
    return reinterpret_cast<const ArrayInfoRequest_Param*>(
               &_ArrayInfoRequest_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(ArrayInfoRequest_Param& a, ArrayInfoRequest_Param& b) {
    a.Swap(&b);
  }
  inline void Swap(ArrayInfoRequest_Param* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArrayInfoRequest_Param* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ArrayInfoRequest_Param* New() const final {
    return CreateMaybeMessage<ArrayInfoRequest_Param>(nullptr);
  }

  ArrayInfoRequest_Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ArrayInfoRequest_Param>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ArrayInfoRequest_Param& from);
  void MergeFrom(const ArrayInfoRequest_Param& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArrayInfoRequest_Param* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ArrayInfoRequest.Param";
  }
  protected:
  explicit ArrayInfoRequest_Param(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.ArrayInfoRequest.Param)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ArrayInfoRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ArrayInfoRequest) */ {
 public:
  inline ArrayInfoRequest() : ArrayInfoRequest(nullptr) {}
  virtual ~ArrayInfoRequest();
  explicit constexpr ArrayInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArrayInfoRequest(const ArrayInfoRequest& from);
  ArrayInfoRequest(ArrayInfoRequest&& from) noexcept
    : ArrayInfoRequest() {
    *this = ::std::move(from);
  }

  inline ArrayInfoRequest& operator=(const ArrayInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArrayInfoRequest& operator=(ArrayInfoRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ArrayInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArrayInfoRequest* internal_default_instance() {
    return reinterpret_cast<const ArrayInfoRequest*>(
               &_ArrayInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(ArrayInfoRequest& a, ArrayInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ArrayInfoRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArrayInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ArrayInfoRequest* New() const final {
    return CreateMaybeMessage<ArrayInfoRequest>(nullptr);
  }

  ArrayInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ArrayInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ArrayInfoRequest& from);
  void MergeFrom(const ArrayInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArrayInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ArrayInfoRequest";
  }
  protected:
  explicit ArrayInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ArrayInfoRequest_Param Param;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
    kParamFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // .grpc_cli.ArrayInfoRequest.Param param = 4;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::grpc_cli::ArrayInfoRequest_Param& param() const;
  ::grpc_cli::ArrayInfoRequest_Param* release_param();
  ::grpc_cli::ArrayInfoRequest_Param* mutable_param();
  void set_allocated_param(::grpc_cli::ArrayInfoRequest_Param* param);
  private:
  const ::grpc_cli::ArrayInfoRequest_Param& _internal_param() const;
  ::grpc_cli::ArrayInfoRequest_Param* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::grpc_cli::ArrayInfoRequest_Param* param);
  ::grpc_cli::ArrayInfoRequest_Param* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:grpc_cli.ArrayInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  ::grpc_cli::ArrayInfoRequest_Param* param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ArrayInfoResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ArrayInfoResponse.Result) */ {
 public:
  inline ArrayInfoResponse_Result() : ArrayInfoResponse_Result(nullptr) {}
  virtual ~ArrayInfoResponse_Result();
  explicit constexpr ArrayInfoResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArrayInfoResponse_Result(const ArrayInfoResponse_Result& from);
  ArrayInfoResponse_Result(ArrayInfoResponse_Result&& from) noexcept
    : ArrayInfoResponse_Result() {
    *this = ::std::move(from);
  }

  inline ArrayInfoResponse_Result& operator=(const ArrayInfoResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArrayInfoResponse_Result& operator=(ArrayInfoResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ArrayInfoResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArrayInfoResponse_Result* internal_default_instance() {
    return reinterpret_cast<const ArrayInfoResponse_Result*>(
               &_ArrayInfoResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(ArrayInfoResponse_Result& a, ArrayInfoResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(ArrayInfoResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArrayInfoResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ArrayInfoResponse_Result* New() const final {
    return CreateMaybeMessage<ArrayInfoResponse_Result>(nullptr);
  }

  ArrayInfoResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ArrayInfoResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ArrayInfoResponse_Result& from);
  void MergeFrom(const ArrayInfoResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArrayInfoResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ArrayInfoResponse.Result";
  }
  protected:
  explicit ArrayInfoResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // .grpc_cli.Array data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::grpc_cli::Array& data() const;
  ::grpc_cli::Array* release_data();
  ::grpc_cli::Array* mutable_data();
  void set_allocated_data(::grpc_cli::Array* data);
  private:
  const ::grpc_cli::Array& _internal_data() const;
  ::grpc_cli::Array* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::grpc_cli::Array* data);
  ::grpc_cli::Array* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:grpc_cli.ArrayInfoResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  ::grpc_cli::Array* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ArrayInfoResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ArrayInfoResponse) */ {
 public:
  inline ArrayInfoResponse() : ArrayInfoResponse(nullptr) {}
  virtual ~ArrayInfoResponse();
  explicit constexpr ArrayInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArrayInfoResponse(const ArrayInfoResponse& from);
  ArrayInfoResponse(ArrayInfoResponse&& from) noexcept
    : ArrayInfoResponse() {
    *this = ::std::move(from);
  }

  inline ArrayInfoResponse& operator=(const ArrayInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArrayInfoResponse& operator=(ArrayInfoResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ArrayInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArrayInfoResponse* internal_default_instance() {
    return reinterpret_cast<const ArrayInfoResponse*>(
               &_ArrayInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(ArrayInfoResponse& a, ArrayInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ArrayInfoResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArrayInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ArrayInfoResponse* New() const final {
    return CreateMaybeMessage<ArrayInfoResponse>(nullptr);
  }

  ArrayInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ArrayInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ArrayInfoResponse& from);
  void MergeFrom(const ArrayInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArrayInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ArrayInfoResponse";
  }
  protected:
  explicit ArrayInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ArrayInfoResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.ArrayInfoResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::ArrayInfoResponse_Result& result() const;
  ::grpc_cli::ArrayInfoResponse_Result* release_result();
  ::grpc_cli::ArrayInfoResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::ArrayInfoResponse_Result* result);
  private:
  const ::grpc_cli::ArrayInfoResponse_Result& _internal_result() const;
  ::grpc_cli::ArrayInfoResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::ArrayInfoResponse_Result* result);
  ::grpc_cli::ArrayInfoResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.ArrayInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::ArrayInfoResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Status

// int32 code = 1;
inline bool Status::_internal_has_code() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Status::has_code() const {
  return _internal_has_code();
}
inline void Status::clear_code() {
  code_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Status::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Status::code() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Status.code)
  return _internal_code();
}
inline void Status::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  code_ = value;
}
inline void Status::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Status.code)
}

// string event_name = 2;
inline bool Status::_internal_has_event_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Status::has_event_name() const {
  return _internal_has_event_name();
}
inline void Status::clear_event_name() {
  event_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Status::event_name() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Status.event_name)
  return _internal_event_name();
}
inline void Status::set_event_name(const std::string& value) {
  _internal_set_event_name(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Status.event_name)
}
inline std::string* Status::mutable_event_name() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Status.event_name)
  return _internal_mutable_event_name();
}
inline const std::string& Status::_internal_event_name() const {
  return event_name_.Get();
}
inline void Status::_internal_set_event_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  event_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Status::set_event_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  event_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Status.event_name)
}
inline void Status::set_event_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  event_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Status.event_name)
}
inline void Status::set_event_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  event_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Status.event_name)
}
inline std::string* Status::_internal_mutable_event_name() {
  _has_bits_[0] |= 0x00000001u;
  return event_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Status::release_event_name() {
  // @@protoc_insertion_point(field_release:grpc_cli.Status.event_name)
  if (!_internal_has_event_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return event_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Status::set_allocated_event_name(std::string* event_name) {
  if (event_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  event_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Status.event_name)
}

// string description = 3;
inline bool Status::_internal_has_description() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Status::has_description() const {
  return _internal_has_description();
}
inline void Status::clear_description() {
  description_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Status::description() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Status.description)
  return _internal_description();
}
inline void Status::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Status.description)
}
inline std::string* Status::mutable_description() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Status.description)
  return _internal_mutable_description();
}
inline const std::string& Status::_internal_description() const {
  return description_.Get();
}
inline void Status::_internal_set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Status::set_description(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Status.description)
}
inline void Status::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Status.description)
}
inline void Status::set_description(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Status.description)
}
inline std::string* Status::_internal_mutable_description() {
  _has_bits_[0] |= 0x00000002u;
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Status::release_description() {
  // @@protoc_insertion_point(field_release:grpc_cli.Status.description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Status::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Status.description)
}

// string cause = 4;
inline bool Status::_internal_has_cause() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Status::has_cause() const {
  return _internal_has_cause();
}
inline void Status::clear_cause() {
  cause_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Status::cause() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Status.cause)
  return _internal_cause();
}
inline void Status::set_cause(const std::string& value) {
  _internal_set_cause(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Status.cause)
}
inline std::string* Status::mutable_cause() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Status.cause)
  return _internal_mutable_cause();
}
inline const std::string& Status::_internal_cause() const {
  return cause_.Get();
}
inline void Status::_internal_set_cause(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  cause_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Status::set_cause(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  cause_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Status.cause)
}
inline void Status::set_cause(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  cause_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Status.cause)
}
inline void Status::set_cause(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  cause_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Status.cause)
}
inline std::string* Status::_internal_mutable_cause() {
  _has_bits_[0] |= 0x00000004u;
  return cause_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Status::release_cause() {
  // @@protoc_insertion_point(field_release:grpc_cli.Status.cause)
  if (!_internal_has_cause()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return cause_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Status::set_allocated_cause(std::string* cause) {
  if (cause != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  cause_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cause,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Status.cause)
}

// string solution = 5;
inline bool Status::_internal_has_solution() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Status::has_solution() const {
  return _internal_has_solution();
}
inline void Status::clear_solution() {
  solution_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Status::solution() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Status.solution)
  return _internal_solution();
}
inline void Status::set_solution(const std::string& value) {
  _internal_set_solution(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Status.solution)
}
inline std::string* Status::mutable_solution() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Status.solution)
  return _internal_mutable_solution();
}
inline const std::string& Status::_internal_solution() const {
  return solution_.Get();
}
inline void Status::_internal_set_solution(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  solution_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Status::set_solution(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  solution_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Status.solution)
}
inline void Status::set_solution(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  solution_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Status.solution)
}
inline void Status::set_solution(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  solution_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Status.solution)
}
inline std::string* Status::_internal_mutable_solution() {
  _has_bits_[0] |= 0x00000008u;
  return solution_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Status::release_solution() {
  // @@protoc_insertion_point(field_release:grpc_cli.Status.solution)
  if (!_internal_has_solution()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return solution_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Status::set_allocated_solution(std::string* solution) {
  if (solution != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  solution_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), solution,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Status.solution)
}

// -------------------------------------------------------------------

// PosInfo

// string version = 1;
inline void PosInfo::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& PosInfo::version() const {
  // @@protoc_insertion_point(field_get:grpc_cli.PosInfo.version)
  return _internal_version();
}
inline void PosInfo::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:grpc_cli.PosInfo.version)
}
inline std::string* PosInfo::mutable_version() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.PosInfo.version)
  return _internal_mutable_version();
}
inline const std::string& PosInfo::_internal_version() const {
  return version_.Get();
}
inline void PosInfo::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PosInfo::set_version(std::string&& value) {
  
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.PosInfo.version)
}
inline void PosInfo::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.PosInfo.version)
}
inline void PosInfo::set_version(const char* value,
    size_t size) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.PosInfo.version)
}
inline std::string* PosInfo::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PosInfo::release_version() {
  // @@protoc_insertion_point(field_release:grpc_cli.PosInfo.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PosInfo::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.PosInfo.version)
}

// -------------------------------------------------------------------

// SystemInfoRequest

// string command = 1;
inline void SystemInfoRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& SystemInfoRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemInfoRequest.command)
  return _internal_command();
}
inline void SystemInfoRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SystemInfoRequest.command)
}
inline std::string* SystemInfoRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemInfoRequest.command)
  return _internal_mutable_command();
}
inline const std::string& SystemInfoRequest::_internal_command() const {
  return command_.Get();
}
inline void SystemInfoRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SystemInfoRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SystemInfoRequest.command)
}
inline void SystemInfoRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SystemInfoRequest.command)
}
inline void SystemInfoRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SystemInfoRequest.command)
}
inline std::string* SystemInfoRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SystemInfoRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemInfoRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SystemInfoRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemInfoRequest.command)
}

// string rid = 2;
inline void SystemInfoRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& SystemInfoRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemInfoRequest.rid)
  return _internal_rid();
}
inline void SystemInfoRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SystemInfoRequest.rid)
}
inline std::string* SystemInfoRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemInfoRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& SystemInfoRequest::_internal_rid() const {
  return rid_.Get();
}
inline void SystemInfoRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SystemInfoRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SystemInfoRequest.rid)
}
inline void SystemInfoRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SystemInfoRequest.rid)
}
inline void SystemInfoRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SystemInfoRequest.rid)
}
inline std::string* SystemInfoRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SystemInfoRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemInfoRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SystemInfoRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemInfoRequest.rid)
}

// string requestor = 3;
inline void SystemInfoRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& SystemInfoRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemInfoRequest.requestor)
  return _internal_requestor();
}
inline void SystemInfoRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SystemInfoRequest.requestor)
}
inline std::string* SystemInfoRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemInfoRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& SystemInfoRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void SystemInfoRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SystemInfoRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SystemInfoRequest.requestor)
}
inline void SystemInfoRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SystemInfoRequest.requestor)
}
inline void SystemInfoRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SystemInfoRequest.requestor)
}
inline std::string* SystemInfoRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SystemInfoRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemInfoRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SystemInfoRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemInfoRequest.requestor)
}

// -------------------------------------------------------------------

// SystemInfoResponse_Result_Data

// string version = 1;
inline void SystemInfoResponse_Result_Data::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& SystemInfoResponse_Result_Data::version() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemInfoResponse.Result.Data.version)
  return _internal_version();
}
inline void SystemInfoResponse_Result_Data::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SystemInfoResponse.Result.Data.version)
}
inline std::string* SystemInfoResponse_Result_Data::mutable_version() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemInfoResponse.Result.Data.version)
  return _internal_mutable_version();
}
inline const std::string& SystemInfoResponse_Result_Data::_internal_version() const {
  return version_.Get();
}
inline void SystemInfoResponse_Result_Data::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SystemInfoResponse_Result_Data::set_version(std::string&& value) {
  
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SystemInfoResponse.Result.Data.version)
}
inline void SystemInfoResponse_Result_Data::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SystemInfoResponse.Result.Data.version)
}
inline void SystemInfoResponse_Result_Data::set_version(const char* value,
    size_t size) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SystemInfoResponse.Result.Data.version)
}
inline std::string* SystemInfoResponse_Result_Data::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SystemInfoResponse_Result_Data::release_version() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemInfoResponse.Result.Data.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SystemInfoResponse_Result_Data::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemInfoResponse.Result.Data.version)
}

// -------------------------------------------------------------------

// SystemInfoResponse_Result

// .grpc_cli.Status status = 1;
inline bool SystemInfoResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SystemInfoResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void SystemInfoResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& SystemInfoResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& SystemInfoResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemInfoResponse.Result.status)
  return _internal_status();
}
inline void SystemInfoResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.SystemInfoResponse.Result.status)
}
inline ::grpc_cli::Status* SystemInfoResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* SystemInfoResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemInfoResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* SystemInfoResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* SystemInfoResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemInfoResponse.Result.status)
  return _internal_mutable_status();
}
inline void SystemInfoResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemInfoResponse.Result.status)
}

// .grpc_cli.SystemInfoResponse.Result.Data data = 2;
inline bool SystemInfoResponse_Result::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool SystemInfoResponse_Result::has_data() const {
  return _internal_has_data();
}
inline void SystemInfoResponse_Result::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::grpc_cli::SystemInfoResponse_Result_Data& SystemInfoResponse_Result::_internal_data() const {
  const ::grpc_cli::SystemInfoResponse_Result_Data* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::SystemInfoResponse_Result_Data&>(
      ::grpc_cli::_SystemInfoResponse_Result_Data_default_instance_);
}
inline const ::grpc_cli::SystemInfoResponse_Result_Data& SystemInfoResponse_Result::data() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemInfoResponse.Result.data)
  return _internal_data();
}
inline void SystemInfoResponse_Result::unsafe_arena_set_allocated_data(
    ::grpc_cli::SystemInfoResponse_Result_Data* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.SystemInfoResponse.Result.data)
}
inline ::grpc_cli::SystemInfoResponse_Result_Data* SystemInfoResponse_Result::release_data() {
  
  ::grpc_cli::SystemInfoResponse_Result_Data* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::SystemInfoResponse_Result_Data* SystemInfoResponse_Result::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemInfoResponse.Result.data)
  
  ::grpc_cli::SystemInfoResponse_Result_Data* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::grpc_cli::SystemInfoResponse_Result_Data* SystemInfoResponse_Result::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::SystemInfoResponse_Result_Data>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::grpc_cli::SystemInfoResponse_Result_Data* SystemInfoResponse_Result::mutable_data() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemInfoResponse.Result.data)
  return _internal_mutable_data();
}
inline void SystemInfoResponse_Result::set_allocated_data(::grpc_cli::SystemInfoResponse_Result_Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemInfoResponse.Result.data)
}

// -------------------------------------------------------------------

// SystemInfoResponse

// string command = 1;
inline void SystemInfoResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& SystemInfoResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemInfoResponse.command)
  return _internal_command();
}
inline void SystemInfoResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SystemInfoResponse.command)
}
inline std::string* SystemInfoResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemInfoResponse.command)
  return _internal_mutable_command();
}
inline const std::string& SystemInfoResponse::_internal_command() const {
  return command_.Get();
}
inline void SystemInfoResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SystemInfoResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SystemInfoResponse.command)
}
inline void SystemInfoResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SystemInfoResponse.command)
}
inline void SystemInfoResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SystemInfoResponse.command)
}
inline std::string* SystemInfoResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SystemInfoResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemInfoResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SystemInfoResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemInfoResponse.command)
}

// string rid = 2;
inline void SystemInfoResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& SystemInfoResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemInfoResponse.rid)
  return _internal_rid();
}
inline void SystemInfoResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SystemInfoResponse.rid)
}
inline std::string* SystemInfoResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemInfoResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& SystemInfoResponse::_internal_rid() const {
  return rid_.Get();
}
inline void SystemInfoResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SystemInfoResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SystemInfoResponse.rid)
}
inline void SystemInfoResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SystemInfoResponse.rid)
}
inline void SystemInfoResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SystemInfoResponse.rid)
}
inline std::string* SystemInfoResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SystemInfoResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemInfoResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SystemInfoResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemInfoResponse.rid)
}

// .grpc_cli.SystemInfoResponse.Result result = 3;
inline bool SystemInfoResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool SystemInfoResponse::has_result() const {
  return _internal_has_result();
}
inline void SystemInfoResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::SystemInfoResponse_Result& SystemInfoResponse::_internal_result() const {
  const ::grpc_cli::SystemInfoResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::SystemInfoResponse_Result&>(
      ::grpc_cli::_SystemInfoResponse_Result_default_instance_);
}
inline const ::grpc_cli::SystemInfoResponse_Result& SystemInfoResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemInfoResponse.result)
  return _internal_result();
}
inline void SystemInfoResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::SystemInfoResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.SystemInfoResponse.result)
}
inline ::grpc_cli::SystemInfoResponse_Result* SystemInfoResponse::release_result() {
  
  ::grpc_cli::SystemInfoResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::SystemInfoResponse_Result* SystemInfoResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemInfoResponse.result)
  
  ::grpc_cli::SystemInfoResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::SystemInfoResponse_Result* SystemInfoResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::SystemInfoResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::SystemInfoResponse_Result* SystemInfoResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemInfoResponse.result)
  return _internal_mutable_result();
}
inline void SystemInfoResponse::set_allocated_result(::grpc_cli::SystemInfoResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemInfoResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool SystemInfoResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool SystemInfoResponse::has_info() const {
  return _internal_has_info();
}
inline void SystemInfoResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& SystemInfoResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& SystemInfoResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemInfoResponse.info)
  return _internal_info();
}
inline void SystemInfoResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.SystemInfoResponse.info)
}
inline ::grpc_cli::PosInfo* SystemInfoResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* SystemInfoResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemInfoResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* SystemInfoResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* SystemInfoResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemInfoResponse.info)
  return _internal_mutable_info();
}
inline void SystemInfoResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemInfoResponse.info)
}

// -------------------------------------------------------------------

// SystemStopRequest

// string command = 1;
inline void SystemStopRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& SystemStopRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemStopRequest.command)
  return _internal_command();
}
inline void SystemStopRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SystemStopRequest.command)
}
inline std::string* SystemStopRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemStopRequest.command)
  return _internal_mutable_command();
}
inline const std::string& SystemStopRequest::_internal_command() const {
  return command_.Get();
}
inline void SystemStopRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SystemStopRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SystemStopRequest.command)
}
inline void SystemStopRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SystemStopRequest.command)
}
inline void SystemStopRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SystemStopRequest.command)
}
inline std::string* SystemStopRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SystemStopRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemStopRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SystemStopRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemStopRequest.command)
}

// string rid = 2;
inline void SystemStopRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& SystemStopRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemStopRequest.rid)
  return _internal_rid();
}
inline void SystemStopRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SystemStopRequest.rid)
}
inline std::string* SystemStopRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemStopRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& SystemStopRequest::_internal_rid() const {
  return rid_.Get();
}
inline void SystemStopRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SystemStopRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SystemStopRequest.rid)
}
inline void SystemStopRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SystemStopRequest.rid)
}
inline void SystemStopRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SystemStopRequest.rid)
}
inline std::string* SystemStopRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SystemStopRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemStopRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SystemStopRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemStopRequest.rid)
}

// string requestor = 3;
inline void SystemStopRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& SystemStopRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemStopRequest.requestor)
  return _internal_requestor();
}
inline void SystemStopRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SystemStopRequest.requestor)
}
inline std::string* SystemStopRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemStopRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& SystemStopRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void SystemStopRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SystemStopRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SystemStopRequest.requestor)
}
inline void SystemStopRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SystemStopRequest.requestor)
}
inline void SystemStopRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SystemStopRequest.requestor)
}
inline std::string* SystemStopRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SystemStopRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemStopRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SystemStopRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemStopRequest.requestor)
}

// -------------------------------------------------------------------

// SystemStopResponse_Result

// .grpc_cli.Status status = 1;
inline bool SystemStopResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SystemStopResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void SystemStopResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& SystemStopResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& SystemStopResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemStopResponse.Result.status)
  return _internal_status();
}
inline void SystemStopResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.SystemStopResponse.Result.status)
}
inline ::grpc_cli::Status* SystemStopResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* SystemStopResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemStopResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* SystemStopResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* SystemStopResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemStopResponse.Result.status)
  return _internal_mutable_status();
}
inline void SystemStopResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemStopResponse.Result.status)
}

// -------------------------------------------------------------------

// SystemStopResponse

// string command = 1;
inline void SystemStopResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& SystemStopResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemStopResponse.command)
  return _internal_command();
}
inline void SystemStopResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SystemStopResponse.command)
}
inline std::string* SystemStopResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemStopResponse.command)
  return _internal_mutable_command();
}
inline const std::string& SystemStopResponse::_internal_command() const {
  return command_.Get();
}
inline void SystemStopResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SystemStopResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SystemStopResponse.command)
}
inline void SystemStopResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SystemStopResponse.command)
}
inline void SystemStopResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SystemStopResponse.command)
}
inline std::string* SystemStopResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SystemStopResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemStopResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SystemStopResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemStopResponse.command)
}

// string rid = 2;
inline void SystemStopResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& SystemStopResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemStopResponse.rid)
  return _internal_rid();
}
inline void SystemStopResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SystemStopResponse.rid)
}
inline std::string* SystemStopResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemStopResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& SystemStopResponse::_internal_rid() const {
  return rid_.Get();
}
inline void SystemStopResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SystemStopResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SystemStopResponse.rid)
}
inline void SystemStopResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SystemStopResponse.rid)
}
inline void SystemStopResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SystemStopResponse.rid)
}
inline std::string* SystemStopResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SystemStopResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemStopResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SystemStopResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemStopResponse.rid)
}

// .grpc_cli.SystemStopResponse.Result result = 3;
inline bool SystemStopResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool SystemStopResponse::has_result() const {
  return _internal_has_result();
}
inline void SystemStopResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::SystemStopResponse_Result& SystemStopResponse::_internal_result() const {
  const ::grpc_cli::SystemStopResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::SystemStopResponse_Result&>(
      ::grpc_cli::_SystemStopResponse_Result_default_instance_);
}
inline const ::grpc_cli::SystemStopResponse_Result& SystemStopResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemStopResponse.result)
  return _internal_result();
}
inline void SystemStopResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::SystemStopResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.SystemStopResponse.result)
}
inline ::grpc_cli::SystemStopResponse_Result* SystemStopResponse::release_result() {
  
  ::grpc_cli::SystemStopResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::SystemStopResponse_Result* SystemStopResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemStopResponse.result)
  
  ::grpc_cli::SystemStopResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::SystemStopResponse_Result* SystemStopResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::SystemStopResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::SystemStopResponse_Result* SystemStopResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemStopResponse.result)
  return _internal_mutable_result();
}
inline void SystemStopResponse::set_allocated_result(::grpc_cli::SystemStopResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemStopResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool SystemStopResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool SystemStopResponse::has_info() const {
  return _internal_has_info();
}
inline void SystemStopResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& SystemStopResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& SystemStopResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemStopResponse.info)
  return _internal_info();
}
inline void SystemStopResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.SystemStopResponse.info)
}
inline ::grpc_cli::PosInfo* SystemStopResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* SystemStopResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemStopResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* SystemStopResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* SystemStopResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemStopResponse.info)
  return _internal_mutable_info();
}
inline void SystemStopResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemStopResponse.info)
}

// -------------------------------------------------------------------

// GetSystemPropertyRequest

// string command = 1;
inline void GetSystemPropertyRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& GetSystemPropertyRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetSystemPropertyRequest.command)
  return _internal_command();
}
inline void GetSystemPropertyRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.GetSystemPropertyRequest.command)
}
inline std::string* GetSystemPropertyRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetSystemPropertyRequest.command)
  return _internal_mutable_command();
}
inline const std::string& GetSystemPropertyRequest::_internal_command() const {
  return command_.Get();
}
inline void GetSystemPropertyRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetSystemPropertyRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.GetSystemPropertyRequest.command)
}
inline void GetSystemPropertyRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.GetSystemPropertyRequest.command)
}
inline void GetSystemPropertyRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.GetSystemPropertyRequest.command)
}
inline std::string* GetSystemPropertyRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetSystemPropertyRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetSystemPropertyRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSystemPropertyRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetSystemPropertyRequest.command)
}

// string rid = 2;
inline void GetSystemPropertyRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& GetSystemPropertyRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetSystemPropertyRequest.rid)
  return _internal_rid();
}
inline void GetSystemPropertyRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.GetSystemPropertyRequest.rid)
}
inline std::string* GetSystemPropertyRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetSystemPropertyRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& GetSystemPropertyRequest::_internal_rid() const {
  return rid_.Get();
}
inline void GetSystemPropertyRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetSystemPropertyRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.GetSystemPropertyRequest.rid)
}
inline void GetSystemPropertyRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.GetSystemPropertyRequest.rid)
}
inline void GetSystemPropertyRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.GetSystemPropertyRequest.rid)
}
inline std::string* GetSystemPropertyRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetSystemPropertyRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetSystemPropertyRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSystemPropertyRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetSystemPropertyRequest.rid)
}

// string requestor = 3;
inline void GetSystemPropertyRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& GetSystemPropertyRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetSystemPropertyRequest.requestor)
  return _internal_requestor();
}
inline void GetSystemPropertyRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.GetSystemPropertyRequest.requestor)
}
inline std::string* GetSystemPropertyRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetSystemPropertyRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& GetSystemPropertyRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void GetSystemPropertyRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetSystemPropertyRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.GetSystemPropertyRequest.requestor)
}
inline void GetSystemPropertyRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.GetSystemPropertyRequest.requestor)
}
inline void GetSystemPropertyRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.GetSystemPropertyRequest.requestor)
}
inline std::string* GetSystemPropertyRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetSystemPropertyRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetSystemPropertyRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSystemPropertyRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetSystemPropertyRequest.requestor)
}

// -------------------------------------------------------------------

// GetSystemPropertyResponse_Result_Data

// string rebuild_policy = 1;
inline void GetSystemPropertyResponse_Result_Data::clear_rebuild_policy() {
  rebuild_policy_.ClearToEmpty();
}
inline const std::string& GetSystemPropertyResponse_Result_Data::rebuild_policy() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetSystemPropertyResponse.Result.Data.rebuild_policy)
  return _internal_rebuild_policy();
}
inline void GetSystemPropertyResponse_Result_Data::set_rebuild_policy(const std::string& value) {
  _internal_set_rebuild_policy(value);
  // @@protoc_insertion_point(field_set:grpc_cli.GetSystemPropertyResponse.Result.Data.rebuild_policy)
}
inline std::string* GetSystemPropertyResponse_Result_Data::mutable_rebuild_policy() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetSystemPropertyResponse.Result.Data.rebuild_policy)
  return _internal_mutable_rebuild_policy();
}
inline const std::string& GetSystemPropertyResponse_Result_Data::_internal_rebuild_policy() const {
  return rebuild_policy_.Get();
}
inline void GetSystemPropertyResponse_Result_Data::_internal_set_rebuild_policy(const std::string& value) {
  
  rebuild_policy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetSystemPropertyResponse_Result_Data::set_rebuild_policy(std::string&& value) {
  
  rebuild_policy_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.GetSystemPropertyResponse.Result.Data.rebuild_policy)
}
inline void GetSystemPropertyResponse_Result_Data::set_rebuild_policy(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rebuild_policy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.GetSystemPropertyResponse.Result.Data.rebuild_policy)
}
inline void GetSystemPropertyResponse_Result_Data::set_rebuild_policy(const char* value,
    size_t size) {
  
  rebuild_policy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.GetSystemPropertyResponse.Result.Data.rebuild_policy)
}
inline std::string* GetSystemPropertyResponse_Result_Data::_internal_mutable_rebuild_policy() {
  
  return rebuild_policy_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetSystemPropertyResponse_Result_Data::release_rebuild_policy() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetSystemPropertyResponse.Result.Data.rebuild_policy)
  return rebuild_policy_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSystemPropertyResponse_Result_Data::set_allocated_rebuild_policy(std::string* rebuild_policy) {
  if (rebuild_policy != nullptr) {
    
  } else {
    
  }
  rebuild_policy_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rebuild_policy,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetSystemPropertyResponse.Result.Data.rebuild_policy)
}

// -------------------------------------------------------------------

// GetSystemPropertyResponse_Result

// .grpc_cli.Status status = 1;
inline bool GetSystemPropertyResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool GetSystemPropertyResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void GetSystemPropertyResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& GetSystemPropertyResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& GetSystemPropertyResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetSystemPropertyResponse.Result.status)
  return _internal_status();
}
inline void GetSystemPropertyResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.GetSystemPropertyResponse.Result.status)
}
inline ::grpc_cli::Status* GetSystemPropertyResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* GetSystemPropertyResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetSystemPropertyResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* GetSystemPropertyResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* GetSystemPropertyResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetSystemPropertyResponse.Result.status)
  return _internal_mutable_status();
}
inline void GetSystemPropertyResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetSystemPropertyResponse.Result.status)
}

// .grpc_cli.GetSystemPropertyResponse.Result.Data data = 2;
inline bool GetSystemPropertyResponse_Result::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool GetSystemPropertyResponse_Result::has_data() const {
  return _internal_has_data();
}
inline void GetSystemPropertyResponse_Result::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::grpc_cli::GetSystemPropertyResponse_Result_Data& GetSystemPropertyResponse_Result::_internal_data() const {
  const ::grpc_cli::GetSystemPropertyResponse_Result_Data* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::GetSystemPropertyResponse_Result_Data&>(
      ::grpc_cli::_GetSystemPropertyResponse_Result_Data_default_instance_);
}
inline const ::grpc_cli::GetSystemPropertyResponse_Result_Data& GetSystemPropertyResponse_Result::data() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetSystemPropertyResponse.Result.data)
  return _internal_data();
}
inline void GetSystemPropertyResponse_Result::unsafe_arena_set_allocated_data(
    ::grpc_cli::GetSystemPropertyResponse_Result_Data* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.GetSystemPropertyResponse.Result.data)
}
inline ::grpc_cli::GetSystemPropertyResponse_Result_Data* GetSystemPropertyResponse_Result::release_data() {
  
  ::grpc_cli::GetSystemPropertyResponse_Result_Data* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::GetSystemPropertyResponse_Result_Data* GetSystemPropertyResponse_Result::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetSystemPropertyResponse.Result.data)
  
  ::grpc_cli::GetSystemPropertyResponse_Result_Data* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::grpc_cli::GetSystemPropertyResponse_Result_Data* GetSystemPropertyResponse_Result::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::GetSystemPropertyResponse_Result_Data>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::grpc_cli::GetSystemPropertyResponse_Result_Data* GetSystemPropertyResponse_Result::mutable_data() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetSystemPropertyResponse.Result.data)
  return _internal_mutable_data();
}
inline void GetSystemPropertyResponse_Result::set_allocated_data(::grpc_cli::GetSystemPropertyResponse_Result_Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetSystemPropertyResponse.Result.data)
}

// -------------------------------------------------------------------

// GetSystemPropertyResponse

// string command = 1;
inline void GetSystemPropertyResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& GetSystemPropertyResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetSystemPropertyResponse.command)
  return _internal_command();
}
inline void GetSystemPropertyResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.GetSystemPropertyResponse.command)
}
inline std::string* GetSystemPropertyResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetSystemPropertyResponse.command)
  return _internal_mutable_command();
}
inline const std::string& GetSystemPropertyResponse::_internal_command() const {
  return command_.Get();
}
inline void GetSystemPropertyResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetSystemPropertyResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.GetSystemPropertyResponse.command)
}
inline void GetSystemPropertyResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.GetSystemPropertyResponse.command)
}
inline void GetSystemPropertyResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.GetSystemPropertyResponse.command)
}
inline std::string* GetSystemPropertyResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetSystemPropertyResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetSystemPropertyResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSystemPropertyResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetSystemPropertyResponse.command)
}

// string rid = 2;
inline void GetSystemPropertyResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& GetSystemPropertyResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetSystemPropertyResponse.rid)
  return _internal_rid();
}
inline void GetSystemPropertyResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.GetSystemPropertyResponse.rid)
}
inline std::string* GetSystemPropertyResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetSystemPropertyResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& GetSystemPropertyResponse::_internal_rid() const {
  return rid_.Get();
}
inline void GetSystemPropertyResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetSystemPropertyResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.GetSystemPropertyResponse.rid)
}
inline void GetSystemPropertyResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.GetSystemPropertyResponse.rid)
}
inline void GetSystemPropertyResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.GetSystemPropertyResponse.rid)
}
inline std::string* GetSystemPropertyResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetSystemPropertyResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetSystemPropertyResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSystemPropertyResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetSystemPropertyResponse.rid)
}

// .grpc_cli.GetSystemPropertyResponse.Result result = 3;
inline bool GetSystemPropertyResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool GetSystemPropertyResponse::has_result() const {
  return _internal_has_result();
}
inline void GetSystemPropertyResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::GetSystemPropertyResponse_Result& GetSystemPropertyResponse::_internal_result() const {
  const ::grpc_cli::GetSystemPropertyResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::GetSystemPropertyResponse_Result&>(
      ::grpc_cli::_GetSystemPropertyResponse_Result_default_instance_);
}
inline const ::grpc_cli::GetSystemPropertyResponse_Result& GetSystemPropertyResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetSystemPropertyResponse.result)
  return _internal_result();
}
inline void GetSystemPropertyResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::GetSystemPropertyResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.GetSystemPropertyResponse.result)
}
inline ::grpc_cli::GetSystemPropertyResponse_Result* GetSystemPropertyResponse::release_result() {
  
  ::grpc_cli::GetSystemPropertyResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::GetSystemPropertyResponse_Result* GetSystemPropertyResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetSystemPropertyResponse.result)
  
  ::grpc_cli::GetSystemPropertyResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::GetSystemPropertyResponse_Result* GetSystemPropertyResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::GetSystemPropertyResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::GetSystemPropertyResponse_Result* GetSystemPropertyResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetSystemPropertyResponse.result)
  return _internal_mutable_result();
}
inline void GetSystemPropertyResponse::set_allocated_result(::grpc_cli::GetSystemPropertyResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetSystemPropertyResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool GetSystemPropertyResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool GetSystemPropertyResponse::has_info() const {
  return _internal_has_info();
}
inline void GetSystemPropertyResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& GetSystemPropertyResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& GetSystemPropertyResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetSystemPropertyResponse.info)
  return _internal_info();
}
inline void GetSystemPropertyResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.GetSystemPropertyResponse.info)
}
inline ::grpc_cli::PosInfo* GetSystemPropertyResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* GetSystemPropertyResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetSystemPropertyResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* GetSystemPropertyResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* GetSystemPropertyResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetSystemPropertyResponse.info)
  return _internal_mutable_info();
}
inline void GetSystemPropertyResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetSystemPropertyResponse.info)
}

// -------------------------------------------------------------------

// SetSystemPropertyRequest_Param

// string level = 1;
inline void SetSystemPropertyRequest_Param::clear_level() {
  level_.ClearToEmpty();
}
inline const std::string& SetSystemPropertyRequest_Param::level() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetSystemPropertyRequest.Param.level)
  return _internal_level();
}
inline void SetSystemPropertyRequest_Param::set_level(const std::string& value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SetSystemPropertyRequest.Param.level)
}
inline std::string* SetSystemPropertyRequest_Param::mutable_level() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetSystemPropertyRequest.Param.level)
  return _internal_mutable_level();
}
inline const std::string& SetSystemPropertyRequest_Param::_internal_level() const {
  return level_.Get();
}
inline void SetSystemPropertyRequest_Param::_internal_set_level(const std::string& value) {
  
  level_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetSystemPropertyRequest_Param::set_level(std::string&& value) {
  
  level_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SetSystemPropertyRequest.Param.level)
}
inline void SetSystemPropertyRequest_Param::set_level(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  level_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SetSystemPropertyRequest.Param.level)
}
inline void SetSystemPropertyRequest_Param::set_level(const char* value,
    size_t size) {
  
  level_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SetSystemPropertyRequest.Param.level)
}
inline std::string* SetSystemPropertyRequest_Param::_internal_mutable_level() {
  
  return level_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetSystemPropertyRequest_Param::release_level() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetSystemPropertyRequest.Param.level)
  return level_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetSystemPropertyRequest_Param::set_allocated_level(std::string* level) {
  if (level != nullptr) {
    
  } else {
    
  }
  level_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), level,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetSystemPropertyRequest.Param.level)
}

// -------------------------------------------------------------------

// SetSystemPropertyRequest

// string command = 1;
inline void SetSystemPropertyRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& SetSystemPropertyRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetSystemPropertyRequest.command)
  return _internal_command();
}
inline void SetSystemPropertyRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SetSystemPropertyRequest.command)
}
inline std::string* SetSystemPropertyRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetSystemPropertyRequest.command)
  return _internal_mutable_command();
}
inline const std::string& SetSystemPropertyRequest::_internal_command() const {
  return command_.Get();
}
inline void SetSystemPropertyRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetSystemPropertyRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SetSystemPropertyRequest.command)
}
inline void SetSystemPropertyRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SetSystemPropertyRequest.command)
}
inline void SetSystemPropertyRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SetSystemPropertyRequest.command)
}
inline std::string* SetSystemPropertyRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetSystemPropertyRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetSystemPropertyRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetSystemPropertyRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetSystemPropertyRequest.command)
}

// string rid = 2;
inline void SetSystemPropertyRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& SetSystemPropertyRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetSystemPropertyRequest.rid)
  return _internal_rid();
}
inline void SetSystemPropertyRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SetSystemPropertyRequest.rid)
}
inline std::string* SetSystemPropertyRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetSystemPropertyRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& SetSystemPropertyRequest::_internal_rid() const {
  return rid_.Get();
}
inline void SetSystemPropertyRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetSystemPropertyRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SetSystemPropertyRequest.rid)
}
inline void SetSystemPropertyRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SetSystemPropertyRequest.rid)
}
inline void SetSystemPropertyRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SetSystemPropertyRequest.rid)
}
inline std::string* SetSystemPropertyRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetSystemPropertyRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetSystemPropertyRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetSystemPropertyRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetSystemPropertyRequest.rid)
}

// string requestor = 3;
inline void SetSystemPropertyRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& SetSystemPropertyRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetSystemPropertyRequest.requestor)
  return _internal_requestor();
}
inline void SetSystemPropertyRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SetSystemPropertyRequest.requestor)
}
inline std::string* SetSystemPropertyRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetSystemPropertyRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& SetSystemPropertyRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void SetSystemPropertyRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetSystemPropertyRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SetSystemPropertyRequest.requestor)
}
inline void SetSystemPropertyRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SetSystemPropertyRequest.requestor)
}
inline void SetSystemPropertyRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SetSystemPropertyRequest.requestor)
}
inline std::string* SetSystemPropertyRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetSystemPropertyRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetSystemPropertyRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetSystemPropertyRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetSystemPropertyRequest.requestor)
}

// .grpc_cli.SetSystemPropertyRequest.Param param = 4;
inline bool SetSystemPropertyRequest::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool SetSystemPropertyRequest::has_param() const {
  return _internal_has_param();
}
inline void SetSystemPropertyRequest::clear_param() {
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::grpc_cli::SetSystemPropertyRequest_Param& SetSystemPropertyRequest::_internal_param() const {
  const ::grpc_cli::SetSystemPropertyRequest_Param* p = param_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::SetSystemPropertyRequest_Param&>(
      ::grpc_cli::_SetSystemPropertyRequest_Param_default_instance_);
}
inline const ::grpc_cli::SetSystemPropertyRequest_Param& SetSystemPropertyRequest::param() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetSystemPropertyRequest.param)
  return _internal_param();
}
inline void SetSystemPropertyRequest::unsafe_arena_set_allocated_param(
    ::grpc_cli::SetSystemPropertyRequest_Param* param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.SetSystemPropertyRequest.param)
}
inline ::grpc_cli::SetSystemPropertyRequest_Param* SetSystemPropertyRequest::release_param() {
  
  ::grpc_cli::SetSystemPropertyRequest_Param* temp = param_;
  param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::SetSystemPropertyRequest_Param* SetSystemPropertyRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetSystemPropertyRequest.param)
  
  ::grpc_cli::SetSystemPropertyRequest_Param* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::grpc_cli::SetSystemPropertyRequest_Param* SetSystemPropertyRequest::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::SetSystemPropertyRequest_Param>(GetArena());
    param_ = p;
  }
  return param_;
}
inline ::grpc_cli::SetSystemPropertyRequest_Param* SetSystemPropertyRequest::mutable_param() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetSystemPropertyRequest.param)
  return _internal_mutable_param();
}
inline void SetSystemPropertyRequest::set_allocated_param(::grpc_cli::SetSystemPropertyRequest_Param* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetSystemPropertyRequest.param)
}

// -------------------------------------------------------------------

// SetSystemPropertyResponse_Result

// .grpc_cli.Status status = 1;
inline bool SetSystemPropertyResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SetSystemPropertyResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void SetSystemPropertyResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& SetSystemPropertyResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& SetSystemPropertyResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetSystemPropertyResponse.Result.status)
  return _internal_status();
}
inline void SetSystemPropertyResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.SetSystemPropertyResponse.Result.status)
}
inline ::grpc_cli::Status* SetSystemPropertyResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* SetSystemPropertyResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetSystemPropertyResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* SetSystemPropertyResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* SetSystemPropertyResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetSystemPropertyResponse.Result.status)
  return _internal_mutable_status();
}
inline void SetSystemPropertyResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetSystemPropertyResponse.Result.status)
}

// -------------------------------------------------------------------

// SetSystemPropertyResponse

// string command = 1;
inline void SetSystemPropertyResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& SetSystemPropertyResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetSystemPropertyResponse.command)
  return _internal_command();
}
inline void SetSystemPropertyResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SetSystemPropertyResponse.command)
}
inline std::string* SetSystemPropertyResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetSystemPropertyResponse.command)
  return _internal_mutable_command();
}
inline const std::string& SetSystemPropertyResponse::_internal_command() const {
  return command_.Get();
}
inline void SetSystemPropertyResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetSystemPropertyResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SetSystemPropertyResponse.command)
}
inline void SetSystemPropertyResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SetSystemPropertyResponse.command)
}
inline void SetSystemPropertyResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SetSystemPropertyResponse.command)
}
inline std::string* SetSystemPropertyResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetSystemPropertyResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetSystemPropertyResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetSystemPropertyResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetSystemPropertyResponse.command)
}

// string rid = 2;
inline void SetSystemPropertyResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& SetSystemPropertyResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetSystemPropertyResponse.rid)
  return _internal_rid();
}
inline void SetSystemPropertyResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SetSystemPropertyResponse.rid)
}
inline std::string* SetSystemPropertyResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetSystemPropertyResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& SetSystemPropertyResponse::_internal_rid() const {
  return rid_.Get();
}
inline void SetSystemPropertyResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetSystemPropertyResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SetSystemPropertyResponse.rid)
}
inline void SetSystemPropertyResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SetSystemPropertyResponse.rid)
}
inline void SetSystemPropertyResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SetSystemPropertyResponse.rid)
}
inline std::string* SetSystemPropertyResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetSystemPropertyResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetSystemPropertyResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetSystemPropertyResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetSystemPropertyResponse.rid)
}

// .grpc_cli.SetSystemPropertyResponse.Result result = 3;
inline bool SetSystemPropertyResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool SetSystemPropertyResponse::has_result() const {
  return _internal_has_result();
}
inline void SetSystemPropertyResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::SetSystemPropertyResponse_Result& SetSystemPropertyResponse::_internal_result() const {
  const ::grpc_cli::SetSystemPropertyResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::SetSystemPropertyResponse_Result&>(
      ::grpc_cli::_SetSystemPropertyResponse_Result_default_instance_);
}
inline const ::grpc_cli::SetSystemPropertyResponse_Result& SetSystemPropertyResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetSystemPropertyResponse.result)
  return _internal_result();
}
inline void SetSystemPropertyResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::SetSystemPropertyResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.SetSystemPropertyResponse.result)
}
inline ::grpc_cli::SetSystemPropertyResponse_Result* SetSystemPropertyResponse::release_result() {
  
  ::grpc_cli::SetSystemPropertyResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::SetSystemPropertyResponse_Result* SetSystemPropertyResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetSystemPropertyResponse.result)
  
  ::grpc_cli::SetSystemPropertyResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::SetSystemPropertyResponse_Result* SetSystemPropertyResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::SetSystemPropertyResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::SetSystemPropertyResponse_Result* SetSystemPropertyResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetSystemPropertyResponse.result)
  return _internal_mutable_result();
}
inline void SetSystemPropertyResponse::set_allocated_result(::grpc_cli::SetSystemPropertyResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetSystemPropertyResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool SetSystemPropertyResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool SetSystemPropertyResponse::has_info() const {
  return _internal_has_info();
}
inline void SetSystemPropertyResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& SetSystemPropertyResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& SetSystemPropertyResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetSystemPropertyResponse.info)
  return _internal_info();
}
inline void SetSystemPropertyResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.SetSystemPropertyResponse.info)
}
inline ::grpc_cli::PosInfo* SetSystemPropertyResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* SetSystemPropertyResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetSystemPropertyResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* SetSystemPropertyResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* SetSystemPropertyResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetSystemPropertyResponse.info)
  return _internal_mutable_info();
}
inline void SetSystemPropertyResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetSystemPropertyResponse.info)
}

// -------------------------------------------------------------------

// StartTelemetryRequest

// string command = 1;
inline void StartTelemetryRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& StartTelemetryRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StartTelemetryRequest.command)
  return _internal_command();
}
inline void StartTelemetryRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StartTelemetryRequest.command)
}
inline std::string* StartTelemetryRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StartTelemetryRequest.command)
  return _internal_mutable_command();
}
inline const std::string& StartTelemetryRequest::_internal_command() const {
  return command_.Get();
}
inline void StartTelemetryRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StartTelemetryRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StartTelemetryRequest.command)
}
inline void StartTelemetryRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StartTelemetryRequest.command)
}
inline void StartTelemetryRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StartTelemetryRequest.command)
}
inline std::string* StartTelemetryRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StartTelemetryRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.StartTelemetryRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartTelemetryRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StartTelemetryRequest.command)
}

// string rid = 2;
inline void StartTelemetryRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& StartTelemetryRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StartTelemetryRequest.rid)
  return _internal_rid();
}
inline void StartTelemetryRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StartTelemetryRequest.rid)
}
inline std::string* StartTelemetryRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StartTelemetryRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& StartTelemetryRequest::_internal_rid() const {
  return rid_.Get();
}
inline void StartTelemetryRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StartTelemetryRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StartTelemetryRequest.rid)
}
inline void StartTelemetryRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StartTelemetryRequest.rid)
}
inline void StartTelemetryRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StartTelemetryRequest.rid)
}
inline std::string* StartTelemetryRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StartTelemetryRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.StartTelemetryRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartTelemetryRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StartTelemetryRequest.rid)
}

// string requestor = 3;
inline void StartTelemetryRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& StartTelemetryRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StartTelemetryRequest.requestor)
  return _internal_requestor();
}
inline void StartTelemetryRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StartTelemetryRequest.requestor)
}
inline std::string* StartTelemetryRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StartTelemetryRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& StartTelemetryRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void StartTelemetryRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StartTelemetryRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StartTelemetryRequest.requestor)
}
inline void StartTelemetryRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StartTelemetryRequest.requestor)
}
inline void StartTelemetryRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StartTelemetryRequest.requestor)
}
inline std::string* StartTelemetryRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StartTelemetryRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.StartTelemetryRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartTelemetryRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StartTelemetryRequest.requestor)
}

// -------------------------------------------------------------------

// StartTelemetryResponse_Result

// .grpc_cli.Status status = 1;
inline bool StartTelemetryResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool StartTelemetryResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void StartTelemetryResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& StartTelemetryResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& StartTelemetryResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StartTelemetryResponse.Result.status)
  return _internal_status();
}
inline void StartTelemetryResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.StartTelemetryResponse.Result.status)
}
inline ::grpc_cli::Status* StartTelemetryResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* StartTelemetryResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.StartTelemetryResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* StartTelemetryResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* StartTelemetryResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StartTelemetryResponse.Result.status)
  return _internal_mutable_status();
}
inline void StartTelemetryResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StartTelemetryResponse.Result.status)
}

// -------------------------------------------------------------------

// StartTelemetryResponse

// string command = 1;
inline void StartTelemetryResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& StartTelemetryResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StartTelemetryResponse.command)
  return _internal_command();
}
inline void StartTelemetryResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StartTelemetryResponse.command)
}
inline std::string* StartTelemetryResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StartTelemetryResponse.command)
  return _internal_mutable_command();
}
inline const std::string& StartTelemetryResponse::_internal_command() const {
  return command_.Get();
}
inline void StartTelemetryResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StartTelemetryResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StartTelemetryResponse.command)
}
inline void StartTelemetryResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StartTelemetryResponse.command)
}
inline void StartTelemetryResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StartTelemetryResponse.command)
}
inline std::string* StartTelemetryResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StartTelemetryResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.StartTelemetryResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartTelemetryResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StartTelemetryResponse.command)
}

// string rid = 2;
inline void StartTelemetryResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& StartTelemetryResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StartTelemetryResponse.rid)
  return _internal_rid();
}
inline void StartTelemetryResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StartTelemetryResponse.rid)
}
inline std::string* StartTelemetryResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StartTelemetryResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& StartTelemetryResponse::_internal_rid() const {
  return rid_.Get();
}
inline void StartTelemetryResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StartTelemetryResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StartTelemetryResponse.rid)
}
inline void StartTelemetryResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StartTelemetryResponse.rid)
}
inline void StartTelemetryResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StartTelemetryResponse.rid)
}
inline std::string* StartTelemetryResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StartTelemetryResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.StartTelemetryResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartTelemetryResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StartTelemetryResponse.rid)
}

// .grpc_cli.StartTelemetryResponse.Result result = 3;
inline bool StartTelemetryResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool StartTelemetryResponse::has_result() const {
  return _internal_has_result();
}
inline void StartTelemetryResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::StartTelemetryResponse_Result& StartTelemetryResponse::_internal_result() const {
  const ::grpc_cli::StartTelemetryResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::StartTelemetryResponse_Result&>(
      ::grpc_cli::_StartTelemetryResponse_Result_default_instance_);
}
inline const ::grpc_cli::StartTelemetryResponse_Result& StartTelemetryResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StartTelemetryResponse.result)
  return _internal_result();
}
inline void StartTelemetryResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::StartTelemetryResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.StartTelemetryResponse.result)
}
inline ::grpc_cli::StartTelemetryResponse_Result* StartTelemetryResponse::release_result() {
  
  ::grpc_cli::StartTelemetryResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::StartTelemetryResponse_Result* StartTelemetryResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.StartTelemetryResponse.result)
  
  ::grpc_cli::StartTelemetryResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::StartTelemetryResponse_Result* StartTelemetryResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::StartTelemetryResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::StartTelemetryResponse_Result* StartTelemetryResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StartTelemetryResponse.result)
  return _internal_mutable_result();
}
inline void StartTelemetryResponse::set_allocated_result(::grpc_cli::StartTelemetryResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StartTelemetryResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool StartTelemetryResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool StartTelemetryResponse::has_info() const {
  return _internal_has_info();
}
inline void StartTelemetryResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& StartTelemetryResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& StartTelemetryResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StartTelemetryResponse.info)
  return _internal_info();
}
inline void StartTelemetryResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.StartTelemetryResponse.info)
}
inline ::grpc_cli::PosInfo* StartTelemetryResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* StartTelemetryResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.StartTelemetryResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* StartTelemetryResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* StartTelemetryResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StartTelemetryResponse.info)
  return _internal_mutable_info();
}
inline void StartTelemetryResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StartTelemetryResponse.info)
}

// -------------------------------------------------------------------

// StopTelemetryRequest

// string command = 1;
inline void StopTelemetryRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& StopTelemetryRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StopTelemetryRequest.command)
  return _internal_command();
}
inline void StopTelemetryRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StopTelemetryRequest.command)
}
inline std::string* StopTelemetryRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StopTelemetryRequest.command)
  return _internal_mutable_command();
}
inline const std::string& StopTelemetryRequest::_internal_command() const {
  return command_.Get();
}
inline void StopTelemetryRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StopTelemetryRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StopTelemetryRequest.command)
}
inline void StopTelemetryRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StopTelemetryRequest.command)
}
inline void StopTelemetryRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StopTelemetryRequest.command)
}
inline std::string* StopTelemetryRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StopTelemetryRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.StopTelemetryRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopTelemetryRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StopTelemetryRequest.command)
}

// string rid = 2;
inline void StopTelemetryRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& StopTelemetryRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StopTelemetryRequest.rid)
  return _internal_rid();
}
inline void StopTelemetryRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StopTelemetryRequest.rid)
}
inline std::string* StopTelemetryRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StopTelemetryRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& StopTelemetryRequest::_internal_rid() const {
  return rid_.Get();
}
inline void StopTelemetryRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StopTelemetryRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StopTelemetryRequest.rid)
}
inline void StopTelemetryRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StopTelemetryRequest.rid)
}
inline void StopTelemetryRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StopTelemetryRequest.rid)
}
inline std::string* StopTelemetryRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StopTelemetryRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.StopTelemetryRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopTelemetryRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StopTelemetryRequest.rid)
}

// string requestor = 3;
inline void StopTelemetryRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& StopTelemetryRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StopTelemetryRequest.requestor)
  return _internal_requestor();
}
inline void StopTelemetryRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StopTelemetryRequest.requestor)
}
inline std::string* StopTelemetryRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StopTelemetryRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& StopTelemetryRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void StopTelemetryRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StopTelemetryRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StopTelemetryRequest.requestor)
}
inline void StopTelemetryRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StopTelemetryRequest.requestor)
}
inline void StopTelemetryRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StopTelemetryRequest.requestor)
}
inline std::string* StopTelemetryRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StopTelemetryRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.StopTelemetryRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopTelemetryRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StopTelemetryRequest.requestor)
}

// -------------------------------------------------------------------

// StopTelemetryResponse_Result

// .grpc_cli.Status status = 1;
inline bool StopTelemetryResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool StopTelemetryResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void StopTelemetryResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& StopTelemetryResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& StopTelemetryResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StopTelemetryResponse.Result.status)
  return _internal_status();
}
inline void StopTelemetryResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.StopTelemetryResponse.Result.status)
}
inline ::grpc_cli::Status* StopTelemetryResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* StopTelemetryResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.StopTelemetryResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* StopTelemetryResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* StopTelemetryResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StopTelemetryResponse.Result.status)
  return _internal_mutable_status();
}
inline void StopTelemetryResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StopTelemetryResponse.Result.status)
}

// -------------------------------------------------------------------

// StopTelemetryResponse

// string command = 1;
inline void StopTelemetryResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& StopTelemetryResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StopTelemetryResponse.command)
  return _internal_command();
}
inline void StopTelemetryResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StopTelemetryResponse.command)
}
inline std::string* StopTelemetryResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StopTelemetryResponse.command)
  return _internal_mutable_command();
}
inline const std::string& StopTelemetryResponse::_internal_command() const {
  return command_.Get();
}
inline void StopTelemetryResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StopTelemetryResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StopTelemetryResponse.command)
}
inline void StopTelemetryResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StopTelemetryResponse.command)
}
inline void StopTelemetryResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StopTelemetryResponse.command)
}
inline std::string* StopTelemetryResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StopTelemetryResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.StopTelemetryResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopTelemetryResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StopTelemetryResponse.command)
}

// string rid = 2;
inline void StopTelemetryResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& StopTelemetryResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StopTelemetryResponse.rid)
  return _internal_rid();
}
inline void StopTelemetryResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StopTelemetryResponse.rid)
}
inline std::string* StopTelemetryResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StopTelemetryResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& StopTelemetryResponse::_internal_rid() const {
  return rid_.Get();
}
inline void StopTelemetryResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StopTelemetryResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StopTelemetryResponse.rid)
}
inline void StopTelemetryResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StopTelemetryResponse.rid)
}
inline void StopTelemetryResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StopTelemetryResponse.rid)
}
inline std::string* StopTelemetryResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StopTelemetryResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.StopTelemetryResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopTelemetryResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StopTelemetryResponse.rid)
}

// .grpc_cli.StopTelemetryResponse.Result result = 3;
inline bool StopTelemetryResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool StopTelemetryResponse::has_result() const {
  return _internal_has_result();
}
inline void StopTelemetryResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::StopTelemetryResponse_Result& StopTelemetryResponse::_internal_result() const {
  const ::grpc_cli::StopTelemetryResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::StopTelemetryResponse_Result&>(
      ::grpc_cli::_StopTelemetryResponse_Result_default_instance_);
}
inline const ::grpc_cli::StopTelemetryResponse_Result& StopTelemetryResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StopTelemetryResponse.result)
  return _internal_result();
}
inline void StopTelemetryResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::StopTelemetryResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.StopTelemetryResponse.result)
}
inline ::grpc_cli::StopTelemetryResponse_Result* StopTelemetryResponse::release_result() {
  
  ::grpc_cli::StopTelemetryResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::StopTelemetryResponse_Result* StopTelemetryResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.StopTelemetryResponse.result)
  
  ::grpc_cli::StopTelemetryResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::StopTelemetryResponse_Result* StopTelemetryResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::StopTelemetryResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::StopTelemetryResponse_Result* StopTelemetryResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StopTelemetryResponse.result)
  return _internal_mutable_result();
}
inline void StopTelemetryResponse::set_allocated_result(::grpc_cli::StopTelemetryResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StopTelemetryResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool StopTelemetryResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool StopTelemetryResponse::has_info() const {
  return _internal_has_info();
}
inline void StopTelemetryResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& StopTelemetryResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& StopTelemetryResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StopTelemetryResponse.info)
  return _internal_info();
}
inline void StopTelemetryResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.StopTelemetryResponse.info)
}
inline ::grpc_cli::PosInfo* StopTelemetryResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* StopTelemetryResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.StopTelemetryResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* StopTelemetryResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* StopTelemetryResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StopTelemetryResponse.info)
  return _internal_mutable_info();
}
inline void StopTelemetryResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StopTelemetryResponse.info)
}

// -------------------------------------------------------------------

// ResetEventWrrRequest

// string command = 1;
inline void ResetEventWrrRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& ResetEventWrrRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ResetEventWrrRequest.command)
  return _internal_command();
}
inline void ResetEventWrrRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ResetEventWrrRequest.command)
}
inline std::string* ResetEventWrrRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ResetEventWrrRequest.command)
  return _internal_mutable_command();
}
inline const std::string& ResetEventWrrRequest::_internal_command() const {
  return command_.Get();
}
inline void ResetEventWrrRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResetEventWrrRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ResetEventWrrRequest.command)
}
inline void ResetEventWrrRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ResetEventWrrRequest.command)
}
inline void ResetEventWrrRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ResetEventWrrRequest.command)
}
inline std::string* ResetEventWrrRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResetEventWrrRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.ResetEventWrrRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResetEventWrrRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ResetEventWrrRequest.command)
}

// string rid = 2;
inline void ResetEventWrrRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& ResetEventWrrRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ResetEventWrrRequest.rid)
  return _internal_rid();
}
inline void ResetEventWrrRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ResetEventWrrRequest.rid)
}
inline std::string* ResetEventWrrRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ResetEventWrrRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& ResetEventWrrRequest::_internal_rid() const {
  return rid_.Get();
}
inline void ResetEventWrrRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResetEventWrrRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ResetEventWrrRequest.rid)
}
inline void ResetEventWrrRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ResetEventWrrRequest.rid)
}
inline void ResetEventWrrRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ResetEventWrrRequest.rid)
}
inline std::string* ResetEventWrrRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResetEventWrrRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.ResetEventWrrRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResetEventWrrRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ResetEventWrrRequest.rid)
}

// string requestor = 3;
inline void ResetEventWrrRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& ResetEventWrrRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ResetEventWrrRequest.requestor)
  return _internal_requestor();
}
inline void ResetEventWrrRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ResetEventWrrRequest.requestor)
}
inline std::string* ResetEventWrrRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ResetEventWrrRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& ResetEventWrrRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void ResetEventWrrRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResetEventWrrRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ResetEventWrrRequest.requestor)
}
inline void ResetEventWrrRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ResetEventWrrRequest.requestor)
}
inline void ResetEventWrrRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ResetEventWrrRequest.requestor)
}
inline std::string* ResetEventWrrRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResetEventWrrRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.ResetEventWrrRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResetEventWrrRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ResetEventWrrRequest.requestor)
}

// -------------------------------------------------------------------

// ResetEventWrrResponse_Result

// .grpc_cli.Status status = 1;
inline bool ResetEventWrrResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool ResetEventWrrResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void ResetEventWrrResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& ResetEventWrrResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& ResetEventWrrResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ResetEventWrrResponse.Result.status)
  return _internal_status();
}
inline void ResetEventWrrResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ResetEventWrrResponse.Result.status)
}
inline ::grpc_cli::Status* ResetEventWrrResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* ResetEventWrrResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.ResetEventWrrResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* ResetEventWrrResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* ResetEventWrrResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ResetEventWrrResponse.Result.status)
  return _internal_mutable_status();
}
inline void ResetEventWrrResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ResetEventWrrResponse.Result.status)
}

// -------------------------------------------------------------------

// ResetEventWrrResponse

// string command = 1;
inline void ResetEventWrrResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& ResetEventWrrResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ResetEventWrrResponse.command)
  return _internal_command();
}
inline void ResetEventWrrResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ResetEventWrrResponse.command)
}
inline std::string* ResetEventWrrResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ResetEventWrrResponse.command)
  return _internal_mutable_command();
}
inline const std::string& ResetEventWrrResponse::_internal_command() const {
  return command_.Get();
}
inline void ResetEventWrrResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResetEventWrrResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ResetEventWrrResponse.command)
}
inline void ResetEventWrrResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ResetEventWrrResponse.command)
}
inline void ResetEventWrrResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ResetEventWrrResponse.command)
}
inline std::string* ResetEventWrrResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResetEventWrrResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.ResetEventWrrResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResetEventWrrResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ResetEventWrrResponse.command)
}

// string rid = 2;
inline void ResetEventWrrResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& ResetEventWrrResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ResetEventWrrResponse.rid)
  return _internal_rid();
}
inline void ResetEventWrrResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ResetEventWrrResponse.rid)
}
inline std::string* ResetEventWrrResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ResetEventWrrResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& ResetEventWrrResponse::_internal_rid() const {
  return rid_.Get();
}
inline void ResetEventWrrResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResetEventWrrResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ResetEventWrrResponse.rid)
}
inline void ResetEventWrrResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ResetEventWrrResponse.rid)
}
inline void ResetEventWrrResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ResetEventWrrResponse.rid)
}
inline std::string* ResetEventWrrResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResetEventWrrResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.ResetEventWrrResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResetEventWrrResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ResetEventWrrResponse.rid)
}

// .grpc_cli.ResetEventWrrResponse.Result result = 3;
inline bool ResetEventWrrResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool ResetEventWrrResponse::has_result() const {
  return _internal_has_result();
}
inline void ResetEventWrrResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::ResetEventWrrResponse_Result& ResetEventWrrResponse::_internal_result() const {
  const ::grpc_cli::ResetEventWrrResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::ResetEventWrrResponse_Result&>(
      ::grpc_cli::_ResetEventWrrResponse_Result_default_instance_);
}
inline const ::grpc_cli::ResetEventWrrResponse_Result& ResetEventWrrResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ResetEventWrrResponse.result)
  return _internal_result();
}
inline void ResetEventWrrResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::ResetEventWrrResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ResetEventWrrResponse.result)
}
inline ::grpc_cli::ResetEventWrrResponse_Result* ResetEventWrrResponse::release_result() {
  
  ::grpc_cli::ResetEventWrrResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::ResetEventWrrResponse_Result* ResetEventWrrResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.ResetEventWrrResponse.result)
  
  ::grpc_cli::ResetEventWrrResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::ResetEventWrrResponse_Result* ResetEventWrrResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::ResetEventWrrResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::ResetEventWrrResponse_Result* ResetEventWrrResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ResetEventWrrResponse.result)
  return _internal_mutable_result();
}
inline void ResetEventWrrResponse::set_allocated_result(::grpc_cli::ResetEventWrrResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ResetEventWrrResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool ResetEventWrrResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool ResetEventWrrResponse::has_info() const {
  return _internal_has_info();
}
inline void ResetEventWrrResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& ResetEventWrrResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& ResetEventWrrResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ResetEventWrrResponse.info)
  return _internal_info();
}
inline void ResetEventWrrResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ResetEventWrrResponse.info)
}
inline ::grpc_cli::PosInfo* ResetEventWrrResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* ResetEventWrrResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.ResetEventWrrResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* ResetEventWrrResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* ResetEventWrrResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ResetEventWrrResponse.info)
  return _internal_mutable_info();
}
inline void ResetEventWrrResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ResetEventWrrResponse.info)
}

// -------------------------------------------------------------------

// ResetMbrRequest

// string command = 1;
inline void ResetMbrRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& ResetMbrRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ResetMbrRequest.command)
  return _internal_command();
}
inline void ResetMbrRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ResetMbrRequest.command)
}
inline std::string* ResetMbrRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ResetMbrRequest.command)
  return _internal_mutable_command();
}
inline const std::string& ResetMbrRequest::_internal_command() const {
  return command_.Get();
}
inline void ResetMbrRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResetMbrRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ResetMbrRequest.command)
}
inline void ResetMbrRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ResetMbrRequest.command)
}
inline void ResetMbrRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ResetMbrRequest.command)
}
inline std::string* ResetMbrRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResetMbrRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.ResetMbrRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResetMbrRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ResetMbrRequest.command)
}

// string rid = 2;
inline void ResetMbrRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& ResetMbrRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ResetMbrRequest.rid)
  return _internal_rid();
}
inline void ResetMbrRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ResetMbrRequest.rid)
}
inline std::string* ResetMbrRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ResetMbrRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& ResetMbrRequest::_internal_rid() const {
  return rid_.Get();
}
inline void ResetMbrRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResetMbrRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ResetMbrRequest.rid)
}
inline void ResetMbrRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ResetMbrRequest.rid)
}
inline void ResetMbrRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ResetMbrRequest.rid)
}
inline std::string* ResetMbrRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResetMbrRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.ResetMbrRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResetMbrRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ResetMbrRequest.rid)
}

// string requestor = 3;
inline void ResetMbrRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& ResetMbrRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ResetMbrRequest.requestor)
  return _internal_requestor();
}
inline void ResetMbrRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ResetMbrRequest.requestor)
}
inline std::string* ResetMbrRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ResetMbrRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& ResetMbrRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void ResetMbrRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResetMbrRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ResetMbrRequest.requestor)
}
inline void ResetMbrRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ResetMbrRequest.requestor)
}
inline void ResetMbrRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ResetMbrRequest.requestor)
}
inline std::string* ResetMbrRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResetMbrRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.ResetMbrRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResetMbrRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ResetMbrRequest.requestor)
}

// -------------------------------------------------------------------

// ResetMbrResponse_Result

// .grpc_cli.Status status = 1;
inline bool ResetMbrResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool ResetMbrResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void ResetMbrResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& ResetMbrResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& ResetMbrResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ResetMbrResponse.Result.status)
  return _internal_status();
}
inline void ResetMbrResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ResetMbrResponse.Result.status)
}
inline ::grpc_cli::Status* ResetMbrResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* ResetMbrResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.ResetMbrResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* ResetMbrResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* ResetMbrResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ResetMbrResponse.Result.status)
  return _internal_mutable_status();
}
inline void ResetMbrResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ResetMbrResponse.Result.status)
}

// -------------------------------------------------------------------

// ResetMbrResponse

// string command = 1;
inline void ResetMbrResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& ResetMbrResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ResetMbrResponse.command)
  return _internal_command();
}
inline void ResetMbrResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ResetMbrResponse.command)
}
inline std::string* ResetMbrResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ResetMbrResponse.command)
  return _internal_mutable_command();
}
inline const std::string& ResetMbrResponse::_internal_command() const {
  return command_.Get();
}
inline void ResetMbrResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResetMbrResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ResetMbrResponse.command)
}
inline void ResetMbrResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ResetMbrResponse.command)
}
inline void ResetMbrResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ResetMbrResponse.command)
}
inline std::string* ResetMbrResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResetMbrResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.ResetMbrResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResetMbrResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ResetMbrResponse.command)
}

// string rid = 2;
inline void ResetMbrResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& ResetMbrResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ResetMbrResponse.rid)
  return _internal_rid();
}
inline void ResetMbrResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ResetMbrResponse.rid)
}
inline std::string* ResetMbrResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ResetMbrResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& ResetMbrResponse::_internal_rid() const {
  return rid_.Get();
}
inline void ResetMbrResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResetMbrResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ResetMbrResponse.rid)
}
inline void ResetMbrResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ResetMbrResponse.rid)
}
inline void ResetMbrResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ResetMbrResponse.rid)
}
inline std::string* ResetMbrResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResetMbrResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.ResetMbrResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResetMbrResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ResetMbrResponse.rid)
}

// .grpc_cli.ResetMbrResponse.Result result = 3;
inline bool ResetMbrResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool ResetMbrResponse::has_result() const {
  return _internal_has_result();
}
inline void ResetMbrResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::ResetMbrResponse_Result& ResetMbrResponse::_internal_result() const {
  const ::grpc_cli::ResetMbrResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::ResetMbrResponse_Result&>(
      ::grpc_cli::_ResetMbrResponse_Result_default_instance_);
}
inline const ::grpc_cli::ResetMbrResponse_Result& ResetMbrResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ResetMbrResponse.result)
  return _internal_result();
}
inline void ResetMbrResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::ResetMbrResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ResetMbrResponse.result)
}
inline ::grpc_cli::ResetMbrResponse_Result* ResetMbrResponse::release_result() {
  
  ::grpc_cli::ResetMbrResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::ResetMbrResponse_Result* ResetMbrResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.ResetMbrResponse.result)
  
  ::grpc_cli::ResetMbrResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::ResetMbrResponse_Result* ResetMbrResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::ResetMbrResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::ResetMbrResponse_Result* ResetMbrResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ResetMbrResponse.result)
  return _internal_mutable_result();
}
inline void ResetMbrResponse::set_allocated_result(::grpc_cli::ResetMbrResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ResetMbrResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool ResetMbrResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool ResetMbrResponse::has_info() const {
  return _internal_has_info();
}
inline void ResetMbrResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& ResetMbrResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& ResetMbrResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ResetMbrResponse.info)
  return _internal_info();
}
inline void ResetMbrResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ResetMbrResponse.info)
}
inline ::grpc_cli::PosInfo* ResetMbrResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* ResetMbrResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.ResetMbrResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* ResetMbrResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* ResetMbrResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ResetMbrResponse.info)
  return _internal_mutable_info();
}
inline void ResetMbrResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ResetMbrResponse.info)
}

// -------------------------------------------------------------------

// StopRebuildingRequest_Param

// string name = 1;
inline void StopRebuildingRequest_Param::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& StopRebuildingRequest_Param::name() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StopRebuildingRequest.Param.name)
  return _internal_name();
}
inline void StopRebuildingRequest_Param::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StopRebuildingRequest.Param.name)
}
inline std::string* StopRebuildingRequest_Param::mutable_name() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StopRebuildingRequest.Param.name)
  return _internal_mutable_name();
}
inline const std::string& StopRebuildingRequest_Param::_internal_name() const {
  return name_.Get();
}
inline void StopRebuildingRequest_Param::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StopRebuildingRequest_Param::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StopRebuildingRequest.Param.name)
}
inline void StopRebuildingRequest_Param::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StopRebuildingRequest.Param.name)
}
inline void StopRebuildingRequest_Param::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StopRebuildingRequest.Param.name)
}
inline std::string* StopRebuildingRequest_Param::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StopRebuildingRequest_Param::release_name() {
  // @@protoc_insertion_point(field_release:grpc_cli.StopRebuildingRequest.Param.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopRebuildingRequest_Param::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StopRebuildingRequest.Param.name)
}

// -------------------------------------------------------------------

// StopRebuildingRequest

// string command = 1;
inline void StopRebuildingRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& StopRebuildingRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StopRebuildingRequest.command)
  return _internal_command();
}
inline void StopRebuildingRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StopRebuildingRequest.command)
}
inline std::string* StopRebuildingRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StopRebuildingRequest.command)
  return _internal_mutable_command();
}
inline const std::string& StopRebuildingRequest::_internal_command() const {
  return command_.Get();
}
inline void StopRebuildingRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StopRebuildingRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StopRebuildingRequest.command)
}
inline void StopRebuildingRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StopRebuildingRequest.command)
}
inline void StopRebuildingRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StopRebuildingRequest.command)
}
inline std::string* StopRebuildingRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StopRebuildingRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.StopRebuildingRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopRebuildingRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StopRebuildingRequest.command)
}

// string rid = 2;
inline void StopRebuildingRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& StopRebuildingRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StopRebuildingRequest.rid)
  return _internal_rid();
}
inline void StopRebuildingRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StopRebuildingRequest.rid)
}
inline std::string* StopRebuildingRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StopRebuildingRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& StopRebuildingRequest::_internal_rid() const {
  return rid_.Get();
}
inline void StopRebuildingRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StopRebuildingRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StopRebuildingRequest.rid)
}
inline void StopRebuildingRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StopRebuildingRequest.rid)
}
inline void StopRebuildingRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StopRebuildingRequest.rid)
}
inline std::string* StopRebuildingRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StopRebuildingRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.StopRebuildingRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopRebuildingRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StopRebuildingRequest.rid)
}

// string requestor = 3;
inline void StopRebuildingRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& StopRebuildingRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StopRebuildingRequest.requestor)
  return _internal_requestor();
}
inline void StopRebuildingRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StopRebuildingRequest.requestor)
}
inline std::string* StopRebuildingRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StopRebuildingRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& StopRebuildingRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void StopRebuildingRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StopRebuildingRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StopRebuildingRequest.requestor)
}
inline void StopRebuildingRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StopRebuildingRequest.requestor)
}
inline void StopRebuildingRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StopRebuildingRequest.requestor)
}
inline std::string* StopRebuildingRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StopRebuildingRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.StopRebuildingRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopRebuildingRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StopRebuildingRequest.requestor)
}

// .grpc_cli.StopRebuildingRequest.Param param = 4;
inline bool StopRebuildingRequest::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool StopRebuildingRequest::has_param() const {
  return _internal_has_param();
}
inline void StopRebuildingRequest::clear_param() {
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::grpc_cli::StopRebuildingRequest_Param& StopRebuildingRequest::_internal_param() const {
  const ::grpc_cli::StopRebuildingRequest_Param* p = param_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::StopRebuildingRequest_Param&>(
      ::grpc_cli::_StopRebuildingRequest_Param_default_instance_);
}
inline const ::grpc_cli::StopRebuildingRequest_Param& StopRebuildingRequest::param() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StopRebuildingRequest.param)
  return _internal_param();
}
inline void StopRebuildingRequest::unsafe_arena_set_allocated_param(
    ::grpc_cli::StopRebuildingRequest_Param* param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.StopRebuildingRequest.param)
}
inline ::grpc_cli::StopRebuildingRequest_Param* StopRebuildingRequest::release_param() {
  
  ::grpc_cli::StopRebuildingRequest_Param* temp = param_;
  param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::StopRebuildingRequest_Param* StopRebuildingRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:grpc_cli.StopRebuildingRequest.param)
  
  ::grpc_cli::StopRebuildingRequest_Param* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::grpc_cli::StopRebuildingRequest_Param* StopRebuildingRequest::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::StopRebuildingRequest_Param>(GetArena());
    param_ = p;
  }
  return param_;
}
inline ::grpc_cli::StopRebuildingRequest_Param* StopRebuildingRequest::mutable_param() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StopRebuildingRequest.param)
  return _internal_mutable_param();
}
inline void StopRebuildingRequest::set_allocated_param(::grpc_cli::StopRebuildingRequest_Param* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StopRebuildingRequest.param)
}

// -------------------------------------------------------------------

// StopRebuildingResponse_Result

// .grpc_cli.Status status = 1;
inline bool StopRebuildingResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool StopRebuildingResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void StopRebuildingResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& StopRebuildingResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& StopRebuildingResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StopRebuildingResponse.Result.status)
  return _internal_status();
}
inline void StopRebuildingResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.StopRebuildingResponse.Result.status)
}
inline ::grpc_cli::Status* StopRebuildingResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* StopRebuildingResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.StopRebuildingResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* StopRebuildingResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* StopRebuildingResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StopRebuildingResponse.Result.status)
  return _internal_mutable_status();
}
inline void StopRebuildingResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StopRebuildingResponse.Result.status)
}

// -------------------------------------------------------------------

// StopRebuildingResponse

// string command = 1;
inline void StopRebuildingResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& StopRebuildingResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StopRebuildingResponse.command)
  return _internal_command();
}
inline void StopRebuildingResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StopRebuildingResponse.command)
}
inline std::string* StopRebuildingResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StopRebuildingResponse.command)
  return _internal_mutable_command();
}
inline const std::string& StopRebuildingResponse::_internal_command() const {
  return command_.Get();
}
inline void StopRebuildingResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StopRebuildingResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StopRebuildingResponse.command)
}
inline void StopRebuildingResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StopRebuildingResponse.command)
}
inline void StopRebuildingResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StopRebuildingResponse.command)
}
inline std::string* StopRebuildingResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StopRebuildingResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.StopRebuildingResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopRebuildingResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StopRebuildingResponse.command)
}

// string rid = 2;
inline void StopRebuildingResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& StopRebuildingResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StopRebuildingResponse.rid)
  return _internal_rid();
}
inline void StopRebuildingResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StopRebuildingResponse.rid)
}
inline std::string* StopRebuildingResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StopRebuildingResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& StopRebuildingResponse::_internal_rid() const {
  return rid_.Get();
}
inline void StopRebuildingResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StopRebuildingResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StopRebuildingResponse.rid)
}
inline void StopRebuildingResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StopRebuildingResponse.rid)
}
inline void StopRebuildingResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StopRebuildingResponse.rid)
}
inline std::string* StopRebuildingResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StopRebuildingResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.StopRebuildingResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopRebuildingResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StopRebuildingResponse.rid)
}

// .grpc_cli.StopRebuildingResponse.Result result = 3;
inline bool StopRebuildingResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool StopRebuildingResponse::has_result() const {
  return _internal_has_result();
}
inline void StopRebuildingResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::StopRebuildingResponse_Result& StopRebuildingResponse::_internal_result() const {
  const ::grpc_cli::StopRebuildingResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::StopRebuildingResponse_Result&>(
      ::grpc_cli::_StopRebuildingResponse_Result_default_instance_);
}
inline const ::grpc_cli::StopRebuildingResponse_Result& StopRebuildingResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StopRebuildingResponse.result)
  return _internal_result();
}
inline void StopRebuildingResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::StopRebuildingResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.StopRebuildingResponse.result)
}
inline ::grpc_cli::StopRebuildingResponse_Result* StopRebuildingResponse::release_result() {
  
  ::grpc_cli::StopRebuildingResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::StopRebuildingResponse_Result* StopRebuildingResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.StopRebuildingResponse.result)
  
  ::grpc_cli::StopRebuildingResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::StopRebuildingResponse_Result* StopRebuildingResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::StopRebuildingResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::StopRebuildingResponse_Result* StopRebuildingResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StopRebuildingResponse.result)
  return _internal_mutable_result();
}
inline void StopRebuildingResponse::set_allocated_result(::grpc_cli::StopRebuildingResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StopRebuildingResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool StopRebuildingResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool StopRebuildingResponse::has_info() const {
  return _internal_has_info();
}
inline void StopRebuildingResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& StopRebuildingResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& StopRebuildingResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StopRebuildingResponse.info)
  return _internal_info();
}
inline void StopRebuildingResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.StopRebuildingResponse.info)
}
inline ::grpc_cli::PosInfo* StopRebuildingResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* StopRebuildingResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.StopRebuildingResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* StopRebuildingResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* StopRebuildingResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StopRebuildingResponse.info)
  return _internal_mutable_info();
}
inline void StopRebuildingResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StopRebuildingResponse.info)
}

// -------------------------------------------------------------------

// UpdateEventWrrRequest_Param

// string name = 1;
inline void UpdateEventWrrRequest_Param::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& UpdateEventWrrRequest_Param::name() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UpdateEventWrrRequest.Param.name)
  return _internal_name();
}
inline void UpdateEventWrrRequest_Param::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:grpc_cli.UpdateEventWrrRequest.Param.name)
}
inline std::string* UpdateEventWrrRequest_Param::mutable_name() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UpdateEventWrrRequest.Param.name)
  return _internal_mutable_name();
}
inline const std::string& UpdateEventWrrRequest_Param::_internal_name() const {
  return name_.Get();
}
inline void UpdateEventWrrRequest_Param::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateEventWrrRequest_Param::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.UpdateEventWrrRequest.Param.name)
}
inline void UpdateEventWrrRequest_Param::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.UpdateEventWrrRequest.Param.name)
}
inline void UpdateEventWrrRequest_Param::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.UpdateEventWrrRequest.Param.name)
}
inline std::string* UpdateEventWrrRequest_Param::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateEventWrrRequest_Param::release_name() {
  // @@protoc_insertion_point(field_release:grpc_cli.UpdateEventWrrRequest.Param.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateEventWrrRequest_Param::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UpdateEventWrrRequest.Param.name)
}

// int64 weight = 2;
inline void UpdateEventWrrRequest_Param::clear_weight() {
  weight_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateEventWrrRequest_Param::_internal_weight() const {
  return weight_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateEventWrrRequest_Param::weight() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UpdateEventWrrRequest.Param.weight)
  return _internal_weight();
}
inline void UpdateEventWrrRequest_Param::_internal_set_weight(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  weight_ = value;
}
inline void UpdateEventWrrRequest_Param::set_weight(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:grpc_cli.UpdateEventWrrRequest.Param.weight)
}

// -------------------------------------------------------------------

// UpdateEventWrrRequest

// string command = 1;
inline void UpdateEventWrrRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& UpdateEventWrrRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UpdateEventWrrRequest.command)
  return _internal_command();
}
inline void UpdateEventWrrRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.UpdateEventWrrRequest.command)
}
inline std::string* UpdateEventWrrRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UpdateEventWrrRequest.command)
  return _internal_mutable_command();
}
inline const std::string& UpdateEventWrrRequest::_internal_command() const {
  return command_.Get();
}
inline void UpdateEventWrrRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateEventWrrRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.UpdateEventWrrRequest.command)
}
inline void UpdateEventWrrRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.UpdateEventWrrRequest.command)
}
inline void UpdateEventWrrRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.UpdateEventWrrRequest.command)
}
inline std::string* UpdateEventWrrRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateEventWrrRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.UpdateEventWrrRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateEventWrrRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UpdateEventWrrRequest.command)
}

// string rid = 2;
inline void UpdateEventWrrRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& UpdateEventWrrRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UpdateEventWrrRequest.rid)
  return _internal_rid();
}
inline void UpdateEventWrrRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.UpdateEventWrrRequest.rid)
}
inline std::string* UpdateEventWrrRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UpdateEventWrrRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& UpdateEventWrrRequest::_internal_rid() const {
  return rid_.Get();
}
inline void UpdateEventWrrRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateEventWrrRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.UpdateEventWrrRequest.rid)
}
inline void UpdateEventWrrRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.UpdateEventWrrRequest.rid)
}
inline void UpdateEventWrrRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.UpdateEventWrrRequest.rid)
}
inline std::string* UpdateEventWrrRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateEventWrrRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.UpdateEventWrrRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateEventWrrRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UpdateEventWrrRequest.rid)
}

// string requestor = 3;
inline void UpdateEventWrrRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& UpdateEventWrrRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UpdateEventWrrRequest.requestor)
  return _internal_requestor();
}
inline void UpdateEventWrrRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.UpdateEventWrrRequest.requestor)
}
inline std::string* UpdateEventWrrRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UpdateEventWrrRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& UpdateEventWrrRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void UpdateEventWrrRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateEventWrrRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.UpdateEventWrrRequest.requestor)
}
inline void UpdateEventWrrRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.UpdateEventWrrRequest.requestor)
}
inline void UpdateEventWrrRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.UpdateEventWrrRequest.requestor)
}
inline std::string* UpdateEventWrrRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateEventWrrRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.UpdateEventWrrRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateEventWrrRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UpdateEventWrrRequest.requestor)
}

// .grpc_cli.UpdateEventWrrRequest.Param param = 4;
inline bool UpdateEventWrrRequest::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool UpdateEventWrrRequest::has_param() const {
  return _internal_has_param();
}
inline void UpdateEventWrrRequest::clear_param() {
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::grpc_cli::UpdateEventWrrRequest_Param& UpdateEventWrrRequest::_internal_param() const {
  const ::grpc_cli::UpdateEventWrrRequest_Param* p = param_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::UpdateEventWrrRequest_Param&>(
      ::grpc_cli::_UpdateEventWrrRequest_Param_default_instance_);
}
inline const ::grpc_cli::UpdateEventWrrRequest_Param& UpdateEventWrrRequest::param() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UpdateEventWrrRequest.param)
  return _internal_param();
}
inline void UpdateEventWrrRequest::unsafe_arena_set_allocated_param(
    ::grpc_cli::UpdateEventWrrRequest_Param* param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.UpdateEventWrrRequest.param)
}
inline ::grpc_cli::UpdateEventWrrRequest_Param* UpdateEventWrrRequest::release_param() {
  
  ::grpc_cli::UpdateEventWrrRequest_Param* temp = param_;
  param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::UpdateEventWrrRequest_Param* UpdateEventWrrRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:grpc_cli.UpdateEventWrrRequest.param)
  
  ::grpc_cli::UpdateEventWrrRequest_Param* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::grpc_cli::UpdateEventWrrRequest_Param* UpdateEventWrrRequest::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::UpdateEventWrrRequest_Param>(GetArena());
    param_ = p;
  }
  return param_;
}
inline ::grpc_cli::UpdateEventWrrRequest_Param* UpdateEventWrrRequest::mutable_param() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UpdateEventWrrRequest.param)
  return _internal_mutable_param();
}
inline void UpdateEventWrrRequest::set_allocated_param(::grpc_cli::UpdateEventWrrRequest_Param* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UpdateEventWrrRequest.param)
}

// -------------------------------------------------------------------

// UpdateEventWrrResponse_Result

// .grpc_cli.Status status = 1;
inline bool UpdateEventWrrResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool UpdateEventWrrResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void UpdateEventWrrResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& UpdateEventWrrResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& UpdateEventWrrResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UpdateEventWrrResponse.Result.status)
  return _internal_status();
}
inline void UpdateEventWrrResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.UpdateEventWrrResponse.Result.status)
}
inline ::grpc_cli::Status* UpdateEventWrrResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* UpdateEventWrrResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.UpdateEventWrrResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* UpdateEventWrrResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* UpdateEventWrrResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UpdateEventWrrResponse.Result.status)
  return _internal_mutable_status();
}
inline void UpdateEventWrrResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UpdateEventWrrResponse.Result.status)
}

// -------------------------------------------------------------------

// UpdateEventWrrResponse

// string command = 1;
inline void UpdateEventWrrResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& UpdateEventWrrResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UpdateEventWrrResponse.command)
  return _internal_command();
}
inline void UpdateEventWrrResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.UpdateEventWrrResponse.command)
}
inline std::string* UpdateEventWrrResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UpdateEventWrrResponse.command)
  return _internal_mutable_command();
}
inline const std::string& UpdateEventWrrResponse::_internal_command() const {
  return command_.Get();
}
inline void UpdateEventWrrResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateEventWrrResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.UpdateEventWrrResponse.command)
}
inline void UpdateEventWrrResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.UpdateEventWrrResponse.command)
}
inline void UpdateEventWrrResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.UpdateEventWrrResponse.command)
}
inline std::string* UpdateEventWrrResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateEventWrrResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.UpdateEventWrrResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateEventWrrResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UpdateEventWrrResponse.command)
}

// string rid = 2;
inline void UpdateEventWrrResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& UpdateEventWrrResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UpdateEventWrrResponse.rid)
  return _internal_rid();
}
inline void UpdateEventWrrResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.UpdateEventWrrResponse.rid)
}
inline std::string* UpdateEventWrrResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UpdateEventWrrResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& UpdateEventWrrResponse::_internal_rid() const {
  return rid_.Get();
}
inline void UpdateEventWrrResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateEventWrrResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.UpdateEventWrrResponse.rid)
}
inline void UpdateEventWrrResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.UpdateEventWrrResponse.rid)
}
inline void UpdateEventWrrResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.UpdateEventWrrResponse.rid)
}
inline std::string* UpdateEventWrrResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateEventWrrResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.UpdateEventWrrResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateEventWrrResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UpdateEventWrrResponse.rid)
}

// .grpc_cli.UpdateEventWrrResponse.Result result = 3;
inline bool UpdateEventWrrResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool UpdateEventWrrResponse::has_result() const {
  return _internal_has_result();
}
inline void UpdateEventWrrResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::UpdateEventWrrResponse_Result& UpdateEventWrrResponse::_internal_result() const {
  const ::grpc_cli::UpdateEventWrrResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::UpdateEventWrrResponse_Result&>(
      ::grpc_cli::_UpdateEventWrrResponse_Result_default_instance_);
}
inline const ::grpc_cli::UpdateEventWrrResponse_Result& UpdateEventWrrResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UpdateEventWrrResponse.result)
  return _internal_result();
}
inline void UpdateEventWrrResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::UpdateEventWrrResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.UpdateEventWrrResponse.result)
}
inline ::grpc_cli::UpdateEventWrrResponse_Result* UpdateEventWrrResponse::release_result() {
  
  ::grpc_cli::UpdateEventWrrResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::UpdateEventWrrResponse_Result* UpdateEventWrrResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.UpdateEventWrrResponse.result)
  
  ::grpc_cli::UpdateEventWrrResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::UpdateEventWrrResponse_Result* UpdateEventWrrResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::UpdateEventWrrResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::UpdateEventWrrResponse_Result* UpdateEventWrrResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UpdateEventWrrResponse.result)
  return _internal_mutable_result();
}
inline void UpdateEventWrrResponse::set_allocated_result(::grpc_cli::UpdateEventWrrResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UpdateEventWrrResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool UpdateEventWrrResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool UpdateEventWrrResponse::has_info() const {
  return _internal_has_info();
}
inline void UpdateEventWrrResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& UpdateEventWrrResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& UpdateEventWrrResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UpdateEventWrrResponse.info)
  return _internal_info();
}
inline void UpdateEventWrrResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.UpdateEventWrrResponse.info)
}
inline ::grpc_cli::PosInfo* UpdateEventWrrResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* UpdateEventWrrResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.UpdateEventWrrResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* UpdateEventWrrResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* UpdateEventWrrResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UpdateEventWrrResponse.info)
  return _internal_mutable_info();
}
inline void UpdateEventWrrResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UpdateEventWrrResponse.info)
}

// -------------------------------------------------------------------

// AddSpareRequest_SpareDeviceName

// string deviceName = 1;
inline void AddSpareRequest_SpareDeviceName::clear_devicename() {
  devicename_.ClearToEmpty();
}
inline const std::string& AddSpareRequest_SpareDeviceName::devicename() const {
  // @@protoc_insertion_point(field_get:grpc_cli.AddSpareRequest.SpareDeviceName.deviceName)
  return _internal_devicename();
}
inline void AddSpareRequest_SpareDeviceName::set_devicename(const std::string& value) {
  _internal_set_devicename(value);
  // @@protoc_insertion_point(field_set:grpc_cli.AddSpareRequest.SpareDeviceName.deviceName)
}
inline std::string* AddSpareRequest_SpareDeviceName::mutable_devicename() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.AddSpareRequest.SpareDeviceName.deviceName)
  return _internal_mutable_devicename();
}
inline const std::string& AddSpareRequest_SpareDeviceName::_internal_devicename() const {
  return devicename_.Get();
}
inline void AddSpareRequest_SpareDeviceName::_internal_set_devicename(const std::string& value) {
  
  devicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddSpareRequest_SpareDeviceName::set_devicename(std::string&& value) {
  
  devicename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.AddSpareRequest.SpareDeviceName.deviceName)
}
inline void AddSpareRequest_SpareDeviceName::set_devicename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  devicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.AddSpareRequest.SpareDeviceName.deviceName)
}
inline void AddSpareRequest_SpareDeviceName::set_devicename(const char* value,
    size_t size) {
  
  devicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.AddSpareRequest.SpareDeviceName.deviceName)
}
inline std::string* AddSpareRequest_SpareDeviceName::_internal_mutable_devicename() {
  
  return devicename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddSpareRequest_SpareDeviceName::release_devicename() {
  // @@protoc_insertion_point(field_release:grpc_cli.AddSpareRequest.SpareDeviceName.deviceName)
  return devicename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddSpareRequest_SpareDeviceName::set_allocated_devicename(std::string* devicename) {
  if (devicename != nullptr) {
    
  } else {
    
  }
  devicename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), devicename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.AddSpareRequest.SpareDeviceName.deviceName)
}

// -------------------------------------------------------------------

// AddSpareRequest_Param

// string array = 1;
inline void AddSpareRequest_Param::clear_array() {
  array_.ClearToEmpty();
}
inline const std::string& AddSpareRequest_Param::array() const {
  // @@protoc_insertion_point(field_get:grpc_cli.AddSpareRequest.Param.array)
  return _internal_array();
}
inline void AddSpareRequest_Param::set_array(const std::string& value) {
  _internal_set_array(value);
  // @@protoc_insertion_point(field_set:grpc_cli.AddSpareRequest.Param.array)
}
inline std::string* AddSpareRequest_Param::mutable_array() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.AddSpareRequest.Param.array)
  return _internal_mutable_array();
}
inline const std::string& AddSpareRequest_Param::_internal_array() const {
  return array_.Get();
}
inline void AddSpareRequest_Param::_internal_set_array(const std::string& value) {
  
  array_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddSpareRequest_Param::set_array(std::string&& value) {
  
  array_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.AddSpareRequest.Param.array)
}
inline void AddSpareRequest_Param::set_array(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  array_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.AddSpareRequest.Param.array)
}
inline void AddSpareRequest_Param::set_array(const char* value,
    size_t size) {
  
  array_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.AddSpareRequest.Param.array)
}
inline std::string* AddSpareRequest_Param::_internal_mutable_array() {
  
  return array_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddSpareRequest_Param::release_array() {
  // @@protoc_insertion_point(field_release:grpc_cli.AddSpareRequest.Param.array)
  return array_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddSpareRequest_Param::set_allocated_array(std::string* array) {
  if (array != nullptr) {
    
  } else {
    
  }
  array_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), array,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.AddSpareRequest.Param.array)
}

// repeated .grpc_cli.AddSpareRequest.SpareDeviceName spare = 3;
inline int AddSpareRequest_Param::_internal_spare_size() const {
  return spare_.size();
}
inline int AddSpareRequest_Param::spare_size() const {
  return _internal_spare_size();
}
inline void AddSpareRequest_Param::clear_spare() {
  spare_.Clear();
}
inline ::grpc_cli::AddSpareRequest_SpareDeviceName* AddSpareRequest_Param::mutable_spare(int index) {
  // @@protoc_insertion_point(field_mutable:grpc_cli.AddSpareRequest.Param.spare)
  return spare_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::AddSpareRequest_SpareDeviceName >*
AddSpareRequest_Param::mutable_spare() {
  // @@protoc_insertion_point(field_mutable_list:grpc_cli.AddSpareRequest.Param.spare)
  return &spare_;
}
inline const ::grpc_cli::AddSpareRequest_SpareDeviceName& AddSpareRequest_Param::_internal_spare(int index) const {
  return spare_.Get(index);
}
inline const ::grpc_cli::AddSpareRequest_SpareDeviceName& AddSpareRequest_Param::spare(int index) const {
  // @@protoc_insertion_point(field_get:grpc_cli.AddSpareRequest.Param.spare)
  return _internal_spare(index);
}
inline ::grpc_cli::AddSpareRequest_SpareDeviceName* AddSpareRequest_Param::_internal_add_spare() {
  return spare_.Add();
}
inline ::grpc_cli::AddSpareRequest_SpareDeviceName* AddSpareRequest_Param::add_spare() {
  // @@protoc_insertion_point(field_add:grpc_cli.AddSpareRequest.Param.spare)
  return _internal_add_spare();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::AddSpareRequest_SpareDeviceName >&
AddSpareRequest_Param::spare() const {
  // @@protoc_insertion_point(field_list:grpc_cli.AddSpareRequest.Param.spare)
  return spare_;
}

// -------------------------------------------------------------------

// AddSpareRequest

// string command = 1;
inline void AddSpareRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& AddSpareRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.AddSpareRequest.command)
  return _internal_command();
}
inline void AddSpareRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.AddSpareRequest.command)
}
inline std::string* AddSpareRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.AddSpareRequest.command)
  return _internal_mutable_command();
}
inline const std::string& AddSpareRequest::_internal_command() const {
  return command_.Get();
}
inline void AddSpareRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddSpareRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.AddSpareRequest.command)
}
inline void AddSpareRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.AddSpareRequest.command)
}
inline void AddSpareRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.AddSpareRequest.command)
}
inline std::string* AddSpareRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddSpareRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.AddSpareRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddSpareRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.AddSpareRequest.command)
}

// string rid = 2;
inline void AddSpareRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& AddSpareRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.AddSpareRequest.rid)
  return _internal_rid();
}
inline void AddSpareRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.AddSpareRequest.rid)
}
inline std::string* AddSpareRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.AddSpareRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& AddSpareRequest::_internal_rid() const {
  return rid_.Get();
}
inline void AddSpareRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddSpareRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.AddSpareRequest.rid)
}
inline void AddSpareRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.AddSpareRequest.rid)
}
inline void AddSpareRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.AddSpareRequest.rid)
}
inline std::string* AddSpareRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddSpareRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.AddSpareRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddSpareRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.AddSpareRequest.rid)
}

// string requestor = 3;
inline void AddSpareRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& AddSpareRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.AddSpareRequest.requestor)
  return _internal_requestor();
}
inline void AddSpareRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.AddSpareRequest.requestor)
}
inline std::string* AddSpareRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.AddSpareRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& AddSpareRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void AddSpareRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddSpareRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.AddSpareRequest.requestor)
}
inline void AddSpareRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.AddSpareRequest.requestor)
}
inline void AddSpareRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.AddSpareRequest.requestor)
}
inline std::string* AddSpareRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddSpareRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.AddSpareRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddSpareRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.AddSpareRequest.requestor)
}

// .grpc_cli.AddSpareRequest.Param param = 4;
inline bool AddSpareRequest::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool AddSpareRequest::has_param() const {
  return _internal_has_param();
}
inline void AddSpareRequest::clear_param() {
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::grpc_cli::AddSpareRequest_Param& AddSpareRequest::_internal_param() const {
  const ::grpc_cli::AddSpareRequest_Param* p = param_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::AddSpareRequest_Param&>(
      ::grpc_cli::_AddSpareRequest_Param_default_instance_);
}
inline const ::grpc_cli::AddSpareRequest_Param& AddSpareRequest::param() const {
  // @@protoc_insertion_point(field_get:grpc_cli.AddSpareRequest.param)
  return _internal_param();
}
inline void AddSpareRequest::unsafe_arena_set_allocated_param(
    ::grpc_cli::AddSpareRequest_Param* param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.AddSpareRequest.param)
}
inline ::grpc_cli::AddSpareRequest_Param* AddSpareRequest::release_param() {
  
  ::grpc_cli::AddSpareRequest_Param* temp = param_;
  param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::AddSpareRequest_Param* AddSpareRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:grpc_cli.AddSpareRequest.param)
  
  ::grpc_cli::AddSpareRequest_Param* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::grpc_cli::AddSpareRequest_Param* AddSpareRequest::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::AddSpareRequest_Param>(GetArena());
    param_ = p;
  }
  return param_;
}
inline ::grpc_cli::AddSpareRequest_Param* AddSpareRequest::mutable_param() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.AddSpareRequest.param)
  return _internal_mutable_param();
}
inline void AddSpareRequest::set_allocated_param(::grpc_cli::AddSpareRequest_Param* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.AddSpareRequest.param)
}

// -------------------------------------------------------------------

// AddSpareResponse_Result

// .grpc_cli.Status status = 1;
inline bool AddSpareResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool AddSpareResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void AddSpareResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& AddSpareResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& AddSpareResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.AddSpareResponse.Result.status)
  return _internal_status();
}
inline void AddSpareResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.AddSpareResponse.Result.status)
}
inline ::grpc_cli::Status* AddSpareResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* AddSpareResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.AddSpareResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* AddSpareResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* AddSpareResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.AddSpareResponse.Result.status)
  return _internal_mutable_status();
}
inline void AddSpareResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.AddSpareResponse.Result.status)
}

// -------------------------------------------------------------------

// AddSpareResponse

// string command = 1;
inline void AddSpareResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& AddSpareResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.AddSpareResponse.command)
  return _internal_command();
}
inline void AddSpareResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.AddSpareResponse.command)
}
inline std::string* AddSpareResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.AddSpareResponse.command)
  return _internal_mutable_command();
}
inline const std::string& AddSpareResponse::_internal_command() const {
  return command_.Get();
}
inline void AddSpareResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddSpareResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.AddSpareResponse.command)
}
inline void AddSpareResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.AddSpareResponse.command)
}
inline void AddSpareResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.AddSpareResponse.command)
}
inline std::string* AddSpareResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddSpareResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.AddSpareResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddSpareResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.AddSpareResponse.command)
}

// string rid = 2;
inline void AddSpareResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& AddSpareResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.AddSpareResponse.rid)
  return _internal_rid();
}
inline void AddSpareResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.AddSpareResponse.rid)
}
inline std::string* AddSpareResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.AddSpareResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& AddSpareResponse::_internal_rid() const {
  return rid_.Get();
}
inline void AddSpareResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddSpareResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.AddSpareResponse.rid)
}
inline void AddSpareResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.AddSpareResponse.rid)
}
inline void AddSpareResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.AddSpareResponse.rid)
}
inline std::string* AddSpareResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddSpareResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.AddSpareResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddSpareResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.AddSpareResponse.rid)
}

// .grpc_cli.AddSpareResponse.Result result = 3;
inline bool AddSpareResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool AddSpareResponse::has_result() const {
  return _internal_has_result();
}
inline void AddSpareResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::AddSpareResponse_Result& AddSpareResponse::_internal_result() const {
  const ::grpc_cli::AddSpareResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::AddSpareResponse_Result&>(
      ::grpc_cli::_AddSpareResponse_Result_default_instance_);
}
inline const ::grpc_cli::AddSpareResponse_Result& AddSpareResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.AddSpareResponse.result)
  return _internal_result();
}
inline void AddSpareResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::AddSpareResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.AddSpareResponse.result)
}
inline ::grpc_cli::AddSpareResponse_Result* AddSpareResponse::release_result() {
  
  ::grpc_cli::AddSpareResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::AddSpareResponse_Result* AddSpareResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.AddSpareResponse.result)
  
  ::grpc_cli::AddSpareResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::AddSpareResponse_Result* AddSpareResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::AddSpareResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::AddSpareResponse_Result* AddSpareResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.AddSpareResponse.result)
  return _internal_mutable_result();
}
inline void AddSpareResponse::set_allocated_result(::grpc_cli::AddSpareResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.AddSpareResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool AddSpareResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool AddSpareResponse::has_info() const {
  return _internal_has_info();
}
inline void AddSpareResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& AddSpareResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& AddSpareResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.AddSpareResponse.info)
  return _internal_info();
}
inline void AddSpareResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.AddSpareResponse.info)
}
inline ::grpc_cli::PosInfo* AddSpareResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* AddSpareResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.AddSpareResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* AddSpareResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* AddSpareResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.AddSpareResponse.info)
  return _internal_mutable_info();
}
inline void AddSpareResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.AddSpareResponse.info)
}

// -------------------------------------------------------------------

// DeviceNameList

// string deviceName = 1;
inline void DeviceNameList::clear_devicename() {
  devicename_.ClearToEmpty();
}
inline const std::string& DeviceNameList::devicename() const {
  // @@protoc_insertion_point(field_get:grpc_cli.DeviceNameList.deviceName)
  return _internal_devicename();
}
inline void DeviceNameList::set_devicename(const std::string& value) {
  _internal_set_devicename(value);
  // @@protoc_insertion_point(field_set:grpc_cli.DeviceNameList.deviceName)
}
inline std::string* DeviceNameList::mutable_devicename() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.DeviceNameList.deviceName)
  return _internal_mutable_devicename();
}
inline const std::string& DeviceNameList::_internal_devicename() const {
  return devicename_.Get();
}
inline void DeviceNameList::_internal_set_devicename(const std::string& value) {
  
  devicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeviceNameList::set_devicename(std::string&& value) {
  
  devicename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.DeviceNameList.deviceName)
}
inline void DeviceNameList::set_devicename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  devicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.DeviceNameList.deviceName)
}
inline void DeviceNameList::set_devicename(const char* value,
    size_t size) {
  
  devicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.DeviceNameList.deviceName)
}
inline std::string* DeviceNameList::_internal_mutable_devicename() {
  
  return devicename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeviceNameList::release_devicename() {
  // @@protoc_insertion_point(field_release:grpc_cli.DeviceNameList.deviceName)
  return devicename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceNameList::set_allocated_devicename(std::string* devicename) {
  if (devicename != nullptr) {
    
  } else {
    
  }
  devicename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), devicename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.DeviceNameList.deviceName)
}

// -------------------------------------------------------------------

// RemoveSpareRequest_SpareDeviceName

// string deviceName = 1;
inline void RemoveSpareRequest_SpareDeviceName::clear_devicename() {
  devicename_.ClearToEmpty();
}
inline const std::string& RemoveSpareRequest_SpareDeviceName::devicename() const {
  // @@protoc_insertion_point(field_get:grpc_cli.RemoveSpareRequest.SpareDeviceName.deviceName)
  return _internal_devicename();
}
inline void RemoveSpareRequest_SpareDeviceName::set_devicename(const std::string& value) {
  _internal_set_devicename(value);
  // @@protoc_insertion_point(field_set:grpc_cli.RemoveSpareRequest.SpareDeviceName.deviceName)
}
inline std::string* RemoveSpareRequest_SpareDeviceName::mutable_devicename() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.RemoveSpareRequest.SpareDeviceName.deviceName)
  return _internal_mutable_devicename();
}
inline const std::string& RemoveSpareRequest_SpareDeviceName::_internal_devicename() const {
  return devicename_.Get();
}
inline void RemoveSpareRequest_SpareDeviceName::_internal_set_devicename(const std::string& value) {
  
  devicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RemoveSpareRequest_SpareDeviceName::set_devicename(std::string&& value) {
  
  devicename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.RemoveSpareRequest.SpareDeviceName.deviceName)
}
inline void RemoveSpareRequest_SpareDeviceName::set_devicename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  devicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.RemoveSpareRequest.SpareDeviceName.deviceName)
}
inline void RemoveSpareRequest_SpareDeviceName::set_devicename(const char* value,
    size_t size) {
  
  devicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.RemoveSpareRequest.SpareDeviceName.deviceName)
}
inline std::string* RemoveSpareRequest_SpareDeviceName::_internal_mutable_devicename() {
  
  return devicename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RemoveSpareRequest_SpareDeviceName::release_devicename() {
  // @@protoc_insertion_point(field_release:grpc_cli.RemoveSpareRequest.SpareDeviceName.deviceName)
  return devicename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoveSpareRequest_SpareDeviceName::set_allocated_devicename(std::string* devicename) {
  if (devicename != nullptr) {
    
  } else {
    
  }
  devicename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), devicename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.RemoveSpareRequest.SpareDeviceName.deviceName)
}

// -------------------------------------------------------------------

// RemoveSpareRequest_Param

// string array = 1;
inline void RemoveSpareRequest_Param::clear_array() {
  array_.ClearToEmpty();
}
inline const std::string& RemoveSpareRequest_Param::array() const {
  // @@protoc_insertion_point(field_get:grpc_cli.RemoveSpareRequest.Param.array)
  return _internal_array();
}
inline void RemoveSpareRequest_Param::set_array(const std::string& value) {
  _internal_set_array(value);
  // @@protoc_insertion_point(field_set:grpc_cli.RemoveSpareRequest.Param.array)
}
inline std::string* RemoveSpareRequest_Param::mutable_array() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.RemoveSpareRequest.Param.array)
  return _internal_mutable_array();
}
inline const std::string& RemoveSpareRequest_Param::_internal_array() const {
  return array_.Get();
}
inline void RemoveSpareRequest_Param::_internal_set_array(const std::string& value) {
  
  array_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RemoveSpareRequest_Param::set_array(std::string&& value) {
  
  array_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.RemoveSpareRequest.Param.array)
}
inline void RemoveSpareRequest_Param::set_array(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  array_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.RemoveSpareRequest.Param.array)
}
inline void RemoveSpareRequest_Param::set_array(const char* value,
    size_t size) {
  
  array_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.RemoveSpareRequest.Param.array)
}
inline std::string* RemoveSpareRequest_Param::_internal_mutable_array() {
  
  return array_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RemoveSpareRequest_Param::release_array() {
  // @@protoc_insertion_point(field_release:grpc_cli.RemoveSpareRequest.Param.array)
  return array_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoveSpareRequest_Param::set_allocated_array(std::string* array) {
  if (array != nullptr) {
    
  } else {
    
  }
  array_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), array,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.RemoveSpareRequest.Param.array)
}

// repeated .grpc_cli.RemoveSpareRequest.SpareDeviceName spare = 2;
inline int RemoveSpareRequest_Param::_internal_spare_size() const {
  return spare_.size();
}
inline int RemoveSpareRequest_Param::spare_size() const {
  return _internal_spare_size();
}
inline void RemoveSpareRequest_Param::clear_spare() {
  spare_.Clear();
}
inline ::grpc_cli::RemoveSpareRequest_SpareDeviceName* RemoveSpareRequest_Param::mutable_spare(int index) {
  // @@protoc_insertion_point(field_mutable:grpc_cli.RemoveSpareRequest.Param.spare)
  return spare_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::RemoveSpareRequest_SpareDeviceName >*
RemoveSpareRequest_Param::mutable_spare() {
  // @@protoc_insertion_point(field_mutable_list:grpc_cli.RemoveSpareRequest.Param.spare)
  return &spare_;
}
inline const ::grpc_cli::RemoveSpareRequest_SpareDeviceName& RemoveSpareRequest_Param::_internal_spare(int index) const {
  return spare_.Get(index);
}
inline const ::grpc_cli::RemoveSpareRequest_SpareDeviceName& RemoveSpareRequest_Param::spare(int index) const {
  // @@protoc_insertion_point(field_get:grpc_cli.RemoveSpareRequest.Param.spare)
  return _internal_spare(index);
}
inline ::grpc_cli::RemoveSpareRequest_SpareDeviceName* RemoveSpareRequest_Param::_internal_add_spare() {
  return spare_.Add();
}
inline ::grpc_cli::RemoveSpareRequest_SpareDeviceName* RemoveSpareRequest_Param::add_spare() {
  // @@protoc_insertion_point(field_add:grpc_cli.RemoveSpareRequest.Param.spare)
  return _internal_add_spare();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::RemoveSpareRequest_SpareDeviceName >&
RemoveSpareRequest_Param::spare() const {
  // @@protoc_insertion_point(field_list:grpc_cli.RemoveSpareRequest.Param.spare)
  return spare_;
}

// -------------------------------------------------------------------

// RemoveSpareRequest

// string command = 1;
inline void RemoveSpareRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& RemoveSpareRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.RemoveSpareRequest.command)
  return _internal_command();
}
inline void RemoveSpareRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.RemoveSpareRequest.command)
}
inline std::string* RemoveSpareRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.RemoveSpareRequest.command)
  return _internal_mutable_command();
}
inline const std::string& RemoveSpareRequest::_internal_command() const {
  return command_.Get();
}
inline void RemoveSpareRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RemoveSpareRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.RemoveSpareRequest.command)
}
inline void RemoveSpareRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.RemoveSpareRequest.command)
}
inline void RemoveSpareRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.RemoveSpareRequest.command)
}
inline std::string* RemoveSpareRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RemoveSpareRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.RemoveSpareRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoveSpareRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.RemoveSpareRequest.command)
}

// string rid = 2;
inline void RemoveSpareRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& RemoveSpareRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.RemoveSpareRequest.rid)
  return _internal_rid();
}
inline void RemoveSpareRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.RemoveSpareRequest.rid)
}
inline std::string* RemoveSpareRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.RemoveSpareRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& RemoveSpareRequest::_internal_rid() const {
  return rid_.Get();
}
inline void RemoveSpareRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RemoveSpareRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.RemoveSpareRequest.rid)
}
inline void RemoveSpareRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.RemoveSpareRequest.rid)
}
inline void RemoveSpareRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.RemoveSpareRequest.rid)
}
inline std::string* RemoveSpareRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RemoveSpareRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.RemoveSpareRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoveSpareRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.RemoveSpareRequest.rid)
}

// string requestor = 3;
inline void RemoveSpareRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& RemoveSpareRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.RemoveSpareRequest.requestor)
  return _internal_requestor();
}
inline void RemoveSpareRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.RemoveSpareRequest.requestor)
}
inline std::string* RemoveSpareRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.RemoveSpareRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& RemoveSpareRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void RemoveSpareRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RemoveSpareRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.RemoveSpareRequest.requestor)
}
inline void RemoveSpareRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.RemoveSpareRequest.requestor)
}
inline void RemoveSpareRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.RemoveSpareRequest.requestor)
}
inline std::string* RemoveSpareRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RemoveSpareRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.RemoveSpareRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoveSpareRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.RemoveSpareRequest.requestor)
}

// .grpc_cli.RemoveSpareRequest.Param param = 4;
inline bool RemoveSpareRequest::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool RemoveSpareRequest::has_param() const {
  return _internal_has_param();
}
inline void RemoveSpareRequest::clear_param() {
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::grpc_cli::RemoveSpareRequest_Param& RemoveSpareRequest::_internal_param() const {
  const ::grpc_cli::RemoveSpareRequest_Param* p = param_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::RemoveSpareRequest_Param&>(
      ::grpc_cli::_RemoveSpareRequest_Param_default_instance_);
}
inline const ::grpc_cli::RemoveSpareRequest_Param& RemoveSpareRequest::param() const {
  // @@protoc_insertion_point(field_get:grpc_cli.RemoveSpareRequest.param)
  return _internal_param();
}
inline void RemoveSpareRequest::unsafe_arena_set_allocated_param(
    ::grpc_cli::RemoveSpareRequest_Param* param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.RemoveSpareRequest.param)
}
inline ::grpc_cli::RemoveSpareRequest_Param* RemoveSpareRequest::release_param() {
  
  ::grpc_cli::RemoveSpareRequest_Param* temp = param_;
  param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::RemoveSpareRequest_Param* RemoveSpareRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:grpc_cli.RemoveSpareRequest.param)
  
  ::grpc_cli::RemoveSpareRequest_Param* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::grpc_cli::RemoveSpareRequest_Param* RemoveSpareRequest::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::RemoveSpareRequest_Param>(GetArena());
    param_ = p;
  }
  return param_;
}
inline ::grpc_cli::RemoveSpareRequest_Param* RemoveSpareRequest::mutable_param() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.RemoveSpareRequest.param)
  return _internal_mutable_param();
}
inline void RemoveSpareRequest::set_allocated_param(::grpc_cli::RemoveSpareRequest_Param* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.RemoveSpareRequest.param)
}

// -------------------------------------------------------------------

// RemoveSpareResponse_Result

// .grpc_cli.Status status = 1;
inline bool RemoveSpareResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool RemoveSpareResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void RemoveSpareResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& RemoveSpareResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& RemoveSpareResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.RemoveSpareResponse.Result.status)
  return _internal_status();
}
inline void RemoveSpareResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.RemoveSpareResponse.Result.status)
}
inline ::grpc_cli::Status* RemoveSpareResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* RemoveSpareResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.RemoveSpareResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* RemoveSpareResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* RemoveSpareResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.RemoveSpareResponse.Result.status)
  return _internal_mutable_status();
}
inline void RemoveSpareResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.RemoveSpareResponse.Result.status)
}

// -------------------------------------------------------------------

// RemoveSpareResponse

// string command = 1;
inline void RemoveSpareResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& RemoveSpareResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.RemoveSpareResponse.command)
  return _internal_command();
}
inline void RemoveSpareResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.RemoveSpareResponse.command)
}
inline std::string* RemoveSpareResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.RemoveSpareResponse.command)
  return _internal_mutable_command();
}
inline const std::string& RemoveSpareResponse::_internal_command() const {
  return command_.Get();
}
inline void RemoveSpareResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RemoveSpareResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.RemoveSpareResponse.command)
}
inline void RemoveSpareResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.RemoveSpareResponse.command)
}
inline void RemoveSpareResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.RemoveSpareResponse.command)
}
inline std::string* RemoveSpareResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RemoveSpareResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.RemoveSpareResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoveSpareResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.RemoveSpareResponse.command)
}

// string rid = 2;
inline void RemoveSpareResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& RemoveSpareResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.RemoveSpareResponse.rid)
  return _internal_rid();
}
inline void RemoveSpareResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.RemoveSpareResponse.rid)
}
inline std::string* RemoveSpareResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.RemoveSpareResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& RemoveSpareResponse::_internal_rid() const {
  return rid_.Get();
}
inline void RemoveSpareResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RemoveSpareResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.RemoveSpareResponse.rid)
}
inline void RemoveSpareResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.RemoveSpareResponse.rid)
}
inline void RemoveSpareResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.RemoveSpareResponse.rid)
}
inline std::string* RemoveSpareResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RemoveSpareResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.RemoveSpareResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoveSpareResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.RemoveSpareResponse.rid)
}

// .grpc_cli.RemoveSpareResponse.Result result = 3;
inline bool RemoveSpareResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool RemoveSpareResponse::has_result() const {
  return _internal_has_result();
}
inline void RemoveSpareResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::RemoveSpareResponse_Result& RemoveSpareResponse::_internal_result() const {
  const ::grpc_cli::RemoveSpareResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::RemoveSpareResponse_Result&>(
      ::grpc_cli::_RemoveSpareResponse_Result_default_instance_);
}
inline const ::grpc_cli::RemoveSpareResponse_Result& RemoveSpareResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.RemoveSpareResponse.result)
  return _internal_result();
}
inline void RemoveSpareResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::RemoveSpareResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.RemoveSpareResponse.result)
}
inline ::grpc_cli::RemoveSpareResponse_Result* RemoveSpareResponse::release_result() {
  
  ::grpc_cli::RemoveSpareResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::RemoveSpareResponse_Result* RemoveSpareResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.RemoveSpareResponse.result)
  
  ::grpc_cli::RemoveSpareResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::RemoveSpareResponse_Result* RemoveSpareResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::RemoveSpareResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::RemoveSpareResponse_Result* RemoveSpareResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.RemoveSpareResponse.result)
  return _internal_mutable_result();
}
inline void RemoveSpareResponse::set_allocated_result(::grpc_cli::RemoveSpareResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.RemoveSpareResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool RemoveSpareResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool RemoveSpareResponse::has_info() const {
  return _internal_has_info();
}
inline void RemoveSpareResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& RemoveSpareResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& RemoveSpareResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.RemoveSpareResponse.info)
  return _internal_info();
}
inline void RemoveSpareResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.RemoveSpareResponse.info)
}
inline ::grpc_cli::PosInfo* RemoveSpareResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* RemoveSpareResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.RemoveSpareResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* RemoveSpareResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* RemoveSpareResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.RemoveSpareResponse.info)
  return _internal_mutable_info();
}
inline void RemoveSpareResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.RemoveSpareResponse.info)
}

// -------------------------------------------------------------------

// CreateArrayRequest_Param

// string name = 1;
inline void CreateArrayRequest_Param::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CreateArrayRequest_Param::name() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateArrayRequest.Param.name)
  return _internal_name();
}
inline void CreateArrayRequest_Param::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:grpc_cli.CreateArrayRequest.Param.name)
}
inline std::string* CreateArrayRequest_Param::mutable_name() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateArrayRequest.Param.name)
  return _internal_mutable_name();
}
inline const std::string& CreateArrayRequest_Param::_internal_name() const {
  return name_.Get();
}
inline void CreateArrayRequest_Param::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateArrayRequest_Param::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.CreateArrayRequest.Param.name)
}
inline void CreateArrayRequest_Param::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.CreateArrayRequest.Param.name)
}
inline void CreateArrayRequest_Param::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.CreateArrayRequest.Param.name)
}
inline std::string* CreateArrayRequest_Param::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateArrayRequest_Param::release_name() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateArrayRequest.Param.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateArrayRequest_Param::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateArrayRequest.Param.name)
}

// repeated .grpc_cli.DeviceNameList buffer = 2;
inline int CreateArrayRequest_Param::_internal_buffer_size() const {
  return buffer_.size();
}
inline int CreateArrayRequest_Param::buffer_size() const {
  return _internal_buffer_size();
}
inline void CreateArrayRequest_Param::clear_buffer() {
  buffer_.Clear();
}
inline ::grpc_cli::DeviceNameList* CreateArrayRequest_Param::mutable_buffer(int index) {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateArrayRequest.Param.buffer)
  return buffer_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::DeviceNameList >*
CreateArrayRequest_Param::mutable_buffer() {
  // @@protoc_insertion_point(field_mutable_list:grpc_cli.CreateArrayRequest.Param.buffer)
  return &buffer_;
}
inline const ::grpc_cli::DeviceNameList& CreateArrayRequest_Param::_internal_buffer(int index) const {
  return buffer_.Get(index);
}
inline const ::grpc_cli::DeviceNameList& CreateArrayRequest_Param::buffer(int index) const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateArrayRequest.Param.buffer)
  return _internal_buffer(index);
}
inline ::grpc_cli::DeviceNameList* CreateArrayRequest_Param::_internal_add_buffer() {
  return buffer_.Add();
}
inline ::grpc_cli::DeviceNameList* CreateArrayRequest_Param::add_buffer() {
  // @@protoc_insertion_point(field_add:grpc_cli.CreateArrayRequest.Param.buffer)
  return _internal_add_buffer();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::DeviceNameList >&
CreateArrayRequest_Param::buffer() const {
  // @@protoc_insertion_point(field_list:grpc_cli.CreateArrayRequest.Param.buffer)
  return buffer_;
}

// repeated .grpc_cli.DeviceNameList data = 3;
inline int CreateArrayRequest_Param::_internal_data_size() const {
  return data_.size();
}
inline int CreateArrayRequest_Param::data_size() const {
  return _internal_data_size();
}
inline void CreateArrayRequest_Param::clear_data() {
  data_.Clear();
}
inline ::grpc_cli::DeviceNameList* CreateArrayRequest_Param::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateArrayRequest.Param.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::DeviceNameList >*
CreateArrayRequest_Param::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:grpc_cli.CreateArrayRequest.Param.data)
  return &data_;
}
inline const ::grpc_cli::DeviceNameList& CreateArrayRequest_Param::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::grpc_cli::DeviceNameList& CreateArrayRequest_Param::data(int index) const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateArrayRequest.Param.data)
  return _internal_data(index);
}
inline ::grpc_cli::DeviceNameList* CreateArrayRequest_Param::_internal_add_data() {
  return data_.Add();
}
inline ::grpc_cli::DeviceNameList* CreateArrayRequest_Param::add_data() {
  // @@protoc_insertion_point(field_add:grpc_cli.CreateArrayRequest.Param.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::DeviceNameList >&
CreateArrayRequest_Param::data() const {
  // @@protoc_insertion_point(field_list:grpc_cli.CreateArrayRequest.Param.data)
  return data_;
}

// repeated .grpc_cli.DeviceNameList spare = 4;
inline int CreateArrayRequest_Param::_internal_spare_size() const {
  return spare_.size();
}
inline int CreateArrayRequest_Param::spare_size() const {
  return _internal_spare_size();
}
inline void CreateArrayRequest_Param::clear_spare() {
  spare_.Clear();
}
inline ::grpc_cli::DeviceNameList* CreateArrayRequest_Param::mutable_spare(int index) {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateArrayRequest.Param.spare)
  return spare_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::DeviceNameList >*
CreateArrayRequest_Param::mutable_spare() {
  // @@protoc_insertion_point(field_mutable_list:grpc_cli.CreateArrayRequest.Param.spare)
  return &spare_;
}
inline const ::grpc_cli::DeviceNameList& CreateArrayRequest_Param::_internal_spare(int index) const {
  return spare_.Get(index);
}
inline const ::grpc_cli::DeviceNameList& CreateArrayRequest_Param::spare(int index) const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateArrayRequest.Param.spare)
  return _internal_spare(index);
}
inline ::grpc_cli::DeviceNameList* CreateArrayRequest_Param::_internal_add_spare() {
  return spare_.Add();
}
inline ::grpc_cli::DeviceNameList* CreateArrayRequest_Param::add_spare() {
  // @@protoc_insertion_point(field_add:grpc_cli.CreateArrayRequest.Param.spare)
  return _internal_add_spare();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::DeviceNameList >&
CreateArrayRequest_Param::spare() const {
  // @@protoc_insertion_point(field_list:grpc_cli.CreateArrayRequest.Param.spare)
  return spare_;
}

// string raidtype = 5;
inline void CreateArrayRequest_Param::clear_raidtype() {
  raidtype_.ClearToEmpty();
}
inline const std::string& CreateArrayRequest_Param::raidtype() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateArrayRequest.Param.raidtype)
  return _internal_raidtype();
}
inline void CreateArrayRequest_Param::set_raidtype(const std::string& value) {
  _internal_set_raidtype(value);
  // @@protoc_insertion_point(field_set:grpc_cli.CreateArrayRequest.Param.raidtype)
}
inline std::string* CreateArrayRequest_Param::mutable_raidtype() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateArrayRequest.Param.raidtype)
  return _internal_mutable_raidtype();
}
inline const std::string& CreateArrayRequest_Param::_internal_raidtype() const {
  return raidtype_.Get();
}
inline void CreateArrayRequest_Param::_internal_set_raidtype(const std::string& value) {
  
  raidtype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateArrayRequest_Param::set_raidtype(std::string&& value) {
  
  raidtype_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.CreateArrayRequest.Param.raidtype)
}
inline void CreateArrayRequest_Param::set_raidtype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  raidtype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.CreateArrayRequest.Param.raidtype)
}
inline void CreateArrayRequest_Param::set_raidtype(const char* value,
    size_t size) {
  
  raidtype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.CreateArrayRequest.Param.raidtype)
}
inline std::string* CreateArrayRequest_Param::_internal_mutable_raidtype() {
  
  return raidtype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateArrayRequest_Param::release_raidtype() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateArrayRequest.Param.raidtype)
  return raidtype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateArrayRequest_Param::set_allocated_raidtype(std::string* raidtype) {
  if (raidtype != nullptr) {
    
  } else {
    
  }
  raidtype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), raidtype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateArrayRequest.Param.raidtype)
}

// -------------------------------------------------------------------

// CreateArrayRequest

// string command = 1;
inline void CreateArrayRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& CreateArrayRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateArrayRequest.command)
  return _internal_command();
}
inline void CreateArrayRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.CreateArrayRequest.command)
}
inline std::string* CreateArrayRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateArrayRequest.command)
  return _internal_mutable_command();
}
inline const std::string& CreateArrayRequest::_internal_command() const {
  return command_.Get();
}
inline void CreateArrayRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateArrayRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.CreateArrayRequest.command)
}
inline void CreateArrayRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.CreateArrayRequest.command)
}
inline void CreateArrayRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.CreateArrayRequest.command)
}
inline std::string* CreateArrayRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateArrayRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateArrayRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateArrayRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateArrayRequest.command)
}

// string rid = 2;
inline void CreateArrayRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& CreateArrayRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateArrayRequest.rid)
  return _internal_rid();
}
inline void CreateArrayRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.CreateArrayRequest.rid)
}
inline std::string* CreateArrayRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateArrayRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& CreateArrayRequest::_internal_rid() const {
  return rid_.Get();
}
inline void CreateArrayRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateArrayRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.CreateArrayRequest.rid)
}
inline void CreateArrayRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.CreateArrayRequest.rid)
}
inline void CreateArrayRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.CreateArrayRequest.rid)
}
inline std::string* CreateArrayRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateArrayRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateArrayRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateArrayRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateArrayRequest.rid)
}

// string requestor = 3;
inline void CreateArrayRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& CreateArrayRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateArrayRequest.requestor)
  return _internal_requestor();
}
inline void CreateArrayRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.CreateArrayRequest.requestor)
}
inline std::string* CreateArrayRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateArrayRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& CreateArrayRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void CreateArrayRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateArrayRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.CreateArrayRequest.requestor)
}
inline void CreateArrayRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.CreateArrayRequest.requestor)
}
inline void CreateArrayRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.CreateArrayRequest.requestor)
}
inline std::string* CreateArrayRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateArrayRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateArrayRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateArrayRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateArrayRequest.requestor)
}

// .grpc_cli.CreateArrayRequest.Param param = 4;
inline bool CreateArrayRequest::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool CreateArrayRequest::has_param() const {
  return _internal_has_param();
}
inline void CreateArrayRequest::clear_param() {
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::grpc_cli::CreateArrayRequest_Param& CreateArrayRequest::_internal_param() const {
  const ::grpc_cli::CreateArrayRequest_Param* p = param_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::CreateArrayRequest_Param&>(
      ::grpc_cli::_CreateArrayRequest_Param_default_instance_);
}
inline const ::grpc_cli::CreateArrayRequest_Param& CreateArrayRequest::param() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateArrayRequest.param)
  return _internal_param();
}
inline void CreateArrayRequest::unsafe_arena_set_allocated_param(
    ::grpc_cli::CreateArrayRequest_Param* param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.CreateArrayRequest.param)
}
inline ::grpc_cli::CreateArrayRequest_Param* CreateArrayRequest::release_param() {
  
  ::grpc_cli::CreateArrayRequest_Param* temp = param_;
  param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::CreateArrayRequest_Param* CreateArrayRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateArrayRequest.param)
  
  ::grpc_cli::CreateArrayRequest_Param* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::grpc_cli::CreateArrayRequest_Param* CreateArrayRequest::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::CreateArrayRequest_Param>(GetArena());
    param_ = p;
  }
  return param_;
}
inline ::grpc_cli::CreateArrayRequest_Param* CreateArrayRequest::mutable_param() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateArrayRequest.param)
  return _internal_mutable_param();
}
inline void CreateArrayRequest::set_allocated_param(::grpc_cli::CreateArrayRequest_Param* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateArrayRequest.param)
}

// -------------------------------------------------------------------

// CreateArrayResponse_Result

// .grpc_cli.Status status = 1;
inline bool CreateArrayResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool CreateArrayResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void CreateArrayResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& CreateArrayResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& CreateArrayResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateArrayResponse.Result.status)
  return _internal_status();
}
inline void CreateArrayResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.CreateArrayResponse.Result.status)
}
inline ::grpc_cli::Status* CreateArrayResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* CreateArrayResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateArrayResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* CreateArrayResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* CreateArrayResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateArrayResponse.Result.status)
  return _internal_mutable_status();
}
inline void CreateArrayResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateArrayResponse.Result.status)
}

// -------------------------------------------------------------------

// CreateArrayResponse

// string command = 1;
inline void CreateArrayResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& CreateArrayResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateArrayResponse.command)
  return _internal_command();
}
inline void CreateArrayResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.CreateArrayResponse.command)
}
inline std::string* CreateArrayResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateArrayResponse.command)
  return _internal_mutable_command();
}
inline const std::string& CreateArrayResponse::_internal_command() const {
  return command_.Get();
}
inline void CreateArrayResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateArrayResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.CreateArrayResponse.command)
}
inline void CreateArrayResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.CreateArrayResponse.command)
}
inline void CreateArrayResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.CreateArrayResponse.command)
}
inline std::string* CreateArrayResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateArrayResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateArrayResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateArrayResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateArrayResponse.command)
}

// string rid = 2;
inline void CreateArrayResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& CreateArrayResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateArrayResponse.rid)
  return _internal_rid();
}
inline void CreateArrayResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.CreateArrayResponse.rid)
}
inline std::string* CreateArrayResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateArrayResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& CreateArrayResponse::_internal_rid() const {
  return rid_.Get();
}
inline void CreateArrayResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateArrayResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.CreateArrayResponse.rid)
}
inline void CreateArrayResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.CreateArrayResponse.rid)
}
inline void CreateArrayResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.CreateArrayResponse.rid)
}
inline std::string* CreateArrayResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateArrayResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateArrayResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateArrayResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateArrayResponse.rid)
}

// .grpc_cli.CreateArrayResponse.Result result = 3;
inline bool CreateArrayResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool CreateArrayResponse::has_result() const {
  return _internal_has_result();
}
inline void CreateArrayResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::CreateArrayResponse_Result& CreateArrayResponse::_internal_result() const {
  const ::grpc_cli::CreateArrayResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::CreateArrayResponse_Result&>(
      ::grpc_cli::_CreateArrayResponse_Result_default_instance_);
}
inline const ::grpc_cli::CreateArrayResponse_Result& CreateArrayResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateArrayResponse.result)
  return _internal_result();
}
inline void CreateArrayResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::CreateArrayResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.CreateArrayResponse.result)
}
inline ::grpc_cli::CreateArrayResponse_Result* CreateArrayResponse::release_result() {
  
  ::grpc_cli::CreateArrayResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::CreateArrayResponse_Result* CreateArrayResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateArrayResponse.result)
  
  ::grpc_cli::CreateArrayResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::CreateArrayResponse_Result* CreateArrayResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::CreateArrayResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::CreateArrayResponse_Result* CreateArrayResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateArrayResponse.result)
  return _internal_mutable_result();
}
inline void CreateArrayResponse::set_allocated_result(::grpc_cli::CreateArrayResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateArrayResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool CreateArrayResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool CreateArrayResponse::has_info() const {
  return _internal_has_info();
}
inline void CreateArrayResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& CreateArrayResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& CreateArrayResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateArrayResponse.info)
  return _internal_info();
}
inline void CreateArrayResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.CreateArrayResponse.info)
}
inline ::grpc_cli::PosInfo* CreateArrayResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* CreateArrayResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateArrayResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* CreateArrayResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* CreateArrayResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateArrayResponse.info)
  return _internal_mutable_info();
}
inline void CreateArrayResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateArrayResponse.info)
}

// -------------------------------------------------------------------

// DeleteArrayRequest_Param

// string name = 1;
inline void DeleteArrayRequest_Param::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& DeleteArrayRequest_Param::name() const {
  // @@protoc_insertion_point(field_get:grpc_cli.DeleteArrayRequest.Param.name)
  return _internal_name();
}
inline void DeleteArrayRequest_Param::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:grpc_cli.DeleteArrayRequest.Param.name)
}
inline std::string* DeleteArrayRequest_Param::mutable_name() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.DeleteArrayRequest.Param.name)
  return _internal_mutable_name();
}
inline const std::string& DeleteArrayRequest_Param::_internal_name() const {
  return name_.Get();
}
inline void DeleteArrayRequest_Param::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteArrayRequest_Param::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.DeleteArrayRequest.Param.name)
}
inline void DeleteArrayRequest_Param::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.DeleteArrayRequest.Param.name)
}
inline void DeleteArrayRequest_Param::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.DeleteArrayRequest.Param.name)
}
inline std::string* DeleteArrayRequest_Param::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteArrayRequest_Param::release_name() {
  // @@protoc_insertion_point(field_release:grpc_cli.DeleteArrayRequest.Param.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteArrayRequest_Param::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.DeleteArrayRequest.Param.name)
}

// -------------------------------------------------------------------

// DeleteArrayRequest

// string command = 1;
inline void DeleteArrayRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& DeleteArrayRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.DeleteArrayRequest.command)
  return _internal_command();
}
inline void DeleteArrayRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.DeleteArrayRequest.command)
}
inline std::string* DeleteArrayRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.DeleteArrayRequest.command)
  return _internal_mutable_command();
}
inline const std::string& DeleteArrayRequest::_internal_command() const {
  return command_.Get();
}
inline void DeleteArrayRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteArrayRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.DeleteArrayRequest.command)
}
inline void DeleteArrayRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.DeleteArrayRequest.command)
}
inline void DeleteArrayRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.DeleteArrayRequest.command)
}
inline std::string* DeleteArrayRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteArrayRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.DeleteArrayRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteArrayRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.DeleteArrayRequest.command)
}

// string rid = 2;
inline void DeleteArrayRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& DeleteArrayRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.DeleteArrayRequest.rid)
  return _internal_rid();
}
inline void DeleteArrayRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.DeleteArrayRequest.rid)
}
inline std::string* DeleteArrayRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.DeleteArrayRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& DeleteArrayRequest::_internal_rid() const {
  return rid_.Get();
}
inline void DeleteArrayRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteArrayRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.DeleteArrayRequest.rid)
}
inline void DeleteArrayRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.DeleteArrayRequest.rid)
}
inline void DeleteArrayRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.DeleteArrayRequest.rid)
}
inline std::string* DeleteArrayRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteArrayRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.DeleteArrayRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteArrayRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.DeleteArrayRequest.rid)
}

// string requestor = 3;
inline void DeleteArrayRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& DeleteArrayRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.DeleteArrayRequest.requestor)
  return _internal_requestor();
}
inline void DeleteArrayRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.DeleteArrayRequest.requestor)
}
inline std::string* DeleteArrayRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.DeleteArrayRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& DeleteArrayRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void DeleteArrayRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteArrayRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.DeleteArrayRequest.requestor)
}
inline void DeleteArrayRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.DeleteArrayRequest.requestor)
}
inline void DeleteArrayRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.DeleteArrayRequest.requestor)
}
inline std::string* DeleteArrayRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteArrayRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.DeleteArrayRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteArrayRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.DeleteArrayRequest.requestor)
}

// .grpc_cli.DeleteArrayRequest.Param param = 4;
inline bool DeleteArrayRequest::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool DeleteArrayRequest::has_param() const {
  return _internal_has_param();
}
inline void DeleteArrayRequest::clear_param() {
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::grpc_cli::DeleteArrayRequest_Param& DeleteArrayRequest::_internal_param() const {
  const ::grpc_cli::DeleteArrayRequest_Param* p = param_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::DeleteArrayRequest_Param&>(
      ::grpc_cli::_DeleteArrayRequest_Param_default_instance_);
}
inline const ::grpc_cli::DeleteArrayRequest_Param& DeleteArrayRequest::param() const {
  // @@protoc_insertion_point(field_get:grpc_cli.DeleteArrayRequest.param)
  return _internal_param();
}
inline void DeleteArrayRequest::unsafe_arena_set_allocated_param(
    ::grpc_cli::DeleteArrayRequest_Param* param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.DeleteArrayRequest.param)
}
inline ::grpc_cli::DeleteArrayRequest_Param* DeleteArrayRequest::release_param() {
  
  ::grpc_cli::DeleteArrayRequest_Param* temp = param_;
  param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::DeleteArrayRequest_Param* DeleteArrayRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:grpc_cli.DeleteArrayRequest.param)
  
  ::grpc_cli::DeleteArrayRequest_Param* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::grpc_cli::DeleteArrayRequest_Param* DeleteArrayRequest::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::DeleteArrayRequest_Param>(GetArena());
    param_ = p;
  }
  return param_;
}
inline ::grpc_cli::DeleteArrayRequest_Param* DeleteArrayRequest::mutable_param() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.DeleteArrayRequest.param)
  return _internal_mutable_param();
}
inline void DeleteArrayRequest::set_allocated_param(::grpc_cli::DeleteArrayRequest_Param* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.DeleteArrayRequest.param)
}

// -------------------------------------------------------------------

// DeleteArrayResponse_Result

// .grpc_cli.Status status = 1;
inline bool DeleteArrayResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool DeleteArrayResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void DeleteArrayResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& DeleteArrayResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& DeleteArrayResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.DeleteArrayResponse.Result.status)
  return _internal_status();
}
inline void DeleteArrayResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.DeleteArrayResponse.Result.status)
}
inline ::grpc_cli::Status* DeleteArrayResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* DeleteArrayResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.DeleteArrayResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* DeleteArrayResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* DeleteArrayResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.DeleteArrayResponse.Result.status)
  return _internal_mutable_status();
}
inline void DeleteArrayResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.DeleteArrayResponse.Result.status)
}

// -------------------------------------------------------------------

// DeleteArrayResponse

// string command = 1;
inline void DeleteArrayResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& DeleteArrayResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.DeleteArrayResponse.command)
  return _internal_command();
}
inline void DeleteArrayResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.DeleteArrayResponse.command)
}
inline std::string* DeleteArrayResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.DeleteArrayResponse.command)
  return _internal_mutable_command();
}
inline const std::string& DeleteArrayResponse::_internal_command() const {
  return command_.Get();
}
inline void DeleteArrayResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteArrayResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.DeleteArrayResponse.command)
}
inline void DeleteArrayResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.DeleteArrayResponse.command)
}
inline void DeleteArrayResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.DeleteArrayResponse.command)
}
inline std::string* DeleteArrayResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteArrayResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.DeleteArrayResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteArrayResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.DeleteArrayResponse.command)
}

// string rid = 2;
inline void DeleteArrayResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& DeleteArrayResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.DeleteArrayResponse.rid)
  return _internal_rid();
}
inline void DeleteArrayResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.DeleteArrayResponse.rid)
}
inline std::string* DeleteArrayResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.DeleteArrayResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& DeleteArrayResponse::_internal_rid() const {
  return rid_.Get();
}
inline void DeleteArrayResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteArrayResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.DeleteArrayResponse.rid)
}
inline void DeleteArrayResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.DeleteArrayResponse.rid)
}
inline void DeleteArrayResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.DeleteArrayResponse.rid)
}
inline std::string* DeleteArrayResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteArrayResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.DeleteArrayResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteArrayResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.DeleteArrayResponse.rid)
}

// .grpc_cli.DeleteArrayResponse.Result result = 3;
inline bool DeleteArrayResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool DeleteArrayResponse::has_result() const {
  return _internal_has_result();
}
inline void DeleteArrayResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::DeleteArrayResponse_Result& DeleteArrayResponse::_internal_result() const {
  const ::grpc_cli::DeleteArrayResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::DeleteArrayResponse_Result&>(
      ::grpc_cli::_DeleteArrayResponse_Result_default_instance_);
}
inline const ::grpc_cli::DeleteArrayResponse_Result& DeleteArrayResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.DeleteArrayResponse.result)
  return _internal_result();
}
inline void DeleteArrayResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::DeleteArrayResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.DeleteArrayResponse.result)
}
inline ::grpc_cli::DeleteArrayResponse_Result* DeleteArrayResponse::release_result() {
  
  ::grpc_cli::DeleteArrayResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::DeleteArrayResponse_Result* DeleteArrayResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.DeleteArrayResponse.result)
  
  ::grpc_cli::DeleteArrayResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::DeleteArrayResponse_Result* DeleteArrayResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::DeleteArrayResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::DeleteArrayResponse_Result* DeleteArrayResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.DeleteArrayResponse.result)
  return _internal_mutable_result();
}
inline void DeleteArrayResponse::set_allocated_result(::grpc_cli::DeleteArrayResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.DeleteArrayResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool DeleteArrayResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool DeleteArrayResponse::has_info() const {
  return _internal_has_info();
}
inline void DeleteArrayResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& DeleteArrayResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& DeleteArrayResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.DeleteArrayResponse.info)
  return _internal_info();
}
inline void DeleteArrayResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.DeleteArrayResponse.info)
}
inline ::grpc_cli::PosInfo* DeleteArrayResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* DeleteArrayResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.DeleteArrayResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* DeleteArrayResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* DeleteArrayResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.DeleteArrayResponse.info)
  return _internal_mutable_info();
}
inline void DeleteArrayResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.DeleteArrayResponse.info)
}

// -------------------------------------------------------------------

// MountArrayRequest_Param

// string name = 1;
inline void MountArrayRequest_Param::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& MountArrayRequest_Param::name() const {
  // @@protoc_insertion_point(field_get:grpc_cli.MountArrayRequest.Param.name)
  return _internal_name();
}
inline void MountArrayRequest_Param::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:grpc_cli.MountArrayRequest.Param.name)
}
inline std::string* MountArrayRequest_Param::mutable_name() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.MountArrayRequest.Param.name)
  return _internal_mutable_name();
}
inline const std::string& MountArrayRequest_Param::_internal_name() const {
  return name_.Get();
}
inline void MountArrayRequest_Param::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MountArrayRequest_Param::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.MountArrayRequest.Param.name)
}
inline void MountArrayRequest_Param::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.MountArrayRequest.Param.name)
}
inline void MountArrayRequest_Param::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.MountArrayRequest.Param.name)
}
inline std::string* MountArrayRequest_Param::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MountArrayRequest_Param::release_name() {
  // @@protoc_insertion_point(field_release:grpc_cli.MountArrayRequest.Param.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MountArrayRequest_Param::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.MountArrayRequest.Param.name)
}

// bool enableWriteThrough = 2;
inline bool MountArrayRequest_Param::_internal_has_enablewritethrough() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MountArrayRequest_Param::has_enablewritethrough() const {
  return _internal_has_enablewritethrough();
}
inline void MountArrayRequest_Param::clear_enablewritethrough() {
  enablewritethrough_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool MountArrayRequest_Param::_internal_enablewritethrough() const {
  return enablewritethrough_;
}
inline bool MountArrayRequest_Param::enablewritethrough() const {
  // @@protoc_insertion_point(field_get:grpc_cli.MountArrayRequest.Param.enableWriteThrough)
  return _internal_enablewritethrough();
}
inline void MountArrayRequest_Param::_internal_set_enablewritethrough(bool value) {
  _has_bits_[0] |= 0x00000001u;
  enablewritethrough_ = value;
}
inline void MountArrayRequest_Param::set_enablewritethrough(bool value) {
  _internal_set_enablewritethrough(value);
  // @@protoc_insertion_point(field_set:grpc_cli.MountArrayRequest.Param.enableWriteThrough)
}

// -------------------------------------------------------------------

// MountArrayRequest

// string command = 1;
inline void MountArrayRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& MountArrayRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.MountArrayRequest.command)
  return _internal_command();
}
inline void MountArrayRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.MountArrayRequest.command)
}
inline std::string* MountArrayRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.MountArrayRequest.command)
  return _internal_mutable_command();
}
inline const std::string& MountArrayRequest::_internal_command() const {
  return command_.Get();
}
inline void MountArrayRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MountArrayRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.MountArrayRequest.command)
}
inline void MountArrayRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.MountArrayRequest.command)
}
inline void MountArrayRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.MountArrayRequest.command)
}
inline std::string* MountArrayRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MountArrayRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.MountArrayRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MountArrayRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.MountArrayRequest.command)
}

// string rid = 2;
inline void MountArrayRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& MountArrayRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.MountArrayRequest.rid)
  return _internal_rid();
}
inline void MountArrayRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.MountArrayRequest.rid)
}
inline std::string* MountArrayRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.MountArrayRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& MountArrayRequest::_internal_rid() const {
  return rid_.Get();
}
inline void MountArrayRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MountArrayRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.MountArrayRequest.rid)
}
inline void MountArrayRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.MountArrayRequest.rid)
}
inline void MountArrayRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.MountArrayRequest.rid)
}
inline std::string* MountArrayRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MountArrayRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.MountArrayRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MountArrayRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.MountArrayRequest.rid)
}

// string requestor = 3;
inline void MountArrayRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& MountArrayRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.MountArrayRequest.requestor)
  return _internal_requestor();
}
inline void MountArrayRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.MountArrayRequest.requestor)
}
inline std::string* MountArrayRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.MountArrayRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& MountArrayRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void MountArrayRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MountArrayRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.MountArrayRequest.requestor)
}
inline void MountArrayRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.MountArrayRequest.requestor)
}
inline void MountArrayRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.MountArrayRequest.requestor)
}
inline std::string* MountArrayRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MountArrayRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.MountArrayRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MountArrayRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.MountArrayRequest.requestor)
}

// .grpc_cli.MountArrayRequest.Param param = 4;
inline bool MountArrayRequest::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool MountArrayRequest::has_param() const {
  return _internal_has_param();
}
inline void MountArrayRequest::clear_param() {
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::grpc_cli::MountArrayRequest_Param& MountArrayRequest::_internal_param() const {
  const ::grpc_cli::MountArrayRequest_Param* p = param_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::MountArrayRequest_Param&>(
      ::grpc_cli::_MountArrayRequest_Param_default_instance_);
}
inline const ::grpc_cli::MountArrayRequest_Param& MountArrayRequest::param() const {
  // @@protoc_insertion_point(field_get:grpc_cli.MountArrayRequest.param)
  return _internal_param();
}
inline void MountArrayRequest::unsafe_arena_set_allocated_param(
    ::grpc_cli::MountArrayRequest_Param* param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.MountArrayRequest.param)
}
inline ::grpc_cli::MountArrayRequest_Param* MountArrayRequest::release_param() {
  
  ::grpc_cli::MountArrayRequest_Param* temp = param_;
  param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::MountArrayRequest_Param* MountArrayRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:grpc_cli.MountArrayRequest.param)
  
  ::grpc_cli::MountArrayRequest_Param* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::grpc_cli::MountArrayRequest_Param* MountArrayRequest::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::MountArrayRequest_Param>(GetArena());
    param_ = p;
  }
  return param_;
}
inline ::grpc_cli::MountArrayRequest_Param* MountArrayRequest::mutable_param() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.MountArrayRequest.param)
  return _internal_mutable_param();
}
inline void MountArrayRequest::set_allocated_param(::grpc_cli::MountArrayRequest_Param* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.MountArrayRequest.param)
}

// -------------------------------------------------------------------

// MountArrayResponse_Result

// .grpc_cli.Status status = 1;
inline bool MountArrayResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MountArrayResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void MountArrayResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& MountArrayResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& MountArrayResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.MountArrayResponse.Result.status)
  return _internal_status();
}
inline void MountArrayResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.MountArrayResponse.Result.status)
}
inline ::grpc_cli::Status* MountArrayResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* MountArrayResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.MountArrayResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* MountArrayResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* MountArrayResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.MountArrayResponse.Result.status)
  return _internal_mutable_status();
}
inline void MountArrayResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.MountArrayResponse.Result.status)
}

// -------------------------------------------------------------------

// MountArrayResponse

// string command = 1;
inline void MountArrayResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& MountArrayResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.MountArrayResponse.command)
  return _internal_command();
}
inline void MountArrayResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.MountArrayResponse.command)
}
inline std::string* MountArrayResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.MountArrayResponse.command)
  return _internal_mutable_command();
}
inline const std::string& MountArrayResponse::_internal_command() const {
  return command_.Get();
}
inline void MountArrayResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MountArrayResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.MountArrayResponse.command)
}
inline void MountArrayResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.MountArrayResponse.command)
}
inline void MountArrayResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.MountArrayResponse.command)
}
inline std::string* MountArrayResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MountArrayResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.MountArrayResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MountArrayResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.MountArrayResponse.command)
}

// string rid = 2;
inline void MountArrayResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& MountArrayResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.MountArrayResponse.rid)
  return _internal_rid();
}
inline void MountArrayResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.MountArrayResponse.rid)
}
inline std::string* MountArrayResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.MountArrayResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& MountArrayResponse::_internal_rid() const {
  return rid_.Get();
}
inline void MountArrayResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MountArrayResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.MountArrayResponse.rid)
}
inline void MountArrayResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.MountArrayResponse.rid)
}
inline void MountArrayResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.MountArrayResponse.rid)
}
inline std::string* MountArrayResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MountArrayResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.MountArrayResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MountArrayResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.MountArrayResponse.rid)
}

// .grpc_cli.MountArrayResponse.Result result = 3;
inline bool MountArrayResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool MountArrayResponse::has_result() const {
  return _internal_has_result();
}
inline void MountArrayResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::MountArrayResponse_Result& MountArrayResponse::_internal_result() const {
  const ::grpc_cli::MountArrayResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::MountArrayResponse_Result&>(
      ::grpc_cli::_MountArrayResponse_Result_default_instance_);
}
inline const ::grpc_cli::MountArrayResponse_Result& MountArrayResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.MountArrayResponse.result)
  return _internal_result();
}
inline void MountArrayResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::MountArrayResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.MountArrayResponse.result)
}
inline ::grpc_cli::MountArrayResponse_Result* MountArrayResponse::release_result() {
  
  ::grpc_cli::MountArrayResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::MountArrayResponse_Result* MountArrayResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.MountArrayResponse.result)
  
  ::grpc_cli::MountArrayResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::MountArrayResponse_Result* MountArrayResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::MountArrayResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::MountArrayResponse_Result* MountArrayResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.MountArrayResponse.result)
  return _internal_mutable_result();
}
inline void MountArrayResponse::set_allocated_result(::grpc_cli::MountArrayResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.MountArrayResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool MountArrayResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool MountArrayResponse::has_info() const {
  return _internal_has_info();
}
inline void MountArrayResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& MountArrayResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& MountArrayResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.MountArrayResponse.info)
  return _internal_info();
}
inline void MountArrayResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.MountArrayResponse.info)
}
inline ::grpc_cli::PosInfo* MountArrayResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* MountArrayResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.MountArrayResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* MountArrayResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* MountArrayResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.MountArrayResponse.info)
  return _internal_mutable_info();
}
inline void MountArrayResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.MountArrayResponse.info)
}

// -------------------------------------------------------------------

// UnmountArrayRequest_Param

// string name = 1;
inline void UnmountArrayRequest_Param::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& UnmountArrayRequest_Param::name() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UnmountArrayRequest.Param.name)
  return _internal_name();
}
inline void UnmountArrayRequest_Param::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:grpc_cli.UnmountArrayRequest.Param.name)
}
inline std::string* UnmountArrayRequest_Param::mutable_name() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UnmountArrayRequest.Param.name)
  return _internal_mutable_name();
}
inline const std::string& UnmountArrayRequest_Param::_internal_name() const {
  return name_.Get();
}
inline void UnmountArrayRequest_Param::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UnmountArrayRequest_Param::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.UnmountArrayRequest.Param.name)
}
inline void UnmountArrayRequest_Param::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.UnmountArrayRequest.Param.name)
}
inline void UnmountArrayRequest_Param::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.UnmountArrayRequest.Param.name)
}
inline std::string* UnmountArrayRequest_Param::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UnmountArrayRequest_Param::release_name() {
  // @@protoc_insertion_point(field_release:grpc_cli.UnmountArrayRequest.Param.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnmountArrayRequest_Param::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UnmountArrayRequest.Param.name)
}

// -------------------------------------------------------------------

// UnmountArrayRequest

// string command = 1;
inline void UnmountArrayRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& UnmountArrayRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UnmountArrayRequest.command)
  return _internal_command();
}
inline void UnmountArrayRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.UnmountArrayRequest.command)
}
inline std::string* UnmountArrayRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UnmountArrayRequest.command)
  return _internal_mutable_command();
}
inline const std::string& UnmountArrayRequest::_internal_command() const {
  return command_.Get();
}
inline void UnmountArrayRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UnmountArrayRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.UnmountArrayRequest.command)
}
inline void UnmountArrayRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.UnmountArrayRequest.command)
}
inline void UnmountArrayRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.UnmountArrayRequest.command)
}
inline std::string* UnmountArrayRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UnmountArrayRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.UnmountArrayRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnmountArrayRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UnmountArrayRequest.command)
}

// string rid = 2;
inline void UnmountArrayRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& UnmountArrayRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UnmountArrayRequest.rid)
  return _internal_rid();
}
inline void UnmountArrayRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.UnmountArrayRequest.rid)
}
inline std::string* UnmountArrayRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UnmountArrayRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& UnmountArrayRequest::_internal_rid() const {
  return rid_.Get();
}
inline void UnmountArrayRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UnmountArrayRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.UnmountArrayRequest.rid)
}
inline void UnmountArrayRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.UnmountArrayRequest.rid)
}
inline void UnmountArrayRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.UnmountArrayRequest.rid)
}
inline std::string* UnmountArrayRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UnmountArrayRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.UnmountArrayRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnmountArrayRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UnmountArrayRequest.rid)
}

// string requestor = 3;
inline void UnmountArrayRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& UnmountArrayRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UnmountArrayRequest.requestor)
  return _internal_requestor();
}
inline void UnmountArrayRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.UnmountArrayRequest.requestor)
}
inline std::string* UnmountArrayRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UnmountArrayRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& UnmountArrayRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void UnmountArrayRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UnmountArrayRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.UnmountArrayRequest.requestor)
}
inline void UnmountArrayRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.UnmountArrayRequest.requestor)
}
inline void UnmountArrayRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.UnmountArrayRequest.requestor)
}
inline std::string* UnmountArrayRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UnmountArrayRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.UnmountArrayRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnmountArrayRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UnmountArrayRequest.requestor)
}

// .grpc_cli.UnmountArrayRequest.Param param = 4;
inline bool UnmountArrayRequest::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool UnmountArrayRequest::has_param() const {
  return _internal_has_param();
}
inline void UnmountArrayRequest::clear_param() {
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::grpc_cli::UnmountArrayRequest_Param& UnmountArrayRequest::_internal_param() const {
  const ::grpc_cli::UnmountArrayRequest_Param* p = param_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::UnmountArrayRequest_Param&>(
      ::grpc_cli::_UnmountArrayRequest_Param_default_instance_);
}
inline const ::grpc_cli::UnmountArrayRequest_Param& UnmountArrayRequest::param() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UnmountArrayRequest.param)
  return _internal_param();
}
inline void UnmountArrayRequest::unsafe_arena_set_allocated_param(
    ::grpc_cli::UnmountArrayRequest_Param* param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.UnmountArrayRequest.param)
}
inline ::grpc_cli::UnmountArrayRequest_Param* UnmountArrayRequest::release_param() {
  
  ::grpc_cli::UnmountArrayRequest_Param* temp = param_;
  param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::UnmountArrayRequest_Param* UnmountArrayRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:grpc_cli.UnmountArrayRequest.param)
  
  ::grpc_cli::UnmountArrayRequest_Param* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::grpc_cli::UnmountArrayRequest_Param* UnmountArrayRequest::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::UnmountArrayRequest_Param>(GetArena());
    param_ = p;
  }
  return param_;
}
inline ::grpc_cli::UnmountArrayRequest_Param* UnmountArrayRequest::mutable_param() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UnmountArrayRequest.param)
  return _internal_mutable_param();
}
inline void UnmountArrayRequest::set_allocated_param(::grpc_cli::UnmountArrayRequest_Param* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UnmountArrayRequest.param)
}

// -------------------------------------------------------------------

// UnmountArrayResponse_Result

// .grpc_cli.Status status = 1;
inline bool UnmountArrayResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool UnmountArrayResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void UnmountArrayResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& UnmountArrayResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& UnmountArrayResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UnmountArrayResponse.Result.status)
  return _internal_status();
}
inline void UnmountArrayResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.UnmountArrayResponse.Result.status)
}
inline ::grpc_cli::Status* UnmountArrayResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* UnmountArrayResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.UnmountArrayResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* UnmountArrayResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* UnmountArrayResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UnmountArrayResponse.Result.status)
  return _internal_mutable_status();
}
inline void UnmountArrayResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UnmountArrayResponse.Result.status)
}

// -------------------------------------------------------------------

// UnmountArrayResponse

// string command = 1;
inline void UnmountArrayResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& UnmountArrayResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UnmountArrayResponse.command)
  return _internal_command();
}
inline void UnmountArrayResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.UnmountArrayResponse.command)
}
inline std::string* UnmountArrayResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UnmountArrayResponse.command)
  return _internal_mutable_command();
}
inline const std::string& UnmountArrayResponse::_internal_command() const {
  return command_.Get();
}
inline void UnmountArrayResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UnmountArrayResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.UnmountArrayResponse.command)
}
inline void UnmountArrayResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.UnmountArrayResponse.command)
}
inline void UnmountArrayResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.UnmountArrayResponse.command)
}
inline std::string* UnmountArrayResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UnmountArrayResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.UnmountArrayResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnmountArrayResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UnmountArrayResponse.command)
}

// string rid = 2;
inline void UnmountArrayResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& UnmountArrayResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UnmountArrayResponse.rid)
  return _internal_rid();
}
inline void UnmountArrayResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.UnmountArrayResponse.rid)
}
inline std::string* UnmountArrayResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UnmountArrayResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& UnmountArrayResponse::_internal_rid() const {
  return rid_.Get();
}
inline void UnmountArrayResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UnmountArrayResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.UnmountArrayResponse.rid)
}
inline void UnmountArrayResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.UnmountArrayResponse.rid)
}
inline void UnmountArrayResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.UnmountArrayResponse.rid)
}
inline std::string* UnmountArrayResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UnmountArrayResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.UnmountArrayResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnmountArrayResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UnmountArrayResponse.rid)
}

// .grpc_cli.UnmountArrayResponse.Result result = 3;
inline bool UnmountArrayResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool UnmountArrayResponse::has_result() const {
  return _internal_has_result();
}
inline void UnmountArrayResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::UnmountArrayResponse_Result& UnmountArrayResponse::_internal_result() const {
  const ::grpc_cli::UnmountArrayResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::UnmountArrayResponse_Result&>(
      ::grpc_cli::_UnmountArrayResponse_Result_default_instance_);
}
inline const ::grpc_cli::UnmountArrayResponse_Result& UnmountArrayResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UnmountArrayResponse.result)
  return _internal_result();
}
inline void UnmountArrayResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::UnmountArrayResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.UnmountArrayResponse.result)
}
inline ::grpc_cli::UnmountArrayResponse_Result* UnmountArrayResponse::release_result() {
  
  ::grpc_cli::UnmountArrayResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::UnmountArrayResponse_Result* UnmountArrayResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.UnmountArrayResponse.result)
  
  ::grpc_cli::UnmountArrayResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::UnmountArrayResponse_Result* UnmountArrayResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::UnmountArrayResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::UnmountArrayResponse_Result* UnmountArrayResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UnmountArrayResponse.result)
  return _internal_mutable_result();
}
inline void UnmountArrayResponse::set_allocated_result(::grpc_cli::UnmountArrayResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UnmountArrayResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool UnmountArrayResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool UnmountArrayResponse::has_info() const {
  return _internal_has_info();
}
inline void UnmountArrayResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& UnmountArrayResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& UnmountArrayResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UnmountArrayResponse.info)
  return _internal_info();
}
inline void UnmountArrayResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.UnmountArrayResponse.info)
}
inline ::grpc_cli::PosInfo* UnmountArrayResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* UnmountArrayResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.UnmountArrayResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* UnmountArrayResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* UnmountArrayResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UnmountArrayResponse.info)
  return _internal_mutable_info();
}
inline void UnmountArrayResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UnmountArrayResponse.info)
}

// -------------------------------------------------------------------

// Device

// string name = 1;
inline void Device::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Device::name() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Device.name)
  return _internal_name();
}
inline void Device::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Device.name)
}
inline std::string* Device::mutable_name() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Device.name)
  return _internal_mutable_name();
}
inline const std::string& Device::_internal_name() const {
  return name_.Get();
}
inline void Device::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Device::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Device.name)
}
inline void Device::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Device.name)
}
inline void Device::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Device.name)
}
inline std::string* Device::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Device::release_name() {
  // @@protoc_insertion_point(field_release:grpc_cli.Device.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Device::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Device.name)
}

// string type = 2;
inline void Device::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& Device::type() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Device.type)
  return _internal_type();
}
inline void Device::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Device.type)
}
inline std::string* Device::mutable_type() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Device.type)
  return _internal_mutable_type();
}
inline const std::string& Device::_internal_type() const {
  return type_.Get();
}
inline void Device::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Device::set_type(std::string&& value) {
  
  type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Device.type)
}
inline void Device::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Device.type)
}
inline void Device::set_type(const char* value,
    size_t size) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Device.type)
}
inline std::string* Device::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Device::release_type() {
  // @@protoc_insertion_point(field_release:grpc_cli.Device.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Device::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Device.type)
}

// string address = 3;
inline void Device::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& Device::address() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Device.address)
  return _internal_address();
}
inline void Device::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Device.address)
}
inline std::string* Device::mutable_address() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Device.address)
  return _internal_mutable_address();
}
inline const std::string& Device::_internal_address() const {
  return address_.Get();
}
inline void Device::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Device::set_address(std::string&& value) {
  
  address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Device.address)
}
inline void Device::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Device.address)
}
inline void Device::set_address(const char* value,
    size_t size) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Device.address)
}
inline std::string* Device::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Device::release_address() {
  // @@protoc_insertion_point(field_release:grpc_cli.Device.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Device::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Device.address)
}

// string class = 4;
inline void Device::clear_class_() {
  class__.ClearToEmpty();
}
inline const std::string& Device::class_() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Device.class)
  return _internal_class_();
}
inline void Device::set_class_(const std::string& value) {
  _internal_set_class_(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Device.class)
}
inline std::string* Device::mutable_class_() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Device.class)
  return _internal_mutable_class_();
}
inline const std::string& Device::_internal_class_() const {
  return class__.Get();
}
inline void Device::_internal_set_class_(const std::string& value) {
  
  class__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Device::set_class_(std::string&& value) {
  
  class__.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Device.class)
}
inline void Device::set_class_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  class__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Device.class)
}
inline void Device::set_class_(const char* value,
    size_t size) {
  
  class__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Device.class)
}
inline std::string* Device::_internal_mutable_class_() {
  
  return class__.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Device::release_class_() {
  // @@protoc_insertion_point(field_release:grpc_cli.Device.class)
  return class__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Device::set_allocated_class_(std::string* class_) {
  if (class_ != nullptr) {
    
  } else {
    
  }
  class__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), class_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Device.class)
}

// string mn = 5;
inline void Device::clear_mn() {
  mn_.ClearToEmpty();
}
inline const std::string& Device::mn() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Device.mn)
  return _internal_mn();
}
inline void Device::set_mn(const std::string& value) {
  _internal_set_mn(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Device.mn)
}
inline std::string* Device::mutable_mn() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Device.mn)
  return _internal_mutable_mn();
}
inline const std::string& Device::_internal_mn() const {
  return mn_.Get();
}
inline void Device::_internal_set_mn(const std::string& value) {
  
  mn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Device::set_mn(std::string&& value) {
  
  mn_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Device.mn)
}
inline void Device::set_mn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Device.mn)
}
inline void Device::set_mn(const char* value,
    size_t size) {
  
  mn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Device.mn)
}
inline std::string* Device::_internal_mutable_mn() {
  
  return mn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Device::release_mn() {
  // @@protoc_insertion_point(field_release:grpc_cli.Device.mn)
  return mn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Device::set_allocated_mn(std::string* mn) {
  if (mn != nullptr) {
    
  } else {
    
  }
  mn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mn,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Device.mn)
}

// string numa = 6;
inline void Device::clear_numa() {
  numa_.ClearToEmpty();
}
inline const std::string& Device::numa() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Device.numa)
  return _internal_numa();
}
inline void Device::set_numa(const std::string& value) {
  _internal_set_numa(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Device.numa)
}
inline std::string* Device::mutable_numa() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Device.numa)
  return _internal_mutable_numa();
}
inline const std::string& Device::_internal_numa() const {
  return numa_.Get();
}
inline void Device::_internal_set_numa(const std::string& value) {
  
  numa_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Device::set_numa(std::string&& value) {
  
  numa_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Device.numa)
}
inline void Device::set_numa(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  numa_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Device.numa)
}
inline void Device::set_numa(const char* value,
    size_t size) {
  
  numa_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Device.numa)
}
inline std::string* Device::_internal_mutable_numa() {
  
  return numa_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Device::release_numa() {
  // @@protoc_insertion_point(field_release:grpc_cli.Device.numa)
  return numa_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Device::set_allocated_numa(std::string* numa) {
  if (numa != nullptr) {
    
  } else {
    
  }
  numa_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), numa,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Device.numa)
}

// string serial = 7;
inline void Device::clear_serial() {
  serial_.ClearToEmpty();
}
inline const std::string& Device::serial() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Device.serial)
  return _internal_serial();
}
inline void Device::set_serial(const std::string& value) {
  _internal_set_serial(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Device.serial)
}
inline std::string* Device::mutable_serial() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Device.serial)
  return _internal_mutable_serial();
}
inline const std::string& Device::_internal_serial() const {
  return serial_.Get();
}
inline void Device::_internal_set_serial(const std::string& value) {
  
  serial_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Device::set_serial(std::string&& value) {
  
  serial_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Device.serial)
}
inline void Device::set_serial(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  serial_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Device.serial)
}
inline void Device::set_serial(const char* value,
    size_t size) {
  
  serial_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Device.serial)
}
inline std::string* Device::_internal_mutable_serial() {
  
  return serial_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Device::release_serial() {
  // @@protoc_insertion_point(field_release:grpc_cli.Device.serial)
  return serial_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Device::set_allocated_serial(std::string* serial) {
  if (serial != nullptr) {
    
  } else {
    
  }
  serial_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serial,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Device.serial)
}

// -------------------------------------------------------------------

// Array

// int32 index = 1;
inline void Array::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Array::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Array::index() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Array.index)
  return _internal_index();
}
inline void Array::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
}
inline void Array::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Array.index)
}

// int32 unique_id = 2;
inline void Array::clear_unique_id() {
  unique_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Array::_internal_unique_id() const {
  return unique_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Array::unique_id() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Array.unique_id)
  return _internal_unique_id();
}
inline void Array::_internal_set_unique_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  unique_id_ = value;
}
inline void Array::set_unique_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_unique_id(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Array.unique_id)
}

// string name = 3;
inline void Array::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Array::name() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Array.name)
  return _internal_name();
}
inline void Array::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Array.name)
}
inline std::string* Array::mutable_name() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Array.name)
  return _internal_mutable_name();
}
inline const std::string& Array::_internal_name() const {
  return name_.Get();
}
inline void Array::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Array::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Array.name)
}
inline void Array::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Array.name)
}
inline void Array::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Array.name)
}
inline std::string* Array::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Array::release_name() {
  // @@protoc_insertion_point(field_release:grpc_cli.Array.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Array::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Array.name)
}

// string status = 4;
inline void Array::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& Array::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Array.status)
  return _internal_status();
}
inline void Array::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Array.status)
}
inline std::string* Array::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Array.status)
  return _internal_mutable_status();
}
inline const std::string& Array::_internal_status() const {
  return status_.Get();
}
inline void Array::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Array::set_status(std::string&& value) {
  
  status_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Array.status)
}
inline void Array::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Array.status)
}
inline void Array::set_status(const char* value,
    size_t size) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Array.status)
}
inline std::string* Array::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Array::release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.Array.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Array::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Array.status)
}

// string state = 5;
inline void Array::clear_state() {
  state_.ClearToEmpty();
}
inline const std::string& Array::state() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Array.state)
  return _internal_state();
}
inline void Array::set_state(const std::string& value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Array.state)
}
inline std::string* Array::mutable_state() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Array.state)
  return _internal_mutable_state();
}
inline const std::string& Array::_internal_state() const {
  return state_.Get();
}
inline void Array::_internal_set_state(const std::string& value) {
  
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Array::set_state(std::string&& value) {
  
  state_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Array.state)
}
inline void Array::set_state(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Array.state)
}
inline void Array::set_state(const char* value,
    size_t size) {
  
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Array.state)
}
inline std::string* Array::_internal_mutable_state() {
  
  return state_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Array::release_state() {
  // @@protoc_insertion_point(field_release:grpc_cli.Array.state)
  return state_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Array::set_allocated_state(std::string* state) {
  if (state != nullptr) {
    
  } else {
    
  }
  state_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Array.state)
}

// string situation = 6;
inline void Array::clear_situation() {
  situation_.ClearToEmpty();
}
inline const std::string& Array::situation() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Array.situation)
  return _internal_situation();
}
inline void Array::set_situation(const std::string& value) {
  _internal_set_situation(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Array.situation)
}
inline std::string* Array::mutable_situation() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Array.situation)
  return _internal_mutable_situation();
}
inline const std::string& Array::_internal_situation() const {
  return situation_.Get();
}
inline void Array::_internal_set_situation(const std::string& value) {
  
  situation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Array::set_situation(std::string&& value) {
  
  situation_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Array.situation)
}
inline void Array::set_situation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  situation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Array.situation)
}
inline void Array::set_situation(const char* value,
    size_t size) {
  
  situation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Array.situation)
}
inline std::string* Array::_internal_mutable_situation() {
  
  return situation_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Array::release_situation() {
  // @@protoc_insertion_point(field_release:grpc_cli.Array.situation)
  return situation_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Array::set_allocated_situation(std::string* situation) {
  if (situation != nullptr) {
    
  } else {
    
  }
  situation_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), situation,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Array.situation)
}

// string createDatetime = 7;
inline void Array::clear_createdatetime() {
  createdatetime_.ClearToEmpty();
}
inline const std::string& Array::createdatetime() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Array.createDatetime)
  return _internal_createdatetime();
}
inline void Array::set_createdatetime(const std::string& value) {
  _internal_set_createdatetime(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Array.createDatetime)
}
inline std::string* Array::mutable_createdatetime() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Array.createDatetime)
  return _internal_mutable_createdatetime();
}
inline const std::string& Array::_internal_createdatetime() const {
  return createdatetime_.Get();
}
inline void Array::_internal_set_createdatetime(const std::string& value) {
  
  createdatetime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Array::set_createdatetime(std::string&& value) {
  
  createdatetime_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Array.createDatetime)
}
inline void Array::set_createdatetime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  createdatetime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Array.createDatetime)
}
inline void Array::set_createdatetime(const char* value,
    size_t size) {
  
  createdatetime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Array.createDatetime)
}
inline std::string* Array::_internal_mutable_createdatetime() {
  
  return createdatetime_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Array::release_createdatetime() {
  // @@protoc_insertion_point(field_release:grpc_cli.Array.createDatetime)
  return createdatetime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Array::set_allocated_createdatetime(std::string* createdatetime) {
  if (createdatetime != nullptr) {
    
  } else {
    
  }
  createdatetime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), createdatetime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Array.createDatetime)
}

// string updateDatetime = 8;
inline void Array::clear_updatedatetime() {
  updatedatetime_.ClearToEmpty();
}
inline const std::string& Array::updatedatetime() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Array.updateDatetime)
  return _internal_updatedatetime();
}
inline void Array::set_updatedatetime(const std::string& value) {
  _internal_set_updatedatetime(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Array.updateDatetime)
}
inline std::string* Array::mutable_updatedatetime() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Array.updateDatetime)
  return _internal_mutable_updatedatetime();
}
inline const std::string& Array::_internal_updatedatetime() const {
  return updatedatetime_.Get();
}
inline void Array::_internal_set_updatedatetime(const std::string& value) {
  
  updatedatetime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Array::set_updatedatetime(std::string&& value) {
  
  updatedatetime_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Array.updateDatetime)
}
inline void Array::set_updatedatetime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  updatedatetime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Array.updateDatetime)
}
inline void Array::set_updatedatetime(const char* value,
    size_t size) {
  
  updatedatetime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Array.updateDatetime)
}
inline std::string* Array::_internal_mutable_updatedatetime() {
  
  return updatedatetime_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Array::release_updatedatetime() {
  // @@protoc_insertion_point(field_release:grpc_cli.Array.updateDatetime)
  return updatedatetime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Array::set_allocated_updatedatetime(std::string* updatedatetime) {
  if (updatedatetime != nullptr) {
    
  } else {
    
  }
  updatedatetime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), updatedatetime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Array.updateDatetime)
}

// string rebuildingProgress = 9;
inline void Array::clear_rebuildingprogress() {
  rebuildingprogress_.ClearToEmpty();
}
inline const std::string& Array::rebuildingprogress() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Array.rebuildingProgress)
  return _internal_rebuildingprogress();
}
inline void Array::set_rebuildingprogress(const std::string& value) {
  _internal_set_rebuildingprogress(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Array.rebuildingProgress)
}
inline std::string* Array::mutable_rebuildingprogress() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Array.rebuildingProgress)
  return _internal_mutable_rebuildingprogress();
}
inline const std::string& Array::_internal_rebuildingprogress() const {
  return rebuildingprogress_.Get();
}
inline void Array::_internal_set_rebuildingprogress(const std::string& value) {
  
  rebuildingprogress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Array::set_rebuildingprogress(std::string&& value) {
  
  rebuildingprogress_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Array.rebuildingProgress)
}
inline void Array::set_rebuildingprogress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rebuildingprogress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Array.rebuildingProgress)
}
inline void Array::set_rebuildingprogress(const char* value,
    size_t size) {
  
  rebuildingprogress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Array.rebuildingProgress)
}
inline std::string* Array::_internal_mutable_rebuildingprogress() {
  
  return rebuildingprogress_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Array::release_rebuildingprogress() {
  // @@protoc_insertion_point(field_release:grpc_cli.Array.rebuildingProgress)
  return rebuildingprogress_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Array::set_allocated_rebuildingprogress(std::string* rebuildingprogress) {
  if (rebuildingprogress != nullptr) {
    
  } else {
    
  }
  rebuildingprogress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rebuildingprogress,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Array.rebuildingProgress)
}

// uint64 capacity = 10;
inline void Array::clear_capacity() {
  capacity_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Array::_internal_capacity() const {
  return capacity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Array::capacity() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Array.capacity)
  return _internal_capacity();
}
inline void Array::_internal_set_capacity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  capacity_ = value;
}
inline void Array::set_capacity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_capacity(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Array.capacity)
}

// uint64 used = 11;
inline void Array::clear_used() {
  used_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Array::_internal_used() const {
  return used_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Array::used() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Array.used)
  return _internal_used();
}
inline void Array::_internal_set_used(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  used_ = value;
}
inline void Array::set_used(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_used(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Array.used)
}

// string gcMode = 12;
inline void Array::clear_gcmode() {
  gcmode_.ClearToEmpty();
}
inline const std::string& Array::gcmode() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Array.gcMode)
  return _internal_gcmode();
}
inline void Array::set_gcmode(const std::string& value) {
  _internal_set_gcmode(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Array.gcMode)
}
inline std::string* Array::mutable_gcmode() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Array.gcMode)
  return _internal_mutable_gcmode();
}
inline const std::string& Array::_internal_gcmode() const {
  return gcmode_.Get();
}
inline void Array::_internal_set_gcmode(const std::string& value) {
  
  gcmode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Array::set_gcmode(std::string&& value) {
  
  gcmode_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Array.gcMode)
}
inline void Array::set_gcmode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gcmode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Array.gcMode)
}
inline void Array::set_gcmode(const char* value,
    size_t size) {
  
  gcmode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Array.gcMode)
}
inline std::string* Array::_internal_mutable_gcmode() {
  
  return gcmode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Array::release_gcmode() {
  // @@protoc_insertion_point(field_release:grpc_cli.Array.gcMode)
  return gcmode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Array::set_allocated_gcmode(std::string* gcmode) {
  if (gcmode != nullptr) {
    
  } else {
    
  }
  gcmode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gcmode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Array.gcMode)
}

// string metaRaid = 13;
inline void Array::clear_metaraid() {
  metaraid_.ClearToEmpty();
}
inline const std::string& Array::metaraid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Array.metaRaid)
  return _internal_metaraid();
}
inline void Array::set_metaraid(const std::string& value) {
  _internal_set_metaraid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Array.metaRaid)
}
inline std::string* Array::mutable_metaraid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Array.metaRaid)
  return _internal_mutable_metaraid();
}
inline const std::string& Array::_internal_metaraid() const {
  return metaraid_.Get();
}
inline void Array::_internal_set_metaraid(const std::string& value) {
  
  metaraid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Array::set_metaraid(std::string&& value) {
  
  metaraid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Array.metaRaid)
}
inline void Array::set_metaraid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  metaraid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Array.metaRaid)
}
inline void Array::set_metaraid(const char* value,
    size_t size) {
  
  metaraid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Array.metaRaid)
}
inline std::string* Array::_internal_mutable_metaraid() {
  
  return metaraid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Array::release_metaraid() {
  // @@protoc_insertion_point(field_release:grpc_cli.Array.metaRaid)
  return metaraid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Array::set_allocated_metaraid(std::string* metaraid) {
  if (metaraid != nullptr) {
    
  } else {
    
  }
  metaraid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metaraid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Array.metaRaid)
}

// string dataRaid = 14;
inline void Array::clear_dataraid() {
  dataraid_.ClearToEmpty();
}
inline const std::string& Array::dataraid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Array.dataRaid)
  return _internal_dataraid();
}
inline void Array::set_dataraid(const std::string& value) {
  _internal_set_dataraid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Array.dataRaid)
}
inline std::string* Array::mutable_dataraid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Array.dataRaid)
  return _internal_mutable_dataraid();
}
inline const std::string& Array::_internal_dataraid() const {
  return dataraid_.Get();
}
inline void Array::_internal_set_dataraid(const std::string& value) {
  
  dataraid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Array::set_dataraid(std::string&& value) {
  
  dataraid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Array.dataRaid)
}
inline void Array::set_dataraid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dataraid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Array.dataRaid)
}
inline void Array::set_dataraid(const char* value,
    size_t size) {
  
  dataraid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Array.dataRaid)
}
inline std::string* Array::_internal_mutable_dataraid() {
  
  return dataraid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Array::release_dataraid() {
  // @@protoc_insertion_point(field_release:grpc_cli.Array.dataRaid)
  return dataraid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Array::set_allocated_dataraid(std::string* dataraid) {
  if (dataraid != nullptr) {
    
  } else {
    
  }
  dataraid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dataraid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Array.dataRaid)
}

// bool writeThroughEnabled = 15;
inline void Array::clear_writethroughenabled() {
  writethroughenabled_ = false;
}
inline bool Array::_internal_writethroughenabled() const {
  return writethroughenabled_;
}
inline bool Array::writethroughenabled() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Array.writeThroughEnabled)
  return _internal_writethroughenabled();
}
inline void Array::_internal_set_writethroughenabled(bool value) {
  
  writethroughenabled_ = value;
}
inline void Array::set_writethroughenabled(bool value) {
  _internal_set_writethroughenabled(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Array.writeThroughEnabled)
}

// repeated .grpc_cli.Device devicelist = 16;
inline int Array::_internal_devicelist_size() const {
  return devicelist_.size();
}
inline int Array::devicelist_size() const {
  return _internal_devicelist_size();
}
inline void Array::clear_devicelist() {
  devicelist_.Clear();
}
inline ::grpc_cli::Device* Array::mutable_devicelist(int index) {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Array.devicelist)
  return devicelist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::Device >*
Array::mutable_devicelist() {
  // @@protoc_insertion_point(field_mutable_list:grpc_cli.Array.devicelist)
  return &devicelist_;
}
inline const ::grpc_cli::Device& Array::_internal_devicelist(int index) const {
  return devicelist_.Get(index);
}
inline const ::grpc_cli::Device& Array::devicelist(int index) const {
  // @@protoc_insertion_point(field_get:grpc_cli.Array.devicelist)
  return _internal_devicelist(index);
}
inline ::grpc_cli::Device* Array::_internal_add_devicelist() {
  return devicelist_.Add();
}
inline ::grpc_cli::Device* Array::add_devicelist() {
  // @@protoc_insertion_point(field_add:grpc_cli.Array.devicelist)
  return _internal_add_devicelist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::Device >&
Array::devicelist() const {
  // @@protoc_insertion_point(field_list:grpc_cli.Array.devicelist)
  return devicelist_;
}

// -------------------------------------------------------------------

// ListArrayRequest

// string command = 1;
inline void ListArrayRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& ListArrayRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListArrayRequest.command)
  return _internal_command();
}
inline void ListArrayRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListArrayRequest.command)
}
inline std::string* ListArrayRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListArrayRequest.command)
  return _internal_mutable_command();
}
inline const std::string& ListArrayRequest::_internal_command() const {
  return command_.Get();
}
inline void ListArrayRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListArrayRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListArrayRequest.command)
}
inline void ListArrayRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListArrayRequest.command)
}
inline void ListArrayRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListArrayRequest.command)
}
inline std::string* ListArrayRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListArrayRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListArrayRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListArrayRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListArrayRequest.command)
}

// string rid = 2;
inline void ListArrayRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& ListArrayRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListArrayRequest.rid)
  return _internal_rid();
}
inline void ListArrayRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListArrayRequest.rid)
}
inline std::string* ListArrayRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListArrayRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& ListArrayRequest::_internal_rid() const {
  return rid_.Get();
}
inline void ListArrayRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListArrayRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListArrayRequest.rid)
}
inline void ListArrayRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListArrayRequest.rid)
}
inline void ListArrayRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListArrayRequest.rid)
}
inline std::string* ListArrayRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListArrayRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListArrayRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListArrayRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListArrayRequest.rid)
}

// string requestor = 3;
inline void ListArrayRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& ListArrayRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListArrayRequest.requestor)
  return _internal_requestor();
}
inline void ListArrayRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListArrayRequest.requestor)
}
inline std::string* ListArrayRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListArrayRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& ListArrayRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void ListArrayRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListArrayRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListArrayRequest.requestor)
}
inline void ListArrayRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListArrayRequest.requestor)
}
inline void ListArrayRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListArrayRequest.requestor)
}
inline std::string* ListArrayRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListArrayRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListArrayRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListArrayRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListArrayRequest.requestor)
}

// -------------------------------------------------------------------

// ListArrayResponse_Result_ArrayList

// repeated .grpc_cli.Array arrayList = 1;
inline int ListArrayResponse_Result_ArrayList::_internal_arraylist_size() const {
  return arraylist_.size();
}
inline int ListArrayResponse_Result_ArrayList::arraylist_size() const {
  return _internal_arraylist_size();
}
inline void ListArrayResponse_Result_ArrayList::clear_arraylist() {
  arraylist_.Clear();
}
inline ::grpc_cli::Array* ListArrayResponse_Result_ArrayList::mutable_arraylist(int index) {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListArrayResponse.Result.ArrayList.arrayList)
  return arraylist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::Array >*
ListArrayResponse_Result_ArrayList::mutable_arraylist() {
  // @@protoc_insertion_point(field_mutable_list:grpc_cli.ListArrayResponse.Result.ArrayList.arrayList)
  return &arraylist_;
}
inline const ::grpc_cli::Array& ListArrayResponse_Result_ArrayList::_internal_arraylist(int index) const {
  return arraylist_.Get(index);
}
inline const ::grpc_cli::Array& ListArrayResponse_Result_ArrayList::arraylist(int index) const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListArrayResponse.Result.ArrayList.arrayList)
  return _internal_arraylist(index);
}
inline ::grpc_cli::Array* ListArrayResponse_Result_ArrayList::_internal_add_arraylist() {
  return arraylist_.Add();
}
inline ::grpc_cli::Array* ListArrayResponse_Result_ArrayList::add_arraylist() {
  // @@protoc_insertion_point(field_add:grpc_cli.ListArrayResponse.Result.ArrayList.arrayList)
  return _internal_add_arraylist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::Array >&
ListArrayResponse_Result_ArrayList::arraylist() const {
  // @@protoc_insertion_point(field_list:grpc_cli.ListArrayResponse.Result.ArrayList.arrayList)
  return arraylist_;
}

// -------------------------------------------------------------------

// ListArrayResponse_Result

// .grpc_cli.Status status = 1;
inline bool ListArrayResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool ListArrayResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void ListArrayResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& ListArrayResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& ListArrayResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListArrayResponse.Result.status)
  return _internal_status();
}
inline void ListArrayResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ListArrayResponse.Result.status)
}
inline ::grpc_cli::Status* ListArrayResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* ListArrayResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListArrayResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* ListArrayResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* ListArrayResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListArrayResponse.Result.status)
  return _internal_mutable_status();
}
inline void ListArrayResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListArrayResponse.Result.status)
}

// .grpc_cli.ListArrayResponse.Result.ArrayList data = 2;
inline bool ListArrayResponse_Result::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool ListArrayResponse_Result::has_data() const {
  return _internal_has_data();
}
inline void ListArrayResponse_Result::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::grpc_cli::ListArrayResponse_Result_ArrayList& ListArrayResponse_Result::_internal_data() const {
  const ::grpc_cli::ListArrayResponse_Result_ArrayList* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::ListArrayResponse_Result_ArrayList&>(
      ::grpc_cli::_ListArrayResponse_Result_ArrayList_default_instance_);
}
inline const ::grpc_cli::ListArrayResponse_Result_ArrayList& ListArrayResponse_Result::data() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListArrayResponse.Result.data)
  return _internal_data();
}
inline void ListArrayResponse_Result::unsafe_arena_set_allocated_data(
    ::grpc_cli::ListArrayResponse_Result_ArrayList* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ListArrayResponse.Result.data)
}
inline ::grpc_cli::ListArrayResponse_Result_ArrayList* ListArrayResponse_Result::release_data() {
  
  ::grpc_cli::ListArrayResponse_Result_ArrayList* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::ListArrayResponse_Result_ArrayList* ListArrayResponse_Result::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListArrayResponse.Result.data)
  
  ::grpc_cli::ListArrayResponse_Result_ArrayList* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::grpc_cli::ListArrayResponse_Result_ArrayList* ListArrayResponse_Result::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::ListArrayResponse_Result_ArrayList>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::grpc_cli::ListArrayResponse_Result_ArrayList* ListArrayResponse_Result::mutable_data() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListArrayResponse.Result.data)
  return _internal_mutable_data();
}
inline void ListArrayResponse_Result::set_allocated_data(::grpc_cli::ListArrayResponse_Result_ArrayList* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListArrayResponse.Result.data)
}

// -------------------------------------------------------------------

// ListArrayResponse

// string command = 1;
inline void ListArrayResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& ListArrayResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListArrayResponse.command)
  return _internal_command();
}
inline void ListArrayResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListArrayResponse.command)
}
inline std::string* ListArrayResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListArrayResponse.command)
  return _internal_mutable_command();
}
inline const std::string& ListArrayResponse::_internal_command() const {
  return command_.Get();
}
inline void ListArrayResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListArrayResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListArrayResponse.command)
}
inline void ListArrayResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListArrayResponse.command)
}
inline void ListArrayResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListArrayResponse.command)
}
inline std::string* ListArrayResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListArrayResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListArrayResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListArrayResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListArrayResponse.command)
}

// string rid = 2;
inline void ListArrayResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& ListArrayResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListArrayResponse.rid)
  return _internal_rid();
}
inline void ListArrayResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListArrayResponse.rid)
}
inline std::string* ListArrayResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListArrayResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& ListArrayResponse::_internal_rid() const {
  return rid_.Get();
}
inline void ListArrayResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListArrayResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListArrayResponse.rid)
}
inline void ListArrayResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListArrayResponse.rid)
}
inline void ListArrayResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListArrayResponse.rid)
}
inline std::string* ListArrayResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListArrayResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListArrayResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListArrayResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListArrayResponse.rid)
}

// .grpc_cli.ListArrayResponse.Result result = 3;
inline bool ListArrayResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool ListArrayResponse::has_result() const {
  return _internal_has_result();
}
inline void ListArrayResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::ListArrayResponse_Result& ListArrayResponse::_internal_result() const {
  const ::grpc_cli::ListArrayResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::ListArrayResponse_Result&>(
      ::grpc_cli::_ListArrayResponse_Result_default_instance_);
}
inline const ::grpc_cli::ListArrayResponse_Result& ListArrayResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListArrayResponse.result)
  return _internal_result();
}
inline void ListArrayResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::ListArrayResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ListArrayResponse.result)
}
inline ::grpc_cli::ListArrayResponse_Result* ListArrayResponse::release_result() {
  
  ::grpc_cli::ListArrayResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::ListArrayResponse_Result* ListArrayResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListArrayResponse.result)
  
  ::grpc_cli::ListArrayResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::ListArrayResponse_Result* ListArrayResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::ListArrayResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::ListArrayResponse_Result* ListArrayResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListArrayResponse.result)
  return _internal_mutable_result();
}
inline void ListArrayResponse::set_allocated_result(::grpc_cli::ListArrayResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListArrayResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool ListArrayResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool ListArrayResponse::has_info() const {
  return _internal_has_info();
}
inline void ListArrayResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& ListArrayResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& ListArrayResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListArrayResponse.info)
  return _internal_info();
}
inline void ListArrayResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ListArrayResponse.info)
}
inline ::grpc_cli::PosInfo* ListArrayResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* ListArrayResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListArrayResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* ListArrayResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* ListArrayResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListArrayResponse.info)
  return _internal_mutable_info();
}
inline void ListArrayResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListArrayResponse.info)
}

// -------------------------------------------------------------------

// ArrayInfoRequest_Param

// string name = 1;
inline void ArrayInfoRequest_Param::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ArrayInfoRequest_Param::name() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ArrayInfoRequest.Param.name)
  return _internal_name();
}
inline void ArrayInfoRequest_Param::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ArrayInfoRequest.Param.name)
}
inline std::string* ArrayInfoRequest_Param::mutable_name() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ArrayInfoRequest.Param.name)
  return _internal_mutable_name();
}
inline const std::string& ArrayInfoRequest_Param::_internal_name() const {
  return name_.Get();
}
inline void ArrayInfoRequest_Param::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ArrayInfoRequest_Param::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ArrayInfoRequest.Param.name)
}
inline void ArrayInfoRequest_Param::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ArrayInfoRequest.Param.name)
}
inline void ArrayInfoRequest_Param::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ArrayInfoRequest.Param.name)
}
inline std::string* ArrayInfoRequest_Param::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ArrayInfoRequest_Param::release_name() {
  // @@protoc_insertion_point(field_release:grpc_cli.ArrayInfoRequest.Param.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ArrayInfoRequest_Param::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ArrayInfoRequest.Param.name)
}

// -------------------------------------------------------------------

// ArrayInfoRequest

// string command = 1;
inline void ArrayInfoRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& ArrayInfoRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ArrayInfoRequest.command)
  return _internal_command();
}
inline void ArrayInfoRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ArrayInfoRequest.command)
}
inline std::string* ArrayInfoRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ArrayInfoRequest.command)
  return _internal_mutable_command();
}
inline const std::string& ArrayInfoRequest::_internal_command() const {
  return command_.Get();
}
inline void ArrayInfoRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ArrayInfoRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ArrayInfoRequest.command)
}
inline void ArrayInfoRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ArrayInfoRequest.command)
}
inline void ArrayInfoRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ArrayInfoRequest.command)
}
inline std::string* ArrayInfoRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ArrayInfoRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.ArrayInfoRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ArrayInfoRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ArrayInfoRequest.command)
}

// string rid = 2;
inline void ArrayInfoRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& ArrayInfoRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ArrayInfoRequest.rid)
  return _internal_rid();
}
inline void ArrayInfoRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ArrayInfoRequest.rid)
}
inline std::string* ArrayInfoRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ArrayInfoRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& ArrayInfoRequest::_internal_rid() const {
  return rid_.Get();
}
inline void ArrayInfoRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ArrayInfoRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ArrayInfoRequest.rid)
}
inline void ArrayInfoRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ArrayInfoRequest.rid)
}
inline void ArrayInfoRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ArrayInfoRequest.rid)
}
inline std::string* ArrayInfoRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ArrayInfoRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.ArrayInfoRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ArrayInfoRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ArrayInfoRequest.rid)
}

// string requestor = 3;
inline void ArrayInfoRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& ArrayInfoRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ArrayInfoRequest.requestor)
  return _internal_requestor();
}
inline void ArrayInfoRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ArrayInfoRequest.requestor)
}
inline std::string* ArrayInfoRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ArrayInfoRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& ArrayInfoRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void ArrayInfoRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ArrayInfoRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ArrayInfoRequest.requestor)
}
inline void ArrayInfoRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ArrayInfoRequest.requestor)
}
inline void ArrayInfoRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ArrayInfoRequest.requestor)
}
inline std::string* ArrayInfoRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ArrayInfoRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.ArrayInfoRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ArrayInfoRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ArrayInfoRequest.requestor)
}

// .grpc_cli.ArrayInfoRequest.Param param = 4;
inline bool ArrayInfoRequest::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool ArrayInfoRequest::has_param() const {
  return _internal_has_param();
}
inline void ArrayInfoRequest::clear_param() {
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::grpc_cli::ArrayInfoRequest_Param& ArrayInfoRequest::_internal_param() const {
  const ::grpc_cli::ArrayInfoRequest_Param* p = param_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::ArrayInfoRequest_Param&>(
      ::grpc_cli::_ArrayInfoRequest_Param_default_instance_);
}
inline const ::grpc_cli::ArrayInfoRequest_Param& ArrayInfoRequest::param() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ArrayInfoRequest.param)
  return _internal_param();
}
inline void ArrayInfoRequest::unsafe_arena_set_allocated_param(
    ::grpc_cli::ArrayInfoRequest_Param* param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ArrayInfoRequest.param)
}
inline ::grpc_cli::ArrayInfoRequest_Param* ArrayInfoRequest::release_param() {
  
  ::grpc_cli::ArrayInfoRequest_Param* temp = param_;
  param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::ArrayInfoRequest_Param* ArrayInfoRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:grpc_cli.ArrayInfoRequest.param)
  
  ::grpc_cli::ArrayInfoRequest_Param* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::grpc_cli::ArrayInfoRequest_Param* ArrayInfoRequest::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::ArrayInfoRequest_Param>(GetArena());
    param_ = p;
  }
  return param_;
}
inline ::grpc_cli::ArrayInfoRequest_Param* ArrayInfoRequest::mutable_param() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ArrayInfoRequest.param)
  return _internal_mutable_param();
}
inline void ArrayInfoRequest::set_allocated_param(::grpc_cli::ArrayInfoRequest_Param* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ArrayInfoRequest.param)
}

// -------------------------------------------------------------------

// ArrayInfoResponse_Result

// .grpc_cli.Status status = 1;
inline bool ArrayInfoResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool ArrayInfoResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void ArrayInfoResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& ArrayInfoResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& ArrayInfoResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ArrayInfoResponse.Result.status)
  return _internal_status();
}
inline void ArrayInfoResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ArrayInfoResponse.Result.status)
}
inline ::grpc_cli::Status* ArrayInfoResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* ArrayInfoResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.ArrayInfoResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* ArrayInfoResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* ArrayInfoResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ArrayInfoResponse.Result.status)
  return _internal_mutable_status();
}
inline void ArrayInfoResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ArrayInfoResponse.Result.status)
}

// .grpc_cli.Array data = 2;
inline bool ArrayInfoResponse_Result::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool ArrayInfoResponse_Result::has_data() const {
  return _internal_has_data();
}
inline void ArrayInfoResponse_Result::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::grpc_cli::Array& ArrayInfoResponse_Result::_internal_data() const {
  const ::grpc_cli::Array* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Array&>(
      ::grpc_cli::_Array_default_instance_);
}
inline const ::grpc_cli::Array& ArrayInfoResponse_Result::data() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ArrayInfoResponse.Result.data)
  return _internal_data();
}
inline void ArrayInfoResponse_Result::unsafe_arena_set_allocated_data(
    ::grpc_cli::Array* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ArrayInfoResponse.Result.data)
}
inline ::grpc_cli::Array* ArrayInfoResponse_Result::release_data() {
  
  ::grpc_cli::Array* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Array* ArrayInfoResponse_Result::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:grpc_cli.ArrayInfoResponse.Result.data)
  
  ::grpc_cli::Array* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::grpc_cli::Array* ArrayInfoResponse_Result::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Array>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::grpc_cli::Array* ArrayInfoResponse_Result::mutable_data() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ArrayInfoResponse.Result.data)
  return _internal_mutable_data();
}
inline void ArrayInfoResponse_Result::set_allocated_data(::grpc_cli::Array* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ArrayInfoResponse.Result.data)
}

// -------------------------------------------------------------------

// ArrayInfoResponse

// string command = 1;
inline void ArrayInfoResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& ArrayInfoResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ArrayInfoResponse.command)
  return _internal_command();
}
inline void ArrayInfoResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ArrayInfoResponse.command)
}
inline std::string* ArrayInfoResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ArrayInfoResponse.command)
  return _internal_mutable_command();
}
inline const std::string& ArrayInfoResponse::_internal_command() const {
  return command_.Get();
}
inline void ArrayInfoResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ArrayInfoResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ArrayInfoResponse.command)
}
inline void ArrayInfoResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ArrayInfoResponse.command)
}
inline void ArrayInfoResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ArrayInfoResponse.command)
}
inline std::string* ArrayInfoResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ArrayInfoResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.ArrayInfoResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ArrayInfoResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ArrayInfoResponse.command)
}

// string rid = 2;
inline void ArrayInfoResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& ArrayInfoResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ArrayInfoResponse.rid)
  return _internal_rid();
}
inline void ArrayInfoResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ArrayInfoResponse.rid)
}
inline std::string* ArrayInfoResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ArrayInfoResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& ArrayInfoResponse::_internal_rid() const {
  return rid_.Get();
}
inline void ArrayInfoResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ArrayInfoResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ArrayInfoResponse.rid)
}
inline void ArrayInfoResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ArrayInfoResponse.rid)
}
inline void ArrayInfoResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ArrayInfoResponse.rid)
}
inline std::string* ArrayInfoResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ArrayInfoResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.ArrayInfoResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ArrayInfoResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ArrayInfoResponse.rid)
}

// .grpc_cli.ArrayInfoResponse.Result result = 3;
inline bool ArrayInfoResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool ArrayInfoResponse::has_result() const {
  return _internal_has_result();
}
inline void ArrayInfoResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::ArrayInfoResponse_Result& ArrayInfoResponse::_internal_result() const {
  const ::grpc_cli::ArrayInfoResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::ArrayInfoResponse_Result&>(
      ::grpc_cli::_ArrayInfoResponse_Result_default_instance_);
}
inline const ::grpc_cli::ArrayInfoResponse_Result& ArrayInfoResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ArrayInfoResponse.result)
  return _internal_result();
}
inline void ArrayInfoResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::ArrayInfoResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ArrayInfoResponse.result)
}
inline ::grpc_cli::ArrayInfoResponse_Result* ArrayInfoResponse::release_result() {
  
  ::grpc_cli::ArrayInfoResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::ArrayInfoResponse_Result* ArrayInfoResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.ArrayInfoResponse.result)
  
  ::grpc_cli::ArrayInfoResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::ArrayInfoResponse_Result* ArrayInfoResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::ArrayInfoResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::ArrayInfoResponse_Result* ArrayInfoResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ArrayInfoResponse.result)
  return _internal_mutable_result();
}
inline void ArrayInfoResponse::set_allocated_result(::grpc_cli::ArrayInfoResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ArrayInfoResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool ArrayInfoResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool ArrayInfoResponse::has_info() const {
  return _internal_has_info();
}
inline void ArrayInfoResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& ArrayInfoResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& ArrayInfoResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ArrayInfoResponse.info)
  return _internal_info();
}
inline void ArrayInfoResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ArrayInfoResponse.info)
}
inline ::grpc_cli::PosInfo* ArrayInfoResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* ArrayInfoResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.ArrayInfoResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* ArrayInfoResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* ArrayInfoResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ArrayInfoResponse.info)
  return _internal_mutable_info();
}
inline void ArrayInfoResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ArrayInfoResponse.info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpc_cli

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cli_2eproto
