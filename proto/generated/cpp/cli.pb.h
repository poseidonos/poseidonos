// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cli.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cli_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cli_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cli_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cli_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[244]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cli_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_cli_2eproto_metadata_getter(int index);
namespace grpc_cli {
class AddListenerRequest;
struct AddListenerRequestDefaultTypeInternal;
extern AddListenerRequestDefaultTypeInternal _AddListenerRequest_default_instance_;
class AddListenerRequest_Param;
struct AddListenerRequest_ParamDefaultTypeInternal;
extern AddListenerRequest_ParamDefaultTypeInternal _AddListenerRequest_Param_default_instance_;
class AddListenerResponse;
struct AddListenerResponseDefaultTypeInternal;
extern AddListenerResponseDefaultTypeInternal _AddListenerResponse_default_instance_;
class AddListenerResponse_Result;
struct AddListenerResponse_ResultDefaultTypeInternal;
extern AddListenerResponse_ResultDefaultTypeInternal _AddListenerResponse_Result_default_instance_;
class AddSpareRequest;
struct AddSpareRequestDefaultTypeInternal;
extern AddSpareRequestDefaultTypeInternal _AddSpareRequest_default_instance_;
class AddSpareRequest_Param;
struct AddSpareRequest_ParamDefaultTypeInternal;
extern AddSpareRequest_ParamDefaultTypeInternal _AddSpareRequest_Param_default_instance_;
class AddSpareRequest_SpareDeviceName;
struct AddSpareRequest_SpareDeviceNameDefaultTypeInternal;
extern AddSpareRequest_SpareDeviceNameDefaultTypeInternal _AddSpareRequest_SpareDeviceName_default_instance_;
class AddSpareResponse;
struct AddSpareResponseDefaultTypeInternal;
extern AddSpareResponseDefaultTypeInternal _AddSpareResponse_default_instance_;
class AddSpareResponse_Result;
struct AddSpareResponse_ResultDefaultTypeInternal;
extern AddSpareResponse_ResultDefaultTypeInternal _AddSpareResponse_Result_default_instance_;
class ApplyLogFilterRequest;
struct ApplyLogFilterRequestDefaultTypeInternal;
extern ApplyLogFilterRequestDefaultTypeInternal _ApplyLogFilterRequest_default_instance_;
class ApplyLogFilterResponse;
struct ApplyLogFilterResponseDefaultTypeInternal;
extern ApplyLogFilterResponseDefaultTypeInternal _ApplyLogFilterResponse_default_instance_;
class ApplyLogFilterResponse_Result;
struct ApplyLogFilterResponse_ResultDefaultTypeInternal;
extern ApplyLogFilterResponse_ResultDefaultTypeInternal _ApplyLogFilterResponse_Result_default_instance_;
class Array;
struct ArrayDefaultTypeInternal;
extern ArrayDefaultTypeInternal _Array_default_instance_;
class ArrayInfoRequest;
struct ArrayInfoRequestDefaultTypeInternal;
extern ArrayInfoRequestDefaultTypeInternal _ArrayInfoRequest_default_instance_;
class ArrayInfoRequest_Param;
struct ArrayInfoRequest_ParamDefaultTypeInternal;
extern ArrayInfoRequest_ParamDefaultTypeInternal _ArrayInfoRequest_Param_default_instance_;
class ArrayInfoResponse;
struct ArrayInfoResponseDefaultTypeInternal;
extern ArrayInfoResponseDefaultTypeInternal _ArrayInfoResponse_default_instance_;
class ArrayInfoResponse_Result;
struct ArrayInfoResponse_ResultDefaultTypeInternal;
extern ArrayInfoResponse_ResultDefaultTypeInternal _ArrayInfoResponse_Result_default_instance_;
class AutocreateArrayRequest;
struct AutocreateArrayRequestDefaultTypeInternal;
extern AutocreateArrayRequestDefaultTypeInternal _AutocreateArrayRequest_default_instance_;
class AutocreateArrayRequest_Param;
struct AutocreateArrayRequest_ParamDefaultTypeInternal;
extern AutocreateArrayRequest_ParamDefaultTypeInternal _AutocreateArrayRequest_Param_default_instance_;
class AutocreateArrayResponse;
struct AutocreateArrayResponseDefaultTypeInternal;
extern AutocreateArrayResponseDefaultTypeInternal _AutocreateArrayResponse_default_instance_;
class AutocreateArrayResponse_Result;
struct AutocreateArrayResponse_ResultDefaultTypeInternal;
extern AutocreateArrayResponse_ResultDefaultTypeInternal _AutocreateArrayResponse_Result_default_instance_;
class CreateArrayRequest;
struct CreateArrayRequestDefaultTypeInternal;
extern CreateArrayRequestDefaultTypeInternal _CreateArrayRequest_default_instance_;
class CreateArrayRequest_Param;
struct CreateArrayRequest_ParamDefaultTypeInternal;
extern CreateArrayRequest_ParamDefaultTypeInternal _CreateArrayRequest_Param_default_instance_;
class CreateArrayResponse;
struct CreateArrayResponseDefaultTypeInternal;
extern CreateArrayResponseDefaultTypeInternal _CreateArrayResponse_default_instance_;
class CreateArrayResponse_Result;
struct CreateArrayResponse_ResultDefaultTypeInternal;
extern CreateArrayResponse_ResultDefaultTypeInternal _CreateArrayResponse_Result_default_instance_;
class CreateDeviceRequest;
struct CreateDeviceRequestDefaultTypeInternal;
extern CreateDeviceRequestDefaultTypeInternal _CreateDeviceRequest_default_instance_;
class CreateDeviceRequest_Param;
struct CreateDeviceRequest_ParamDefaultTypeInternal;
extern CreateDeviceRequest_ParamDefaultTypeInternal _CreateDeviceRequest_Param_default_instance_;
class CreateDeviceResponse;
struct CreateDeviceResponseDefaultTypeInternal;
extern CreateDeviceResponseDefaultTypeInternal _CreateDeviceResponse_default_instance_;
class CreateDeviceResponse_Result;
struct CreateDeviceResponse_ResultDefaultTypeInternal;
extern CreateDeviceResponse_ResultDefaultTypeInternal _CreateDeviceResponse_Result_default_instance_;
class CreateSubsystemRequest;
struct CreateSubsystemRequestDefaultTypeInternal;
extern CreateSubsystemRequestDefaultTypeInternal _CreateSubsystemRequest_default_instance_;
class CreateSubsystemRequest_Param;
struct CreateSubsystemRequest_ParamDefaultTypeInternal;
extern CreateSubsystemRequest_ParamDefaultTypeInternal _CreateSubsystemRequest_Param_default_instance_;
class CreateSubsystemResponse;
struct CreateSubsystemResponseDefaultTypeInternal;
extern CreateSubsystemResponseDefaultTypeInternal _CreateSubsystemResponse_default_instance_;
class CreateSubsystemResponse_Result;
struct CreateSubsystemResponse_ResultDefaultTypeInternal;
extern CreateSubsystemResponse_ResultDefaultTypeInternal _CreateSubsystemResponse_Result_default_instance_;
class CreateTransportRequest;
struct CreateTransportRequestDefaultTypeInternal;
extern CreateTransportRequestDefaultTypeInternal _CreateTransportRequest_default_instance_;
class CreateTransportRequest_Param;
struct CreateTransportRequest_ParamDefaultTypeInternal;
extern CreateTransportRequest_ParamDefaultTypeInternal _CreateTransportRequest_Param_default_instance_;
class CreateTransportResponse;
struct CreateTransportResponseDefaultTypeInternal;
extern CreateTransportResponseDefaultTypeInternal _CreateTransportResponse_default_instance_;
class CreateTransportResponse_Result;
struct CreateTransportResponse_ResultDefaultTypeInternal;
extern CreateTransportResponse_ResultDefaultTypeInternal _CreateTransportResponse_Result_default_instance_;
class CreateVolumeRequest;
struct CreateVolumeRequestDefaultTypeInternal;
extern CreateVolumeRequestDefaultTypeInternal _CreateVolumeRequest_default_instance_;
class CreateVolumeRequest_Param;
struct CreateVolumeRequest_ParamDefaultTypeInternal;
extern CreateVolumeRequest_ParamDefaultTypeInternal _CreateVolumeRequest_Param_default_instance_;
class CreateVolumeResponse;
struct CreateVolumeResponseDefaultTypeInternal;
extern CreateVolumeResponseDefaultTypeInternal _CreateVolumeResponse_default_instance_;
class CreateVolumeResponse_Result;
struct CreateVolumeResponse_ResultDefaultTypeInternal;
extern CreateVolumeResponse_ResultDefaultTypeInternal _CreateVolumeResponse_Result_default_instance_;
class CreateVolumeResponse_Result_CreateVolumeData;
struct CreateVolumeResponse_Result_CreateVolumeDataDefaultTypeInternal;
extern CreateVolumeResponse_Result_CreateVolumeDataDefaultTypeInternal _CreateVolumeResponse_Result_CreateVolumeData_default_instance_;
class DeleteArrayRequest;
struct DeleteArrayRequestDefaultTypeInternal;
extern DeleteArrayRequestDefaultTypeInternal _DeleteArrayRequest_default_instance_;
class DeleteArrayRequest_Param;
struct DeleteArrayRequest_ParamDefaultTypeInternal;
extern DeleteArrayRequest_ParamDefaultTypeInternal _DeleteArrayRequest_Param_default_instance_;
class DeleteArrayResponse;
struct DeleteArrayResponseDefaultTypeInternal;
extern DeleteArrayResponseDefaultTypeInternal _DeleteArrayResponse_default_instance_;
class DeleteArrayResponse_Result;
struct DeleteArrayResponse_ResultDefaultTypeInternal;
extern DeleteArrayResponse_ResultDefaultTypeInternal _DeleteArrayResponse_Result_default_instance_;
class DeleteSubsystemRequest;
struct DeleteSubsystemRequestDefaultTypeInternal;
extern DeleteSubsystemRequestDefaultTypeInternal _DeleteSubsystemRequest_default_instance_;
class DeleteSubsystemRequest_Param;
struct DeleteSubsystemRequest_ParamDefaultTypeInternal;
extern DeleteSubsystemRequest_ParamDefaultTypeInternal _DeleteSubsystemRequest_Param_default_instance_;
class DeleteSubsystemResponse;
struct DeleteSubsystemResponseDefaultTypeInternal;
extern DeleteSubsystemResponseDefaultTypeInternal _DeleteSubsystemResponse_default_instance_;
class DeleteSubsystemResponse_Result;
struct DeleteSubsystemResponse_ResultDefaultTypeInternal;
extern DeleteSubsystemResponse_ResultDefaultTypeInternal _DeleteSubsystemResponse_Result_default_instance_;
class DeleteVolumeRequest;
struct DeleteVolumeRequestDefaultTypeInternal;
extern DeleteVolumeRequestDefaultTypeInternal _DeleteVolumeRequest_default_instance_;
class DeleteVolumeRequest_Param;
struct DeleteVolumeRequest_ParamDefaultTypeInternal;
extern DeleteVolumeRequest_ParamDefaultTypeInternal _DeleteVolumeRequest_Param_default_instance_;
class DeleteVolumeResponse;
struct DeleteVolumeResponseDefaultTypeInternal;
extern DeleteVolumeResponseDefaultTypeInternal _DeleteVolumeResponse_default_instance_;
class DeleteVolumeResponse_Result;
struct DeleteVolumeResponse_ResultDefaultTypeInternal;
extern DeleteVolumeResponse_ResultDefaultTypeInternal _DeleteVolumeResponse_Result_default_instance_;
class Device;
struct DeviceDefaultTypeInternal;
extern DeviceDefaultTypeInternal _Device_default_instance_;
class DeviceNameList;
struct DeviceNameListDefaultTypeInternal;
extern DeviceNameListDefaultTypeInternal _DeviceNameList_default_instance_;
class DumpMemorySnapshotRequest;
struct DumpMemorySnapshotRequestDefaultTypeInternal;
extern DumpMemorySnapshotRequestDefaultTypeInternal _DumpMemorySnapshotRequest_default_instance_;
class DumpMemorySnapshotRequest_Param;
struct DumpMemorySnapshotRequest_ParamDefaultTypeInternal;
extern DumpMemorySnapshotRequest_ParamDefaultTypeInternal _DumpMemorySnapshotRequest_Param_default_instance_;
class DumpMemorySnapshotResponse;
struct DumpMemorySnapshotResponseDefaultTypeInternal;
extern DumpMemorySnapshotResponseDefaultTypeInternal _DumpMemorySnapshotResponse_default_instance_;
class DumpMemorySnapshotResponse_Result;
struct DumpMemorySnapshotResponse_ResultDefaultTypeInternal;
extern DumpMemorySnapshotResponse_ResultDefaultTypeInternal _DumpMemorySnapshotResponse_Result_default_instance_;
class GetLogLevelRequest;
struct GetLogLevelRequestDefaultTypeInternal;
extern GetLogLevelRequestDefaultTypeInternal _GetLogLevelRequest_default_instance_;
class GetLogLevelResponse;
struct GetLogLevelResponseDefaultTypeInternal;
extern GetLogLevelResponseDefaultTypeInternal _GetLogLevelResponse_default_instance_;
class GetLogLevelResponse_Result;
struct GetLogLevelResponse_ResultDefaultTypeInternal;
extern GetLogLevelResponse_ResultDefaultTypeInternal _GetLogLevelResponse_Result_default_instance_;
class GetLogLevelResponse_Result_LogLevel;
struct GetLogLevelResponse_Result_LogLevelDefaultTypeInternal;
extern GetLogLevelResponse_Result_LogLevelDefaultTypeInternal _GetLogLevelResponse_Result_LogLevel_default_instance_;
class GetSmartLogRequest;
struct GetSmartLogRequestDefaultTypeInternal;
extern GetSmartLogRequestDefaultTypeInternal _GetSmartLogRequest_default_instance_;
class GetSmartLogRequest_Param;
struct GetSmartLogRequest_ParamDefaultTypeInternal;
extern GetSmartLogRequest_ParamDefaultTypeInternal _GetSmartLogRequest_Param_default_instance_;
class GetSmartLogResponse;
struct GetSmartLogResponseDefaultTypeInternal;
extern GetSmartLogResponseDefaultTypeInternal _GetSmartLogResponse_default_instance_;
class GetSmartLogResponse_Result;
struct GetSmartLogResponse_ResultDefaultTypeInternal;
extern GetSmartLogResponse_ResultDefaultTypeInternal _GetSmartLogResponse_Result_default_instance_;
class GetSystemPropertyRequest;
struct GetSystemPropertyRequestDefaultTypeInternal;
extern GetSystemPropertyRequestDefaultTypeInternal _GetSystemPropertyRequest_default_instance_;
class GetSystemPropertyResponse;
struct GetSystemPropertyResponseDefaultTypeInternal;
extern GetSystemPropertyResponseDefaultTypeInternal _GetSystemPropertyResponse_default_instance_;
class GetSystemPropertyResponse_Result;
struct GetSystemPropertyResponse_ResultDefaultTypeInternal;
extern GetSystemPropertyResponse_ResultDefaultTypeInternal _GetSystemPropertyResponse_Result_default_instance_;
class GetSystemPropertyResponse_Result_Data;
struct GetSystemPropertyResponse_Result_DataDefaultTypeInternal;
extern GetSystemPropertyResponse_Result_DataDefaultTypeInternal _GetSystemPropertyResponse_Result_Data_default_instance_;
class GetTelemetryPropertyRequest;
struct GetTelemetryPropertyRequestDefaultTypeInternal;
extern GetTelemetryPropertyRequestDefaultTypeInternal _GetTelemetryPropertyRequest_default_instance_;
class GetTelemetryPropertyResponse;
struct GetTelemetryPropertyResponseDefaultTypeInternal;
extern GetTelemetryPropertyResponseDefaultTypeInternal _GetTelemetryPropertyResponse_default_instance_;
class GetTelemetryPropertyResponse_Result;
struct GetTelemetryPropertyResponse_ResultDefaultTypeInternal;
extern GetTelemetryPropertyResponse_ResultDefaultTypeInternal _GetTelemetryPropertyResponse_Result_default_instance_;
class GetTelemetryPropertyResponse_Result_TelemetryProperty;
struct GetTelemetryPropertyResponse_Result_TelemetryPropertyDefaultTypeInternal;
extern GetTelemetryPropertyResponse_Result_TelemetryPropertyDefaultTypeInternal _GetTelemetryPropertyResponse_Result_TelemetryProperty_default_instance_;
class ListArrayRequest;
struct ListArrayRequestDefaultTypeInternal;
extern ListArrayRequestDefaultTypeInternal _ListArrayRequest_default_instance_;
class ListArrayResponse;
struct ListArrayResponseDefaultTypeInternal;
extern ListArrayResponseDefaultTypeInternal _ListArrayResponse_default_instance_;
class ListArrayResponse_Result;
struct ListArrayResponse_ResultDefaultTypeInternal;
extern ListArrayResponse_ResultDefaultTypeInternal _ListArrayResponse_Result_default_instance_;
class ListArrayResponse_Result_ArrayList;
struct ListArrayResponse_Result_ArrayListDefaultTypeInternal;
extern ListArrayResponse_Result_ArrayListDefaultTypeInternal _ListArrayResponse_Result_ArrayList_default_instance_;
class ListDeviceRequest;
struct ListDeviceRequestDefaultTypeInternal;
extern ListDeviceRequestDefaultTypeInternal _ListDeviceRequest_default_instance_;
class ListDeviceResponse;
struct ListDeviceResponseDefaultTypeInternal;
extern ListDeviceResponseDefaultTypeInternal _ListDeviceResponse_default_instance_;
class ListDeviceResponse_Result;
struct ListDeviceResponse_ResultDefaultTypeInternal;
extern ListDeviceResponse_ResultDefaultTypeInternal _ListDeviceResponse_Result_default_instance_;
class ListDeviceResponse_Result_DeviceList;
struct ListDeviceResponse_Result_DeviceListDefaultTypeInternal;
extern ListDeviceResponse_Result_DeviceListDefaultTypeInternal _ListDeviceResponse_Result_DeviceList_default_instance_;
class ListHaReplicationRequest;
struct ListHaReplicationRequestDefaultTypeInternal;
extern ListHaReplicationRequestDefaultTypeInternal _ListHaReplicationRequest_default_instance_;
class ListHaReplicationResponse;
struct ListHaReplicationResponseDefaultTypeInternal;
extern ListHaReplicationResponseDefaultTypeInternal _ListHaReplicationResponse_default_instance_;
class ListHaReplicationResponse_Result;
struct ListHaReplicationResponse_ResultDefaultTypeInternal;
extern ListHaReplicationResponse_ResultDefaultTypeInternal _ListHaReplicationResponse_Result_default_instance_;
class ListHaReplicationResponse_Result_Replication;
struct ListHaReplicationResponse_Result_ReplicationDefaultTypeInternal;
extern ListHaReplicationResponse_Result_ReplicationDefaultTypeInternal _ListHaReplicationResponse_Result_Replication_default_instance_;
class ListHaVolumeRequest;
struct ListHaVolumeRequestDefaultTypeInternal;
extern ListHaVolumeRequestDefaultTypeInternal _ListHaVolumeRequest_default_instance_;
class ListHaVolumeResponse;
struct ListHaVolumeResponseDefaultTypeInternal;
extern ListHaVolumeResponseDefaultTypeInternal _ListHaVolumeResponse_default_instance_;
class ListHaVolumeResponse_Result;
struct ListHaVolumeResponse_ResultDefaultTypeInternal;
extern ListHaVolumeResponse_ResultDefaultTypeInternal _ListHaVolumeResponse_Result_default_instance_;
class ListHaVolumeResponse_Result_Volume;
struct ListHaVolumeResponse_Result_VolumeDefaultTypeInternal;
extern ListHaVolumeResponse_Result_VolumeDefaultTypeInternal _ListHaVolumeResponse_Result_Volume_default_instance_;
class ListNodeRequest;
struct ListNodeRequestDefaultTypeInternal;
extern ListNodeRequestDefaultTypeInternal _ListNodeRequest_default_instance_;
class ListNodeResponse;
struct ListNodeResponseDefaultTypeInternal;
extern ListNodeResponseDefaultTypeInternal _ListNodeResponse_default_instance_;
class ListNodeResponse_Result;
struct ListNodeResponse_ResultDefaultTypeInternal;
extern ListNodeResponse_ResultDefaultTypeInternal _ListNodeResponse_Result_default_instance_;
class ListNodeResponse_Result_Node;
struct ListNodeResponse_Result_NodeDefaultTypeInternal;
extern ListNodeResponse_Result_NodeDefaultTypeInternal _ListNodeResponse_Result_Node_default_instance_;
class ListQOSPolicyRequest;
struct ListQOSPolicyRequestDefaultTypeInternal;
extern ListQOSPolicyRequestDefaultTypeInternal _ListQOSPolicyRequest_default_instance_;
class ListQOSPolicyRequest_Param;
struct ListQOSPolicyRequest_ParamDefaultTypeInternal;
extern ListQOSPolicyRequest_ParamDefaultTypeInternal _ListQOSPolicyRequest_Param_default_instance_;
class ListQOSPolicyRequest_Param_Volume;
struct ListQOSPolicyRequest_Param_VolumeDefaultTypeInternal;
extern ListQOSPolicyRequest_Param_VolumeDefaultTypeInternal _ListQOSPolicyRequest_Param_Volume_default_instance_;
class ListQOSPolicyResponse;
struct ListQOSPolicyResponseDefaultTypeInternal;
extern ListQOSPolicyResponseDefaultTypeInternal _ListQOSPolicyResponse_default_instance_;
class ListQOSPolicyResponse_Result;
struct ListQOSPolicyResponse_ResultDefaultTypeInternal;
extern ListQOSPolicyResponse_ResultDefaultTypeInternal _ListQOSPolicyResponse_Result_default_instance_;
class ListQOSPolicyResponse_Result_ListQOSResult;
struct ListQOSPolicyResponse_Result_ListQOSResultDefaultTypeInternal;
extern ListQOSPolicyResponse_Result_ListQOSResultDefaultTypeInternal _ListQOSPolicyResponse_Result_ListQOSResult_default_instance_;
class ListSubsystemRequest;
struct ListSubsystemRequestDefaultTypeInternal;
extern ListSubsystemRequestDefaultTypeInternal _ListSubsystemRequest_default_instance_;
class ListSubsystemResponse;
struct ListSubsystemResponseDefaultTypeInternal;
extern ListSubsystemResponseDefaultTypeInternal _ListSubsystemResponse_default_instance_;
class ListSubsystemResponse_Result;
struct ListSubsystemResponse_ResultDefaultTypeInternal;
extern ListSubsystemResponse_ResultDefaultTypeInternal _ListSubsystemResponse_Result_default_instance_;
class ListSubsystemResponse_Result_SubsystemList;
struct ListSubsystemResponse_Result_SubsystemListDefaultTypeInternal;
extern ListSubsystemResponse_Result_SubsystemListDefaultTypeInternal _ListSubsystemResponse_Result_SubsystemList_default_instance_;
class ListVolumeRequest;
struct ListVolumeRequestDefaultTypeInternal;
extern ListVolumeRequestDefaultTypeInternal _ListVolumeRequest_default_instance_;
class ListVolumeRequest_Param;
struct ListVolumeRequest_ParamDefaultTypeInternal;
extern ListVolumeRequest_ParamDefaultTypeInternal _ListVolumeRequest_Param_default_instance_;
class ListVolumeResponse;
struct ListVolumeResponseDefaultTypeInternal;
extern ListVolumeResponseDefaultTypeInternal _ListVolumeResponse_default_instance_;
class ListVolumeResponse_Result;
struct ListVolumeResponse_ResultDefaultTypeInternal;
extern ListVolumeResponse_ResultDefaultTypeInternal _ListVolumeResponse_Result_default_instance_;
class ListVolumeResponse_Result_VolumeList;
struct ListVolumeResponse_Result_VolumeListDefaultTypeInternal;
extern ListVolumeResponse_Result_VolumeListDefaultTypeInternal _ListVolumeResponse_Result_VolumeList_default_instance_;
class ListWBTRequest;
struct ListWBTRequestDefaultTypeInternal;
extern ListWBTRequestDefaultTypeInternal _ListWBTRequest_default_instance_;
class ListWBTResponse;
struct ListWBTResponseDefaultTypeInternal;
extern ListWBTResponseDefaultTypeInternal _ListWBTResponse_default_instance_;
class ListWBTResponse_Result;
struct ListWBTResponse_ResultDefaultTypeInternal;
extern ListWBTResponse_ResultDefaultTypeInternal _ListWBTResponse_Result_default_instance_;
class ListWBTResponse_Result_Tests;
struct ListWBTResponse_Result_TestsDefaultTypeInternal;
extern ListWBTResponse_Result_TestsDefaultTypeInternal _ListWBTResponse_Result_Tests_default_instance_;
class LoggerInfoRequest;
struct LoggerInfoRequestDefaultTypeInternal;
extern LoggerInfoRequestDefaultTypeInternal _LoggerInfoRequest_default_instance_;
class LoggerInfoResponse;
struct LoggerInfoResponseDefaultTypeInternal;
extern LoggerInfoResponseDefaultTypeInternal _LoggerInfoResponse_default_instance_;
class LoggerInfoResponse_Result;
struct LoggerInfoResponse_ResultDefaultTypeInternal;
extern LoggerInfoResponse_ResultDefaultTypeInternal _LoggerInfoResponse_Result_default_instance_;
class LoggerInfoResponse_Result_LoggerInfo;
struct LoggerInfoResponse_Result_LoggerInfoDefaultTypeInternal;
extern LoggerInfoResponse_Result_LoggerInfoDefaultTypeInternal _LoggerInfoResponse_Result_LoggerInfo_default_instance_;
class MountArrayRequest;
struct MountArrayRequestDefaultTypeInternal;
extern MountArrayRequestDefaultTypeInternal _MountArrayRequest_default_instance_;
class MountArrayRequest_Param;
struct MountArrayRequest_ParamDefaultTypeInternal;
extern MountArrayRequest_ParamDefaultTypeInternal _MountArrayRequest_Param_default_instance_;
class MountArrayResponse;
struct MountArrayResponseDefaultTypeInternal;
extern MountArrayResponseDefaultTypeInternal _MountArrayResponse_default_instance_;
class MountArrayResponse_Result;
struct MountArrayResponse_ResultDefaultTypeInternal;
extern MountArrayResponse_ResultDefaultTypeInternal _MountArrayResponse_Result_default_instance_;
class MountVolumeRequest;
struct MountVolumeRequestDefaultTypeInternal;
extern MountVolumeRequestDefaultTypeInternal _MountVolumeRequest_default_instance_;
class MountVolumeRequest_Param;
struct MountVolumeRequest_ParamDefaultTypeInternal;
extern MountVolumeRequest_ParamDefaultTypeInternal _MountVolumeRequest_Param_default_instance_;
class MountVolumeResponse;
struct MountVolumeResponseDefaultTypeInternal;
extern MountVolumeResponseDefaultTypeInternal _MountVolumeResponse_default_instance_;
class MountVolumeResponse_Result;
struct MountVolumeResponse_ResultDefaultTypeInternal;
extern MountVolumeResponse_ResultDefaultTypeInternal _MountVolumeResponse_Result_default_instance_;
class PosInfo;
struct PosInfoDefaultTypeInternal;
extern PosInfoDefaultTypeInternal _PosInfo_default_instance_;
class QOSResult;
struct QOSResultDefaultTypeInternal;
extern QOSResultDefaultTypeInternal _QOSResult_default_instance_;
class QOSResult_Arrays;
struct QOSResult_ArraysDefaultTypeInternal;
extern QOSResult_ArraysDefaultTypeInternal _QOSResult_Arrays_default_instance_;
class QOSResult_RebuildPolicy;
struct QOSResult_RebuildPolicyDefaultTypeInternal;
extern QOSResult_RebuildPolicyDefaultTypeInternal _QOSResult_RebuildPolicy_default_instance_;
class QOSResult_VolumePolicies;
struct QOSResult_VolumePoliciesDefaultTypeInternal;
extern QOSResult_VolumePoliciesDefaultTypeInternal _QOSResult_VolumePolicies_default_instance_;
class QosCreateVolumePolicyRequest;
struct QosCreateVolumePolicyRequestDefaultTypeInternal;
extern QosCreateVolumePolicyRequestDefaultTypeInternal _QosCreateVolumePolicyRequest_default_instance_;
class QosCreateVolumePolicyRequest_Param;
struct QosCreateVolumePolicyRequest_ParamDefaultTypeInternal;
extern QosCreateVolumePolicyRequest_ParamDefaultTypeInternal _QosCreateVolumePolicyRequest_Param_default_instance_;
class QosCreateVolumePolicyResponse;
struct QosCreateVolumePolicyResponseDefaultTypeInternal;
extern QosCreateVolumePolicyResponseDefaultTypeInternal _QosCreateVolumePolicyResponse_default_instance_;
class QosCreateVolumePolicyResponse_Result;
struct QosCreateVolumePolicyResponse_ResultDefaultTypeInternal;
extern QosCreateVolumePolicyResponse_ResultDefaultTypeInternal _QosCreateVolumePolicyResponse_Result_default_instance_;
class QosResetVolumePolicyRequest;
struct QosResetVolumePolicyRequestDefaultTypeInternal;
extern QosResetVolumePolicyRequestDefaultTypeInternal _QosResetVolumePolicyRequest_default_instance_;
class QosResetVolumePolicyRequest_Param;
struct QosResetVolumePolicyRequest_ParamDefaultTypeInternal;
extern QosResetVolumePolicyRequest_ParamDefaultTypeInternal _QosResetVolumePolicyRequest_Param_default_instance_;
class QosResetVolumePolicyResponse;
struct QosResetVolumePolicyResponseDefaultTypeInternal;
extern QosResetVolumePolicyResponseDefaultTypeInternal _QosResetVolumePolicyResponse_default_instance_;
class QosResetVolumePolicyResponse_Result;
struct QosResetVolumePolicyResponse_ResultDefaultTypeInternal;
extern QosResetVolumePolicyResponse_ResultDefaultTypeInternal _QosResetVolumePolicyResponse_Result_default_instance_;
class QosVolumeNameParam;
struct QosVolumeNameParamDefaultTypeInternal;
extern QosVolumeNameParamDefaultTypeInternal _QosVolumeNameParam_default_instance_;
class RebuildArrayRequest;
struct RebuildArrayRequestDefaultTypeInternal;
extern RebuildArrayRequestDefaultTypeInternal _RebuildArrayRequest_default_instance_;
class RebuildArrayRequest_Param;
struct RebuildArrayRequest_ParamDefaultTypeInternal;
extern RebuildArrayRequest_ParamDefaultTypeInternal _RebuildArrayRequest_Param_default_instance_;
class RebuildArrayResponse;
struct RebuildArrayResponseDefaultTypeInternal;
extern RebuildArrayResponseDefaultTypeInternal _RebuildArrayResponse_default_instance_;
class RebuildArrayResponse_Result;
struct RebuildArrayResponse_ResultDefaultTypeInternal;
extern RebuildArrayResponse_ResultDefaultTypeInternal _RebuildArrayResponse_Result_default_instance_;
class RemoveSpareRequest;
struct RemoveSpareRequestDefaultTypeInternal;
extern RemoveSpareRequestDefaultTypeInternal _RemoveSpareRequest_default_instance_;
class RemoveSpareRequest_Param;
struct RemoveSpareRequest_ParamDefaultTypeInternal;
extern RemoveSpareRequest_ParamDefaultTypeInternal _RemoveSpareRequest_Param_default_instance_;
class RemoveSpareRequest_SpareDeviceName;
struct RemoveSpareRequest_SpareDeviceNameDefaultTypeInternal;
extern RemoveSpareRequest_SpareDeviceNameDefaultTypeInternal _RemoveSpareRequest_SpareDeviceName_default_instance_;
class RemoveSpareResponse;
struct RemoveSpareResponseDefaultTypeInternal;
extern RemoveSpareResponseDefaultTypeInternal _RemoveSpareResponse_default_instance_;
class RemoveSpareResponse_Result;
struct RemoveSpareResponse_ResultDefaultTypeInternal;
extern RemoveSpareResponse_ResultDefaultTypeInternal _RemoveSpareResponse_Result_default_instance_;
class ReplaceArrayDeviceRequest;
struct ReplaceArrayDeviceRequestDefaultTypeInternal;
extern ReplaceArrayDeviceRequestDefaultTypeInternal _ReplaceArrayDeviceRequest_default_instance_;
class ReplaceArrayDeviceRequest_Param;
struct ReplaceArrayDeviceRequest_ParamDefaultTypeInternal;
extern ReplaceArrayDeviceRequest_ParamDefaultTypeInternal _ReplaceArrayDeviceRequest_Param_default_instance_;
class ReplaceArrayDeviceResponse;
struct ReplaceArrayDeviceResponseDefaultTypeInternal;
extern ReplaceArrayDeviceResponseDefaultTypeInternal _ReplaceArrayDeviceResponse_default_instance_;
class ReplaceArrayDeviceResponse_Result;
struct ReplaceArrayDeviceResponse_ResultDefaultTypeInternal;
extern ReplaceArrayDeviceResponse_ResultDefaultTypeInternal _ReplaceArrayDeviceResponse_Result_default_instance_;
class ResetEventWrrRequest;
struct ResetEventWrrRequestDefaultTypeInternal;
extern ResetEventWrrRequestDefaultTypeInternal _ResetEventWrrRequest_default_instance_;
class ResetEventWrrResponse;
struct ResetEventWrrResponseDefaultTypeInternal;
extern ResetEventWrrResponseDefaultTypeInternal _ResetEventWrrResponse_default_instance_;
class ResetEventWrrResponse_Result;
struct ResetEventWrrResponse_ResultDefaultTypeInternal;
extern ResetEventWrrResponse_ResultDefaultTypeInternal _ResetEventWrrResponse_Result_default_instance_;
class ResetMbrRequest;
struct ResetMbrRequestDefaultTypeInternal;
extern ResetMbrRequestDefaultTypeInternal _ResetMbrRequest_default_instance_;
class ResetMbrResponse;
struct ResetMbrResponseDefaultTypeInternal;
extern ResetMbrResponseDefaultTypeInternal _ResetMbrResponse_default_instance_;
class ResetMbrResponse_Result;
struct ResetMbrResponse_ResultDefaultTypeInternal;
extern ResetMbrResponse_ResultDefaultTypeInternal _ResetMbrResponse_Result_default_instance_;
class ScanDeviceRequest;
struct ScanDeviceRequestDefaultTypeInternal;
extern ScanDeviceRequestDefaultTypeInternal _ScanDeviceRequest_default_instance_;
class ScanDeviceResponse;
struct ScanDeviceResponseDefaultTypeInternal;
extern ScanDeviceResponseDefaultTypeInternal _ScanDeviceResponse_default_instance_;
class ScanDeviceResponse_Result;
struct ScanDeviceResponse_ResultDefaultTypeInternal;
extern ScanDeviceResponse_ResultDefaultTypeInternal _ScanDeviceResponse_Result_default_instance_;
class SetLogLevelRequest;
struct SetLogLevelRequestDefaultTypeInternal;
extern SetLogLevelRequestDefaultTypeInternal _SetLogLevelRequest_default_instance_;
class SetLogLevelRequest_Param;
struct SetLogLevelRequest_ParamDefaultTypeInternal;
extern SetLogLevelRequest_ParamDefaultTypeInternal _SetLogLevelRequest_Param_default_instance_;
class SetLogLevelResponse;
struct SetLogLevelResponseDefaultTypeInternal;
extern SetLogLevelResponseDefaultTypeInternal _SetLogLevelResponse_default_instance_;
class SetLogLevelResponse_Result;
struct SetLogLevelResponse_ResultDefaultTypeInternal;
extern SetLogLevelResponse_ResultDefaultTypeInternal _SetLogLevelResponse_Result_default_instance_;
class SetLogPreferenceRequest;
struct SetLogPreferenceRequestDefaultTypeInternal;
extern SetLogPreferenceRequestDefaultTypeInternal _SetLogPreferenceRequest_default_instance_;
class SetLogPreferenceRequest_Param;
struct SetLogPreferenceRequest_ParamDefaultTypeInternal;
extern SetLogPreferenceRequest_ParamDefaultTypeInternal _SetLogPreferenceRequest_Param_default_instance_;
class SetLogPreferenceResponse;
struct SetLogPreferenceResponseDefaultTypeInternal;
extern SetLogPreferenceResponseDefaultTypeInternal _SetLogPreferenceResponse_default_instance_;
class SetLogPreferenceResponse_Result;
struct SetLogPreferenceResponse_ResultDefaultTypeInternal;
extern SetLogPreferenceResponse_ResultDefaultTypeInternal _SetLogPreferenceResponse_Result_default_instance_;
class SetSystemPropertyRequest;
struct SetSystemPropertyRequestDefaultTypeInternal;
extern SetSystemPropertyRequestDefaultTypeInternal _SetSystemPropertyRequest_default_instance_;
class SetSystemPropertyRequest_Param;
struct SetSystemPropertyRequest_ParamDefaultTypeInternal;
extern SetSystemPropertyRequest_ParamDefaultTypeInternal _SetSystemPropertyRequest_Param_default_instance_;
class SetSystemPropertyResponse;
struct SetSystemPropertyResponseDefaultTypeInternal;
extern SetSystemPropertyResponseDefaultTypeInternal _SetSystemPropertyResponse_default_instance_;
class SetSystemPropertyResponse_Result;
struct SetSystemPropertyResponse_ResultDefaultTypeInternal;
extern SetSystemPropertyResponse_ResultDefaultTypeInternal _SetSystemPropertyResponse_Result_default_instance_;
class SetTelemetryPropertyRequest;
struct SetTelemetryPropertyRequestDefaultTypeInternal;
extern SetTelemetryPropertyRequestDefaultTypeInternal _SetTelemetryPropertyRequest_default_instance_;
class SetTelemetryPropertyRequest_Param;
struct SetTelemetryPropertyRequest_ParamDefaultTypeInternal;
extern SetTelemetryPropertyRequest_ParamDefaultTypeInternal _SetTelemetryPropertyRequest_Param_default_instance_;
class SetTelemetryPropertyResponse;
struct SetTelemetryPropertyResponseDefaultTypeInternal;
extern SetTelemetryPropertyResponseDefaultTypeInternal _SetTelemetryPropertyResponse_default_instance_;
class SetTelemetryPropertyResponse_Result;
struct SetTelemetryPropertyResponse_ResultDefaultTypeInternal;
extern SetTelemetryPropertyResponse_ResultDefaultTypeInternal _SetTelemetryPropertyResponse_Result_default_instance_;
class SetVolumePropertyRequest;
struct SetVolumePropertyRequestDefaultTypeInternal;
extern SetVolumePropertyRequestDefaultTypeInternal _SetVolumePropertyRequest_default_instance_;
class SetVolumePropertyRequest_Param;
struct SetVolumePropertyRequest_ParamDefaultTypeInternal;
extern SetVolumePropertyRequest_ParamDefaultTypeInternal _SetVolumePropertyRequest_Param_default_instance_;
class SetVolumePropertyResponse;
struct SetVolumePropertyResponseDefaultTypeInternal;
extern SetVolumePropertyResponseDefaultTypeInternal _SetVolumePropertyResponse_default_instance_;
class SetVolumePropertyResponse_Result;
struct SetVolumePropertyResponse_ResultDefaultTypeInternal;
extern SetVolumePropertyResponse_ResultDefaultTypeInternal _SetVolumePropertyResponse_Result_default_instance_;
class SmartLog;
struct SmartLogDefaultTypeInternal;
extern SmartLogDefaultTypeInternal _SmartLog_default_instance_;
class StartHaReplicationRequest;
struct StartHaReplicationRequestDefaultTypeInternal;
extern StartHaReplicationRequestDefaultTypeInternal _StartHaReplicationRequest_default_instance_;
class StartHaReplicationRequest_Param;
struct StartHaReplicationRequest_ParamDefaultTypeInternal;
extern StartHaReplicationRequest_ParamDefaultTypeInternal _StartHaReplicationRequest_Param_default_instance_;
class StartHaReplicationResponse;
struct StartHaReplicationResponseDefaultTypeInternal;
extern StartHaReplicationResponseDefaultTypeInternal _StartHaReplicationResponse_default_instance_;
class StartHaReplicationResponse_Result;
struct StartHaReplicationResponse_ResultDefaultTypeInternal;
extern StartHaReplicationResponse_ResultDefaultTypeInternal _StartHaReplicationResponse_Result_default_instance_;
class StartSystemRequest;
struct StartSystemRequestDefaultTypeInternal;
extern StartSystemRequestDefaultTypeInternal _StartSystemRequest_default_instance_;
class StartTelemetryRequest;
struct StartTelemetryRequestDefaultTypeInternal;
extern StartTelemetryRequestDefaultTypeInternal _StartTelemetryRequest_default_instance_;
class StartTelemetryResponse;
struct StartTelemetryResponseDefaultTypeInternal;
extern StartTelemetryResponseDefaultTypeInternal _StartTelemetryResponse_default_instance_;
class StartTelemetryResponse_Result;
struct StartTelemetryResponse_ResultDefaultTypeInternal;
extern StartTelemetryResponse_ResultDefaultTypeInternal _StartTelemetryResponse_Result_default_instance_;
class Status;
struct StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
class StopRebuildingRequest;
struct StopRebuildingRequestDefaultTypeInternal;
extern StopRebuildingRequestDefaultTypeInternal _StopRebuildingRequest_default_instance_;
class StopRebuildingRequest_Param;
struct StopRebuildingRequest_ParamDefaultTypeInternal;
extern StopRebuildingRequest_ParamDefaultTypeInternal _StopRebuildingRequest_Param_default_instance_;
class StopRebuildingResponse;
struct StopRebuildingResponseDefaultTypeInternal;
extern StopRebuildingResponseDefaultTypeInternal _StopRebuildingResponse_default_instance_;
class StopRebuildingResponse_Result;
struct StopRebuildingResponse_ResultDefaultTypeInternal;
extern StopRebuildingResponse_ResultDefaultTypeInternal _StopRebuildingResponse_Result_default_instance_;
class StopSystemRequest;
struct StopSystemRequestDefaultTypeInternal;
extern StopSystemRequestDefaultTypeInternal _StopSystemRequest_default_instance_;
class StopSystemResponse;
struct StopSystemResponseDefaultTypeInternal;
extern StopSystemResponseDefaultTypeInternal _StopSystemResponse_default_instance_;
class StopSystemResponse_Result;
struct StopSystemResponse_ResultDefaultTypeInternal;
extern StopSystemResponse_ResultDefaultTypeInternal _StopSystemResponse_Result_default_instance_;
class StopTelemetryRequest;
struct StopTelemetryRequestDefaultTypeInternal;
extern StopTelemetryRequestDefaultTypeInternal _StopTelemetryRequest_default_instance_;
class StopTelemetryResponse;
struct StopTelemetryResponseDefaultTypeInternal;
extern StopTelemetryResponseDefaultTypeInternal _StopTelemetryResponse_default_instance_;
class StopTelemetryResponse_Result;
struct StopTelemetryResponse_ResultDefaultTypeInternal;
extern StopTelemetryResponse_ResultDefaultTypeInternal _StopTelemetryResponse_Result_default_instance_;
class Subsystem;
struct SubsystemDefaultTypeInternal;
extern SubsystemDefaultTypeInternal _Subsystem_default_instance_;
class SubsystemInfoRequest;
struct SubsystemInfoRequestDefaultTypeInternal;
extern SubsystemInfoRequestDefaultTypeInternal _SubsystemInfoRequest_default_instance_;
class SubsystemInfoRequest_Param;
struct SubsystemInfoRequest_ParamDefaultTypeInternal;
extern SubsystemInfoRequest_ParamDefaultTypeInternal _SubsystemInfoRequest_Param_default_instance_;
class SubsystemInfoResponse;
struct SubsystemInfoResponseDefaultTypeInternal;
extern SubsystemInfoResponseDefaultTypeInternal _SubsystemInfoResponse_default_instance_;
class SubsystemInfoResponse_Result;
struct SubsystemInfoResponse_ResultDefaultTypeInternal;
extern SubsystemInfoResponse_ResultDefaultTypeInternal _SubsystemInfoResponse_Result_default_instance_;
class SubsystemInfoResponse_Result_SubsystemList;
struct SubsystemInfoResponse_Result_SubsystemListDefaultTypeInternal;
extern SubsystemInfoResponse_Result_SubsystemListDefaultTypeInternal _SubsystemInfoResponse_Result_SubsystemList_default_instance_;
class Subsystem_AddressInfo;
struct Subsystem_AddressInfoDefaultTypeInternal;
extern Subsystem_AddressInfoDefaultTypeInternal _Subsystem_AddressInfo_default_instance_;
class Subsystem_Host;
struct Subsystem_HostDefaultTypeInternal;
extern Subsystem_HostDefaultTypeInternal _Subsystem_Host_default_instance_;
class Subsystem_Namespace;
struct Subsystem_NamespaceDefaultTypeInternal;
extern Subsystem_NamespaceDefaultTypeInternal _Subsystem_Namespace_default_instance_;
class SystemInfoRequest;
struct SystemInfoRequestDefaultTypeInternal;
extern SystemInfoRequestDefaultTypeInternal _SystemInfoRequest_default_instance_;
class SystemInfoResponse;
struct SystemInfoResponseDefaultTypeInternal;
extern SystemInfoResponseDefaultTypeInternal _SystemInfoResponse_default_instance_;
class SystemInfoResponse_Result;
struct SystemInfoResponse_ResultDefaultTypeInternal;
extern SystemInfoResponse_ResultDefaultTypeInternal _SystemInfoResponse_Result_default_instance_;
class SystemInfoResponse_Result_Data;
struct SystemInfoResponse_Result_DataDefaultTypeInternal;
extern SystemInfoResponse_Result_DataDefaultTypeInternal _SystemInfoResponse_Result_Data_default_instance_;
class UnmountArrayRequest;
struct UnmountArrayRequestDefaultTypeInternal;
extern UnmountArrayRequestDefaultTypeInternal _UnmountArrayRequest_default_instance_;
class UnmountArrayRequest_Param;
struct UnmountArrayRequest_ParamDefaultTypeInternal;
extern UnmountArrayRequest_ParamDefaultTypeInternal _UnmountArrayRequest_Param_default_instance_;
class UnmountArrayResponse;
struct UnmountArrayResponseDefaultTypeInternal;
extern UnmountArrayResponseDefaultTypeInternal _UnmountArrayResponse_default_instance_;
class UnmountArrayResponse_Result;
struct UnmountArrayResponse_ResultDefaultTypeInternal;
extern UnmountArrayResponse_ResultDefaultTypeInternal _UnmountArrayResponse_Result_default_instance_;
class UnmountVolumeRequest;
struct UnmountVolumeRequestDefaultTypeInternal;
extern UnmountVolumeRequestDefaultTypeInternal _UnmountVolumeRequest_default_instance_;
class UnmountVolumeRequest_Param;
struct UnmountVolumeRequest_ParamDefaultTypeInternal;
extern UnmountVolumeRequest_ParamDefaultTypeInternal _UnmountVolumeRequest_Param_default_instance_;
class UnmountVolumeResponse;
struct UnmountVolumeResponseDefaultTypeInternal;
extern UnmountVolumeResponseDefaultTypeInternal _UnmountVolumeResponse_default_instance_;
class UnmountVolumeResponse_Result;
struct UnmountVolumeResponse_ResultDefaultTypeInternal;
extern UnmountVolumeResponse_ResultDefaultTypeInternal _UnmountVolumeResponse_Result_default_instance_;
class UpdateEventWrrRequest;
struct UpdateEventWrrRequestDefaultTypeInternal;
extern UpdateEventWrrRequestDefaultTypeInternal _UpdateEventWrrRequest_default_instance_;
class UpdateEventWrrRequest_Param;
struct UpdateEventWrrRequest_ParamDefaultTypeInternal;
extern UpdateEventWrrRequest_ParamDefaultTypeInternal _UpdateEventWrrRequest_Param_default_instance_;
class UpdateEventWrrResponse;
struct UpdateEventWrrResponseDefaultTypeInternal;
extern UpdateEventWrrResponseDefaultTypeInternal _UpdateEventWrrResponse_default_instance_;
class UpdateEventWrrResponse_Result;
struct UpdateEventWrrResponse_ResultDefaultTypeInternal;
extern UpdateEventWrrResponse_ResultDefaultTypeInternal _UpdateEventWrrResponse_Result_default_instance_;
class Volume;
struct VolumeDefaultTypeInternal;
extern VolumeDefaultTypeInternal _Volume_default_instance_;
class VolumeInfoRequest;
struct VolumeInfoRequestDefaultTypeInternal;
extern VolumeInfoRequestDefaultTypeInternal _VolumeInfoRequest_default_instance_;
class VolumeInfoRequest_Param;
struct VolumeInfoRequest_ParamDefaultTypeInternal;
extern VolumeInfoRequest_ParamDefaultTypeInternal _VolumeInfoRequest_Param_default_instance_;
class VolumeInfoResponse;
struct VolumeInfoResponseDefaultTypeInternal;
extern VolumeInfoResponseDefaultTypeInternal _VolumeInfoResponse_default_instance_;
class VolumeInfoResponse_Result;
struct VolumeInfoResponse_ResultDefaultTypeInternal;
extern VolumeInfoResponse_ResultDefaultTypeInternal _VolumeInfoResponse_Result_default_instance_;
class VolumeRenameRequest;
struct VolumeRenameRequestDefaultTypeInternal;
extern VolumeRenameRequestDefaultTypeInternal _VolumeRenameRequest_default_instance_;
class VolumeRenameRequest_Param;
struct VolumeRenameRequest_ParamDefaultTypeInternal;
extern VolumeRenameRequest_ParamDefaultTypeInternal _VolumeRenameRequest_Param_default_instance_;
class VolumeRenameResponse;
struct VolumeRenameResponseDefaultTypeInternal;
extern VolumeRenameResponseDefaultTypeInternal _VolumeRenameResponse_default_instance_;
class VolumeRenameResponse_Result;
struct VolumeRenameResponse_ResultDefaultTypeInternal;
extern VolumeRenameResponse_ResultDefaultTypeInternal _VolumeRenameResponse_Result_default_instance_;
class WBTRequest;
struct WBTRequestDefaultTypeInternal;
extern WBTRequestDefaultTypeInternal _WBTRequest_default_instance_;
class WBTRequest_Param;
struct WBTRequest_ParamDefaultTypeInternal;
extern WBTRequest_ParamDefaultTypeInternal _WBTRequest_Param_default_instance_;
class WBTRequest_Param_ArgvEntry_DoNotUse;
struct WBTRequest_Param_ArgvEntry_DoNotUseDefaultTypeInternal;
extern WBTRequest_Param_ArgvEntry_DoNotUseDefaultTypeInternal _WBTRequest_Param_ArgvEntry_DoNotUse_default_instance_;
class WBTResponse;
struct WBTResponseDefaultTypeInternal;
extern WBTResponseDefaultTypeInternal _WBTResponse_default_instance_;
class WBTResponse_Result;
struct WBTResponse_ResultDefaultTypeInternal;
extern WBTResponse_ResultDefaultTypeInternal _WBTResponse_Result_default_instance_;
class WBTResponse_Result_TestData;
struct WBTResponse_Result_TestDataDefaultTypeInternal;
extern WBTResponse_Result_TestDataDefaultTypeInternal _WBTResponse_Result_TestData_default_instance_;
class WBTTest;
struct WBTTestDefaultTypeInternal;
extern WBTTestDefaultTypeInternal _WBTTest_default_instance_;
}  // namespace grpc_cli
PROTOBUF_NAMESPACE_OPEN
template<> ::grpc_cli::AddListenerRequest* Arena::CreateMaybeMessage<::grpc_cli::AddListenerRequest>(Arena*);
template<> ::grpc_cli::AddListenerRequest_Param* Arena::CreateMaybeMessage<::grpc_cli::AddListenerRequest_Param>(Arena*);
template<> ::grpc_cli::AddListenerResponse* Arena::CreateMaybeMessage<::grpc_cli::AddListenerResponse>(Arena*);
template<> ::grpc_cli::AddListenerResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::AddListenerResponse_Result>(Arena*);
template<> ::grpc_cli::AddSpareRequest* Arena::CreateMaybeMessage<::grpc_cli::AddSpareRequest>(Arena*);
template<> ::grpc_cli::AddSpareRequest_Param* Arena::CreateMaybeMessage<::grpc_cli::AddSpareRequest_Param>(Arena*);
template<> ::grpc_cli::AddSpareRequest_SpareDeviceName* Arena::CreateMaybeMessage<::grpc_cli::AddSpareRequest_SpareDeviceName>(Arena*);
template<> ::grpc_cli::AddSpareResponse* Arena::CreateMaybeMessage<::grpc_cli::AddSpareResponse>(Arena*);
template<> ::grpc_cli::AddSpareResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::AddSpareResponse_Result>(Arena*);
template<> ::grpc_cli::ApplyLogFilterRequest* Arena::CreateMaybeMessage<::grpc_cli::ApplyLogFilterRequest>(Arena*);
template<> ::grpc_cli::ApplyLogFilterResponse* Arena::CreateMaybeMessage<::grpc_cli::ApplyLogFilterResponse>(Arena*);
template<> ::grpc_cli::ApplyLogFilterResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::ApplyLogFilterResponse_Result>(Arena*);
template<> ::grpc_cli::Array* Arena::CreateMaybeMessage<::grpc_cli::Array>(Arena*);
template<> ::grpc_cli::ArrayInfoRequest* Arena::CreateMaybeMessage<::grpc_cli::ArrayInfoRequest>(Arena*);
template<> ::grpc_cli::ArrayInfoRequest_Param* Arena::CreateMaybeMessage<::grpc_cli::ArrayInfoRequest_Param>(Arena*);
template<> ::grpc_cli::ArrayInfoResponse* Arena::CreateMaybeMessage<::grpc_cli::ArrayInfoResponse>(Arena*);
template<> ::grpc_cli::ArrayInfoResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::ArrayInfoResponse_Result>(Arena*);
template<> ::grpc_cli::AutocreateArrayRequest* Arena::CreateMaybeMessage<::grpc_cli::AutocreateArrayRequest>(Arena*);
template<> ::grpc_cli::AutocreateArrayRequest_Param* Arena::CreateMaybeMessage<::grpc_cli::AutocreateArrayRequest_Param>(Arena*);
template<> ::grpc_cli::AutocreateArrayResponse* Arena::CreateMaybeMessage<::grpc_cli::AutocreateArrayResponse>(Arena*);
template<> ::grpc_cli::AutocreateArrayResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::AutocreateArrayResponse_Result>(Arena*);
template<> ::grpc_cli::CreateArrayRequest* Arena::CreateMaybeMessage<::grpc_cli::CreateArrayRequest>(Arena*);
template<> ::grpc_cli::CreateArrayRequest_Param* Arena::CreateMaybeMessage<::grpc_cli::CreateArrayRequest_Param>(Arena*);
template<> ::grpc_cli::CreateArrayResponse* Arena::CreateMaybeMessage<::grpc_cli::CreateArrayResponse>(Arena*);
template<> ::grpc_cli::CreateArrayResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::CreateArrayResponse_Result>(Arena*);
template<> ::grpc_cli::CreateDeviceRequest* Arena::CreateMaybeMessage<::grpc_cli::CreateDeviceRequest>(Arena*);
template<> ::grpc_cli::CreateDeviceRequest_Param* Arena::CreateMaybeMessage<::grpc_cli::CreateDeviceRequest_Param>(Arena*);
template<> ::grpc_cli::CreateDeviceResponse* Arena::CreateMaybeMessage<::grpc_cli::CreateDeviceResponse>(Arena*);
template<> ::grpc_cli::CreateDeviceResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::CreateDeviceResponse_Result>(Arena*);
template<> ::grpc_cli::CreateSubsystemRequest* Arena::CreateMaybeMessage<::grpc_cli::CreateSubsystemRequest>(Arena*);
template<> ::grpc_cli::CreateSubsystemRequest_Param* Arena::CreateMaybeMessage<::grpc_cli::CreateSubsystemRequest_Param>(Arena*);
template<> ::grpc_cli::CreateSubsystemResponse* Arena::CreateMaybeMessage<::grpc_cli::CreateSubsystemResponse>(Arena*);
template<> ::grpc_cli::CreateSubsystemResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::CreateSubsystemResponse_Result>(Arena*);
template<> ::grpc_cli::CreateTransportRequest* Arena::CreateMaybeMessage<::grpc_cli::CreateTransportRequest>(Arena*);
template<> ::grpc_cli::CreateTransportRequest_Param* Arena::CreateMaybeMessage<::grpc_cli::CreateTransportRequest_Param>(Arena*);
template<> ::grpc_cli::CreateTransportResponse* Arena::CreateMaybeMessage<::grpc_cli::CreateTransportResponse>(Arena*);
template<> ::grpc_cli::CreateTransportResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::CreateTransportResponse_Result>(Arena*);
template<> ::grpc_cli::CreateVolumeRequest* Arena::CreateMaybeMessage<::grpc_cli::CreateVolumeRequest>(Arena*);
template<> ::grpc_cli::CreateVolumeRequest_Param* Arena::CreateMaybeMessage<::grpc_cli::CreateVolumeRequest_Param>(Arena*);
template<> ::grpc_cli::CreateVolumeResponse* Arena::CreateMaybeMessage<::grpc_cli::CreateVolumeResponse>(Arena*);
template<> ::grpc_cli::CreateVolumeResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::CreateVolumeResponse_Result>(Arena*);
template<> ::grpc_cli::CreateVolumeResponse_Result_CreateVolumeData* Arena::CreateMaybeMessage<::grpc_cli::CreateVolumeResponse_Result_CreateVolumeData>(Arena*);
template<> ::grpc_cli::DeleteArrayRequest* Arena::CreateMaybeMessage<::grpc_cli::DeleteArrayRequest>(Arena*);
template<> ::grpc_cli::DeleteArrayRequest_Param* Arena::CreateMaybeMessage<::grpc_cli::DeleteArrayRequest_Param>(Arena*);
template<> ::grpc_cli::DeleteArrayResponse* Arena::CreateMaybeMessage<::grpc_cli::DeleteArrayResponse>(Arena*);
template<> ::grpc_cli::DeleteArrayResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::DeleteArrayResponse_Result>(Arena*);
template<> ::grpc_cli::DeleteSubsystemRequest* Arena::CreateMaybeMessage<::grpc_cli::DeleteSubsystemRequest>(Arena*);
template<> ::grpc_cli::DeleteSubsystemRequest_Param* Arena::CreateMaybeMessage<::grpc_cli::DeleteSubsystemRequest_Param>(Arena*);
template<> ::grpc_cli::DeleteSubsystemResponse* Arena::CreateMaybeMessage<::grpc_cli::DeleteSubsystemResponse>(Arena*);
template<> ::grpc_cli::DeleteSubsystemResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::DeleteSubsystemResponse_Result>(Arena*);
template<> ::grpc_cli::DeleteVolumeRequest* Arena::CreateMaybeMessage<::grpc_cli::DeleteVolumeRequest>(Arena*);
template<> ::grpc_cli::DeleteVolumeRequest_Param* Arena::CreateMaybeMessage<::grpc_cli::DeleteVolumeRequest_Param>(Arena*);
template<> ::grpc_cli::DeleteVolumeResponse* Arena::CreateMaybeMessage<::grpc_cli::DeleteVolumeResponse>(Arena*);
template<> ::grpc_cli::DeleteVolumeResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::DeleteVolumeResponse_Result>(Arena*);
template<> ::grpc_cli::Device* Arena::CreateMaybeMessage<::grpc_cli::Device>(Arena*);
template<> ::grpc_cli::DeviceNameList* Arena::CreateMaybeMessage<::grpc_cli::DeviceNameList>(Arena*);
template<> ::grpc_cli::DumpMemorySnapshotRequest* Arena::CreateMaybeMessage<::grpc_cli::DumpMemorySnapshotRequest>(Arena*);
template<> ::grpc_cli::DumpMemorySnapshotRequest_Param* Arena::CreateMaybeMessage<::grpc_cli::DumpMemorySnapshotRequest_Param>(Arena*);
template<> ::grpc_cli::DumpMemorySnapshotResponse* Arena::CreateMaybeMessage<::grpc_cli::DumpMemorySnapshotResponse>(Arena*);
template<> ::grpc_cli::DumpMemorySnapshotResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::DumpMemorySnapshotResponse_Result>(Arena*);
template<> ::grpc_cli::GetLogLevelRequest* Arena::CreateMaybeMessage<::grpc_cli::GetLogLevelRequest>(Arena*);
template<> ::grpc_cli::GetLogLevelResponse* Arena::CreateMaybeMessage<::grpc_cli::GetLogLevelResponse>(Arena*);
template<> ::grpc_cli::GetLogLevelResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::GetLogLevelResponse_Result>(Arena*);
template<> ::grpc_cli::GetLogLevelResponse_Result_LogLevel* Arena::CreateMaybeMessage<::grpc_cli::GetLogLevelResponse_Result_LogLevel>(Arena*);
template<> ::grpc_cli::GetSmartLogRequest* Arena::CreateMaybeMessage<::grpc_cli::GetSmartLogRequest>(Arena*);
template<> ::grpc_cli::GetSmartLogRequest_Param* Arena::CreateMaybeMessage<::grpc_cli::GetSmartLogRequest_Param>(Arena*);
template<> ::grpc_cli::GetSmartLogResponse* Arena::CreateMaybeMessage<::grpc_cli::GetSmartLogResponse>(Arena*);
template<> ::grpc_cli::GetSmartLogResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::GetSmartLogResponse_Result>(Arena*);
template<> ::grpc_cli::GetSystemPropertyRequest* Arena::CreateMaybeMessage<::grpc_cli::GetSystemPropertyRequest>(Arena*);
template<> ::grpc_cli::GetSystemPropertyResponse* Arena::CreateMaybeMessage<::grpc_cli::GetSystemPropertyResponse>(Arena*);
template<> ::grpc_cli::GetSystemPropertyResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::GetSystemPropertyResponse_Result>(Arena*);
template<> ::grpc_cli::GetSystemPropertyResponse_Result_Data* Arena::CreateMaybeMessage<::grpc_cli::GetSystemPropertyResponse_Result_Data>(Arena*);
template<> ::grpc_cli::GetTelemetryPropertyRequest* Arena::CreateMaybeMessage<::grpc_cli::GetTelemetryPropertyRequest>(Arena*);
template<> ::grpc_cli::GetTelemetryPropertyResponse* Arena::CreateMaybeMessage<::grpc_cli::GetTelemetryPropertyResponse>(Arena*);
template<> ::grpc_cli::GetTelemetryPropertyResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::GetTelemetryPropertyResponse_Result>(Arena*);
template<> ::grpc_cli::GetTelemetryPropertyResponse_Result_TelemetryProperty* Arena::CreateMaybeMessage<::grpc_cli::GetTelemetryPropertyResponse_Result_TelemetryProperty>(Arena*);
template<> ::grpc_cli::ListArrayRequest* Arena::CreateMaybeMessage<::grpc_cli::ListArrayRequest>(Arena*);
template<> ::grpc_cli::ListArrayResponse* Arena::CreateMaybeMessage<::grpc_cli::ListArrayResponse>(Arena*);
template<> ::grpc_cli::ListArrayResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::ListArrayResponse_Result>(Arena*);
template<> ::grpc_cli::ListArrayResponse_Result_ArrayList* Arena::CreateMaybeMessage<::grpc_cli::ListArrayResponse_Result_ArrayList>(Arena*);
template<> ::grpc_cli::ListDeviceRequest* Arena::CreateMaybeMessage<::grpc_cli::ListDeviceRequest>(Arena*);
template<> ::grpc_cli::ListDeviceResponse* Arena::CreateMaybeMessage<::grpc_cli::ListDeviceResponse>(Arena*);
template<> ::grpc_cli::ListDeviceResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::ListDeviceResponse_Result>(Arena*);
template<> ::grpc_cli::ListDeviceResponse_Result_DeviceList* Arena::CreateMaybeMessage<::grpc_cli::ListDeviceResponse_Result_DeviceList>(Arena*);
template<> ::grpc_cli::ListHaReplicationRequest* Arena::CreateMaybeMessage<::grpc_cli::ListHaReplicationRequest>(Arena*);
template<> ::grpc_cli::ListHaReplicationResponse* Arena::CreateMaybeMessage<::grpc_cli::ListHaReplicationResponse>(Arena*);
template<> ::grpc_cli::ListHaReplicationResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::ListHaReplicationResponse_Result>(Arena*);
template<> ::grpc_cli::ListHaReplicationResponse_Result_Replication* Arena::CreateMaybeMessage<::grpc_cli::ListHaReplicationResponse_Result_Replication>(Arena*);
template<> ::grpc_cli::ListHaVolumeRequest* Arena::CreateMaybeMessage<::grpc_cli::ListHaVolumeRequest>(Arena*);
template<> ::grpc_cli::ListHaVolumeResponse* Arena::CreateMaybeMessage<::grpc_cli::ListHaVolumeResponse>(Arena*);
template<> ::grpc_cli::ListHaVolumeResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::ListHaVolumeResponse_Result>(Arena*);
template<> ::grpc_cli::ListHaVolumeResponse_Result_Volume* Arena::CreateMaybeMessage<::grpc_cli::ListHaVolumeResponse_Result_Volume>(Arena*);
template<> ::grpc_cli::ListNodeRequest* Arena::CreateMaybeMessage<::grpc_cli::ListNodeRequest>(Arena*);
template<> ::grpc_cli::ListNodeResponse* Arena::CreateMaybeMessage<::grpc_cli::ListNodeResponse>(Arena*);
template<> ::grpc_cli::ListNodeResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::ListNodeResponse_Result>(Arena*);
template<> ::grpc_cli::ListNodeResponse_Result_Node* Arena::CreateMaybeMessage<::grpc_cli::ListNodeResponse_Result_Node>(Arena*);
template<> ::grpc_cli::ListQOSPolicyRequest* Arena::CreateMaybeMessage<::grpc_cli::ListQOSPolicyRequest>(Arena*);
template<> ::grpc_cli::ListQOSPolicyRequest_Param* Arena::CreateMaybeMessage<::grpc_cli::ListQOSPolicyRequest_Param>(Arena*);
template<> ::grpc_cli::ListQOSPolicyRequest_Param_Volume* Arena::CreateMaybeMessage<::grpc_cli::ListQOSPolicyRequest_Param_Volume>(Arena*);
template<> ::grpc_cli::ListQOSPolicyResponse* Arena::CreateMaybeMessage<::grpc_cli::ListQOSPolicyResponse>(Arena*);
template<> ::grpc_cli::ListQOSPolicyResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::ListQOSPolicyResponse_Result>(Arena*);
template<> ::grpc_cli::ListQOSPolicyResponse_Result_ListQOSResult* Arena::CreateMaybeMessage<::grpc_cli::ListQOSPolicyResponse_Result_ListQOSResult>(Arena*);
template<> ::grpc_cli::ListSubsystemRequest* Arena::CreateMaybeMessage<::grpc_cli::ListSubsystemRequest>(Arena*);
template<> ::grpc_cli::ListSubsystemResponse* Arena::CreateMaybeMessage<::grpc_cli::ListSubsystemResponse>(Arena*);
template<> ::grpc_cli::ListSubsystemResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::ListSubsystemResponse_Result>(Arena*);
template<> ::grpc_cli::ListSubsystemResponse_Result_SubsystemList* Arena::CreateMaybeMessage<::grpc_cli::ListSubsystemResponse_Result_SubsystemList>(Arena*);
template<> ::grpc_cli::ListVolumeRequest* Arena::CreateMaybeMessage<::grpc_cli::ListVolumeRequest>(Arena*);
template<> ::grpc_cli::ListVolumeRequest_Param* Arena::CreateMaybeMessage<::grpc_cli::ListVolumeRequest_Param>(Arena*);
template<> ::grpc_cli::ListVolumeResponse* Arena::CreateMaybeMessage<::grpc_cli::ListVolumeResponse>(Arena*);
template<> ::grpc_cli::ListVolumeResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::ListVolumeResponse_Result>(Arena*);
template<> ::grpc_cli::ListVolumeResponse_Result_VolumeList* Arena::CreateMaybeMessage<::grpc_cli::ListVolumeResponse_Result_VolumeList>(Arena*);
template<> ::grpc_cli::ListWBTRequest* Arena::CreateMaybeMessage<::grpc_cli::ListWBTRequest>(Arena*);
template<> ::grpc_cli::ListWBTResponse* Arena::CreateMaybeMessage<::grpc_cli::ListWBTResponse>(Arena*);
template<> ::grpc_cli::ListWBTResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::ListWBTResponse_Result>(Arena*);
template<> ::grpc_cli::ListWBTResponse_Result_Tests* Arena::CreateMaybeMessage<::grpc_cli::ListWBTResponse_Result_Tests>(Arena*);
template<> ::grpc_cli::LoggerInfoRequest* Arena::CreateMaybeMessage<::grpc_cli::LoggerInfoRequest>(Arena*);
template<> ::grpc_cli::LoggerInfoResponse* Arena::CreateMaybeMessage<::grpc_cli::LoggerInfoResponse>(Arena*);
template<> ::grpc_cli::LoggerInfoResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::LoggerInfoResponse_Result>(Arena*);
template<> ::grpc_cli::LoggerInfoResponse_Result_LoggerInfo* Arena::CreateMaybeMessage<::grpc_cli::LoggerInfoResponse_Result_LoggerInfo>(Arena*);
template<> ::grpc_cli::MountArrayRequest* Arena::CreateMaybeMessage<::grpc_cli::MountArrayRequest>(Arena*);
template<> ::grpc_cli::MountArrayRequest_Param* Arena::CreateMaybeMessage<::grpc_cli::MountArrayRequest_Param>(Arena*);
template<> ::grpc_cli::MountArrayResponse* Arena::CreateMaybeMessage<::grpc_cli::MountArrayResponse>(Arena*);
template<> ::grpc_cli::MountArrayResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::MountArrayResponse_Result>(Arena*);
template<> ::grpc_cli::MountVolumeRequest* Arena::CreateMaybeMessage<::grpc_cli::MountVolumeRequest>(Arena*);
template<> ::grpc_cli::MountVolumeRequest_Param* Arena::CreateMaybeMessage<::grpc_cli::MountVolumeRequest_Param>(Arena*);
template<> ::grpc_cli::MountVolumeResponse* Arena::CreateMaybeMessage<::grpc_cli::MountVolumeResponse>(Arena*);
template<> ::grpc_cli::MountVolumeResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::MountVolumeResponse_Result>(Arena*);
template<> ::grpc_cli::PosInfo* Arena::CreateMaybeMessage<::grpc_cli::PosInfo>(Arena*);
template<> ::grpc_cli::QOSResult* Arena::CreateMaybeMessage<::grpc_cli::QOSResult>(Arena*);
template<> ::grpc_cli::QOSResult_Arrays* Arena::CreateMaybeMessage<::grpc_cli::QOSResult_Arrays>(Arena*);
template<> ::grpc_cli::QOSResult_RebuildPolicy* Arena::CreateMaybeMessage<::grpc_cli::QOSResult_RebuildPolicy>(Arena*);
template<> ::grpc_cli::QOSResult_VolumePolicies* Arena::CreateMaybeMessage<::grpc_cli::QOSResult_VolumePolicies>(Arena*);
template<> ::grpc_cli::QosCreateVolumePolicyRequest* Arena::CreateMaybeMessage<::grpc_cli::QosCreateVolumePolicyRequest>(Arena*);
template<> ::grpc_cli::QosCreateVolumePolicyRequest_Param* Arena::CreateMaybeMessage<::grpc_cli::QosCreateVolumePolicyRequest_Param>(Arena*);
template<> ::grpc_cli::QosCreateVolumePolicyResponse* Arena::CreateMaybeMessage<::grpc_cli::QosCreateVolumePolicyResponse>(Arena*);
template<> ::grpc_cli::QosCreateVolumePolicyResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::QosCreateVolumePolicyResponse_Result>(Arena*);
template<> ::grpc_cli::QosResetVolumePolicyRequest* Arena::CreateMaybeMessage<::grpc_cli::QosResetVolumePolicyRequest>(Arena*);
template<> ::grpc_cli::QosResetVolumePolicyRequest_Param* Arena::CreateMaybeMessage<::grpc_cli::QosResetVolumePolicyRequest_Param>(Arena*);
template<> ::grpc_cli::QosResetVolumePolicyResponse* Arena::CreateMaybeMessage<::grpc_cli::QosResetVolumePolicyResponse>(Arena*);
template<> ::grpc_cli::QosResetVolumePolicyResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::QosResetVolumePolicyResponse_Result>(Arena*);
template<> ::grpc_cli::QosVolumeNameParam* Arena::CreateMaybeMessage<::grpc_cli::QosVolumeNameParam>(Arena*);
template<> ::grpc_cli::RebuildArrayRequest* Arena::CreateMaybeMessage<::grpc_cli::RebuildArrayRequest>(Arena*);
template<> ::grpc_cli::RebuildArrayRequest_Param* Arena::CreateMaybeMessage<::grpc_cli::RebuildArrayRequest_Param>(Arena*);
template<> ::grpc_cli::RebuildArrayResponse* Arena::CreateMaybeMessage<::grpc_cli::RebuildArrayResponse>(Arena*);
template<> ::grpc_cli::RebuildArrayResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::RebuildArrayResponse_Result>(Arena*);
template<> ::grpc_cli::RemoveSpareRequest* Arena::CreateMaybeMessage<::grpc_cli::RemoveSpareRequest>(Arena*);
template<> ::grpc_cli::RemoveSpareRequest_Param* Arena::CreateMaybeMessage<::grpc_cli::RemoveSpareRequest_Param>(Arena*);
template<> ::grpc_cli::RemoveSpareRequest_SpareDeviceName* Arena::CreateMaybeMessage<::grpc_cli::RemoveSpareRequest_SpareDeviceName>(Arena*);
template<> ::grpc_cli::RemoveSpareResponse* Arena::CreateMaybeMessage<::grpc_cli::RemoveSpareResponse>(Arena*);
template<> ::grpc_cli::RemoveSpareResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::RemoveSpareResponse_Result>(Arena*);
template<> ::grpc_cli::ReplaceArrayDeviceRequest* Arena::CreateMaybeMessage<::grpc_cli::ReplaceArrayDeviceRequest>(Arena*);
template<> ::grpc_cli::ReplaceArrayDeviceRequest_Param* Arena::CreateMaybeMessage<::grpc_cli::ReplaceArrayDeviceRequest_Param>(Arena*);
template<> ::grpc_cli::ReplaceArrayDeviceResponse* Arena::CreateMaybeMessage<::grpc_cli::ReplaceArrayDeviceResponse>(Arena*);
template<> ::grpc_cli::ReplaceArrayDeviceResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::ReplaceArrayDeviceResponse_Result>(Arena*);
template<> ::grpc_cli::ResetEventWrrRequest* Arena::CreateMaybeMessage<::grpc_cli::ResetEventWrrRequest>(Arena*);
template<> ::grpc_cli::ResetEventWrrResponse* Arena::CreateMaybeMessage<::grpc_cli::ResetEventWrrResponse>(Arena*);
template<> ::grpc_cli::ResetEventWrrResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::ResetEventWrrResponse_Result>(Arena*);
template<> ::grpc_cli::ResetMbrRequest* Arena::CreateMaybeMessage<::grpc_cli::ResetMbrRequest>(Arena*);
template<> ::grpc_cli::ResetMbrResponse* Arena::CreateMaybeMessage<::grpc_cli::ResetMbrResponse>(Arena*);
template<> ::grpc_cli::ResetMbrResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::ResetMbrResponse_Result>(Arena*);
template<> ::grpc_cli::ScanDeviceRequest* Arena::CreateMaybeMessage<::grpc_cli::ScanDeviceRequest>(Arena*);
template<> ::grpc_cli::ScanDeviceResponse* Arena::CreateMaybeMessage<::grpc_cli::ScanDeviceResponse>(Arena*);
template<> ::grpc_cli::ScanDeviceResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::ScanDeviceResponse_Result>(Arena*);
template<> ::grpc_cli::SetLogLevelRequest* Arena::CreateMaybeMessage<::grpc_cli::SetLogLevelRequest>(Arena*);
template<> ::grpc_cli::SetLogLevelRequest_Param* Arena::CreateMaybeMessage<::grpc_cli::SetLogLevelRequest_Param>(Arena*);
template<> ::grpc_cli::SetLogLevelResponse* Arena::CreateMaybeMessage<::grpc_cli::SetLogLevelResponse>(Arena*);
template<> ::grpc_cli::SetLogLevelResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::SetLogLevelResponse_Result>(Arena*);
template<> ::grpc_cli::SetLogPreferenceRequest* Arena::CreateMaybeMessage<::grpc_cli::SetLogPreferenceRequest>(Arena*);
template<> ::grpc_cli::SetLogPreferenceRequest_Param* Arena::CreateMaybeMessage<::grpc_cli::SetLogPreferenceRequest_Param>(Arena*);
template<> ::grpc_cli::SetLogPreferenceResponse* Arena::CreateMaybeMessage<::grpc_cli::SetLogPreferenceResponse>(Arena*);
template<> ::grpc_cli::SetLogPreferenceResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::SetLogPreferenceResponse_Result>(Arena*);
template<> ::grpc_cli::SetSystemPropertyRequest* Arena::CreateMaybeMessage<::grpc_cli::SetSystemPropertyRequest>(Arena*);
template<> ::grpc_cli::SetSystemPropertyRequest_Param* Arena::CreateMaybeMessage<::grpc_cli::SetSystemPropertyRequest_Param>(Arena*);
template<> ::grpc_cli::SetSystemPropertyResponse* Arena::CreateMaybeMessage<::grpc_cli::SetSystemPropertyResponse>(Arena*);
template<> ::grpc_cli::SetSystemPropertyResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::SetSystemPropertyResponse_Result>(Arena*);
template<> ::grpc_cli::SetTelemetryPropertyRequest* Arena::CreateMaybeMessage<::grpc_cli::SetTelemetryPropertyRequest>(Arena*);
template<> ::grpc_cli::SetTelemetryPropertyRequest_Param* Arena::CreateMaybeMessage<::grpc_cli::SetTelemetryPropertyRequest_Param>(Arena*);
template<> ::grpc_cli::SetTelemetryPropertyResponse* Arena::CreateMaybeMessage<::grpc_cli::SetTelemetryPropertyResponse>(Arena*);
template<> ::grpc_cli::SetTelemetryPropertyResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::SetTelemetryPropertyResponse_Result>(Arena*);
template<> ::grpc_cli::SetVolumePropertyRequest* Arena::CreateMaybeMessage<::grpc_cli::SetVolumePropertyRequest>(Arena*);
template<> ::grpc_cli::SetVolumePropertyRequest_Param* Arena::CreateMaybeMessage<::grpc_cli::SetVolumePropertyRequest_Param>(Arena*);
template<> ::grpc_cli::SetVolumePropertyResponse* Arena::CreateMaybeMessage<::grpc_cli::SetVolumePropertyResponse>(Arena*);
template<> ::grpc_cli::SetVolumePropertyResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::SetVolumePropertyResponse_Result>(Arena*);
template<> ::grpc_cli::SmartLog* Arena::CreateMaybeMessage<::grpc_cli::SmartLog>(Arena*);
template<> ::grpc_cli::StartHaReplicationRequest* Arena::CreateMaybeMessage<::grpc_cli::StartHaReplicationRequest>(Arena*);
template<> ::grpc_cli::StartHaReplicationRequest_Param* Arena::CreateMaybeMessage<::grpc_cli::StartHaReplicationRequest_Param>(Arena*);
template<> ::grpc_cli::StartHaReplicationResponse* Arena::CreateMaybeMessage<::grpc_cli::StartHaReplicationResponse>(Arena*);
template<> ::grpc_cli::StartHaReplicationResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::StartHaReplicationResponse_Result>(Arena*);
template<> ::grpc_cli::StartSystemRequest* Arena::CreateMaybeMessage<::grpc_cli::StartSystemRequest>(Arena*);
template<> ::grpc_cli::StartTelemetryRequest* Arena::CreateMaybeMessage<::grpc_cli::StartTelemetryRequest>(Arena*);
template<> ::grpc_cli::StartTelemetryResponse* Arena::CreateMaybeMessage<::grpc_cli::StartTelemetryResponse>(Arena*);
template<> ::grpc_cli::StartTelemetryResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::StartTelemetryResponse_Result>(Arena*);
template<> ::grpc_cli::Status* Arena::CreateMaybeMessage<::grpc_cli::Status>(Arena*);
template<> ::grpc_cli::StopRebuildingRequest* Arena::CreateMaybeMessage<::grpc_cli::StopRebuildingRequest>(Arena*);
template<> ::grpc_cli::StopRebuildingRequest_Param* Arena::CreateMaybeMessage<::grpc_cli::StopRebuildingRequest_Param>(Arena*);
template<> ::grpc_cli::StopRebuildingResponse* Arena::CreateMaybeMessage<::grpc_cli::StopRebuildingResponse>(Arena*);
template<> ::grpc_cli::StopRebuildingResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::StopRebuildingResponse_Result>(Arena*);
template<> ::grpc_cli::StopSystemRequest* Arena::CreateMaybeMessage<::grpc_cli::StopSystemRequest>(Arena*);
template<> ::grpc_cli::StopSystemResponse* Arena::CreateMaybeMessage<::grpc_cli::StopSystemResponse>(Arena*);
template<> ::grpc_cli::StopSystemResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::StopSystemResponse_Result>(Arena*);
template<> ::grpc_cli::StopTelemetryRequest* Arena::CreateMaybeMessage<::grpc_cli::StopTelemetryRequest>(Arena*);
template<> ::grpc_cli::StopTelemetryResponse* Arena::CreateMaybeMessage<::grpc_cli::StopTelemetryResponse>(Arena*);
template<> ::grpc_cli::StopTelemetryResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::StopTelemetryResponse_Result>(Arena*);
template<> ::grpc_cli::Subsystem* Arena::CreateMaybeMessage<::grpc_cli::Subsystem>(Arena*);
template<> ::grpc_cli::SubsystemInfoRequest* Arena::CreateMaybeMessage<::grpc_cli::SubsystemInfoRequest>(Arena*);
template<> ::grpc_cli::SubsystemInfoRequest_Param* Arena::CreateMaybeMessage<::grpc_cli::SubsystemInfoRequest_Param>(Arena*);
template<> ::grpc_cli::SubsystemInfoResponse* Arena::CreateMaybeMessage<::grpc_cli::SubsystemInfoResponse>(Arena*);
template<> ::grpc_cli::SubsystemInfoResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::SubsystemInfoResponse_Result>(Arena*);
template<> ::grpc_cli::SubsystemInfoResponse_Result_SubsystemList* Arena::CreateMaybeMessage<::grpc_cli::SubsystemInfoResponse_Result_SubsystemList>(Arena*);
template<> ::grpc_cli::Subsystem_AddressInfo* Arena::CreateMaybeMessage<::grpc_cli::Subsystem_AddressInfo>(Arena*);
template<> ::grpc_cli::Subsystem_Host* Arena::CreateMaybeMessage<::grpc_cli::Subsystem_Host>(Arena*);
template<> ::grpc_cli::Subsystem_Namespace* Arena::CreateMaybeMessage<::grpc_cli::Subsystem_Namespace>(Arena*);
template<> ::grpc_cli::SystemInfoRequest* Arena::CreateMaybeMessage<::grpc_cli::SystemInfoRequest>(Arena*);
template<> ::grpc_cli::SystemInfoResponse* Arena::CreateMaybeMessage<::grpc_cli::SystemInfoResponse>(Arena*);
template<> ::grpc_cli::SystemInfoResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::SystemInfoResponse_Result>(Arena*);
template<> ::grpc_cli::SystemInfoResponse_Result_Data* Arena::CreateMaybeMessage<::grpc_cli::SystemInfoResponse_Result_Data>(Arena*);
template<> ::grpc_cli::UnmountArrayRequest* Arena::CreateMaybeMessage<::grpc_cli::UnmountArrayRequest>(Arena*);
template<> ::grpc_cli::UnmountArrayRequest_Param* Arena::CreateMaybeMessage<::grpc_cli::UnmountArrayRequest_Param>(Arena*);
template<> ::grpc_cli::UnmountArrayResponse* Arena::CreateMaybeMessage<::grpc_cli::UnmountArrayResponse>(Arena*);
template<> ::grpc_cli::UnmountArrayResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::UnmountArrayResponse_Result>(Arena*);
template<> ::grpc_cli::UnmountVolumeRequest* Arena::CreateMaybeMessage<::grpc_cli::UnmountVolumeRequest>(Arena*);
template<> ::grpc_cli::UnmountVolumeRequest_Param* Arena::CreateMaybeMessage<::grpc_cli::UnmountVolumeRequest_Param>(Arena*);
template<> ::grpc_cli::UnmountVolumeResponse* Arena::CreateMaybeMessage<::grpc_cli::UnmountVolumeResponse>(Arena*);
template<> ::grpc_cli::UnmountVolumeResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::UnmountVolumeResponse_Result>(Arena*);
template<> ::grpc_cli::UpdateEventWrrRequest* Arena::CreateMaybeMessage<::grpc_cli::UpdateEventWrrRequest>(Arena*);
template<> ::grpc_cli::UpdateEventWrrRequest_Param* Arena::CreateMaybeMessage<::grpc_cli::UpdateEventWrrRequest_Param>(Arena*);
template<> ::grpc_cli::UpdateEventWrrResponse* Arena::CreateMaybeMessage<::grpc_cli::UpdateEventWrrResponse>(Arena*);
template<> ::grpc_cli::UpdateEventWrrResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::UpdateEventWrrResponse_Result>(Arena*);
template<> ::grpc_cli::Volume* Arena::CreateMaybeMessage<::grpc_cli::Volume>(Arena*);
template<> ::grpc_cli::VolumeInfoRequest* Arena::CreateMaybeMessage<::grpc_cli::VolumeInfoRequest>(Arena*);
template<> ::grpc_cli::VolumeInfoRequest_Param* Arena::CreateMaybeMessage<::grpc_cli::VolumeInfoRequest_Param>(Arena*);
template<> ::grpc_cli::VolumeInfoResponse* Arena::CreateMaybeMessage<::grpc_cli::VolumeInfoResponse>(Arena*);
template<> ::grpc_cli::VolumeInfoResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::VolumeInfoResponse_Result>(Arena*);
template<> ::grpc_cli::VolumeRenameRequest* Arena::CreateMaybeMessage<::grpc_cli::VolumeRenameRequest>(Arena*);
template<> ::grpc_cli::VolumeRenameRequest_Param* Arena::CreateMaybeMessage<::grpc_cli::VolumeRenameRequest_Param>(Arena*);
template<> ::grpc_cli::VolumeRenameResponse* Arena::CreateMaybeMessage<::grpc_cli::VolumeRenameResponse>(Arena*);
template<> ::grpc_cli::VolumeRenameResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::VolumeRenameResponse_Result>(Arena*);
template<> ::grpc_cli::WBTRequest* Arena::CreateMaybeMessage<::grpc_cli::WBTRequest>(Arena*);
template<> ::grpc_cli::WBTRequest_Param* Arena::CreateMaybeMessage<::grpc_cli::WBTRequest_Param>(Arena*);
template<> ::grpc_cli::WBTRequest_Param_ArgvEntry_DoNotUse* Arena::CreateMaybeMessage<::grpc_cli::WBTRequest_Param_ArgvEntry_DoNotUse>(Arena*);
template<> ::grpc_cli::WBTResponse* Arena::CreateMaybeMessage<::grpc_cli::WBTResponse>(Arena*);
template<> ::grpc_cli::WBTResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::WBTResponse_Result>(Arena*);
template<> ::grpc_cli::WBTResponse_Result_TestData* Arena::CreateMaybeMessage<::grpc_cli::WBTResponse_Result_TestData>(Arena*);
template<> ::grpc_cli::WBTTest* Arena::CreateMaybeMessage<::grpc_cli::WBTTest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpc_cli {

// ===================================================================

class Status PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.Status) */ {
 public:
  inline Status() : Status(nullptr) {}
  virtual ~Status();
  explicit constexpr Status(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Status(const Status& from);
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Status& default_instance() {
    return *internal_default_instance();
  }
  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }
  inline void Swap(Status* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Status* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Status* New() const final {
    return CreateMaybeMessage<Status>(nullptr);
  }

  Status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Status* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.Status";
  }
  protected:
  explicit Status(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kCauseFieldNumber = 4,
    kSolutionFieldNumber = 5,
    kMessageFieldNumber = 6,
    kCodeFieldNumber = 1,
  };
  // string event_name = 2;
  bool has_event_name() const;
  private:
  bool _internal_has_event_name() const;
  public:
  void clear_event_name();
  const std::string& event_name() const;
  void set_event_name(const std::string& value);
  void set_event_name(std::string&& value);
  void set_event_name(const char* value);
  void set_event_name(const char* value, size_t size);
  std::string* mutable_event_name();
  std::string* release_event_name();
  void set_allocated_event_name(std::string* event_name);
  private:
  const std::string& _internal_event_name() const;
  void _internal_set_event_name(const std::string& value);
  std::string* _internal_mutable_event_name();
  public:

  // string description = 3;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string cause = 4;
  bool has_cause() const;
  private:
  bool _internal_has_cause() const;
  public:
  void clear_cause();
  const std::string& cause() const;
  void set_cause(const std::string& value);
  void set_cause(std::string&& value);
  void set_cause(const char* value);
  void set_cause(const char* value, size_t size);
  std::string* mutable_cause();
  std::string* release_cause();
  void set_allocated_cause(std::string* cause);
  private:
  const std::string& _internal_cause() const;
  void _internal_set_cause(const std::string& value);
  std::string* _internal_mutable_cause();
  public:

  // string solution = 5;
  bool has_solution() const;
  private:
  bool _internal_has_solution() const;
  public:
  void clear_solution();
  const std::string& solution() const;
  void set_solution(const std::string& value);
  void set_solution(std::string&& value);
  void set_solution(const char* value);
  void set_solution(const char* value, size_t size);
  std::string* mutable_solution();
  std::string* release_solution();
  void set_allocated_solution(std::string* solution);
  private:
  const std::string& _internal_solution() const;
  void _internal_set_solution(const std::string& value);
  std::string* _internal_mutable_solution();
  public:

  // string message = 6;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 code = 1;
  bool has_code() const;
  private:
  bool _internal_has_code() const;
  public:
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.Status)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cause_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr solution_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class PosInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.PosInfo) */ {
 public:
  inline PosInfo() : PosInfo(nullptr) {}
  virtual ~PosInfo();
  explicit constexpr PosInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PosInfo(const PosInfo& from);
  PosInfo(PosInfo&& from) noexcept
    : PosInfo() {
    *this = ::std::move(from);
  }

  inline PosInfo& operator=(const PosInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PosInfo& operator=(PosInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PosInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PosInfo* internal_default_instance() {
    return reinterpret_cast<const PosInfo*>(
               &_PosInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PosInfo& a, PosInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PosInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PosInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PosInfo* New() const final {
    return CreateMaybeMessage<PosInfo>(nullptr);
  }

  PosInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PosInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PosInfo& from);
  void MergeFrom(const PosInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PosInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.PosInfo";
  }
  protected:
  explicit PosInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.PosInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class StartSystemRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.StartSystemRequest) */ {
 public:
  inline StartSystemRequest() : StartSystemRequest(nullptr) {}
  virtual ~StartSystemRequest();
  explicit constexpr StartSystemRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartSystemRequest(const StartSystemRequest& from);
  StartSystemRequest(StartSystemRequest&& from) noexcept
    : StartSystemRequest() {
    *this = ::std::move(from);
  }

  inline StartSystemRequest& operator=(const StartSystemRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartSystemRequest& operator=(StartSystemRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartSystemRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartSystemRequest* internal_default_instance() {
    return reinterpret_cast<const StartSystemRequest*>(
               &_StartSystemRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StartSystemRequest& a, StartSystemRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartSystemRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartSystemRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartSystemRequest* New() const final {
    return CreateMaybeMessage<StartSystemRequest>(nullptr);
  }

  StartSystemRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartSystemRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartSystemRequest& from);
  void MergeFrom(const StartSystemRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartSystemRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.StartSystemRequest";
  }
  protected:
  explicit StartSystemRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.StartSystemRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class SystemInfoRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.SystemInfoRequest) */ {
 public:
  inline SystemInfoRequest() : SystemInfoRequest(nullptr) {}
  virtual ~SystemInfoRequest();
  explicit constexpr SystemInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SystemInfoRequest(const SystemInfoRequest& from);
  SystemInfoRequest(SystemInfoRequest&& from) noexcept
    : SystemInfoRequest() {
    *this = ::std::move(from);
  }

  inline SystemInfoRequest& operator=(const SystemInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemInfoRequest& operator=(SystemInfoRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SystemInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SystemInfoRequest* internal_default_instance() {
    return reinterpret_cast<const SystemInfoRequest*>(
               &_SystemInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SystemInfoRequest& a, SystemInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemInfoRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemInfoRequest* New() const final {
    return CreateMaybeMessage<SystemInfoRequest>(nullptr);
  }

  SystemInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SystemInfoRequest& from);
  void MergeFrom(const SystemInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.SystemInfoRequest";
  }
  protected:
  explicit SystemInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.SystemInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class SystemInfoResponse_Result_Data PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.SystemInfoResponse.Result.Data) */ {
 public:
  inline SystemInfoResponse_Result_Data() : SystemInfoResponse_Result_Data(nullptr) {}
  virtual ~SystemInfoResponse_Result_Data();
  explicit constexpr SystemInfoResponse_Result_Data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SystemInfoResponse_Result_Data(const SystemInfoResponse_Result_Data& from);
  SystemInfoResponse_Result_Data(SystemInfoResponse_Result_Data&& from) noexcept
    : SystemInfoResponse_Result_Data() {
    *this = ::std::move(from);
  }

  inline SystemInfoResponse_Result_Data& operator=(const SystemInfoResponse_Result_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemInfoResponse_Result_Data& operator=(SystemInfoResponse_Result_Data&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SystemInfoResponse_Result_Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const SystemInfoResponse_Result_Data* internal_default_instance() {
    return reinterpret_cast<const SystemInfoResponse_Result_Data*>(
               &_SystemInfoResponse_Result_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SystemInfoResponse_Result_Data& a, SystemInfoResponse_Result_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemInfoResponse_Result_Data* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemInfoResponse_Result_Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemInfoResponse_Result_Data* New() const final {
    return CreateMaybeMessage<SystemInfoResponse_Result_Data>(nullptr);
  }

  SystemInfoResponse_Result_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemInfoResponse_Result_Data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SystemInfoResponse_Result_Data& from);
  void MergeFrom(const SystemInfoResponse_Result_Data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemInfoResponse_Result_Data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.SystemInfoResponse.Result.Data";
  }
  protected:
  explicit SystemInfoResponse_Result_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kBiosVersionFieldNumber = 2,
    kBiosVendorFieldNumber = 3,
    kBiosReleaseDateFieldNumber = 4,
    kSystemManufacturerFieldNumber = 5,
    kSystemProductNameFieldNumber = 6,
    kSystemSerialNumberFieldNumber = 7,
    kSystemUuidFieldNumber = 8,
    kBaseboardManufacturerFieldNumber = 9,
    kBaseboardProductNameFieldNumber = 10,
    kBaseboardSerialNumberFieldNumber = 11,
    kBaseboardVersionFieldNumber = 12,
    kProcessorManufacturerFieldNumber = 13,
    kProcessorVersionFieldNumber = 14,
    kProcessorFrequencyFieldNumber = 15,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string biosVersion = 2;
  void clear_biosversion();
  const std::string& biosversion() const;
  void set_biosversion(const std::string& value);
  void set_biosversion(std::string&& value);
  void set_biosversion(const char* value);
  void set_biosversion(const char* value, size_t size);
  std::string* mutable_biosversion();
  std::string* release_biosversion();
  void set_allocated_biosversion(std::string* biosversion);
  private:
  const std::string& _internal_biosversion() const;
  void _internal_set_biosversion(const std::string& value);
  std::string* _internal_mutable_biosversion();
  public:

  // string biosVendor = 3;
  void clear_biosvendor();
  const std::string& biosvendor() const;
  void set_biosvendor(const std::string& value);
  void set_biosvendor(std::string&& value);
  void set_biosvendor(const char* value);
  void set_biosvendor(const char* value, size_t size);
  std::string* mutable_biosvendor();
  std::string* release_biosvendor();
  void set_allocated_biosvendor(std::string* biosvendor);
  private:
  const std::string& _internal_biosvendor() const;
  void _internal_set_biosvendor(const std::string& value);
  std::string* _internal_mutable_biosvendor();
  public:

  // string biosReleaseDate = 4;
  void clear_biosreleasedate();
  const std::string& biosreleasedate() const;
  void set_biosreleasedate(const std::string& value);
  void set_biosreleasedate(std::string&& value);
  void set_biosreleasedate(const char* value);
  void set_biosreleasedate(const char* value, size_t size);
  std::string* mutable_biosreleasedate();
  std::string* release_biosreleasedate();
  void set_allocated_biosreleasedate(std::string* biosreleasedate);
  private:
  const std::string& _internal_biosreleasedate() const;
  void _internal_set_biosreleasedate(const std::string& value);
  std::string* _internal_mutable_biosreleasedate();
  public:

  // string systemManufacturer = 5;
  void clear_systemmanufacturer();
  const std::string& systemmanufacturer() const;
  void set_systemmanufacturer(const std::string& value);
  void set_systemmanufacturer(std::string&& value);
  void set_systemmanufacturer(const char* value);
  void set_systemmanufacturer(const char* value, size_t size);
  std::string* mutable_systemmanufacturer();
  std::string* release_systemmanufacturer();
  void set_allocated_systemmanufacturer(std::string* systemmanufacturer);
  private:
  const std::string& _internal_systemmanufacturer() const;
  void _internal_set_systemmanufacturer(const std::string& value);
  std::string* _internal_mutable_systemmanufacturer();
  public:

  // string systemProductName = 6;
  void clear_systemproductname();
  const std::string& systemproductname() const;
  void set_systemproductname(const std::string& value);
  void set_systemproductname(std::string&& value);
  void set_systemproductname(const char* value);
  void set_systemproductname(const char* value, size_t size);
  std::string* mutable_systemproductname();
  std::string* release_systemproductname();
  void set_allocated_systemproductname(std::string* systemproductname);
  private:
  const std::string& _internal_systemproductname() const;
  void _internal_set_systemproductname(const std::string& value);
  std::string* _internal_mutable_systemproductname();
  public:

  // string systemSerialNumber = 7;
  void clear_systemserialnumber();
  const std::string& systemserialnumber() const;
  void set_systemserialnumber(const std::string& value);
  void set_systemserialnumber(std::string&& value);
  void set_systemserialnumber(const char* value);
  void set_systemserialnumber(const char* value, size_t size);
  std::string* mutable_systemserialnumber();
  std::string* release_systemserialnumber();
  void set_allocated_systemserialnumber(std::string* systemserialnumber);
  private:
  const std::string& _internal_systemserialnumber() const;
  void _internal_set_systemserialnumber(const std::string& value);
  std::string* _internal_mutable_systemserialnumber();
  public:

  // string systemUuid = 8;
  void clear_systemuuid();
  const std::string& systemuuid() const;
  void set_systemuuid(const std::string& value);
  void set_systemuuid(std::string&& value);
  void set_systemuuid(const char* value);
  void set_systemuuid(const char* value, size_t size);
  std::string* mutable_systemuuid();
  std::string* release_systemuuid();
  void set_allocated_systemuuid(std::string* systemuuid);
  private:
  const std::string& _internal_systemuuid() const;
  void _internal_set_systemuuid(const std::string& value);
  std::string* _internal_mutable_systemuuid();
  public:

  // string baseboardManufacturer = 9;
  void clear_baseboardmanufacturer();
  const std::string& baseboardmanufacturer() const;
  void set_baseboardmanufacturer(const std::string& value);
  void set_baseboardmanufacturer(std::string&& value);
  void set_baseboardmanufacturer(const char* value);
  void set_baseboardmanufacturer(const char* value, size_t size);
  std::string* mutable_baseboardmanufacturer();
  std::string* release_baseboardmanufacturer();
  void set_allocated_baseboardmanufacturer(std::string* baseboardmanufacturer);
  private:
  const std::string& _internal_baseboardmanufacturer() const;
  void _internal_set_baseboardmanufacturer(const std::string& value);
  std::string* _internal_mutable_baseboardmanufacturer();
  public:

  // string baseboardProductName = 10;
  void clear_baseboardproductname();
  const std::string& baseboardproductname() const;
  void set_baseboardproductname(const std::string& value);
  void set_baseboardproductname(std::string&& value);
  void set_baseboardproductname(const char* value);
  void set_baseboardproductname(const char* value, size_t size);
  std::string* mutable_baseboardproductname();
  std::string* release_baseboardproductname();
  void set_allocated_baseboardproductname(std::string* baseboardproductname);
  private:
  const std::string& _internal_baseboardproductname() const;
  void _internal_set_baseboardproductname(const std::string& value);
  std::string* _internal_mutable_baseboardproductname();
  public:

  // string baseboardSerialNumber = 11;
  void clear_baseboardserialnumber();
  const std::string& baseboardserialnumber() const;
  void set_baseboardserialnumber(const std::string& value);
  void set_baseboardserialnumber(std::string&& value);
  void set_baseboardserialnumber(const char* value);
  void set_baseboardserialnumber(const char* value, size_t size);
  std::string* mutable_baseboardserialnumber();
  std::string* release_baseboardserialnumber();
  void set_allocated_baseboardserialnumber(std::string* baseboardserialnumber);
  private:
  const std::string& _internal_baseboardserialnumber() const;
  void _internal_set_baseboardserialnumber(const std::string& value);
  std::string* _internal_mutable_baseboardserialnumber();
  public:

  // string baseboardVersion = 12;
  void clear_baseboardversion();
  const std::string& baseboardversion() const;
  void set_baseboardversion(const std::string& value);
  void set_baseboardversion(std::string&& value);
  void set_baseboardversion(const char* value);
  void set_baseboardversion(const char* value, size_t size);
  std::string* mutable_baseboardversion();
  std::string* release_baseboardversion();
  void set_allocated_baseboardversion(std::string* baseboardversion);
  private:
  const std::string& _internal_baseboardversion() const;
  void _internal_set_baseboardversion(const std::string& value);
  std::string* _internal_mutable_baseboardversion();
  public:

  // string processorManufacturer = 13;
  void clear_processormanufacturer();
  const std::string& processormanufacturer() const;
  void set_processormanufacturer(const std::string& value);
  void set_processormanufacturer(std::string&& value);
  void set_processormanufacturer(const char* value);
  void set_processormanufacturer(const char* value, size_t size);
  std::string* mutable_processormanufacturer();
  std::string* release_processormanufacturer();
  void set_allocated_processormanufacturer(std::string* processormanufacturer);
  private:
  const std::string& _internal_processormanufacturer() const;
  void _internal_set_processormanufacturer(const std::string& value);
  std::string* _internal_mutable_processormanufacturer();
  public:

  // string processorVersion = 14;
  void clear_processorversion();
  const std::string& processorversion() const;
  void set_processorversion(const std::string& value);
  void set_processorversion(std::string&& value);
  void set_processorversion(const char* value);
  void set_processorversion(const char* value, size_t size);
  std::string* mutable_processorversion();
  std::string* release_processorversion();
  void set_allocated_processorversion(std::string* processorversion);
  private:
  const std::string& _internal_processorversion() const;
  void _internal_set_processorversion(const std::string& value);
  std::string* _internal_mutable_processorversion();
  public:

  // string processorFrequency = 15;
  void clear_processorfrequency();
  const std::string& processorfrequency() const;
  void set_processorfrequency(const std::string& value);
  void set_processorfrequency(std::string&& value);
  void set_processorfrequency(const char* value);
  void set_processorfrequency(const char* value, size_t size);
  std::string* mutable_processorfrequency();
  std::string* release_processorfrequency();
  void set_allocated_processorfrequency(std::string* processorfrequency);
  private:
  const std::string& _internal_processorfrequency() const;
  void _internal_set_processorfrequency(const std::string& value);
  std::string* _internal_mutable_processorfrequency();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.SystemInfoResponse.Result.Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr biosversion_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr biosvendor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr biosreleasedate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr systemmanufacturer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr systemproductname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr systemserialnumber_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr systemuuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr baseboardmanufacturer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr baseboardproductname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr baseboardserialnumber_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr baseboardversion_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr processormanufacturer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr processorversion_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr processorfrequency_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class SystemInfoResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.SystemInfoResponse.Result) */ {
 public:
  inline SystemInfoResponse_Result() : SystemInfoResponse_Result(nullptr) {}
  virtual ~SystemInfoResponse_Result();
  explicit constexpr SystemInfoResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SystemInfoResponse_Result(const SystemInfoResponse_Result& from);
  SystemInfoResponse_Result(SystemInfoResponse_Result&& from) noexcept
    : SystemInfoResponse_Result() {
    *this = ::std::move(from);
  }

  inline SystemInfoResponse_Result& operator=(const SystemInfoResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemInfoResponse_Result& operator=(SystemInfoResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SystemInfoResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const SystemInfoResponse_Result* internal_default_instance() {
    return reinterpret_cast<const SystemInfoResponse_Result*>(
               &_SystemInfoResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SystemInfoResponse_Result& a, SystemInfoResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemInfoResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemInfoResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemInfoResponse_Result* New() const final {
    return CreateMaybeMessage<SystemInfoResponse_Result>(nullptr);
  }

  SystemInfoResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemInfoResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SystemInfoResponse_Result& from);
  void MergeFrom(const SystemInfoResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemInfoResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.SystemInfoResponse.Result";
  }
  protected:
  explicit SystemInfoResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef SystemInfoResponse_Result_Data Data;

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // .grpc_cli.SystemInfoResponse.Result.Data data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::grpc_cli::SystemInfoResponse_Result_Data& data() const;
  ::grpc_cli::SystemInfoResponse_Result_Data* release_data();
  ::grpc_cli::SystemInfoResponse_Result_Data* mutable_data();
  void set_allocated_data(::grpc_cli::SystemInfoResponse_Result_Data* data);
  private:
  const ::grpc_cli::SystemInfoResponse_Result_Data& _internal_data() const;
  ::grpc_cli::SystemInfoResponse_Result_Data* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::grpc_cli::SystemInfoResponse_Result_Data* data);
  ::grpc_cli::SystemInfoResponse_Result_Data* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:grpc_cli.SystemInfoResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  ::grpc_cli::SystemInfoResponse_Result_Data* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class SystemInfoResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.SystemInfoResponse) */ {
 public:
  inline SystemInfoResponse() : SystemInfoResponse(nullptr) {}
  virtual ~SystemInfoResponse();
  explicit constexpr SystemInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SystemInfoResponse(const SystemInfoResponse& from);
  SystemInfoResponse(SystemInfoResponse&& from) noexcept
    : SystemInfoResponse() {
    *this = ::std::move(from);
  }

  inline SystemInfoResponse& operator=(const SystemInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemInfoResponse& operator=(SystemInfoResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SystemInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SystemInfoResponse* internal_default_instance() {
    return reinterpret_cast<const SystemInfoResponse*>(
               &_SystemInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SystemInfoResponse& a, SystemInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemInfoResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemInfoResponse* New() const final {
    return CreateMaybeMessage<SystemInfoResponse>(nullptr);
  }

  SystemInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SystemInfoResponse& from);
  void MergeFrom(const SystemInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.SystemInfoResponse";
  }
  protected:
  explicit SystemInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef SystemInfoResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.SystemInfoResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::SystemInfoResponse_Result& result() const;
  ::grpc_cli::SystemInfoResponse_Result* release_result();
  ::grpc_cli::SystemInfoResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::SystemInfoResponse_Result* result);
  private:
  const ::grpc_cli::SystemInfoResponse_Result& _internal_result() const;
  ::grpc_cli::SystemInfoResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::SystemInfoResponse_Result* result);
  ::grpc_cli::SystemInfoResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.SystemInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::SystemInfoResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class StopSystemRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.StopSystemRequest) */ {
 public:
  inline StopSystemRequest() : StopSystemRequest(nullptr) {}
  virtual ~StopSystemRequest();
  explicit constexpr StopSystemRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopSystemRequest(const StopSystemRequest& from);
  StopSystemRequest(StopSystemRequest&& from) noexcept
    : StopSystemRequest() {
    *this = ::std::move(from);
  }

  inline StopSystemRequest& operator=(const StopSystemRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopSystemRequest& operator=(StopSystemRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopSystemRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopSystemRequest* internal_default_instance() {
    return reinterpret_cast<const StopSystemRequest*>(
               &_StopSystemRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(StopSystemRequest& a, StopSystemRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StopSystemRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopSystemRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopSystemRequest* New() const final {
    return CreateMaybeMessage<StopSystemRequest>(nullptr);
  }

  StopSystemRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopSystemRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopSystemRequest& from);
  void MergeFrom(const StopSystemRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopSystemRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.StopSystemRequest";
  }
  protected:
  explicit StopSystemRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.StopSystemRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class StopSystemResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.StopSystemResponse.Result) */ {
 public:
  inline StopSystemResponse_Result() : StopSystemResponse_Result(nullptr) {}
  virtual ~StopSystemResponse_Result();
  explicit constexpr StopSystemResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopSystemResponse_Result(const StopSystemResponse_Result& from);
  StopSystemResponse_Result(StopSystemResponse_Result&& from) noexcept
    : StopSystemResponse_Result() {
    *this = ::std::move(from);
  }

  inline StopSystemResponse_Result& operator=(const StopSystemResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopSystemResponse_Result& operator=(StopSystemResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopSystemResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopSystemResponse_Result* internal_default_instance() {
    return reinterpret_cast<const StopSystemResponse_Result*>(
               &_StopSystemResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(StopSystemResponse_Result& a, StopSystemResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(StopSystemResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopSystemResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopSystemResponse_Result* New() const final {
    return CreateMaybeMessage<StopSystemResponse_Result>(nullptr);
  }

  StopSystemResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopSystemResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopSystemResponse_Result& from);
  void MergeFrom(const StopSystemResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopSystemResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.StopSystemResponse.Result";
  }
  protected:
  explicit StopSystemResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:grpc_cli.StopSystemResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class StopSystemResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.StopSystemResponse) */ {
 public:
  inline StopSystemResponse() : StopSystemResponse(nullptr) {}
  virtual ~StopSystemResponse();
  explicit constexpr StopSystemResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopSystemResponse(const StopSystemResponse& from);
  StopSystemResponse(StopSystemResponse&& from) noexcept
    : StopSystemResponse() {
    *this = ::std::move(from);
  }

  inline StopSystemResponse& operator=(const StopSystemResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopSystemResponse& operator=(StopSystemResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopSystemResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopSystemResponse* internal_default_instance() {
    return reinterpret_cast<const StopSystemResponse*>(
               &_StopSystemResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(StopSystemResponse& a, StopSystemResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StopSystemResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopSystemResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopSystemResponse* New() const final {
    return CreateMaybeMessage<StopSystemResponse>(nullptr);
  }

  StopSystemResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopSystemResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopSystemResponse& from);
  void MergeFrom(const StopSystemResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopSystemResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.StopSystemResponse";
  }
  protected:
  explicit StopSystemResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef StopSystemResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.StopSystemResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::StopSystemResponse_Result& result() const;
  ::grpc_cli::StopSystemResponse_Result* release_result();
  ::grpc_cli::StopSystemResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::StopSystemResponse_Result* result);
  private:
  const ::grpc_cli::StopSystemResponse_Result& _internal_result() const;
  ::grpc_cli::StopSystemResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::StopSystemResponse_Result* result);
  ::grpc_cli::StopSystemResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.StopSystemResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::StopSystemResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class GetSystemPropertyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.GetSystemPropertyRequest) */ {
 public:
  inline GetSystemPropertyRequest() : GetSystemPropertyRequest(nullptr) {}
  virtual ~GetSystemPropertyRequest();
  explicit constexpr GetSystemPropertyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSystemPropertyRequest(const GetSystemPropertyRequest& from);
  GetSystemPropertyRequest(GetSystemPropertyRequest&& from) noexcept
    : GetSystemPropertyRequest() {
    *this = ::std::move(from);
  }

  inline GetSystemPropertyRequest& operator=(const GetSystemPropertyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSystemPropertyRequest& operator=(GetSystemPropertyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSystemPropertyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSystemPropertyRequest* internal_default_instance() {
    return reinterpret_cast<const GetSystemPropertyRequest*>(
               &_GetSystemPropertyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetSystemPropertyRequest& a, GetSystemPropertyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSystemPropertyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSystemPropertyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSystemPropertyRequest* New() const final {
    return CreateMaybeMessage<GetSystemPropertyRequest>(nullptr);
  }

  GetSystemPropertyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSystemPropertyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSystemPropertyRequest& from);
  void MergeFrom(const GetSystemPropertyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSystemPropertyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.GetSystemPropertyRequest";
  }
  protected:
  explicit GetSystemPropertyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.GetSystemPropertyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class GetSystemPropertyResponse_Result_Data PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.GetSystemPropertyResponse.Result.Data) */ {
 public:
  inline GetSystemPropertyResponse_Result_Data() : GetSystemPropertyResponse_Result_Data(nullptr) {}
  virtual ~GetSystemPropertyResponse_Result_Data();
  explicit constexpr GetSystemPropertyResponse_Result_Data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSystemPropertyResponse_Result_Data(const GetSystemPropertyResponse_Result_Data& from);
  GetSystemPropertyResponse_Result_Data(GetSystemPropertyResponse_Result_Data&& from) noexcept
    : GetSystemPropertyResponse_Result_Data() {
    *this = ::std::move(from);
  }

  inline GetSystemPropertyResponse_Result_Data& operator=(const GetSystemPropertyResponse_Result_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSystemPropertyResponse_Result_Data& operator=(GetSystemPropertyResponse_Result_Data&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSystemPropertyResponse_Result_Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSystemPropertyResponse_Result_Data* internal_default_instance() {
    return reinterpret_cast<const GetSystemPropertyResponse_Result_Data*>(
               &_GetSystemPropertyResponse_Result_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetSystemPropertyResponse_Result_Data& a, GetSystemPropertyResponse_Result_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSystemPropertyResponse_Result_Data* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSystemPropertyResponse_Result_Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSystemPropertyResponse_Result_Data* New() const final {
    return CreateMaybeMessage<GetSystemPropertyResponse_Result_Data>(nullptr);
  }

  GetSystemPropertyResponse_Result_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSystemPropertyResponse_Result_Data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSystemPropertyResponse_Result_Data& from);
  void MergeFrom(const GetSystemPropertyResponse_Result_Data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSystemPropertyResponse_Result_Data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.GetSystemPropertyResponse.Result.Data";
  }
  protected:
  explicit GetSystemPropertyResponse_Result_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRebuildPolicyFieldNumber = 1,
  };
  // string rebuild_policy = 1;
  void clear_rebuild_policy();
  const std::string& rebuild_policy() const;
  void set_rebuild_policy(const std::string& value);
  void set_rebuild_policy(std::string&& value);
  void set_rebuild_policy(const char* value);
  void set_rebuild_policy(const char* value, size_t size);
  std::string* mutable_rebuild_policy();
  std::string* release_rebuild_policy();
  void set_allocated_rebuild_policy(std::string* rebuild_policy);
  private:
  const std::string& _internal_rebuild_policy() const;
  void _internal_set_rebuild_policy(const std::string& value);
  std::string* _internal_mutable_rebuild_policy();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.GetSystemPropertyResponse.Result.Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rebuild_policy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class GetSystemPropertyResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.GetSystemPropertyResponse.Result) */ {
 public:
  inline GetSystemPropertyResponse_Result() : GetSystemPropertyResponse_Result(nullptr) {}
  virtual ~GetSystemPropertyResponse_Result();
  explicit constexpr GetSystemPropertyResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSystemPropertyResponse_Result(const GetSystemPropertyResponse_Result& from);
  GetSystemPropertyResponse_Result(GetSystemPropertyResponse_Result&& from) noexcept
    : GetSystemPropertyResponse_Result() {
    *this = ::std::move(from);
  }

  inline GetSystemPropertyResponse_Result& operator=(const GetSystemPropertyResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSystemPropertyResponse_Result& operator=(GetSystemPropertyResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSystemPropertyResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSystemPropertyResponse_Result* internal_default_instance() {
    return reinterpret_cast<const GetSystemPropertyResponse_Result*>(
               &_GetSystemPropertyResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetSystemPropertyResponse_Result& a, GetSystemPropertyResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSystemPropertyResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSystemPropertyResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSystemPropertyResponse_Result* New() const final {
    return CreateMaybeMessage<GetSystemPropertyResponse_Result>(nullptr);
  }

  GetSystemPropertyResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSystemPropertyResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSystemPropertyResponse_Result& from);
  void MergeFrom(const GetSystemPropertyResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSystemPropertyResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.GetSystemPropertyResponse.Result";
  }
  protected:
  explicit GetSystemPropertyResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetSystemPropertyResponse_Result_Data Data;

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // .grpc_cli.GetSystemPropertyResponse.Result.Data data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::grpc_cli::GetSystemPropertyResponse_Result_Data& data() const;
  ::grpc_cli::GetSystemPropertyResponse_Result_Data* release_data();
  ::grpc_cli::GetSystemPropertyResponse_Result_Data* mutable_data();
  void set_allocated_data(::grpc_cli::GetSystemPropertyResponse_Result_Data* data);
  private:
  const ::grpc_cli::GetSystemPropertyResponse_Result_Data& _internal_data() const;
  ::grpc_cli::GetSystemPropertyResponse_Result_Data* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::grpc_cli::GetSystemPropertyResponse_Result_Data* data);
  ::grpc_cli::GetSystemPropertyResponse_Result_Data* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:grpc_cli.GetSystemPropertyResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  ::grpc_cli::GetSystemPropertyResponse_Result_Data* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class GetSystemPropertyResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.GetSystemPropertyResponse) */ {
 public:
  inline GetSystemPropertyResponse() : GetSystemPropertyResponse(nullptr) {}
  virtual ~GetSystemPropertyResponse();
  explicit constexpr GetSystemPropertyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSystemPropertyResponse(const GetSystemPropertyResponse& from);
  GetSystemPropertyResponse(GetSystemPropertyResponse&& from) noexcept
    : GetSystemPropertyResponse() {
    *this = ::std::move(from);
  }

  inline GetSystemPropertyResponse& operator=(const GetSystemPropertyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSystemPropertyResponse& operator=(GetSystemPropertyResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSystemPropertyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSystemPropertyResponse* internal_default_instance() {
    return reinterpret_cast<const GetSystemPropertyResponse*>(
               &_GetSystemPropertyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GetSystemPropertyResponse& a, GetSystemPropertyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSystemPropertyResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSystemPropertyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSystemPropertyResponse* New() const final {
    return CreateMaybeMessage<GetSystemPropertyResponse>(nullptr);
  }

  GetSystemPropertyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSystemPropertyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSystemPropertyResponse& from);
  void MergeFrom(const GetSystemPropertyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSystemPropertyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.GetSystemPropertyResponse";
  }
  protected:
  explicit GetSystemPropertyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetSystemPropertyResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.GetSystemPropertyResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::GetSystemPropertyResponse_Result& result() const;
  ::grpc_cli::GetSystemPropertyResponse_Result* release_result();
  ::grpc_cli::GetSystemPropertyResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::GetSystemPropertyResponse_Result* result);
  private:
  const ::grpc_cli::GetSystemPropertyResponse_Result& _internal_result() const;
  ::grpc_cli::GetSystemPropertyResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::GetSystemPropertyResponse_Result* result);
  ::grpc_cli::GetSystemPropertyResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.GetSystemPropertyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::GetSystemPropertyResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class SetSystemPropertyRequest_Param PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.SetSystemPropertyRequest.Param) */ {
 public:
  inline SetSystemPropertyRequest_Param() : SetSystemPropertyRequest_Param(nullptr) {}
  virtual ~SetSystemPropertyRequest_Param();
  explicit constexpr SetSystemPropertyRequest_Param(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetSystemPropertyRequest_Param(const SetSystemPropertyRequest_Param& from);
  SetSystemPropertyRequest_Param(SetSystemPropertyRequest_Param&& from) noexcept
    : SetSystemPropertyRequest_Param() {
    *this = ::std::move(from);
  }

  inline SetSystemPropertyRequest_Param& operator=(const SetSystemPropertyRequest_Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetSystemPropertyRequest_Param& operator=(SetSystemPropertyRequest_Param&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetSystemPropertyRequest_Param& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetSystemPropertyRequest_Param* internal_default_instance() {
    return reinterpret_cast<const SetSystemPropertyRequest_Param*>(
               &_SetSystemPropertyRequest_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SetSystemPropertyRequest_Param& a, SetSystemPropertyRequest_Param& b) {
    a.Swap(&b);
  }
  inline void Swap(SetSystemPropertyRequest_Param* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetSystemPropertyRequest_Param* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetSystemPropertyRequest_Param* New() const final {
    return CreateMaybeMessage<SetSystemPropertyRequest_Param>(nullptr);
  }

  SetSystemPropertyRequest_Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetSystemPropertyRequest_Param>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetSystemPropertyRequest_Param& from);
  void MergeFrom(const SetSystemPropertyRequest_Param& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetSystemPropertyRequest_Param* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.SetSystemPropertyRequest.Param";
  }
  protected:
  explicit SetSystemPropertyRequest_Param(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLevelFieldNumber = 1,
  };
  // string level = 1;
  void clear_level();
  const std::string& level() const;
  void set_level(const std::string& value);
  void set_level(std::string&& value);
  void set_level(const char* value);
  void set_level(const char* value, size_t size);
  std::string* mutable_level();
  std::string* release_level();
  void set_allocated_level(std::string* level);
  private:
  const std::string& _internal_level() const;
  void _internal_set_level(const std::string& value);
  std::string* _internal_mutable_level();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.SetSystemPropertyRequest.Param)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class SetSystemPropertyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.SetSystemPropertyRequest) */ {
 public:
  inline SetSystemPropertyRequest() : SetSystemPropertyRequest(nullptr) {}
  virtual ~SetSystemPropertyRequest();
  explicit constexpr SetSystemPropertyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetSystemPropertyRequest(const SetSystemPropertyRequest& from);
  SetSystemPropertyRequest(SetSystemPropertyRequest&& from) noexcept
    : SetSystemPropertyRequest() {
    *this = ::std::move(from);
  }

  inline SetSystemPropertyRequest& operator=(const SetSystemPropertyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetSystemPropertyRequest& operator=(SetSystemPropertyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetSystemPropertyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetSystemPropertyRequest* internal_default_instance() {
    return reinterpret_cast<const SetSystemPropertyRequest*>(
               &_SetSystemPropertyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SetSystemPropertyRequest& a, SetSystemPropertyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetSystemPropertyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetSystemPropertyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetSystemPropertyRequest* New() const final {
    return CreateMaybeMessage<SetSystemPropertyRequest>(nullptr);
  }

  SetSystemPropertyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetSystemPropertyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetSystemPropertyRequest& from);
  void MergeFrom(const SetSystemPropertyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetSystemPropertyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.SetSystemPropertyRequest";
  }
  protected:
  explicit SetSystemPropertyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef SetSystemPropertyRequest_Param Param;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
    kParamFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // .grpc_cli.SetSystemPropertyRequest.Param param = 4;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::grpc_cli::SetSystemPropertyRequest_Param& param() const;
  ::grpc_cli::SetSystemPropertyRequest_Param* release_param();
  ::grpc_cli::SetSystemPropertyRequest_Param* mutable_param();
  void set_allocated_param(::grpc_cli::SetSystemPropertyRequest_Param* param);
  private:
  const ::grpc_cli::SetSystemPropertyRequest_Param& _internal_param() const;
  ::grpc_cli::SetSystemPropertyRequest_Param* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::grpc_cli::SetSystemPropertyRequest_Param* param);
  ::grpc_cli::SetSystemPropertyRequest_Param* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:grpc_cli.SetSystemPropertyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  ::grpc_cli::SetSystemPropertyRequest_Param* param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class SetSystemPropertyResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.SetSystemPropertyResponse.Result) */ {
 public:
  inline SetSystemPropertyResponse_Result() : SetSystemPropertyResponse_Result(nullptr) {}
  virtual ~SetSystemPropertyResponse_Result();
  explicit constexpr SetSystemPropertyResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetSystemPropertyResponse_Result(const SetSystemPropertyResponse_Result& from);
  SetSystemPropertyResponse_Result(SetSystemPropertyResponse_Result&& from) noexcept
    : SetSystemPropertyResponse_Result() {
    *this = ::std::move(from);
  }

  inline SetSystemPropertyResponse_Result& operator=(const SetSystemPropertyResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetSystemPropertyResponse_Result& operator=(SetSystemPropertyResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetSystemPropertyResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetSystemPropertyResponse_Result* internal_default_instance() {
    return reinterpret_cast<const SetSystemPropertyResponse_Result*>(
               &_SetSystemPropertyResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SetSystemPropertyResponse_Result& a, SetSystemPropertyResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(SetSystemPropertyResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetSystemPropertyResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetSystemPropertyResponse_Result* New() const final {
    return CreateMaybeMessage<SetSystemPropertyResponse_Result>(nullptr);
  }

  SetSystemPropertyResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetSystemPropertyResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetSystemPropertyResponse_Result& from);
  void MergeFrom(const SetSystemPropertyResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetSystemPropertyResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.SetSystemPropertyResponse.Result";
  }
  protected:
  explicit SetSystemPropertyResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:grpc_cli.SetSystemPropertyResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class SetSystemPropertyResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.SetSystemPropertyResponse) */ {
 public:
  inline SetSystemPropertyResponse() : SetSystemPropertyResponse(nullptr) {}
  virtual ~SetSystemPropertyResponse();
  explicit constexpr SetSystemPropertyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetSystemPropertyResponse(const SetSystemPropertyResponse& from);
  SetSystemPropertyResponse(SetSystemPropertyResponse&& from) noexcept
    : SetSystemPropertyResponse() {
    *this = ::std::move(from);
  }

  inline SetSystemPropertyResponse& operator=(const SetSystemPropertyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetSystemPropertyResponse& operator=(SetSystemPropertyResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetSystemPropertyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetSystemPropertyResponse* internal_default_instance() {
    return reinterpret_cast<const SetSystemPropertyResponse*>(
               &_SetSystemPropertyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SetSystemPropertyResponse& a, SetSystemPropertyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetSystemPropertyResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetSystemPropertyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetSystemPropertyResponse* New() const final {
    return CreateMaybeMessage<SetSystemPropertyResponse>(nullptr);
  }

  SetSystemPropertyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetSystemPropertyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetSystemPropertyResponse& from);
  void MergeFrom(const SetSystemPropertyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetSystemPropertyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.SetSystemPropertyResponse";
  }
  protected:
  explicit SetSystemPropertyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef SetSystemPropertyResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.SetSystemPropertyResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::SetSystemPropertyResponse_Result& result() const;
  ::grpc_cli::SetSystemPropertyResponse_Result* release_result();
  ::grpc_cli::SetSystemPropertyResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::SetSystemPropertyResponse_Result* result);
  private:
  const ::grpc_cli::SetSystemPropertyResponse_Result& _internal_result() const;
  ::grpc_cli::SetSystemPropertyResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::SetSystemPropertyResponse_Result* result);
  ::grpc_cli::SetSystemPropertyResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.SetSystemPropertyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::SetSystemPropertyResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class StartTelemetryRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.StartTelemetryRequest) */ {
 public:
  inline StartTelemetryRequest() : StartTelemetryRequest(nullptr) {}
  virtual ~StartTelemetryRequest();
  explicit constexpr StartTelemetryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartTelemetryRequest(const StartTelemetryRequest& from);
  StartTelemetryRequest(StartTelemetryRequest&& from) noexcept
    : StartTelemetryRequest() {
    *this = ::std::move(from);
  }

  inline StartTelemetryRequest& operator=(const StartTelemetryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartTelemetryRequest& operator=(StartTelemetryRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartTelemetryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartTelemetryRequest* internal_default_instance() {
    return reinterpret_cast<const StartTelemetryRequest*>(
               &_StartTelemetryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(StartTelemetryRequest& a, StartTelemetryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartTelemetryRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartTelemetryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartTelemetryRequest* New() const final {
    return CreateMaybeMessage<StartTelemetryRequest>(nullptr);
  }

  StartTelemetryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartTelemetryRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartTelemetryRequest& from);
  void MergeFrom(const StartTelemetryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartTelemetryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.StartTelemetryRequest";
  }
  protected:
  explicit StartTelemetryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.StartTelemetryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class StartTelemetryResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.StartTelemetryResponse.Result) */ {
 public:
  inline StartTelemetryResponse_Result() : StartTelemetryResponse_Result(nullptr) {}
  virtual ~StartTelemetryResponse_Result();
  explicit constexpr StartTelemetryResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartTelemetryResponse_Result(const StartTelemetryResponse_Result& from);
  StartTelemetryResponse_Result(StartTelemetryResponse_Result&& from) noexcept
    : StartTelemetryResponse_Result() {
    *this = ::std::move(from);
  }

  inline StartTelemetryResponse_Result& operator=(const StartTelemetryResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartTelemetryResponse_Result& operator=(StartTelemetryResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartTelemetryResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartTelemetryResponse_Result* internal_default_instance() {
    return reinterpret_cast<const StartTelemetryResponse_Result*>(
               &_StartTelemetryResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(StartTelemetryResponse_Result& a, StartTelemetryResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(StartTelemetryResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartTelemetryResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartTelemetryResponse_Result* New() const final {
    return CreateMaybeMessage<StartTelemetryResponse_Result>(nullptr);
  }

  StartTelemetryResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartTelemetryResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartTelemetryResponse_Result& from);
  void MergeFrom(const StartTelemetryResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartTelemetryResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.StartTelemetryResponse.Result";
  }
  protected:
  explicit StartTelemetryResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:grpc_cli.StartTelemetryResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class StartTelemetryResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.StartTelemetryResponse) */ {
 public:
  inline StartTelemetryResponse() : StartTelemetryResponse(nullptr) {}
  virtual ~StartTelemetryResponse();
  explicit constexpr StartTelemetryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartTelemetryResponse(const StartTelemetryResponse& from);
  StartTelemetryResponse(StartTelemetryResponse&& from) noexcept
    : StartTelemetryResponse() {
    *this = ::std::move(from);
  }

  inline StartTelemetryResponse& operator=(const StartTelemetryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartTelemetryResponse& operator=(StartTelemetryResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartTelemetryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartTelemetryResponse* internal_default_instance() {
    return reinterpret_cast<const StartTelemetryResponse*>(
               &_StartTelemetryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(StartTelemetryResponse& a, StartTelemetryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StartTelemetryResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartTelemetryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartTelemetryResponse* New() const final {
    return CreateMaybeMessage<StartTelemetryResponse>(nullptr);
  }

  StartTelemetryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartTelemetryResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartTelemetryResponse& from);
  void MergeFrom(const StartTelemetryResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartTelemetryResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.StartTelemetryResponse";
  }
  protected:
  explicit StartTelemetryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef StartTelemetryResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.StartTelemetryResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::StartTelemetryResponse_Result& result() const;
  ::grpc_cli::StartTelemetryResponse_Result* release_result();
  ::grpc_cli::StartTelemetryResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::StartTelemetryResponse_Result* result);
  private:
  const ::grpc_cli::StartTelemetryResponse_Result& _internal_result() const;
  ::grpc_cli::StartTelemetryResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::StartTelemetryResponse_Result* result);
  ::grpc_cli::StartTelemetryResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.StartTelemetryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::StartTelemetryResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class StopTelemetryRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.StopTelemetryRequest) */ {
 public:
  inline StopTelemetryRequest() : StopTelemetryRequest(nullptr) {}
  virtual ~StopTelemetryRequest();
  explicit constexpr StopTelemetryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopTelemetryRequest(const StopTelemetryRequest& from);
  StopTelemetryRequest(StopTelemetryRequest&& from) noexcept
    : StopTelemetryRequest() {
    *this = ::std::move(from);
  }

  inline StopTelemetryRequest& operator=(const StopTelemetryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopTelemetryRequest& operator=(StopTelemetryRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopTelemetryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopTelemetryRequest* internal_default_instance() {
    return reinterpret_cast<const StopTelemetryRequest*>(
               &_StopTelemetryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(StopTelemetryRequest& a, StopTelemetryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StopTelemetryRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopTelemetryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopTelemetryRequest* New() const final {
    return CreateMaybeMessage<StopTelemetryRequest>(nullptr);
  }

  StopTelemetryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopTelemetryRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopTelemetryRequest& from);
  void MergeFrom(const StopTelemetryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopTelemetryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.StopTelemetryRequest";
  }
  protected:
  explicit StopTelemetryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.StopTelemetryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class StopTelemetryResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.StopTelemetryResponse.Result) */ {
 public:
  inline StopTelemetryResponse_Result() : StopTelemetryResponse_Result(nullptr) {}
  virtual ~StopTelemetryResponse_Result();
  explicit constexpr StopTelemetryResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopTelemetryResponse_Result(const StopTelemetryResponse_Result& from);
  StopTelemetryResponse_Result(StopTelemetryResponse_Result&& from) noexcept
    : StopTelemetryResponse_Result() {
    *this = ::std::move(from);
  }

  inline StopTelemetryResponse_Result& operator=(const StopTelemetryResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopTelemetryResponse_Result& operator=(StopTelemetryResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopTelemetryResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopTelemetryResponse_Result* internal_default_instance() {
    return reinterpret_cast<const StopTelemetryResponse_Result*>(
               &_StopTelemetryResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(StopTelemetryResponse_Result& a, StopTelemetryResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(StopTelemetryResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopTelemetryResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopTelemetryResponse_Result* New() const final {
    return CreateMaybeMessage<StopTelemetryResponse_Result>(nullptr);
  }

  StopTelemetryResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopTelemetryResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopTelemetryResponse_Result& from);
  void MergeFrom(const StopTelemetryResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopTelemetryResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.StopTelemetryResponse.Result";
  }
  protected:
  explicit StopTelemetryResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:grpc_cli.StopTelemetryResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class StopTelemetryResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.StopTelemetryResponse) */ {
 public:
  inline StopTelemetryResponse() : StopTelemetryResponse(nullptr) {}
  virtual ~StopTelemetryResponse();
  explicit constexpr StopTelemetryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopTelemetryResponse(const StopTelemetryResponse& from);
  StopTelemetryResponse(StopTelemetryResponse&& from) noexcept
    : StopTelemetryResponse() {
    *this = ::std::move(from);
  }

  inline StopTelemetryResponse& operator=(const StopTelemetryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopTelemetryResponse& operator=(StopTelemetryResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopTelemetryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopTelemetryResponse* internal_default_instance() {
    return reinterpret_cast<const StopTelemetryResponse*>(
               &_StopTelemetryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(StopTelemetryResponse& a, StopTelemetryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StopTelemetryResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopTelemetryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopTelemetryResponse* New() const final {
    return CreateMaybeMessage<StopTelemetryResponse>(nullptr);
  }

  StopTelemetryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopTelemetryResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopTelemetryResponse& from);
  void MergeFrom(const StopTelemetryResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopTelemetryResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.StopTelemetryResponse";
  }
  protected:
  explicit StopTelemetryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef StopTelemetryResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.StopTelemetryResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::StopTelemetryResponse_Result& result() const;
  ::grpc_cli::StopTelemetryResponse_Result* release_result();
  ::grpc_cli::StopTelemetryResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::StopTelemetryResponse_Result* result);
  private:
  const ::grpc_cli::StopTelemetryResponse_Result& _internal_result() const;
  ::grpc_cli::StopTelemetryResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::StopTelemetryResponse_Result* result);
  ::grpc_cli::StopTelemetryResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.StopTelemetryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::StopTelemetryResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class SetTelemetryPropertyRequest_Param PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.SetTelemetryPropertyRequest.Param) */ {
 public:
  inline SetTelemetryPropertyRequest_Param() : SetTelemetryPropertyRequest_Param(nullptr) {}
  virtual ~SetTelemetryPropertyRequest_Param();
  explicit constexpr SetTelemetryPropertyRequest_Param(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetTelemetryPropertyRequest_Param(const SetTelemetryPropertyRequest_Param& from);
  SetTelemetryPropertyRequest_Param(SetTelemetryPropertyRequest_Param&& from) noexcept
    : SetTelemetryPropertyRequest_Param() {
    *this = ::std::move(from);
  }

  inline SetTelemetryPropertyRequest_Param& operator=(const SetTelemetryPropertyRequest_Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetTelemetryPropertyRequest_Param& operator=(SetTelemetryPropertyRequest_Param&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetTelemetryPropertyRequest_Param& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetTelemetryPropertyRequest_Param* internal_default_instance() {
    return reinterpret_cast<const SetTelemetryPropertyRequest_Param*>(
               &_SetTelemetryPropertyRequest_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(SetTelemetryPropertyRequest_Param& a, SetTelemetryPropertyRequest_Param& b) {
    a.Swap(&b);
  }
  inline void Swap(SetTelemetryPropertyRequest_Param* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetTelemetryPropertyRequest_Param* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetTelemetryPropertyRequest_Param* New() const final {
    return CreateMaybeMessage<SetTelemetryPropertyRequest_Param>(nullptr);
  }

  SetTelemetryPropertyRequest_Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetTelemetryPropertyRequest_Param>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetTelemetryPropertyRequest_Param& from);
  void MergeFrom(const SetTelemetryPropertyRequest_Param& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetTelemetryPropertyRequest_Param* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.SetTelemetryPropertyRequest.Param";
  }
  protected:
  explicit SetTelemetryPropertyRequest_Param(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicationListPathFieldNumber = 1,
  };
  // string publicationListPath = 1;
  void clear_publicationlistpath();
  const std::string& publicationlistpath() const;
  void set_publicationlistpath(const std::string& value);
  void set_publicationlistpath(std::string&& value);
  void set_publicationlistpath(const char* value);
  void set_publicationlistpath(const char* value, size_t size);
  std::string* mutable_publicationlistpath();
  std::string* release_publicationlistpath();
  void set_allocated_publicationlistpath(std::string* publicationlistpath);
  private:
  const std::string& _internal_publicationlistpath() const;
  void _internal_set_publicationlistpath(const std::string& value);
  std::string* _internal_mutable_publicationlistpath();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.SetTelemetryPropertyRequest.Param)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr publicationlistpath_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class SetTelemetryPropertyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.SetTelemetryPropertyRequest) */ {
 public:
  inline SetTelemetryPropertyRequest() : SetTelemetryPropertyRequest(nullptr) {}
  virtual ~SetTelemetryPropertyRequest();
  explicit constexpr SetTelemetryPropertyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetTelemetryPropertyRequest(const SetTelemetryPropertyRequest& from);
  SetTelemetryPropertyRequest(SetTelemetryPropertyRequest&& from) noexcept
    : SetTelemetryPropertyRequest() {
    *this = ::std::move(from);
  }

  inline SetTelemetryPropertyRequest& operator=(const SetTelemetryPropertyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetTelemetryPropertyRequest& operator=(SetTelemetryPropertyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetTelemetryPropertyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetTelemetryPropertyRequest* internal_default_instance() {
    return reinterpret_cast<const SetTelemetryPropertyRequest*>(
               &_SetTelemetryPropertyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(SetTelemetryPropertyRequest& a, SetTelemetryPropertyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetTelemetryPropertyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetTelemetryPropertyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetTelemetryPropertyRequest* New() const final {
    return CreateMaybeMessage<SetTelemetryPropertyRequest>(nullptr);
  }

  SetTelemetryPropertyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetTelemetryPropertyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetTelemetryPropertyRequest& from);
  void MergeFrom(const SetTelemetryPropertyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetTelemetryPropertyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.SetTelemetryPropertyRequest";
  }
  protected:
  explicit SetTelemetryPropertyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef SetTelemetryPropertyRequest_Param Param;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
    kParamFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // .grpc_cli.SetTelemetryPropertyRequest.Param param = 4;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::grpc_cli::SetTelemetryPropertyRequest_Param& param() const;
  ::grpc_cli::SetTelemetryPropertyRequest_Param* release_param();
  ::grpc_cli::SetTelemetryPropertyRequest_Param* mutable_param();
  void set_allocated_param(::grpc_cli::SetTelemetryPropertyRequest_Param* param);
  private:
  const ::grpc_cli::SetTelemetryPropertyRequest_Param& _internal_param() const;
  ::grpc_cli::SetTelemetryPropertyRequest_Param* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::grpc_cli::SetTelemetryPropertyRequest_Param* param);
  ::grpc_cli::SetTelemetryPropertyRequest_Param* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:grpc_cli.SetTelemetryPropertyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  ::grpc_cli::SetTelemetryPropertyRequest_Param* param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class SetTelemetryPropertyResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.SetTelemetryPropertyResponse.Result) */ {
 public:
  inline SetTelemetryPropertyResponse_Result() : SetTelemetryPropertyResponse_Result(nullptr) {}
  virtual ~SetTelemetryPropertyResponse_Result();
  explicit constexpr SetTelemetryPropertyResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetTelemetryPropertyResponse_Result(const SetTelemetryPropertyResponse_Result& from);
  SetTelemetryPropertyResponse_Result(SetTelemetryPropertyResponse_Result&& from) noexcept
    : SetTelemetryPropertyResponse_Result() {
    *this = ::std::move(from);
  }

  inline SetTelemetryPropertyResponse_Result& operator=(const SetTelemetryPropertyResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetTelemetryPropertyResponse_Result& operator=(SetTelemetryPropertyResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetTelemetryPropertyResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetTelemetryPropertyResponse_Result* internal_default_instance() {
    return reinterpret_cast<const SetTelemetryPropertyResponse_Result*>(
               &_SetTelemetryPropertyResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(SetTelemetryPropertyResponse_Result& a, SetTelemetryPropertyResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(SetTelemetryPropertyResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetTelemetryPropertyResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetTelemetryPropertyResponse_Result* New() const final {
    return CreateMaybeMessage<SetTelemetryPropertyResponse_Result>(nullptr);
  }

  SetTelemetryPropertyResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetTelemetryPropertyResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetTelemetryPropertyResponse_Result& from);
  void MergeFrom(const SetTelemetryPropertyResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetTelemetryPropertyResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.SetTelemetryPropertyResponse.Result";
  }
  protected:
  explicit SetTelemetryPropertyResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:grpc_cli.SetTelemetryPropertyResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class SetTelemetryPropertyResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.SetTelemetryPropertyResponse) */ {
 public:
  inline SetTelemetryPropertyResponse() : SetTelemetryPropertyResponse(nullptr) {}
  virtual ~SetTelemetryPropertyResponse();
  explicit constexpr SetTelemetryPropertyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetTelemetryPropertyResponse(const SetTelemetryPropertyResponse& from);
  SetTelemetryPropertyResponse(SetTelemetryPropertyResponse&& from) noexcept
    : SetTelemetryPropertyResponse() {
    *this = ::std::move(from);
  }

  inline SetTelemetryPropertyResponse& operator=(const SetTelemetryPropertyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetTelemetryPropertyResponse& operator=(SetTelemetryPropertyResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetTelemetryPropertyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetTelemetryPropertyResponse* internal_default_instance() {
    return reinterpret_cast<const SetTelemetryPropertyResponse*>(
               &_SetTelemetryPropertyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(SetTelemetryPropertyResponse& a, SetTelemetryPropertyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetTelemetryPropertyResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetTelemetryPropertyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetTelemetryPropertyResponse* New() const final {
    return CreateMaybeMessage<SetTelemetryPropertyResponse>(nullptr);
  }

  SetTelemetryPropertyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetTelemetryPropertyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetTelemetryPropertyResponse& from);
  void MergeFrom(const SetTelemetryPropertyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetTelemetryPropertyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.SetTelemetryPropertyResponse";
  }
  protected:
  explicit SetTelemetryPropertyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef SetTelemetryPropertyResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.SetTelemetryPropertyResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::SetTelemetryPropertyResponse_Result& result() const;
  ::grpc_cli::SetTelemetryPropertyResponse_Result* release_result();
  ::grpc_cli::SetTelemetryPropertyResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::SetTelemetryPropertyResponse_Result* result);
  private:
  const ::grpc_cli::SetTelemetryPropertyResponse_Result& _internal_result() const;
  ::grpc_cli::SetTelemetryPropertyResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::SetTelemetryPropertyResponse_Result* result);
  ::grpc_cli::SetTelemetryPropertyResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.SetTelemetryPropertyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::SetTelemetryPropertyResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class GetTelemetryPropertyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.GetTelemetryPropertyRequest) */ {
 public:
  inline GetTelemetryPropertyRequest() : GetTelemetryPropertyRequest(nullptr) {}
  virtual ~GetTelemetryPropertyRequest();
  explicit constexpr GetTelemetryPropertyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTelemetryPropertyRequest(const GetTelemetryPropertyRequest& from);
  GetTelemetryPropertyRequest(GetTelemetryPropertyRequest&& from) noexcept
    : GetTelemetryPropertyRequest() {
    *this = ::std::move(from);
  }

  inline GetTelemetryPropertyRequest& operator=(const GetTelemetryPropertyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTelemetryPropertyRequest& operator=(GetTelemetryPropertyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTelemetryPropertyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTelemetryPropertyRequest* internal_default_instance() {
    return reinterpret_cast<const GetTelemetryPropertyRequest*>(
               &_GetTelemetryPropertyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(GetTelemetryPropertyRequest& a, GetTelemetryPropertyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTelemetryPropertyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTelemetryPropertyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTelemetryPropertyRequest* New() const final {
    return CreateMaybeMessage<GetTelemetryPropertyRequest>(nullptr);
  }

  GetTelemetryPropertyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTelemetryPropertyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTelemetryPropertyRequest& from);
  void MergeFrom(const GetTelemetryPropertyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTelemetryPropertyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.GetTelemetryPropertyRequest";
  }
  protected:
  explicit GetTelemetryPropertyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.GetTelemetryPropertyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class GetTelemetryPropertyResponse_Result_TelemetryProperty PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.GetTelemetryPropertyResponse.Result.TelemetryProperty) */ {
 public:
  inline GetTelemetryPropertyResponse_Result_TelemetryProperty() : GetTelemetryPropertyResponse_Result_TelemetryProperty(nullptr) {}
  virtual ~GetTelemetryPropertyResponse_Result_TelemetryProperty();
  explicit constexpr GetTelemetryPropertyResponse_Result_TelemetryProperty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTelemetryPropertyResponse_Result_TelemetryProperty(const GetTelemetryPropertyResponse_Result_TelemetryProperty& from);
  GetTelemetryPropertyResponse_Result_TelemetryProperty(GetTelemetryPropertyResponse_Result_TelemetryProperty&& from) noexcept
    : GetTelemetryPropertyResponse_Result_TelemetryProperty() {
    *this = ::std::move(from);
  }

  inline GetTelemetryPropertyResponse_Result_TelemetryProperty& operator=(const GetTelemetryPropertyResponse_Result_TelemetryProperty& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTelemetryPropertyResponse_Result_TelemetryProperty& operator=(GetTelemetryPropertyResponse_Result_TelemetryProperty&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTelemetryPropertyResponse_Result_TelemetryProperty& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTelemetryPropertyResponse_Result_TelemetryProperty* internal_default_instance() {
    return reinterpret_cast<const GetTelemetryPropertyResponse_Result_TelemetryProperty*>(
               &_GetTelemetryPropertyResponse_Result_TelemetryProperty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(GetTelemetryPropertyResponse_Result_TelemetryProperty& a, GetTelemetryPropertyResponse_Result_TelemetryProperty& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTelemetryPropertyResponse_Result_TelemetryProperty* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTelemetryPropertyResponse_Result_TelemetryProperty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTelemetryPropertyResponse_Result_TelemetryProperty* New() const final {
    return CreateMaybeMessage<GetTelemetryPropertyResponse_Result_TelemetryProperty>(nullptr);
  }

  GetTelemetryPropertyResponse_Result_TelemetryProperty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTelemetryPropertyResponse_Result_TelemetryProperty>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTelemetryPropertyResponse_Result_TelemetryProperty& from);
  void MergeFrom(const GetTelemetryPropertyResponse_Result_TelemetryProperty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTelemetryPropertyResponse_Result_TelemetryProperty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.GetTelemetryPropertyResponse.Result.TelemetryProperty";
  }
  protected:
  explicit GetTelemetryPropertyResponse_Result_TelemetryProperty(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicationListPathFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string publicationListPath = 2;
  void clear_publicationlistpath();
  const std::string& publicationlistpath() const;
  void set_publicationlistpath(const std::string& value);
  void set_publicationlistpath(std::string&& value);
  void set_publicationlistpath(const char* value);
  void set_publicationlistpath(const char* value, size_t size);
  std::string* mutable_publicationlistpath();
  std::string* release_publicationlistpath();
  void set_allocated_publicationlistpath(std::string* publicationlistpath);
  private:
  const std::string& _internal_publicationlistpath() const;
  void _internal_set_publicationlistpath(const std::string& value);
  std::string* _internal_mutable_publicationlistpath();
  public:

  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.GetTelemetryPropertyResponse.Result.TelemetryProperty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr publicationlistpath_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class GetTelemetryPropertyResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.GetTelemetryPropertyResponse.Result) */ {
 public:
  inline GetTelemetryPropertyResponse_Result() : GetTelemetryPropertyResponse_Result(nullptr) {}
  virtual ~GetTelemetryPropertyResponse_Result();
  explicit constexpr GetTelemetryPropertyResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTelemetryPropertyResponse_Result(const GetTelemetryPropertyResponse_Result& from);
  GetTelemetryPropertyResponse_Result(GetTelemetryPropertyResponse_Result&& from) noexcept
    : GetTelemetryPropertyResponse_Result() {
    *this = ::std::move(from);
  }

  inline GetTelemetryPropertyResponse_Result& operator=(const GetTelemetryPropertyResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTelemetryPropertyResponse_Result& operator=(GetTelemetryPropertyResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTelemetryPropertyResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTelemetryPropertyResponse_Result* internal_default_instance() {
    return reinterpret_cast<const GetTelemetryPropertyResponse_Result*>(
               &_GetTelemetryPropertyResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(GetTelemetryPropertyResponse_Result& a, GetTelemetryPropertyResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTelemetryPropertyResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTelemetryPropertyResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTelemetryPropertyResponse_Result* New() const final {
    return CreateMaybeMessage<GetTelemetryPropertyResponse_Result>(nullptr);
  }

  GetTelemetryPropertyResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTelemetryPropertyResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTelemetryPropertyResponse_Result& from);
  void MergeFrom(const GetTelemetryPropertyResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTelemetryPropertyResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.GetTelemetryPropertyResponse.Result";
  }
  protected:
  explicit GetTelemetryPropertyResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetTelemetryPropertyResponse_Result_TelemetryProperty TelemetryProperty;

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // .grpc_cli.GetTelemetryPropertyResponse.Result.TelemetryProperty data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::grpc_cli::GetTelemetryPropertyResponse_Result_TelemetryProperty& data() const;
  ::grpc_cli::GetTelemetryPropertyResponse_Result_TelemetryProperty* release_data();
  ::grpc_cli::GetTelemetryPropertyResponse_Result_TelemetryProperty* mutable_data();
  void set_allocated_data(::grpc_cli::GetTelemetryPropertyResponse_Result_TelemetryProperty* data);
  private:
  const ::grpc_cli::GetTelemetryPropertyResponse_Result_TelemetryProperty& _internal_data() const;
  ::grpc_cli::GetTelemetryPropertyResponse_Result_TelemetryProperty* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::grpc_cli::GetTelemetryPropertyResponse_Result_TelemetryProperty* data);
  ::grpc_cli::GetTelemetryPropertyResponse_Result_TelemetryProperty* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:grpc_cli.GetTelemetryPropertyResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  ::grpc_cli::GetTelemetryPropertyResponse_Result_TelemetryProperty* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class GetTelemetryPropertyResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.GetTelemetryPropertyResponse) */ {
 public:
  inline GetTelemetryPropertyResponse() : GetTelemetryPropertyResponse(nullptr) {}
  virtual ~GetTelemetryPropertyResponse();
  explicit constexpr GetTelemetryPropertyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTelemetryPropertyResponse(const GetTelemetryPropertyResponse& from);
  GetTelemetryPropertyResponse(GetTelemetryPropertyResponse&& from) noexcept
    : GetTelemetryPropertyResponse() {
    *this = ::std::move(from);
  }

  inline GetTelemetryPropertyResponse& operator=(const GetTelemetryPropertyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTelemetryPropertyResponse& operator=(GetTelemetryPropertyResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTelemetryPropertyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTelemetryPropertyResponse* internal_default_instance() {
    return reinterpret_cast<const GetTelemetryPropertyResponse*>(
               &_GetTelemetryPropertyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(GetTelemetryPropertyResponse& a, GetTelemetryPropertyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTelemetryPropertyResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTelemetryPropertyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTelemetryPropertyResponse* New() const final {
    return CreateMaybeMessage<GetTelemetryPropertyResponse>(nullptr);
  }

  GetTelemetryPropertyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTelemetryPropertyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTelemetryPropertyResponse& from);
  void MergeFrom(const GetTelemetryPropertyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTelemetryPropertyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.GetTelemetryPropertyResponse";
  }
  protected:
  explicit GetTelemetryPropertyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetTelemetryPropertyResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.GetTelemetryPropertyResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::GetTelemetryPropertyResponse_Result& result() const;
  ::grpc_cli::GetTelemetryPropertyResponse_Result* release_result();
  ::grpc_cli::GetTelemetryPropertyResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::GetTelemetryPropertyResponse_Result* result);
  private:
  const ::grpc_cli::GetTelemetryPropertyResponse_Result& _internal_result() const;
  ::grpc_cli::GetTelemetryPropertyResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::GetTelemetryPropertyResponse_Result* result);
  ::grpc_cli::GetTelemetryPropertyResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.GetTelemetryPropertyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::GetTelemetryPropertyResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ResetEventWrrRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ResetEventWrrRequest) */ {
 public:
  inline ResetEventWrrRequest() : ResetEventWrrRequest(nullptr) {}
  virtual ~ResetEventWrrRequest();
  explicit constexpr ResetEventWrrRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResetEventWrrRequest(const ResetEventWrrRequest& from);
  ResetEventWrrRequest(ResetEventWrrRequest&& from) noexcept
    : ResetEventWrrRequest() {
    *this = ::std::move(from);
  }

  inline ResetEventWrrRequest& operator=(const ResetEventWrrRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResetEventWrrRequest& operator=(ResetEventWrrRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResetEventWrrRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResetEventWrrRequest* internal_default_instance() {
    return reinterpret_cast<const ResetEventWrrRequest*>(
               &_ResetEventWrrRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(ResetEventWrrRequest& a, ResetEventWrrRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ResetEventWrrRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResetEventWrrRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResetEventWrrRequest* New() const final {
    return CreateMaybeMessage<ResetEventWrrRequest>(nullptr);
  }

  ResetEventWrrRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResetEventWrrRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResetEventWrrRequest& from);
  void MergeFrom(const ResetEventWrrRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetEventWrrRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ResetEventWrrRequest";
  }
  protected:
  explicit ResetEventWrrRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.ResetEventWrrRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ResetEventWrrResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ResetEventWrrResponse.Result) */ {
 public:
  inline ResetEventWrrResponse_Result() : ResetEventWrrResponse_Result(nullptr) {}
  virtual ~ResetEventWrrResponse_Result();
  explicit constexpr ResetEventWrrResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResetEventWrrResponse_Result(const ResetEventWrrResponse_Result& from);
  ResetEventWrrResponse_Result(ResetEventWrrResponse_Result&& from) noexcept
    : ResetEventWrrResponse_Result() {
    *this = ::std::move(from);
  }

  inline ResetEventWrrResponse_Result& operator=(const ResetEventWrrResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResetEventWrrResponse_Result& operator=(ResetEventWrrResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResetEventWrrResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResetEventWrrResponse_Result* internal_default_instance() {
    return reinterpret_cast<const ResetEventWrrResponse_Result*>(
               &_ResetEventWrrResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(ResetEventWrrResponse_Result& a, ResetEventWrrResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(ResetEventWrrResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResetEventWrrResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResetEventWrrResponse_Result* New() const final {
    return CreateMaybeMessage<ResetEventWrrResponse_Result>(nullptr);
  }

  ResetEventWrrResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResetEventWrrResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResetEventWrrResponse_Result& from);
  void MergeFrom(const ResetEventWrrResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetEventWrrResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ResetEventWrrResponse.Result";
  }
  protected:
  explicit ResetEventWrrResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:grpc_cli.ResetEventWrrResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ResetEventWrrResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ResetEventWrrResponse) */ {
 public:
  inline ResetEventWrrResponse() : ResetEventWrrResponse(nullptr) {}
  virtual ~ResetEventWrrResponse();
  explicit constexpr ResetEventWrrResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResetEventWrrResponse(const ResetEventWrrResponse& from);
  ResetEventWrrResponse(ResetEventWrrResponse&& from) noexcept
    : ResetEventWrrResponse() {
    *this = ::std::move(from);
  }

  inline ResetEventWrrResponse& operator=(const ResetEventWrrResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResetEventWrrResponse& operator=(ResetEventWrrResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResetEventWrrResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResetEventWrrResponse* internal_default_instance() {
    return reinterpret_cast<const ResetEventWrrResponse*>(
               &_ResetEventWrrResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(ResetEventWrrResponse& a, ResetEventWrrResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ResetEventWrrResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResetEventWrrResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResetEventWrrResponse* New() const final {
    return CreateMaybeMessage<ResetEventWrrResponse>(nullptr);
  }

  ResetEventWrrResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResetEventWrrResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResetEventWrrResponse& from);
  void MergeFrom(const ResetEventWrrResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetEventWrrResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ResetEventWrrResponse";
  }
  protected:
  explicit ResetEventWrrResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ResetEventWrrResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.ResetEventWrrResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::ResetEventWrrResponse_Result& result() const;
  ::grpc_cli::ResetEventWrrResponse_Result* release_result();
  ::grpc_cli::ResetEventWrrResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::ResetEventWrrResponse_Result* result);
  private:
  const ::grpc_cli::ResetEventWrrResponse_Result& _internal_result() const;
  ::grpc_cli::ResetEventWrrResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::ResetEventWrrResponse_Result* result);
  ::grpc_cli::ResetEventWrrResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.ResetEventWrrResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::ResetEventWrrResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ResetMbrRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ResetMbrRequest) */ {
 public:
  inline ResetMbrRequest() : ResetMbrRequest(nullptr) {}
  virtual ~ResetMbrRequest();
  explicit constexpr ResetMbrRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResetMbrRequest(const ResetMbrRequest& from);
  ResetMbrRequest(ResetMbrRequest&& from) noexcept
    : ResetMbrRequest() {
    *this = ::std::move(from);
  }

  inline ResetMbrRequest& operator=(const ResetMbrRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResetMbrRequest& operator=(ResetMbrRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResetMbrRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResetMbrRequest* internal_default_instance() {
    return reinterpret_cast<const ResetMbrRequest*>(
               &_ResetMbrRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(ResetMbrRequest& a, ResetMbrRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ResetMbrRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResetMbrRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResetMbrRequest* New() const final {
    return CreateMaybeMessage<ResetMbrRequest>(nullptr);
  }

  ResetMbrRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResetMbrRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResetMbrRequest& from);
  void MergeFrom(const ResetMbrRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetMbrRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ResetMbrRequest";
  }
  protected:
  explicit ResetMbrRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.ResetMbrRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ResetMbrResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ResetMbrResponse.Result) */ {
 public:
  inline ResetMbrResponse_Result() : ResetMbrResponse_Result(nullptr) {}
  virtual ~ResetMbrResponse_Result();
  explicit constexpr ResetMbrResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResetMbrResponse_Result(const ResetMbrResponse_Result& from);
  ResetMbrResponse_Result(ResetMbrResponse_Result&& from) noexcept
    : ResetMbrResponse_Result() {
    *this = ::std::move(from);
  }

  inline ResetMbrResponse_Result& operator=(const ResetMbrResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResetMbrResponse_Result& operator=(ResetMbrResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResetMbrResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResetMbrResponse_Result* internal_default_instance() {
    return reinterpret_cast<const ResetMbrResponse_Result*>(
               &_ResetMbrResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(ResetMbrResponse_Result& a, ResetMbrResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(ResetMbrResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResetMbrResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResetMbrResponse_Result* New() const final {
    return CreateMaybeMessage<ResetMbrResponse_Result>(nullptr);
  }

  ResetMbrResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResetMbrResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResetMbrResponse_Result& from);
  void MergeFrom(const ResetMbrResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetMbrResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ResetMbrResponse.Result";
  }
  protected:
  explicit ResetMbrResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:grpc_cli.ResetMbrResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ResetMbrResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ResetMbrResponse) */ {
 public:
  inline ResetMbrResponse() : ResetMbrResponse(nullptr) {}
  virtual ~ResetMbrResponse();
  explicit constexpr ResetMbrResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResetMbrResponse(const ResetMbrResponse& from);
  ResetMbrResponse(ResetMbrResponse&& from) noexcept
    : ResetMbrResponse() {
    *this = ::std::move(from);
  }

  inline ResetMbrResponse& operator=(const ResetMbrResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResetMbrResponse& operator=(ResetMbrResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResetMbrResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResetMbrResponse* internal_default_instance() {
    return reinterpret_cast<const ResetMbrResponse*>(
               &_ResetMbrResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(ResetMbrResponse& a, ResetMbrResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ResetMbrResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResetMbrResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResetMbrResponse* New() const final {
    return CreateMaybeMessage<ResetMbrResponse>(nullptr);
  }

  ResetMbrResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResetMbrResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResetMbrResponse& from);
  void MergeFrom(const ResetMbrResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetMbrResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ResetMbrResponse";
  }
  protected:
  explicit ResetMbrResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ResetMbrResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.ResetMbrResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::ResetMbrResponse_Result& result() const;
  ::grpc_cli::ResetMbrResponse_Result* release_result();
  ::grpc_cli::ResetMbrResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::ResetMbrResponse_Result* result);
  private:
  const ::grpc_cli::ResetMbrResponse_Result& _internal_result() const;
  ::grpc_cli::ResetMbrResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::ResetMbrResponse_Result* result);
  ::grpc_cli::ResetMbrResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.ResetMbrResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::ResetMbrResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class DumpMemorySnapshotRequest_Param PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.DumpMemorySnapshotRequest.Param) */ {
 public:
  inline DumpMemorySnapshotRequest_Param() : DumpMemorySnapshotRequest_Param(nullptr) {}
  virtual ~DumpMemorySnapshotRequest_Param();
  explicit constexpr DumpMemorySnapshotRequest_Param(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DumpMemorySnapshotRequest_Param(const DumpMemorySnapshotRequest_Param& from);
  DumpMemorySnapshotRequest_Param(DumpMemorySnapshotRequest_Param&& from) noexcept
    : DumpMemorySnapshotRequest_Param() {
    *this = ::std::move(from);
  }

  inline DumpMemorySnapshotRequest_Param& operator=(const DumpMemorySnapshotRequest_Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline DumpMemorySnapshotRequest_Param& operator=(DumpMemorySnapshotRequest_Param&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DumpMemorySnapshotRequest_Param& default_instance() {
    return *internal_default_instance();
  }
  static inline const DumpMemorySnapshotRequest_Param* internal_default_instance() {
    return reinterpret_cast<const DumpMemorySnapshotRequest_Param*>(
               &_DumpMemorySnapshotRequest_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(DumpMemorySnapshotRequest_Param& a, DumpMemorySnapshotRequest_Param& b) {
    a.Swap(&b);
  }
  inline void Swap(DumpMemorySnapshotRequest_Param* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DumpMemorySnapshotRequest_Param* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DumpMemorySnapshotRequest_Param* New() const final {
    return CreateMaybeMessage<DumpMemorySnapshotRequest_Param>(nullptr);
  }

  DumpMemorySnapshotRequest_Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DumpMemorySnapshotRequest_Param>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DumpMemorySnapshotRequest_Param& from);
  void MergeFrom(const DumpMemorySnapshotRequest_Param& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DumpMemorySnapshotRequest_Param* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.DumpMemorySnapshotRequest.Param";
  }
  protected:
  explicit DumpMemorySnapshotRequest_Param(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.DumpMemorySnapshotRequest.Param)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class DumpMemorySnapshotRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.DumpMemorySnapshotRequest) */ {
 public:
  inline DumpMemorySnapshotRequest() : DumpMemorySnapshotRequest(nullptr) {}
  virtual ~DumpMemorySnapshotRequest();
  explicit constexpr DumpMemorySnapshotRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DumpMemorySnapshotRequest(const DumpMemorySnapshotRequest& from);
  DumpMemorySnapshotRequest(DumpMemorySnapshotRequest&& from) noexcept
    : DumpMemorySnapshotRequest() {
    *this = ::std::move(from);
  }

  inline DumpMemorySnapshotRequest& operator=(const DumpMemorySnapshotRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DumpMemorySnapshotRequest& operator=(DumpMemorySnapshotRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DumpMemorySnapshotRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DumpMemorySnapshotRequest* internal_default_instance() {
    return reinterpret_cast<const DumpMemorySnapshotRequest*>(
               &_DumpMemorySnapshotRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(DumpMemorySnapshotRequest& a, DumpMemorySnapshotRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DumpMemorySnapshotRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DumpMemorySnapshotRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DumpMemorySnapshotRequest* New() const final {
    return CreateMaybeMessage<DumpMemorySnapshotRequest>(nullptr);
  }

  DumpMemorySnapshotRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DumpMemorySnapshotRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DumpMemorySnapshotRequest& from);
  void MergeFrom(const DumpMemorySnapshotRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DumpMemorySnapshotRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.DumpMemorySnapshotRequest";
  }
  protected:
  explicit DumpMemorySnapshotRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef DumpMemorySnapshotRequest_Param Param;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
    kParamFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // .grpc_cli.DumpMemorySnapshotRequest.Param param = 4;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::grpc_cli::DumpMemorySnapshotRequest_Param& param() const;
  ::grpc_cli::DumpMemorySnapshotRequest_Param* release_param();
  ::grpc_cli::DumpMemorySnapshotRequest_Param* mutable_param();
  void set_allocated_param(::grpc_cli::DumpMemorySnapshotRequest_Param* param);
  private:
  const ::grpc_cli::DumpMemorySnapshotRequest_Param& _internal_param() const;
  ::grpc_cli::DumpMemorySnapshotRequest_Param* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::grpc_cli::DumpMemorySnapshotRequest_Param* param);
  ::grpc_cli::DumpMemorySnapshotRequest_Param* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:grpc_cli.DumpMemorySnapshotRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  ::grpc_cli::DumpMemorySnapshotRequest_Param* param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class DumpMemorySnapshotResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.DumpMemorySnapshotResponse.Result) */ {
 public:
  inline DumpMemorySnapshotResponse_Result() : DumpMemorySnapshotResponse_Result(nullptr) {}
  virtual ~DumpMemorySnapshotResponse_Result();
  explicit constexpr DumpMemorySnapshotResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DumpMemorySnapshotResponse_Result(const DumpMemorySnapshotResponse_Result& from);
  DumpMemorySnapshotResponse_Result(DumpMemorySnapshotResponse_Result&& from) noexcept
    : DumpMemorySnapshotResponse_Result() {
    *this = ::std::move(from);
  }

  inline DumpMemorySnapshotResponse_Result& operator=(const DumpMemorySnapshotResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline DumpMemorySnapshotResponse_Result& operator=(DumpMemorySnapshotResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DumpMemorySnapshotResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const DumpMemorySnapshotResponse_Result* internal_default_instance() {
    return reinterpret_cast<const DumpMemorySnapshotResponse_Result*>(
               &_DumpMemorySnapshotResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(DumpMemorySnapshotResponse_Result& a, DumpMemorySnapshotResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(DumpMemorySnapshotResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DumpMemorySnapshotResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DumpMemorySnapshotResponse_Result* New() const final {
    return CreateMaybeMessage<DumpMemorySnapshotResponse_Result>(nullptr);
  }

  DumpMemorySnapshotResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DumpMemorySnapshotResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DumpMemorySnapshotResponse_Result& from);
  void MergeFrom(const DumpMemorySnapshotResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DumpMemorySnapshotResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.DumpMemorySnapshotResponse.Result";
  }
  protected:
  explicit DumpMemorySnapshotResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:grpc_cli.DumpMemorySnapshotResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class DumpMemorySnapshotResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.DumpMemorySnapshotResponse) */ {
 public:
  inline DumpMemorySnapshotResponse() : DumpMemorySnapshotResponse(nullptr) {}
  virtual ~DumpMemorySnapshotResponse();
  explicit constexpr DumpMemorySnapshotResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DumpMemorySnapshotResponse(const DumpMemorySnapshotResponse& from);
  DumpMemorySnapshotResponse(DumpMemorySnapshotResponse&& from) noexcept
    : DumpMemorySnapshotResponse() {
    *this = ::std::move(from);
  }

  inline DumpMemorySnapshotResponse& operator=(const DumpMemorySnapshotResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DumpMemorySnapshotResponse& operator=(DumpMemorySnapshotResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DumpMemorySnapshotResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DumpMemorySnapshotResponse* internal_default_instance() {
    return reinterpret_cast<const DumpMemorySnapshotResponse*>(
               &_DumpMemorySnapshotResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(DumpMemorySnapshotResponse& a, DumpMemorySnapshotResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DumpMemorySnapshotResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DumpMemorySnapshotResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DumpMemorySnapshotResponse* New() const final {
    return CreateMaybeMessage<DumpMemorySnapshotResponse>(nullptr);
  }

  DumpMemorySnapshotResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DumpMemorySnapshotResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DumpMemorySnapshotResponse& from);
  void MergeFrom(const DumpMemorySnapshotResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DumpMemorySnapshotResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.DumpMemorySnapshotResponse";
  }
  protected:
  explicit DumpMemorySnapshotResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef DumpMemorySnapshotResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.DumpMemorySnapshotResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::DumpMemorySnapshotResponse_Result& result() const;
  ::grpc_cli::DumpMemorySnapshotResponse_Result* release_result();
  ::grpc_cli::DumpMemorySnapshotResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::DumpMemorySnapshotResponse_Result* result);
  private:
  const ::grpc_cli::DumpMemorySnapshotResponse_Result& _internal_result() const;
  ::grpc_cli::DumpMemorySnapshotResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::DumpMemorySnapshotResponse_Result* result);
  ::grpc_cli::DumpMemorySnapshotResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.DumpMemorySnapshotResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::DumpMemorySnapshotResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class StopRebuildingRequest_Param PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.StopRebuildingRequest.Param) */ {
 public:
  inline StopRebuildingRequest_Param() : StopRebuildingRequest_Param(nullptr) {}
  virtual ~StopRebuildingRequest_Param();
  explicit constexpr StopRebuildingRequest_Param(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopRebuildingRequest_Param(const StopRebuildingRequest_Param& from);
  StopRebuildingRequest_Param(StopRebuildingRequest_Param&& from) noexcept
    : StopRebuildingRequest_Param() {
    *this = ::std::move(from);
  }

  inline StopRebuildingRequest_Param& operator=(const StopRebuildingRequest_Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopRebuildingRequest_Param& operator=(StopRebuildingRequest_Param&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopRebuildingRequest_Param& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopRebuildingRequest_Param* internal_default_instance() {
    return reinterpret_cast<const StopRebuildingRequest_Param*>(
               &_StopRebuildingRequest_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(StopRebuildingRequest_Param& a, StopRebuildingRequest_Param& b) {
    a.Swap(&b);
  }
  inline void Swap(StopRebuildingRequest_Param* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopRebuildingRequest_Param* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopRebuildingRequest_Param* New() const final {
    return CreateMaybeMessage<StopRebuildingRequest_Param>(nullptr);
  }

  StopRebuildingRequest_Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopRebuildingRequest_Param>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopRebuildingRequest_Param& from);
  void MergeFrom(const StopRebuildingRequest_Param& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopRebuildingRequest_Param* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.StopRebuildingRequest.Param";
  }
  protected:
  explicit StopRebuildingRequest_Param(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.StopRebuildingRequest.Param)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class StopRebuildingRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.StopRebuildingRequest) */ {
 public:
  inline StopRebuildingRequest() : StopRebuildingRequest(nullptr) {}
  virtual ~StopRebuildingRequest();
  explicit constexpr StopRebuildingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopRebuildingRequest(const StopRebuildingRequest& from);
  StopRebuildingRequest(StopRebuildingRequest&& from) noexcept
    : StopRebuildingRequest() {
    *this = ::std::move(from);
  }

  inline StopRebuildingRequest& operator=(const StopRebuildingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopRebuildingRequest& operator=(StopRebuildingRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopRebuildingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopRebuildingRequest* internal_default_instance() {
    return reinterpret_cast<const StopRebuildingRequest*>(
               &_StopRebuildingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(StopRebuildingRequest& a, StopRebuildingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StopRebuildingRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopRebuildingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopRebuildingRequest* New() const final {
    return CreateMaybeMessage<StopRebuildingRequest>(nullptr);
  }

  StopRebuildingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopRebuildingRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopRebuildingRequest& from);
  void MergeFrom(const StopRebuildingRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopRebuildingRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.StopRebuildingRequest";
  }
  protected:
  explicit StopRebuildingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef StopRebuildingRequest_Param Param;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
    kParamFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // .grpc_cli.StopRebuildingRequest.Param param = 4;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::grpc_cli::StopRebuildingRequest_Param& param() const;
  ::grpc_cli::StopRebuildingRequest_Param* release_param();
  ::grpc_cli::StopRebuildingRequest_Param* mutable_param();
  void set_allocated_param(::grpc_cli::StopRebuildingRequest_Param* param);
  private:
  const ::grpc_cli::StopRebuildingRequest_Param& _internal_param() const;
  ::grpc_cli::StopRebuildingRequest_Param* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::grpc_cli::StopRebuildingRequest_Param* param);
  ::grpc_cli::StopRebuildingRequest_Param* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:grpc_cli.StopRebuildingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  ::grpc_cli::StopRebuildingRequest_Param* param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class StopRebuildingResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.StopRebuildingResponse.Result) */ {
 public:
  inline StopRebuildingResponse_Result() : StopRebuildingResponse_Result(nullptr) {}
  virtual ~StopRebuildingResponse_Result();
  explicit constexpr StopRebuildingResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopRebuildingResponse_Result(const StopRebuildingResponse_Result& from);
  StopRebuildingResponse_Result(StopRebuildingResponse_Result&& from) noexcept
    : StopRebuildingResponse_Result() {
    *this = ::std::move(from);
  }

  inline StopRebuildingResponse_Result& operator=(const StopRebuildingResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopRebuildingResponse_Result& operator=(StopRebuildingResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopRebuildingResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopRebuildingResponse_Result* internal_default_instance() {
    return reinterpret_cast<const StopRebuildingResponse_Result*>(
               &_StopRebuildingResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(StopRebuildingResponse_Result& a, StopRebuildingResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(StopRebuildingResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopRebuildingResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopRebuildingResponse_Result* New() const final {
    return CreateMaybeMessage<StopRebuildingResponse_Result>(nullptr);
  }

  StopRebuildingResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopRebuildingResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopRebuildingResponse_Result& from);
  void MergeFrom(const StopRebuildingResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopRebuildingResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.StopRebuildingResponse.Result";
  }
  protected:
  explicit StopRebuildingResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:grpc_cli.StopRebuildingResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class StopRebuildingResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.StopRebuildingResponse) */ {
 public:
  inline StopRebuildingResponse() : StopRebuildingResponse(nullptr) {}
  virtual ~StopRebuildingResponse();
  explicit constexpr StopRebuildingResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopRebuildingResponse(const StopRebuildingResponse& from);
  StopRebuildingResponse(StopRebuildingResponse&& from) noexcept
    : StopRebuildingResponse() {
    *this = ::std::move(from);
  }

  inline StopRebuildingResponse& operator=(const StopRebuildingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopRebuildingResponse& operator=(StopRebuildingResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopRebuildingResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopRebuildingResponse* internal_default_instance() {
    return reinterpret_cast<const StopRebuildingResponse*>(
               &_StopRebuildingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(StopRebuildingResponse& a, StopRebuildingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StopRebuildingResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopRebuildingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopRebuildingResponse* New() const final {
    return CreateMaybeMessage<StopRebuildingResponse>(nullptr);
  }

  StopRebuildingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopRebuildingResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopRebuildingResponse& from);
  void MergeFrom(const StopRebuildingResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopRebuildingResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.StopRebuildingResponse";
  }
  protected:
  explicit StopRebuildingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef StopRebuildingResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.StopRebuildingResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::StopRebuildingResponse_Result& result() const;
  ::grpc_cli::StopRebuildingResponse_Result* release_result();
  ::grpc_cli::StopRebuildingResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::StopRebuildingResponse_Result* result);
  private:
  const ::grpc_cli::StopRebuildingResponse_Result& _internal_result() const;
  ::grpc_cli::StopRebuildingResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::StopRebuildingResponse_Result* result);
  ::grpc_cli::StopRebuildingResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.StopRebuildingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::StopRebuildingResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class UpdateEventWrrRequest_Param PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.UpdateEventWrrRequest.Param) */ {
 public:
  inline UpdateEventWrrRequest_Param() : UpdateEventWrrRequest_Param(nullptr) {}
  virtual ~UpdateEventWrrRequest_Param();
  explicit constexpr UpdateEventWrrRequest_Param(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateEventWrrRequest_Param(const UpdateEventWrrRequest_Param& from);
  UpdateEventWrrRequest_Param(UpdateEventWrrRequest_Param&& from) noexcept
    : UpdateEventWrrRequest_Param() {
    *this = ::std::move(from);
  }

  inline UpdateEventWrrRequest_Param& operator=(const UpdateEventWrrRequest_Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateEventWrrRequest_Param& operator=(UpdateEventWrrRequest_Param&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateEventWrrRequest_Param& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateEventWrrRequest_Param* internal_default_instance() {
    return reinterpret_cast<const UpdateEventWrrRequest_Param*>(
               &_UpdateEventWrrRequest_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(UpdateEventWrrRequest_Param& a, UpdateEventWrrRequest_Param& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateEventWrrRequest_Param* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateEventWrrRequest_Param* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateEventWrrRequest_Param* New() const final {
    return CreateMaybeMessage<UpdateEventWrrRequest_Param>(nullptr);
  }

  UpdateEventWrrRequest_Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateEventWrrRequest_Param>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateEventWrrRequest_Param& from);
  void MergeFrom(const UpdateEventWrrRequest_Param& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateEventWrrRequest_Param* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.UpdateEventWrrRequest.Param";
  }
  protected:
  explicit UpdateEventWrrRequest_Param(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kWeightFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 weight = 2;
  void clear_weight();
  ::PROTOBUF_NAMESPACE_ID::int64 weight() const;
  void set_weight(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_weight() const;
  void _internal_set_weight(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.UpdateEventWrrRequest.Param)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int64 weight_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class UpdateEventWrrRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.UpdateEventWrrRequest) */ {
 public:
  inline UpdateEventWrrRequest() : UpdateEventWrrRequest(nullptr) {}
  virtual ~UpdateEventWrrRequest();
  explicit constexpr UpdateEventWrrRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateEventWrrRequest(const UpdateEventWrrRequest& from);
  UpdateEventWrrRequest(UpdateEventWrrRequest&& from) noexcept
    : UpdateEventWrrRequest() {
    *this = ::std::move(from);
  }

  inline UpdateEventWrrRequest& operator=(const UpdateEventWrrRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateEventWrrRequest& operator=(UpdateEventWrrRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateEventWrrRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateEventWrrRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateEventWrrRequest*>(
               &_UpdateEventWrrRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(UpdateEventWrrRequest& a, UpdateEventWrrRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateEventWrrRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateEventWrrRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateEventWrrRequest* New() const final {
    return CreateMaybeMessage<UpdateEventWrrRequest>(nullptr);
  }

  UpdateEventWrrRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateEventWrrRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateEventWrrRequest& from);
  void MergeFrom(const UpdateEventWrrRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateEventWrrRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.UpdateEventWrrRequest";
  }
  protected:
  explicit UpdateEventWrrRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef UpdateEventWrrRequest_Param Param;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
    kParamFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // .grpc_cli.UpdateEventWrrRequest.Param param = 4;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::grpc_cli::UpdateEventWrrRequest_Param& param() const;
  ::grpc_cli::UpdateEventWrrRequest_Param* release_param();
  ::grpc_cli::UpdateEventWrrRequest_Param* mutable_param();
  void set_allocated_param(::grpc_cli::UpdateEventWrrRequest_Param* param);
  private:
  const ::grpc_cli::UpdateEventWrrRequest_Param& _internal_param() const;
  ::grpc_cli::UpdateEventWrrRequest_Param* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::grpc_cli::UpdateEventWrrRequest_Param* param);
  ::grpc_cli::UpdateEventWrrRequest_Param* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:grpc_cli.UpdateEventWrrRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  ::grpc_cli::UpdateEventWrrRequest_Param* param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class UpdateEventWrrResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.UpdateEventWrrResponse.Result) */ {
 public:
  inline UpdateEventWrrResponse_Result() : UpdateEventWrrResponse_Result(nullptr) {}
  virtual ~UpdateEventWrrResponse_Result();
  explicit constexpr UpdateEventWrrResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateEventWrrResponse_Result(const UpdateEventWrrResponse_Result& from);
  UpdateEventWrrResponse_Result(UpdateEventWrrResponse_Result&& from) noexcept
    : UpdateEventWrrResponse_Result() {
    *this = ::std::move(from);
  }

  inline UpdateEventWrrResponse_Result& operator=(const UpdateEventWrrResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateEventWrrResponse_Result& operator=(UpdateEventWrrResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateEventWrrResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateEventWrrResponse_Result* internal_default_instance() {
    return reinterpret_cast<const UpdateEventWrrResponse_Result*>(
               &_UpdateEventWrrResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(UpdateEventWrrResponse_Result& a, UpdateEventWrrResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateEventWrrResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateEventWrrResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateEventWrrResponse_Result* New() const final {
    return CreateMaybeMessage<UpdateEventWrrResponse_Result>(nullptr);
  }

  UpdateEventWrrResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateEventWrrResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateEventWrrResponse_Result& from);
  void MergeFrom(const UpdateEventWrrResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateEventWrrResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.UpdateEventWrrResponse.Result";
  }
  protected:
  explicit UpdateEventWrrResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:grpc_cli.UpdateEventWrrResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class UpdateEventWrrResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.UpdateEventWrrResponse) */ {
 public:
  inline UpdateEventWrrResponse() : UpdateEventWrrResponse(nullptr) {}
  virtual ~UpdateEventWrrResponse();
  explicit constexpr UpdateEventWrrResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateEventWrrResponse(const UpdateEventWrrResponse& from);
  UpdateEventWrrResponse(UpdateEventWrrResponse&& from) noexcept
    : UpdateEventWrrResponse() {
    *this = ::std::move(from);
  }

  inline UpdateEventWrrResponse& operator=(const UpdateEventWrrResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateEventWrrResponse& operator=(UpdateEventWrrResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateEventWrrResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateEventWrrResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateEventWrrResponse*>(
               &_UpdateEventWrrResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(UpdateEventWrrResponse& a, UpdateEventWrrResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateEventWrrResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateEventWrrResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateEventWrrResponse* New() const final {
    return CreateMaybeMessage<UpdateEventWrrResponse>(nullptr);
  }

  UpdateEventWrrResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateEventWrrResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateEventWrrResponse& from);
  void MergeFrom(const UpdateEventWrrResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateEventWrrResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.UpdateEventWrrResponse";
  }
  protected:
  explicit UpdateEventWrrResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef UpdateEventWrrResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.UpdateEventWrrResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::UpdateEventWrrResponse_Result& result() const;
  ::grpc_cli::UpdateEventWrrResponse_Result* release_result();
  ::grpc_cli::UpdateEventWrrResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::UpdateEventWrrResponse_Result* result);
  private:
  const ::grpc_cli::UpdateEventWrrResponse_Result& _internal_result() const;
  ::grpc_cli::UpdateEventWrrResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::UpdateEventWrrResponse_Result* result);
  ::grpc_cli::UpdateEventWrrResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.UpdateEventWrrResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::UpdateEventWrrResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class AddSpareRequest_SpareDeviceName PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.AddSpareRequest.SpareDeviceName) */ {
 public:
  inline AddSpareRequest_SpareDeviceName() : AddSpareRequest_SpareDeviceName(nullptr) {}
  virtual ~AddSpareRequest_SpareDeviceName();
  explicit constexpr AddSpareRequest_SpareDeviceName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddSpareRequest_SpareDeviceName(const AddSpareRequest_SpareDeviceName& from);
  AddSpareRequest_SpareDeviceName(AddSpareRequest_SpareDeviceName&& from) noexcept
    : AddSpareRequest_SpareDeviceName() {
    *this = ::std::move(from);
  }

  inline AddSpareRequest_SpareDeviceName& operator=(const AddSpareRequest_SpareDeviceName& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddSpareRequest_SpareDeviceName& operator=(AddSpareRequest_SpareDeviceName&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddSpareRequest_SpareDeviceName& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddSpareRequest_SpareDeviceName* internal_default_instance() {
    return reinterpret_cast<const AddSpareRequest_SpareDeviceName*>(
               &_AddSpareRequest_SpareDeviceName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(AddSpareRequest_SpareDeviceName& a, AddSpareRequest_SpareDeviceName& b) {
    a.Swap(&b);
  }
  inline void Swap(AddSpareRequest_SpareDeviceName* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddSpareRequest_SpareDeviceName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddSpareRequest_SpareDeviceName* New() const final {
    return CreateMaybeMessage<AddSpareRequest_SpareDeviceName>(nullptr);
  }

  AddSpareRequest_SpareDeviceName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddSpareRequest_SpareDeviceName>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddSpareRequest_SpareDeviceName& from);
  void MergeFrom(const AddSpareRequest_SpareDeviceName& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddSpareRequest_SpareDeviceName* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.AddSpareRequest.SpareDeviceName";
  }
  protected:
  explicit AddSpareRequest_SpareDeviceName(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceNameFieldNumber = 1,
  };
  // string deviceName = 1;
  void clear_devicename();
  const std::string& devicename() const;
  void set_devicename(const std::string& value);
  void set_devicename(std::string&& value);
  void set_devicename(const char* value);
  void set_devicename(const char* value, size_t size);
  std::string* mutable_devicename();
  std::string* release_devicename();
  void set_allocated_devicename(std::string* devicename);
  private:
  const std::string& _internal_devicename() const;
  void _internal_set_devicename(const std::string& value);
  std::string* _internal_mutable_devicename();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.AddSpareRequest.SpareDeviceName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr devicename_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class AddSpareRequest_Param PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.AddSpareRequest.Param) */ {
 public:
  inline AddSpareRequest_Param() : AddSpareRequest_Param(nullptr) {}
  virtual ~AddSpareRequest_Param();
  explicit constexpr AddSpareRequest_Param(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddSpareRequest_Param(const AddSpareRequest_Param& from);
  AddSpareRequest_Param(AddSpareRequest_Param&& from) noexcept
    : AddSpareRequest_Param() {
    *this = ::std::move(from);
  }

  inline AddSpareRequest_Param& operator=(const AddSpareRequest_Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddSpareRequest_Param& operator=(AddSpareRequest_Param&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddSpareRequest_Param& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddSpareRequest_Param* internal_default_instance() {
    return reinterpret_cast<const AddSpareRequest_Param*>(
               &_AddSpareRequest_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(AddSpareRequest_Param& a, AddSpareRequest_Param& b) {
    a.Swap(&b);
  }
  inline void Swap(AddSpareRequest_Param* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddSpareRequest_Param* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddSpareRequest_Param* New() const final {
    return CreateMaybeMessage<AddSpareRequest_Param>(nullptr);
  }

  AddSpareRequest_Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddSpareRequest_Param>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddSpareRequest_Param& from);
  void MergeFrom(const AddSpareRequest_Param& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddSpareRequest_Param* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.AddSpareRequest.Param";
  }
  protected:
  explicit AddSpareRequest_Param(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpareFieldNumber = 3,
    kArrayFieldNumber = 1,
  };
  // repeated .grpc_cli.AddSpareRequest.SpareDeviceName spare = 3;
  int spare_size() const;
  private:
  int _internal_spare_size() const;
  public:
  void clear_spare();
  ::grpc_cli::AddSpareRequest_SpareDeviceName* mutable_spare(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::AddSpareRequest_SpareDeviceName >*
      mutable_spare();
  private:
  const ::grpc_cli::AddSpareRequest_SpareDeviceName& _internal_spare(int index) const;
  ::grpc_cli::AddSpareRequest_SpareDeviceName* _internal_add_spare();
  public:
  const ::grpc_cli::AddSpareRequest_SpareDeviceName& spare(int index) const;
  ::grpc_cli::AddSpareRequest_SpareDeviceName* add_spare();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::AddSpareRequest_SpareDeviceName >&
      spare() const;

  // string array = 1;
  void clear_array();
  const std::string& array() const;
  void set_array(const std::string& value);
  void set_array(std::string&& value);
  void set_array(const char* value);
  void set_array(const char* value, size_t size);
  std::string* mutable_array();
  std::string* release_array();
  void set_allocated_array(std::string* array);
  private:
  const std::string& _internal_array() const;
  void _internal_set_array(const std::string& value);
  std::string* _internal_mutable_array();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.AddSpareRequest.Param)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::AddSpareRequest_SpareDeviceName > spare_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr array_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class AddSpareRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.AddSpareRequest) */ {
 public:
  inline AddSpareRequest() : AddSpareRequest(nullptr) {}
  virtual ~AddSpareRequest();
  explicit constexpr AddSpareRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddSpareRequest(const AddSpareRequest& from);
  AddSpareRequest(AddSpareRequest&& from) noexcept
    : AddSpareRequest() {
    *this = ::std::move(from);
  }

  inline AddSpareRequest& operator=(const AddSpareRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddSpareRequest& operator=(AddSpareRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddSpareRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddSpareRequest* internal_default_instance() {
    return reinterpret_cast<const AddSpareRequest*>(
               &_AddSpareRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(AddSpareRequest& a, AddSpareRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddSpareRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddSpareRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddSpareRequest* New() const final {
    return CreateMaybeMessage<AddSpareRequest>(nullptr);
  }

  AddSpareRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddSpareRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddSpareRequest& from);
  void MergeFrom(const AddSpareRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddSpareRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.AddSpareRequest";
  }
  protected:
  explicit AddSpareRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef AddSpareRequest_SpareDeviceName SpareDeviceName;
  typedef AddSpareRequest_Param Param;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
    kParamFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // .grpc_cli.AddSpareRequest.Param param = 4;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::grpc_cli::AddSpareRequest_Param& param() const;
  ::grpc_cli::AddSpareRequest_Param* release_param();
  ::grpc_cli::AddSpareRequest_Param* mutable_param();
  void set_allocated_param(::grpc_cli::AddSpareRequest_Param* param);
  private:
  const ::grpc_cli::AddSpareRequest_Param& _internal_param() const;
  ::grpc_cli::AddSpareRequest_Param* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::grpc_cli::AddSpareRequest_Param* param);
  ::grpc_cli::AddSpareRequest_Param* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:grpc_cli.AddSpareRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  ::grpc_cli::AddSpareRequest_Param* param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class AddSpareResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.AddSpareResponse.Result) */ {
 public:
  inline AddSpareResponse_Result() : AddSpareResponse_Result(nullptr) {}
  virtual ~AddSpareResponse_Result();
  explicit constexpr AddSpareResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddSpareResponse_Result(const AddSpareResponse_Result& from);
  AddSpareResponse_Result(AddSpareResponse_Result&& from) noexcept
    : AddSpareResponse_Result() {
    *this = ::std::move(from);
  }

  inline AddSpareResponse_Result& operator=(const AddSpareResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddSpareResponse_Result& operator=(AddSpareResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddSpareResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddSpareResponse_Result* internal_default_instance() {
    return reinterpret_cast<const AddSpareResponse_Result*>(
               &_AddSpareResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(AddSpareResponse_Result& a, AddSpareResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(AddSpareResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddSpareResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddSpareResponse_Result* New() const final {
    return CreateMaybeMessage<AddSpareResponse_Result>(nullptr);
  }

  AddSpareResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddSpareResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddSpareResponse_Result& from);
  void MergeFrom(const AddSpareResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddSpareResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.AddSpareResponse.Result";
  }
  protected:
  explicit AddSpareResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:grpc_cli.AddSpareResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class AddSpareResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.AddSpareResponse) */ {
 public:
  inline AddSpareResponse() : AddSpareResponse(nullptr) {}
  virtual ~AddSpareResponse();
  explicit constexpr AddSpareResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddSpareResponse(const AddSpareResponse& from);
  AddSpareResponse(AddSpareResponse&& from) noexcept
    : AddSpareResponse() {
    *this = ::std::move(from);
  }

  inline AddSpareResponse& operator=(const AddSpareResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddSpareResponse& operator=(AddSpareResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddSpareResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddSpareResponse* internal_default_instance() {
    return reinterpret_cast<const AddSpareResponse*>(
               &_AddSpareResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(AddSpareResponse& a, AddSpareResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddSpareResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddSpareResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddSpareResponse* New() const final {
    return CreateMaybeMessage<AddSpareResponse>(nullptr);
  }

  AddSpareResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddSpareResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddSpareResponse& from);
  void MergeFrom(const AddSpareResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddSpareResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.AddSpareResponse";
  }
  protected:
  explicit AddSpareResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef AddSpareResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.AddSpareResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::AddSpareResponse_Result& result() const;
  ::grpc_cli::AddSpareResponse_Result* release_result();
  ::grpc_cli::AddSpareResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::AddSpareResponse_Result* result);
  private:
  const ::grpc_cli::AddSpareResponse_Result& _internal_result() const;
  ::grpc_cli::AddSpareResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::AddSpareResponse_Result* result);
  ::grpc_cli::AddSpareResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.AddSpareResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::AddSpareResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class DeviceNameList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.DeviceNameList) */ {
 public:
  inline DeviceNameList() : DeviceNameList(nullptr) {}
  virtual ~DeviceNameList();
  explicit constexpr DeviceNameList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceNameList(const DeviceNameList& from);
  DeviceNameList(DeviceNameList&& from) noexcept
    : DeviceNameList() {
    *this = ::std::move(from);
  }

  inline DeviceNameList& operator=(const DeviceNameList& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceNameList& operator=(DeviceNameList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceNameList& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceNameList* internal_default_instance() {
    return reinterpret_cast<const DeviceNameList*>(
               &_DeviceNameList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(DeviceNameList& a, DeviceNameList& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceNameList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceNameList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceNameList* New() const final {
    return CreateMaybeMessage<DeviceNameList>(nullptr);
  }

  DeviceNameList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceNameList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceNameList& from);
  void MergeFrom(const DeviceNameList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceNameList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.DeviceNameList";
  }
  protected:
  explicit DeviceNameList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceNameFieldNumber = 1,
  };
  // string deviceName = 1;
  void clear_devicename();
  const std::string& devicename() const;
  void set_devicename(const std::string& value);
  void set_devicename(std::string&& value);
  void set_devicename(const char* value);
  void set_devicename(const char* value, size_t size);
  std::string* mutable_devicename();
  std::string* release_devicename();
  void set_allocated_devicename(std::string* devicename);
  private:
  const std::string& _internal_devicename() const;
  void _internal_set_devicename(const std::string& value);
  std::string* _internal_mutable_devicename();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.DeviceNameList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr devicename_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class RemoveSpareRequest_SpareDeviceName PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.RemoveSpareRequest.SpareDeviceName) */ {
 public:
  inline RemoveSpareRequest_SpareDeviceName() : RemoveSpareRequest_SpareDeviceName(nullptr) {}
  virtual ~RemoveSpareRequest_SpareDeviceName();
  explicit constexpr RemoveSpareRequest_SpareDeviceName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveSpareRequest_SpareDeviceName(const RemoveSpareRequest_SpareDeviceName& from);
  RemoveSpareRequest_SpareDeviceName(RemoveSpareRequest_SpareDeviceName&& from) noexcept
    : RemoveSpareRequest_SpareDeviceName() {
    *this = ::std::move(from);
  }

  inline RemoveSpareRequest_SpareDeviceName& operator=(const RemoveSpareRequest_SpareDeviceName& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveSpareRequest_SpareDeviceName& operator=(RemoveSpareRequest_SpareDeviceName&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveSpareRequest_SpareDeviceName& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveSpareRequest_SpareDeviceName* internal_default_instance() {
    return reinterpret_cast<const RemoveSpareRequest_SpareDeviceName*>(
               &_RemoveSpareRequest_SpareDeviceName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(RemoveSpareRequest_SpareDeviceName& a, RemoveSpareRequest_SpareDeviceName& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveSpareRequest_SpareDeviceName* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveSpareRequest_SpareDeviceName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveSpareRequest_SpareDeviceName* New() const final {
    return CreateMaybeMessage<RemoveSpareRequest_SpareDeviceName>(nullptr);
  }

  RemoveSpareRequest_SpareDeviceName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveSpareRequest_SpareDeviceName>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveSpareRequest_SpareDeviceName& from);
  void MergeFrom(const RemoveSpareRequest_SpareDeviceName& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveSpareRequest_SpareDeviceName* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.RemoveSpareRequest.SpareDeviceName";
  }
  protected:
  explicit RemoveSpareRequest_SpareDeviceName(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceNameFieldNumber = 1,
  };
  // string deviceName = 1;
  void clear_devicename();
  const std::string& devicename() const;
  void set_devicename(const std::string& value);
  void set_devicename(std::string&& value);
  void set_devicename(const char* value);
  void set_devicename(const char* value, size_t size);
  std::string* mutable_devicename();
  std::string* release_devicename();
  void set_allocated_devicename(std::string* devicename);
  private:
  const std::string& _internal_devicename() const;
  void _internal_set_devicename(const std::string& value);
  std::string* _internal_mutable_devicename();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.RemoveSpareRequest.SpareDeviceName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr devicename_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class RemoveSpareRequest_Param PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.RemoveSpareRequest.Param) */ {
 public:
  inline RemoveSpareRequest_Param() : RemoveSpareRequest_Param(nullptr) {}
  virtual ~RemoveSpareRequest_Param();
  explicit constexpr RemoveSpareRequest_Param(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveSpareRequest_Param(const RemoveSpareRequest_Param& from);
  RemoveSpareRequest_Param(RemoveSpareRequest_Param&& from) noexcept
    : RemoveSpareRequest_Param() {
    *this = ::std::move(from);
  }

  inline RemoveSpareRequest_Param& operator=(const RemoveSpareRequest_Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveSpareRequest_Param& operator=(RemoveSpareRequest_Param&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveSpareRequest_Param& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveSpareRequest_Param* internal_default_instance() {
    return reinterpret_cast<const RemoveSpareRequest_Param*>(
               &_RemoveSpareRequest_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(RemoveSpareRequest_Param& a, RemoveSpareRequest_Param& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveSpareRequest_Param* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveSpareRequest_Param* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveSpareRequest_Param* New() const final {
    return CreateMaybeMessage<RemoveSpareRequest_Param>(nullptr);
  }

  RemoveSpareRequest_Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveSpareRequest_Param>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveSpareRequest_Param& from);
  void MergeFrom(const RemoveSpareRequest_Param& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveSpareRequest_Param* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.RemoveSpareRequest.Param";
  }
  protected:
  explicit RemoveSpareRequest_Param(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpareFieldNumber = 2,
    kArrayFieldNumber = 1,
  };
  // repeated .grpc_cli.RemoveSpareRequest.SpareDeviceName spare = 2;
  int spare_size() const;
  private:
  int _internal_spare_size() const;
  public:
  void clear_spare();
  ::grpc_cli::RemoveSpareRequest_SpareDeviceName* mutable_spare(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::RemoveSpareRequest_SpareDeviceName >*
      mutable_spare();
  private:
  const ::grpc_cli::RemoveSpareRequest_SpareDeviceName& _internal_spare(int index) const;
  ::grpc_cli::RemoveSpareRequest_SpareDeviceName* _internal_add_spare();
  public:
  const ::grpc_cli::RemoveSpareRequest_SpareDeviceName& spare(int index) const;
  ::grpc_cli::RemoveSpareRequest_SpareDeviceName* add_spare();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::RemoveSpareRequest_SpareDeviceName >&
      spare() const;

  // string array = 1;
  void clear_array();
  const std::string& array() const;
  void set_array(const std::string& value);
  void set_array(std::string&& value);
  void set_array(const char* value);
  void set_array(const char* value, size_t size);
  std::string* mutable_array();
  std::string* release_array();
  void set_allocated_array(std::string* array);
  private:
  const std::string& _internal_array() const;
  void _internal_set_array(const std::string& value);
  std::string* _internal_mutable_array();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.RemoveSpareRequest.Param)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::RemoveSpareRequest_SpareDeviceName > spare_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr array_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class RemoveSpareRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.RemoveSpareRequest) */ {
 public:
  inline RemoveSpareRequest() : RemoveSpareRequest(nullptr) {}
  virtual ~RemoveSpareRequest();
  explicit constexpr RemoveSpareRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveSpareRequest(const RemoveSpareRequest& from);
  RemoveSpareRequest(RemoveSpareRequest&& from) noexcept
    : RemoveSpareRequest() {
    *this = ::std::move(from);
  }

  inline RemoveSpareRequest& operator=(const RemoveSpareRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveSpareRequest& operator=(RemoveSpareRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveSpareRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveSpareRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveSpareRequest*>(
               &_RemoveSpareRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(RemoveSpareRequest& a, RemoveSpareRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveSpareRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveSpareRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveSpareRequest* New() const final {
    return CreateMaybeMessage<RemoveSpareRequest>(nullptr);
  }

  RemoveSpareRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveSpareRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveSpareRequest& from);
  void MergeFrom(const RemoveSpareRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveSpareRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.RemoveSpareRequest";
  }
  protected:
  explicit RemoveSpareRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef RemoveSpareRequest_SpareDeviceName SpareDeviceName;
  typedef RemoveSpareRequest_Param Param;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
    kParamFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // .grpc_cli.RemoveSpareRequest.Param param = 4;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::grpc_cli::RemoveSpareRequest_Param& param() const;
  ::grpc_cli::RemoveSpareRequest_Param* release_param();
  ::grpc_cli::RemoveSpareRequest_Param* mutable_param();
  void set_allocated_param(::grpc_cli::RemoveSpareRequest_Param* param);
  private:
  const ::grpc_cli::RemoveSpareRequest_Param& _internal_param() const;
  ::grpc_cli::RemoveSpareRequest_Param* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::grpc_cli::RemoveSpareRequest_Param* param);
  ::grpc_cli::RemoveSpareRequest_Param* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:grpc_cli.RemoveSpareRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  ::grpc_cli::RemoveSpareRequest_Param* param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class RemoveSpareResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.RemoveSpareResponse.Result) */ {
 public:
  inline RemoveSpareResponse_Result() : RemoveSpareResponse_Result(nullptr) {}
  virtual ~RemoveSpareResponse_Result();
  explicit constexpr RemoveSpareResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveSpareResponse_Result(const RemoveSpareResponse_Result& from);
  RemoveSpareResponse_Result(RemoveSpareResponse_Result&& from) noexcept
    : RemoveSpareResponse_Result() {
    *this = ::std::move(from);
  }

  inline RemoveSpareResponse_Result& operator=(const RemoveSpareResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveSpareResponse_Result& operator=(RemoveSpareResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveSpareResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveSpareResponse_Result* internal_default_instance() {
    return reinterpret_cast<const RemoveSpareResponse_Result*>(
               &_RemoveSpareResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(RemoveSpareResponse_Result& a, RemoveSpareResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveSpareResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveSpareResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveSpareResponse_Result* New() const final {
    return CreateMaybeMessage<RemoveSpareResponse_Result>(nullptr);
  }

  RemoveSpareResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveSpareResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveSpareResponse_Result& from);
  void MergeFrom(const RemoveSpareResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveSpareResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.RemoveSpareResponse.Result";
  }
  protected:
  explicit RemoveSpareResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:grpc_cli.RemoveSpareResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class RemoveSpareResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.RemoveSpareResponse) */ {
 public:
  inline RemoveSpareResponse() : RemoveSpareResponse(nullptr) {}
  virtual ~RemoveSpareResponse();
  explicit constexpr RemoveSpareResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveSpareResponse(const RemoveSpareResponse& from);
  RemoveSpareResponse(RemoveSpareResponse&& from) noexcept
    : RemoveSpareResponse() {
    *this = ::std::move(from);
  }

  inline RemoveSpareResponse& operator=(const RemoveSpareResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveSpareResponse& operator=(RemoveSpareResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveSpareResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveSpareResponse* internal_default_instance() {
    return reinterpret_cast<const RemoveSpareResponse*>(
               &_RemoveSpareResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(RemoveSpareResponse& a, RemoveSpareResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveSpareResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveSpareResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveSpareResponse* New() const final {
    return CreateMaybeMessage<RemoveSpareResponse>(nullptr);
  }

  RemoveSpareResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveSpareResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveSpareResponse& from);
  void MergeFrom(const RemoveSpareResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveSpareResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.RemoveSpareResponse";
  }
  protected:
  explicit RemoveSpareResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef RemoveSpareResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.RemoveSpareResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::RemoveSpareResponse_Result& result() const;
  ::grpc_cli::RemoveSpareResponse_Result* release_result();
  ::grpc_cli::RemoveSpareResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::RemoveSpareResponse_Result* result);
  private:
  const ::grpc_cli::RemoveSpareResponse_Result& _internal_result() const;
  ::grpc_cli::RemoveSpareResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::RemoveSpareResponse_Result* result);
  ::grpc_cli::RemoveSpareResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.RemoveSpareResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::RemoveSpareResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ReplaceArrayDeviceRequest_Param PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ReplaceArrayDeviceRequest.Param) */ {
 public:
  inline ReplaceArrayDeviceRequest_Param() : ReplaceArrayDeviceRequest_Param(nullptr) {}
  virtual ~ReplaceArrayDeviceRequest_Param();
  explicit constexpr ReplaceArrayDeviceRequest_Param(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReplaceArrayDeviceRequest_Param(const ReplaceArrayDeviceRequest_Param& from);
  ReplaceArrayDeviceRequest_Param(ReplaceArrayDeviceRequest_Param&& from) noexcept
    : ReplaceArrayDeviceRequest_Param() {
    *this = ::std::move(from);
  }

  inline ReplaceArrayDeviceRequest_Param& operator=(const ReplaceArrayDeviceRequest_Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplaceArrayDeviceRequest_Param& operator=(ReplaceArrayDeviceRequest_Param&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReplaceArrayDeviceRequest_Param& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReplaceArrayDeviceRequest_Param* internal_default_instance() {
    return reinterpret_cast<const ReplaceArrayDeviceRequest_Param*>(
               &_ReplaceArrayDeviceRequest_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(ReplaceArrayDeviceRequest_Param& a, ReplaceArrayDeviceRequest_Param& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplaceArrayDeviceRequest_Param* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplaceArrayDeviceRequest_Param* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReplaceArrayDeviceRequest_Param* New() const final {
    return CreateMaybeMessage<ReplaceArrayDeviceRequest_Param>(nullptr);
  }

  ReplaceArrayDeviceRequest_Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReplaceArrayDeviceRequest_Param>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReplaceArrayDeviceRequest_Param& from);
  void MergeFrom(const ReplaceArrayDeviceRequest_Param& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplaceArrayDeviceRequest_Param* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ReplaceArrayDeviceRequest.Param";
  }
  protected:
  explicit ReplaceArrayDeviceRequest_Param(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrayFieldNumber = 1,
    kDeviceFieldNumber = 2,
  };
  // string array = 1;
  void clear_array();
  const std::string& array() const;
  void set_array(const std::string& value);
  void set_array(std::string&& value);
  void set_array(const char* value);
  void set_array(const char* value, size_t size);
  std::string* mutable_array();
  std::string* release_array();
  void set_allocated_array(std::string* array);
  private:
  const std::string& _internal_array() const;
  void _internal_set_array(const std::string& value);
  std::string* _internal_mutable_array();
  public:

  // string device = 2;
  void clear_device();
  const std::string& device() const;
  void set_device(const std::string& value);
  void set_device(std::string&& value);
  void set_device(const char* value);
  void set_device(const char* value, size_t size);
  std::string* mutable_device();
  std::string* release_device();
  void set_allocated_device(std::string* device);
  private:
  const std::string& _internal_device() const;
  void _internal_set_device(const std::string& value);
  std::string* _internal_mutable_device();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.ReplaceArrayDeviceRequest.Param)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr array_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ReplaceArrayDeviceRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ReplaceArrayDeviceRequest) */ {
 public:
  inline ReplaceArrayDeviceRequest() : ReplaceArrayDeviceRequest(nullptr) {}
  virtual ~ReplaceArrayDeviceRequest();
  explicit constexpr ReplaceArrayDeviceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReplaceArrayDeviceRequest(const ReplaceArrayDeviceRequest& from);
  ReplaceArrayDeviceRequest(ReplaceArrayDeviceRequest&& from) noexcept
    : ReplaceArrayDeviceRequest() {
    *this = ::std::move(from);
  }

  inline ReplaceArrayDeviceRequest& operator=(const ReplaceArrayDeviceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplaceArrayDeviceRequest& operator=(ReplaceArrayDeviceRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReplaceArrayDeviceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReplaceArrayDeviceRequest* internal_default_instance() {
    return reinterpret_cast<const ReplaceArrayDeviceRequest*>(
               &_ReplaceArrayDeviceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(ReplaceArrayDeviceRequest& a, ReplaceArrayDeviceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplaceArrayDeviceRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplaceArrayDeviceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReplaceArrayDeviceRequest* New() const final {
    return CreateMaybeMessage<ReplaceArrayDeviceRequest>(nullptr);
  }

  ReplaceArrayDeviceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReplaceArrayDeviceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReplaceArrayDeviceRequest& from);
  void MergeFrom(const ReplaceArrayDeviceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplaceArrayDeviceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ReplaceArrayDeviceRequest";
  }
  protected:
  explicit ReplaceArrayDeviceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ReplaceArrayDeviceRequest_Param Param;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
    kParamFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // .grpc_cli.ReplaceArrayDeviceRequest.Param param = 4;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::grpc_cli::ReplaceArrayDeviceRequest_Param& param() const;
  ::grpc_cli::ReplaceArrayDeviceRequest_Param* release_param();
  ::grpc_cli::ReplaceArrayDeviceRequest_Param* mutable_param();
  void set_allocated_param(::grpc_cli::ReplaceArrayDeviceRequest_Param* param);
  private:
  const ::grpc_cli::ReplaceArrayDeviceRequest_Param& _internal_param() const;
  ::grpc_cli::ReplaceArrayDeviceRequest_Param* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::grpc_cli::ReplaceArrayDeviceRequest_Param* param);
  ::grpc_cli::ReplaceArrayDeviceRequest_Param* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:grpc_cli.ReplaceArrayDeviceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  ::grpc_cli::ReplaceArrayDeviceRequest_Param* param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ReplaceArrayDeviceResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ReplaceArrayDeviceResponse.Result) */ {
 public:
  inline ReplaceArrayDeviceResponse_Result() : ReplaceArrayDeviceResponse_Result(nullptr) {}
  virtual ~ReplaceArrayDeviceResponse_Result();
  explicit constexpr ReplaceArrayDeviceResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReplaceArrayDeviceResponse_Result(const ReplaceArrayDeviceResponse_Result& from);
  ReplaceArrayDeviceResponse_Result(ReplaceArrayDeviceResponse_Result&& from) noexcept
    : ReplaceArrayDeviceResponse_Result() {
    *this = ::std::move(from);
  }

  inline ReplaceArrayDeviceResponse_Result& operator=(const ReplaceArrayDeviceResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplaceArrayDeviceResponse_Result& operator=(ReplaceArrayDeviceResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReplaceArrayDeviceResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReplaceArrayDeviceResponse_Result* internal_default_instance() {
    return reinterpret_cast<const ReplaceArrayDeviceResponse_Result*>(
               &_ReplaceArrayDeviceResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(ReplaceArrayDeviceResponse_Result& a, ReplaceArrayDeviceResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplaceArrayDeviceResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplaceArrayDeviceResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReplaceArrayDeviceResponse_Result* New() const final {
    return CreateMaybeMessage<ReplaceArrayDeviceResponse_Result>(nullptr);
  }

  ReplaceArrayDeviceResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReplaceArrayDeviceResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReplaceArrayDeviceResponse_Result& from);
  void MergeFrom(const ReplaceArrayDeviceResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplaceArrayDeviceResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ReplaceArrayDeviceResponse.Result";
  }
  protected:
  explicit ReplaceArrayDeviceResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:grpc_cli.ReplaceArrayDeviceResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ReplaceArrayDeviceResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ReplaceArrayDeviceResponse) */ {
 public:
  inline ReplaceArrayDeviceResponse() : ReplaceArrayDeviceResponse(nullptr) {}
  virtual ~ReplaceArrayDeviceResponse();
  explicit constexpr ReplaceArrayDeviceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReplaceArrayDeviceResponse(const ReplaceArrayDeviceResponse& from);
  ReplaceArrayDeviceResponse(ReplaceArrayDeviceResponse&& from) noexcept
    : ReplaceArrayDeviceResponse() {
    *this = ::std::move(from);
  }

  inline ReplaceArrayDeviceResponse& operator=(const ReplaceArrayDeviceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplaceArrayDeviceResponse& operator=(ReplaceArrayDeviceResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReplaceArrayDeviceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReplaceArrayDeviceResponse* internal_default_instance() {
    return reinterpret_cast<const ReplaceArrayDeviceResponse*>(
               &_ReplaceArrayDeviceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(ReplaceArrayDeviceResponse& a, ReplaceArrayDeviceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplaceArrayDeviceResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplaceArrayDeviceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReplaceArrayDeviceResponse* New() const final {
    return CreateMaybeMessage<ReplaceArrayDeviceResponse>(nullptr);
  }

  ReplaceArrayDeviceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReplaceArrayDeviceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReplaceArrayDeviceResponse& from);
  void MergeFrom(const ReplaceArrayDeviceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplaceArrayDeviceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ReplaceArrayDeviceResponse";
  }
  protected:
  explicit ReplaceArrayDeviceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ReplaceArrayDeviceResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.ReplaceArrayDeviceResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::ReplaceArrayDeviceResponse_Result& result() const;
  ::grpc_cli::ReplaceArrayDeviceResponse_Result* release_result();
  ::grpc_cli::ReplaceArrayDeviceResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::ReplaceArrayDeviceResponse_Result* result);
  private:
  const ::grpc_cli::ReplaceArrayDeviceResponse_Result& _internal_result() const;
  ::grpc_cli::ReplaceArrayDeviceResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::ReplaceArrayDeviceResponse_Result* result);
  ::grpc_cli::ReplaceArrayDeviceResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.ReplaceArrayDeviceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::ReplaceArrayDeviceResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class CreateArrayRequest_Param PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.CreateArrayRequest.Param) */ {
 public:
  inline CreateArrayRequest_Param() : CreateArrayRequest_Param(nullptr) {}
  virtual ~CreateArrayRequest_Param();
  explicit constexpr CreateArrayRequest_Param(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateArrayRequest_Param(const CreateArrayRequest_Param& from);
  CreateArrayRequest_Param(CreateArrayRequest_Param&& from) noexcept
    : CreateArrayRequest_Param() {
    *this = ::std::move(from);
  }

  inline CreateArrayRequest_Param& operator=(const CreateArrayRequest_Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateArrayRequest_Param& operator=(CreateArrayRequest_Param&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateArrayRequest_Param& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateArrayRequest_Param* internal_default_instance() {
    return reinterpret_cast<const CreateArrayRequest_Param*>(
               &_CreateArrayRequest_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(CreateArrayRequest_Param& a, CreateArrayRequest_Param& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateArrayRequest_Param* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateArrayRequest_Param* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateArrayRequest_Param* New() const final {
    return CreateMaybeMessage<CreateArrayRequest_Param>(nullptr);
  }

  CreateArrayRequest_Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateArrayRequest_Param>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateArrayRequest_Param& from);
  void MergeFrom(const CreateArrayRequest_Param& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateArrayRequest_Param* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.CreateArrayRequest.Param";
  }
  protected:
  explicit CreateArrayRequest_Param(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBufferFieldNumber = 2,
    kDataFieldNumber = 3,
    kSpareFieldNumber = 4,
    kNameFieldNumber = 1,
    kRaidtypeFieldNumber = 5,
  };
  // repeated .grpc_cli.DeviceNameList buffer = 2;
  int buffer_size() const;
  private:
  int _internal_buffer_size() const;
  public:
  void clear_buffer();
  ::grpc_cli::DeviceNameList* mutable_buffer(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::DeviceNameList >*
      mutable_buffer();
  private:
  const ::grpc_cli::DeviceNameList& _internal_buffer(int index) const;
  ::grpc_cli::DeviceNameList* _internal_add_buffer();
  public:
  const ::grpc_cli::DeviceNameList& buffer(int index) const;
  ::grpc_cli::DeviceNameList* add_buffer();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::DeviceNameList >&
      buffer() const;

  // repeated .grpc_cli.DeviceNameList data = 3;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::grpc_cli::DeviceNameList* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::DeviceNameList >*
      mutable_data();
  private:
  const ::grpc_cli::DeviceNameList& _internal_data(int index) const;
  ::grpc_cli::DeviceNameList* _internal_add_data();
  public:
  const ::grpc_cli::DeviceNameList& data(int index) const;
  ::grpc_cli::DeviceNameList* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::DeviceNameList >&
      data() const;

  // repeated .grpc_cli.DeviceNameList spare = 4;
  int spare_size() const;
  private:
  int _internal_spare_size() const;
  public:
  void clear_spare();
  ::grpc_cli::DeviceNameList* mutable_spare(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::DeviceNameList >*
      mutable_spare();
  private:
  const ::grpc_cli::DeviceNameList& _internal_spare(int index) const;
  ::grpc_cli::DeviceNameList* _internal_add_spare();
  public:
  const ::grpc_cli::DeviceNameList& spare(int index) const;
  ::grpc_cli::DeviceNameList* add_spare();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::DeviceNameList >&
      spare() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string raidtype = 5;
  void clear_raidtype();
  const std::string& raidtype() const;
  void set_raidtype(const std::string& value);
  void set_raidtype(std::string&& value);
  void set_raidtype(const char* value);
  void set_raidtype(const char* value, size_t size);
  std::string* mutable_raidtype();
  std::string* release_raidtype();
  void set_allocated_raidtype(std::string* raidtype);
  private:
  const std::string& _internal_raidtype() const;
  void _internal_set_raidtype(const std::string& value);
  std::string* _internal_mutable_raidtype();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.CreateArrayRequest.Param)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::DeviceNameList > buffer_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::DeviceNameList > data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::DeviceNameList > spare_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raidtype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class CreateArrayRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.CreateArrayRequest) */ {
 public:
  inline CreateArrayRequest() : CreateArrayRequest(nullptr) {}
  virtual ~CreateArrayRequest();
  explicit constexpr CreateArrayRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateArrayRequest(const CreateArrayRequest& from);
  CreateArrayRequest(CreateArrayRequest&& from) noexcept
    : CreateArrayRequest() {
    *this = ::std::move(from);
  }

  inline CreateArrayRequest& operator=(const CreateArrayRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateArrayRequest& operator=(CreateArrayRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateArrayRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateArrayRequest* internal_default_instance() {
    return reinterpret_cast<const CreateArrayRequest*>(
               &_CreateArrayRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(CreateArrayRequest& a, CreateArrayRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateArrayRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateArrayRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateArrayRequest* New() const final {
    return CreateMaybeMessage<CreateArrayRequest>(nullptr);
  }

  CreateArrayRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateArrayRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateArrayRequest& from);
  void MergeFrom(const CreateArrayRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateArrayRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.CreateArrayRequest";
  }
  protected:
  explicit CreateArrayRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CreateArrayRequest_Param Param;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
    kParamFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // .grpc_cli.CreateArrayRequest.Param param = 4;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::grpc_cli::CreateArrayRequest_Param& param() const;
  ::grpc_cli::CreateArrayRequest_Param* release_param();
  ::grpc_cli::CreateArrayRequest_Param* mutable_param();
  void set_allocated_param(::grpc_cli::CreateArrayRequest_Param* param);
  private:
  const ::grpc_cli::CreateArrayRequest_Param& _internal_param() const;
  ::grpc_cli::CreateArrayRequest_Param* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::grpc_cli::CreateArrayRequest_Param* param);
  ::grpc_cli::CreateArrayRequest_Param* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:grpc_cli.CreateArrayRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  ::grpc_cli::CreateArrayRequest_Param* param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class CreateArrayResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.CreateArrayResponse.Result) */ {
 public:
  inline CreateArrayResponse_Result() : CreateArrayResponse_Result(nullptr) {}
  virtual ~CreateArrayResponse_Result();
  explicit constexpr CreateArrayResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateArrayResponse_Result(const CreateArrayResponse_Result& from);
  CreateArrayResponse_Result(CreateArrayResponse_Result&& from) noexcept
    : CreateArrayResponse_Result() {
    *this = ::std::move(from);
  }

  inline CreateArrayResponse_Result& operator=(const CreateArrayResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateArrayResponse_Result& operator=(CreateArrayResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateArrayResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateArrayResponse_Result* internal_default_instance() {
    return reinterpret_cast<const CreateArrayResponse_Result*>(
               &_CreateArrayResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(CreateArrayResponse_Result& a, CreateArrayResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateArrayResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateArrayResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateArrayResponse_Result* New() const final {
    return CreateMaybeMessage<CreateArrayResponse_Result>(nullptr);
  }

  CreateArrayResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateArrayResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateArrayResponse_Result& from);
  void MergeFrom(const CreateArrayResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateArrayResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.CreateArrayResponse.Result";
  }
  protected:
  explicit CreateArrayResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:grpc_cli.CreateArrayResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class CreateArrayResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.CreateArrayResponse) */ {
 public:
  inline CreateArrayResponse() : CreateArrayResponse(nullptr) {}
  virtual ~CreateArrayResponse();
  explicit constexpr CreateArrayResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateArrayResponse(const CreateArrayResponse& from);
  CreateArrayResponse(CreateArrayResponse&& from) noexcept
    : CreateArrayResponse() {
    *this = ::std::move(from);
  }

  inline CreateArrayResponse& operator=(const CreateArrayResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateArrayResponse& operator=(CreateArrayResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateArrayResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateArrayResponse* internal_default_instance() {
    return reinterpret_cast<const CreateArrayResponse*>(
               &_CreateArrayResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(CreateArrayResponse& a, CreateArrayResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateArrayResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateArrayResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateArrayResponse* New() const final {
    return CreateMaybeMessage<CreateArrayResponse>(nullptr);
  }

  CreateArrayResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateArrayResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateArrayResponse& from);
  void MergeFrom(const CreateArrayResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateArrayResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.CreateArrayResponse";
  }
  protected:
  explicit CreateArrayResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CreateArrayResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.CreateArrayResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::CreateArrayResponse_Result& result() const;
  ::grpc_cli::CreateArrayResponse_Result* release_result();
  ::grpc_cli::CreateArrayResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::CreateArrayResponse_Result* result);
  private:
  const ::grpc_cli::CreateArrayResponse_Result& _internal_result() const;
  ::grpc_cli::CreateArrayResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::CreateArrayResponse_Result* result);
  ::grpc_cli::CreateArrayResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.CreateArrayResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::CreateArrayResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class AutocreateArrayRequest_Param PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.AutocreateArrayRequest.Param) */ {
 public:
  inline AutocreateArrayRequest_Param() : AutocreateArrayRequest_Param(nullptr) {}
  virtual ~AutocreateArrayRequest_Param();
  explicit constexpr AutocreateArrayRequest_Param(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AutocreateArrayRequest_Param(const AutocreateArrayRequest_Param& from);
  AutocreateArrayRequest_Param(AutocreateArrayRequest_Param&& from) noexcept
    : AutocreateArrayRequest_Param() {
    *this = ::std::move(from);
  }

  inline AutocreateArrayRequest_Param& operator=(const AutocreateArrayRequest_Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutocreateArrayRequest_Param& operator=(AutocreateArrayRequest_Param&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AutocreateArrayRequest_Param& default_instance() {
    return *internal_default_instance();
  }
  static inline const AutocreateArrayRequest_Param* internal_default_instance() {
    return reinterpret_cast<const AutocreateArrayRequest_Param*>(
               &_AutocreateArrayRequest_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(AutocreateArrayRequest_Param& a, AutocreateArrayRequest_Param& b) {
    a.Swap(&b);
  }
  inline void Swap(AutocreateArrayRequest_Param* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutocreateArrayRequest_Param* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AutocreateArrayRequest_Param* New() const final {
    return CreateMaybeMessage<AutocreateArrayRequest_Param>(nullptr);
  }

  AutocreateArrayRequest_Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AutocreateArrayRequest_Param>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AutocreateArrayRequest_Param& from);
  void MergeFrom(const AutocreateArrayRequest_Param& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AutocreateArrayRequest_Param* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.AutocreateArrayRequest.Param";
  }
  protected:
  explicit AutocreateArrayRequest_Param(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBufferFieldNumber = 2,
    kNameFieldNumber = 1,
    kRaidtypeFieldNumber = 5,
    kNumDataFieldNumber = 3,
    kNumSpareFieldNumber = 4,
  };
  // repeated .grpc_cli.DeviceNameList buffer = 2;
  int buffer_size() const;
  private:
  int _internal_buffer_size() const;
  public:
  void clear_buffer();
  ::grpc_cli::DeviceNameList* mutable_buffer(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::DeviceNameList >*
      mutable_buffer();
  private:
  const ::grpc_cli::DeviceNameList& _internal_buffer(int index) const;
  ::grpc_cli::DeviceNameList* _internal_add_buffer();
  public:
  const ::grpc_cli::DeviceNameList& buffer(int index) const;
  ::grpc_cli::DeviceNameList* add_buffer();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::DeviceNameList >&
      buffer() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string raidtype = 5;
  void clear_raidtype();
  const std::string& raidtype() const;
  void set_raidtype(const std::string& value);
  void set_raidtype(std::string&& value);
  void set_raidtype(const char* value);
  void set_raidtype(const char* value, size_t size);
  std::string* mutable_raidtype();
  std::string* release_raidtype();
  void set_allocated_raidtype(std::string* raidtype);
  private:
  const std::string& _internal_raidtype() const;
  void _internal_set_raidtype(const std::string& value);
  std::string* _internal_mutable_raidtype();
  public:

  // int32 numData = 3;
  void clear_numdata();
  ::PROTOBUF_NAMESPACE_ID::int32 numdata() const;
  void set_numdata(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_numdata() const;
  void _internal_set_numdata(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 numSpare = 4;
  void clear_numspare();
  ::PROTOBUF_NAMESPACE_ID::int32 numspare() const;
  void set_numspare(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_numspare() const;
  void _internal_set_numspare(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.AutocreateArrayRequest.Param)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::DeviceNameList > buffer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raidtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 numdata_;
  ::PROTOBUF_NAMESPACE_ID::int32 numspare_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class AutocreateArrayRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.AutocreateArrayRequest) */ {
 public:
  inline AutocreateArrayRequest() : AutocreateArrayRequest(nullptr) {}
  virtual ~AutocreateArrayRequest();
  explicit constexpr AutocreateArrayRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AutocreateArrayRequest(const AutocreateArrayRequest& from);
  AutocreateArrayRequest(AutocreateArrayRequest&& from) noexcept
    : AutocreateArrayRequest() {
    *this = ::std::move(from);
  }

  inline AutocreateArrayRequest& operator=(const AutocreateArrayRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutocreateArrayRequest& operator=(AutocreateArrayRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AutocreateArrayRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AutocreateArrayRequest* internal_default_instance() {
    return reinterpret_cast<const AutocreateArrayRequest*>(
               &_AutocreateArrayRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(AutocreateArrayRequest& a, AutocreateArrayRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AutocreateArrayRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutocreateArrayRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AutocreateArrayRequest* New() const final {
    return CreateMaybeMessage<AutocreateArrayRequest>(nullptr);
  }

  AutocreateArrayRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AutocreateArrayRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AutocreateArrayRequest& from);
  void MergeFrom(const AutocreateArrayRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AutocreateArrayRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.AutocreateArrayRequest";
  }
  protected:
  explicit AutocreateArrayRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef AutocreateArrayRequest_Param Param;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
    kParamFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // .grpc_cli.AutocreateArrayRequest.Param param = 4;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::grpc_cli::AutocreateArrayRequest_Param& param() const;
  ::grpc_cli::AutocreateArrayRequest_Param* release_param();
  ::grpc_cli::AutocreateArrayRequest_Param* mutable_param();
  void set_allocated_param(::grpc_cli::AutocreateArrayRequest_Param* param);
  private:
  const ::grpc_cli::AutocreateArrayRequest_Param& _internal_param() const;
  ::grpc_cli::AutocreateArrayRequest_Param* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::grpc_cli::AutocreateArrayRequest_Param* param);
  ::grpc_cli::AutocreateArrayRequest_Param* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:grpc_cli.AutocreateArrayRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  ::grpc_cli::AutocreateArrayRequest_Param* param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class AutocreateArrayResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.AutocreateArrayResponse.Result) */ {
 public:
  inline AutocreateArrayResponse_Result() : AutocreateArrayResponse_Result(nullptr) {}
  virtual ~AutocreateArrayResponse_Result();
  explicit constexpr AutocreateArrayResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AutocreateArrayResponse_Result(const AutocreateArrayResponse_Result& from);
  AutocreateArrayResponse_Result(AutocreateArrayResponse_Result&& from) noexcept
    : AutocreateArrayResponse_Result() {
    *this = ::std::move(from);
  }

  inline AutocreateArrayResponse_Result& operator=(const AutocreateArrayResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutocreateArrayResponse_Result& operator=(AutocreateArrayResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AutocreateArrayResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const AutocreateArrayResponse_Result* internal_default_instance() {
    return reinterpret_cast<const AutocreateArrayResponse_Result*>(
               &_AutocreateArrayResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(AutocreateArrayResponse_Result& a, AutocreateArrayResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(AutocreateArrayResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutocreateArrayResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AutocreateArrayResponse_Result* New() const final {
    return CreateMaybeMessage<AutocreateArrayResponse_Result>(nullptr);
  }

  AutocreateArrayResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AutocreateArrayResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AutocreateArrayResponse_Result& from);
  void MergeFrom(const AutocreateArrayResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AutocreateArrayResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.AutocreateArrayResponse.Result";
  }
  protected:
  explicit AutocreateArrayResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:grpc_cli.AutocreateArrayResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class AutocreateArrayResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.AutocreateArrayResponse) */ {
 public:
  inline AutocreateArrayResponse() : AutocreateArrayResponse(nullptr) {}
  virtual ~AutocreateArrayResponse();
  explicit constexpr AutocreateArrayResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AutocreateArrayResponse(const AutocreateArrayResponse& from);
  AutocreateArrayResponse(AutocreateArrayResponse&& from) noexcept
    : AutocreateArrayResponse() {
    *this = ::std::move(from);
  }

  inline AutocreateArrayResponse& operator=(const AutocreateArrayResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutocreateArrayResponse& operator=(AutocreateArrayResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AutocreateArrayResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AutocreateArrayResponse* internal_default_instance() {
    return reinterpret_cast<const AutocreateArrayResponse*>(
               &_AutocreateArrayResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(AutocreateArrayResponse& a, AutocreateArrayResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AutocreateArrayResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutocreateArrayResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AutocreateArrayResponse* New() const final {
    return CreateMaybeMessage<AutocreateArrayResponse>(nullptr);
  }

  AutocreateArrayResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AutocreateArrayResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AutocreateArrayResponse& from);
  void MergeFrom(const AutocreateArrayResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AutocreateArrayResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.AutocreateArrayResponse";
  }
  protected:
  explicit AutocreateArrayResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef AutocreateArrayResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.AutocreateArrayResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::AutocreateArrayResponse_Result& result() const;
  ::grpc_cli::AutocreateArrayResponse_Result* release_result();
  ::grpc_cli::AutocreateArrayResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::AutocreateArrayResponse_Result* result);
  private:
  const ::grpc_cli::AutocreateArrayResponse_Result& _internal_result() const;
  ::grpc_cli::AutocreateArrayResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::AutocreateArrayResponse_Result* result);
  ::grpc_cli::AutocreateArrayResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.AutocreateArrayResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::AutocreateArrayResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class DeleteArrayRequest_Param PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.DeleteArrayRequest.Param) */ {
 public:
  inline DeleteArrayRequest_Param() : DeleteArrayRequest_Param(nullptr) {}
  virtual ~DeleteArrayRequest_Param();
  explicit constexpr DeleteArrayRequest_Param(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteArrayRequest_Param(const DeleteArrayRequest_Param& from);
  DeleteArrayRequest_Param(DeleteArrayRequest_Param&& from) noexcept
    : DeleteArrayRequest_Param() {
    *this = ::std::move(from);
  }

  inline DeleteArrayRequest_Param& operator=(const DeleteArrayRequest_Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteArrayRequest_Param& operator=(DeleteArrayRequest_Param&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteArrayRequest_Param& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteArrayRequest_Param* internal_default_instance() {
    return reinterpret_cast<const DeleteArrayRequest_Param*>(
               &_DeleteArrayRequest_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(DeleteArrayRequest_Param& a, DeleteArrayRequest_Param& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteArrayRequest_Param* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteArrayRequest_Param* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteArrayRequest_Param* New() const final {
    return CreateMaybeMessage<DeleteArrayRequest_Param>(nullptr);
  }

  DeleteArrayRequest_Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteArrayRequest_Param>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteArrayRequest_Param& from);
  void MergeFrom(const DeleteArrayRequest_Param& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteArrayRequest_Param* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.DeleteArrayRequest.Param";
  }
  protected:
  explicit DeleteArrayRequest_Param(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.DeleteArrayRequest.Param)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class DeleteArrayRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.DeleteArrayRequest) */ {
 public:
  inline DeleteArrayRequest() : DeleteArrayRequest(nullptr) {}
  virtual ~DeleteArrayRequest();
  explicit constexpr DeleteArrayRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteArrayRequest(const DeleteArrayRequest& from);
  DeleteArrayRequest(DeleteArrayRequest&& from) noexcept
    : DeleteArrayRequest() {
    *this = ::std::move(from);
  }

  inline DeleteArrayRequest& operator=(const DeleteArrayRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteArrayRequest& operator=(DeleteArrayRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteArrayRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteArrayRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteArrayRequest*>(
               &_DeleteArrayRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(DeleteArrayRequest& a, DeleteArrayRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteArrayRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteArrayRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteArrayRequest* New() const final {
    return CreateMaybeMessage<DeleteArrayRequest>(nullptr);
  }

  DeleteArrayRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteArrayRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteArrayRequest& from);
  void MergeFrom(const DeleteArrayRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteArrayRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.DeleteArrayRequest";
  }
  protected:
  explicit DeleteArrayRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef DeleteArrayRequest_Param Param;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
    kParamFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // .grpc_cli.DeleteArrayRequest.Param param = 4;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::grpc_cli::DeleteArrayRequest_Param& param() const;
  ::grpc_cli::DeleteArrayRequest_Param* release_param();
  ::grpc_cli::DeleteArrayRequest_Param* mutable_param();
  void set_allocated_param(::grpc_cli::DeleteArrayRequest_Param* param);
  private:
  const ::grpc_cli::DeleteArrayRequest_Param& _internal_param() const;
  ::grpc_cli::DeleteArrayRequest_Param* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::grpc_cli::DeleteArrayRequest_Param* param);
  ::grpc_cli::DeleteArrayRequest_Param* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:grpc_cli.DeleteArrayRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  ::grpc_cli::DeleteArrayRequest_Param* param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class DeleteArrayResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.DeleteArrayResponse.Result) */ {
 public:
  inline DeleteArrayResponse_Result() : DeleteArrayResponse_Result(nullptr) {}
  virtual ~DeleteArrayResponse_Result();
  explicit constexpr DeleteArrayResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteArrayResponse_Result(const DeleteArrayResponse_Result& from);
  DeleteArrayResponse_Result(DeleteArrayResponse_Result&& from) noexcept
    : DeleteArrayResponse_Result() {
    *this = ::std::move(from);
  }

  inline DeleteArrayResponse_Result& operator=(const DeleteArrayResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteArrayResponse_Result& operator=(DeleteArrayResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteArrayResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteArrayResponse_Result* internal_default_instance() {
    return reinterpret_cast<const DeleteArrayResponse_Result*>(
               &_DeleteArrayResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(DeleteArrayResponse_Result& a, DeleteArrayResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteArrayResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteArrayResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteArrayResponse_Result* New() const final {
    return CreateMaybeMessage<DeleteArrayResponse_Result>(nullptr);
  }

  DeleteArrayResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteArrayResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteArrayResponse_Result& from);
  void MergeFrom(const DeleteArrayResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteArrayResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.DeleteArrayResponse.Result";
  }
  protected:
  explicit DeleteArrayResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:grpc_cli.DeleteArrayResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class DeleteArrayResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.DeleteArrayResponse) */ {
 public:
  inline DeleteArrayResponse() : DeleteArrayResponse(nullptr) {}
  virtual ~DeleteArrayResponse();
  explicit constexpr DeleteArrayResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteArrayResponse(const DeleteArrayResponse& from);
  DeleteArrayResponse(DeleteArrayResponse&& from) noexcept
    : DeleteArrayResponse() {
    *this = ::std::move(from);
  }

  inline DeleteArrayResponse& operator=(const DeleteArrayResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteArrayResponse& operator=(DeleteArrayResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteArrayResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteArrayResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteArrayResponse*>(
               &_DeleteArrayResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(DeleteArrayResponse& a, DeleteArrayResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteArrayResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteArrayResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteArrayResponse* New() const final {
    return CreateMaybeMessage<DeleteArrayResponse>(nullptr);
  }

  DeleteArrayResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteArrayResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteArrayResponse& from);
  void MergeFrom(const DeleteArrayResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteArrayResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.DeleteArrayResponse";
  }
  protected:
  explicit DeleteArrayResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef DeleteArrayResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.DeleteArrayResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::DeleteArrayResponse_Result& result() const;
  ::grpc_cli::DeleteArrayResponse_Result* release_result();
  ::grpc_cli::DeleteArrayResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::DeleteArrayResponse_Result* result);
  private:
  const ::grpc_cli::DeleteArrayResponse_Result& _internal_result() const;
  ::grpc_cli::DeleteArrayResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::DeleteArrayResponse_Result* result);
  ::grpc_cli::DeleteArrayResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.DeleteArrayResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::DeleteArrayResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class MountArrayRequest_Param PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.MountArrayRequest.Param) */ {
 public:
  inline MountArrayRequest_Param() : MountArrayRequest_Param(nullptr) {}
  virtual ~MountArrayRequest_Param();
  explicit constexpr MountArrayRequest_Param(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MountArrayRequest_Param(const MountArrayRequest_Param& from);
  MountArrayRequest_Param(MountArrayRequest_Param&& from) noexcept
    : MountArrayRequest_Param() {
    *this = ::std::move(from);
  }

  inline MountArrayRequest_Param& operator=(const MountArrayRequest_Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline MountArrayRequest_Param& operator=(MountArrayRequest_Param&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MountArrayRequest_Param& default_instance() {
    return *internal_default_instance();
  }
  static inline const MountArrayRequest_Param* internal_default_instance() {
    return reinterpret_cast<const MountArrayRequest_Param*>(
               &_MountArrayRequest_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(MountArrayRequest_Param& a, MountArrayRequest_Param& b) {
    a.Swap(&b);
  }
  inline void Swap(MountArrayRequest_Param* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MountArrayRequest_Param* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MountArrayRequest_Param* New() const final {
    return CreateMaybeMessage<MountArrayRequest_Param>(nullptr);
  }

  MountArrayRequest_Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MountArrayRequest_Param>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MountArrayRequest_Param& from);
  void MergeFrom(const MountArrayRequest_Param& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MountArrayRequest_Param* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.MountArrayRequest.Param";
  }
  protected:
  explicit MountArrayRequest_Param(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTargetAddressFieldNumber = 3,
    kEnableWriteThroughFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string targetAddress = 3;
  bool has_targetaddress() const;
  private:
  bool _internal_has_targetaddress() const;
  public:
  void clear_targetaddress();
  const std::string& targetaddress() const;
  void set_targetaddress(const std::string& value);
  void set_targetaddress(std::string&& value);
  void set_targetaddress(const char* value);
  void set_targetaddress(const char* value, size_t size);
  std::string* mutable_targetaddress();
  std::string* release_targetaddress();
  void set_allocated_targetaddress(std::string* targetaddress);
  private:
  const std::string& _internal_targetaddress() const;
  void _internal_set_targetaddress(const std::string& value);
  std::string* _internal_mutable_targetaddress();
  public:

  // bool enableWriteThrough = 2;
  bool has_enablewritethrough() const;
  private:
  bool _internal_has_enablewritethrough() const;
  public:
  void clear_enablewritethrough();
  bool enablewritethrough() const;
  void set_enablewritethrough(bool value);
  private:
  bool _internal_enablewritethrough() const;
  void _internal_set_enablewritethrough(bool value);
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.MountArrayRequest.Param)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr targetaddress_;
  bool enablewritethrough_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class MountArrayRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.MountArrayRequest) */ {
 public:
  inline MountArrayRequest() : MountArrayRequest(nullptr) {}
  virtual ~MountArrayRequest();
  explicit constexpr MountArrayRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MountArrayRequest(const MountArrayRequest& from);
  MountArrayRequest(MountArrayRequest&& from) noexcept
    : MountArrayRequest() {
    *this = ::std::move(from);
  }

  inline MountArrayRequest& operator=(const MountArrayRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MountArrayRequest& operator=(MountArrayRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MountArrayRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MountArrayRequest* internal_default_instance() {
    return reinterpret_cast<const MountArrayRequest*>(
               &_MountArrayRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(MountArrayRequest& a, MountArrayRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MountArrayRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MountArrayRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MountArrayRequest* New() const final {
    return CreateMaybeMessage<MountArrayRequest>(nullptr);
  }

  MountArrayRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MountArrayRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MountArrayRequest& from);
  void MergeFrom(const MountArrayRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MountArrayRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.MountArrayRequest";
  }
  protected:
  explicit MountArrayRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef MountArrayRequest_Param Param;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
    kParamFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // .grpc_cli.MountArrayRequest.Param param = 4;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::grpc_cli::MountArrayRequest_Param& param() const;
  ::grpc_cli::MountArrayRequest_Param* release_param();
  ::grpc_cli::MountArrayRequest_Param* mutable_param();
  void set_allocated_param(::grpc_cli::MountArrayRequest_Param* param);
  private:
  const ::grpc_cli::MountArrayRequest_Param& _internal_param() const;
  ::grpc_cli::MountArrayRequest_Param* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::grpc_cli::MountArrayRequest_Param* param);
  ::grpc_cli::MountArrayRequest_Param* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:grpc_cli.MountArrayRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  ::grpc_cli::MountArrayRequest_Param* param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class MountArrayResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.MountArrayResponse.Result) */ {
 public:
  inline MountArrayResponse_Result() : MountArrayResponse_Result(nullptr) {}
  virtual ~MountArrayResponse_Result();
  explicit constexpr MountArrayResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MountArrayResponse_Result(const MountArrayResponse_Result& from);
  MountArrayResponse_Result(MountArrayResponse_Result&& from) noexcept
    : MountArrayResponse_Result() {
    *this = ::std::move(from);
  }

  inline MountArrayResponse_Result& operator=(const MountArrayResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline MountArrayResponse_Result& operator=(MountArrayResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MountArrayResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const MountArrayResponse_Result* internal_default_instance() {
    return reinterpret_cast<const MountArrayResponse_Result*>(
               &_MountArrayResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(MountArrayResponse_Result& a, MountArrayResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(MountArrayResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MountArrayResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MountArrayResponse_Result* New() const final {
    return CreateMaybeMessage<MountArrayResponse_Result>(nullptr);
  }

  MountArrayResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MountArrayResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MountArrayResponse_Result& from);
  void MergeFrom(const MountArrayResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MountArrayResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.MountArrayResponse.Result";
  }
  protected:
  explicit MountArrayResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:grpc_cli.MountArrayResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class MountArrayResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.MountArrayResponse) */ {
 public:
  inline MountArrayResponse() : MountArrayResponse(nullptr) {}
  virtual ~MountArrayResponse();
  explicit constexpr MountArrayResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MountArrayResponse(const MountArrayResponse& from);
  MountArrayResponse(MountArrayResponse&& from) noexcept
    : MountArrayResponse() {
    *this = ::std::move(from);
  }

  inline MountArrayResponse& operator=(const MountArrayResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MountArrayResponse& operator=(MountArrayResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MountArrayResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MountArrayResponse* internal_default_instance() {
    return reinterpret_cast<const MountArrayResponse*>(
               &_MountArrayResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(MountArrayResponse& a, MountArrayResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MountArrayResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MountArrayResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MountArrayResponse* New() const final {
    return CreateMaybeMessage<MountArrayResponse>(nullptr);
  }

  MountArrayResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MountArrayResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MountArrayResponse& from);
  void MergeFrom(const MountArrayResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MountArrayResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.MountArrayResponse";
  }
  protected:
  explicit MountArrayResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef MountArrayResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.MountArrayResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::MountArrayResponse_Result& result() const;
  ::grpc_cli::MountArrayResponse_Result* release_result();
  ::grpc_cli::MountArrayResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::MountArrayResponse_Result* result);
  private:
  const ::grpc_cli::MountArrayResponse_Result& _internal_result() const;
  ::grpc_cli::MountArrayResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::MountArrayResponse_Result* result);
  ::grpc_cli::MountArrayResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.MountArrayResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::MountArrayResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class UnmountArrayRequest_Param PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.UnmountArrayRequest.Param) */ {
 public:
  inline UnmountArrayRequest_Param() : UnmountArrayRequest_Param(nullptr) {}
  virtual ~UnmountArrayRequest_Param();
  explicit constexpr UnmountArrayRequest_Param(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnmountArrayRequest_Param(const UnmountArrayRequest_Param& from);
  UnmountArrayRequest_Param(UnmountArrayRequest_Param&& from) noexcept
    : UnmountArrayRequest_Param() {
    *this = ::std::move(from);
  }

  inline UnmountArrayRequest_Param& operator=(const UnmountArrayRequest_Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnmountArrayRequest_Param& operator=(UnmountArrayRequest_Param&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnmountArrayRequest_Param& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnmountArrayRequest_Param* internal_default_instance() {
    return reinterpret_cast<const UnmountArrayRequest_Param*>(
               &_UnmountArrayRequest_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(UnmountArrayRequest_Param& a, UnmountArrayRequest_Param& b) {
    a.Swap(&b);
  }
  inline void Swap(UnmountArrayRequest_Param* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnmountArrayRequest_Param* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnmountArrayRequest_Param* New() const final {
    return CreateMaybeMessage<UnmountArrayRequest_Param>(nullptr);
  }

  UnmountArrayRequest_Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnmountArrayRequest_Param>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnmountArrayRequest_Param& from);
  void MergeFrom(const UnmountArrayRequest_Param& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnmountArrayRequest_Param* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.UnmountArrayRequest.Param";
  }
  protected:
  explicit UnmountArrayRequest_Param(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.UnmountArrayRequest.Param)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class UnmountArrayRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.UnmountArrayRequest) */ {
 public:
  inline UnmountArrayRequest() : UnmountArrayRequest(nullptr) {}
  virtual ~UnmountArrayRequest();
  explicit constexpr UnmountArrayRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnmountArrayRequest(const UnmountArrayRequest& from);
  UnmountArrayRequest(UnmountArrayRequest&& from) noexcept
    : UnmountArrayRequest() {
    *this = ::std::move(from);
  }

  inline UnmountArrayRequest& operator=(const UnmountArrayRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnmountArrayRequest& operator=(UnmountArrayRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnmountArrayRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnmountArrayRequest* internal_default_instance() {
    return reinterpret_cast<const UnmountArrayRequest*>(
               &_UnmountArrayRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(UnmountArrayRequest& a, UnmountArrayRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UnmountArrayRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnmountArrayRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnmountArrayRequest* New() const final {
    return CreateMaybeMessage<UnmountArrayRequest>(nullptr);
  }

  UnmountArrayRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnmountArrayRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnmountArrayRequest& from);
  void MergeFrom(const UnmountArrayRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnmountArrayRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.UnmountArrayRequest";
  }
  protected:
  explicit UnmountArrayRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef UnmountArrayRequest_Param Param;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
    kParamFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // .grpc_cli.UnmountArrayRequest.Param param = 4;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::grpc_cli::UnmountArrayRequest_Param& param() const;
  ::grpc_cli::UnmountArrayRequest_Param* release_param();
  ::grpc_cli::UnmountArrayRequest_Param* mutable_param();
  void set_allocated_param(::grpc_cli::UnmountArrayRequest_Param* param);
  private:
  const ::grpc_cli::UnmountArrayRequest_Param& _internal_param() const;
  ::grpc_cli::UnmountArrayRequest_Param* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::grpc_cli::UnmountArrayRequest_Param* param);
  ::grpc_cli::UnmountArrayRequest_Param* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:grpc_cli.UnmountArrayRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  ::grpc_cli::UnmountArrayRequest_Param* param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class UnmountArrayResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.UnmountArrayResponse.Result) */ {
 public:
  inline UnmountArrayResponse_Result() : UnmountArrayResponse_Result(nullptr) {}
  virtual ~UnmountArrayResponse_Result();
  explicit constexpr UnmountArrayResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnmountArrayResponse_Result(const UnmountArrayResponse_Result& from);
  UnmountArrayResponse_Result(UnmountArrayResponse_Result&& from) noexcept
    : UnmountArrayResponse_Result() {
    *this = ::std::move(from);
  }

  inline UnmountArrayResponse_Result& operator=(const UnmountArrayResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnmountArrayResponse_Result& operator=(UnmountArrayResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnmountArrayResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnmountArrayResponse_Result* internal_default_instance() {
    return reinterpret_cast<const UnmountArrayResponse_Result*>(
               &_UnmountArrayResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(UnmountArrayResponse_Result& a, UnmountArrayResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(UnmountArrayResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnmountArrayResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnmountArrayResponse_Result* New() const final {
    return CreateMaybeMessage<UnmountArrayResponse_Result>(nullptr);
  }

  UnmountArrayResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnmountArrayResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnmountArrayResponse_Result& from);
  void MergeFrom(const UnmountArrayResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnmountArrayResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.UnmountArrayResponse.Result";
  }
  protected:
  explicit UnmountArrayResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:grpc_cli.UnmountArrayResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class UnmountArrayResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.UnmountArrayResponse) */ {
 public:
  inline UnmountArrayResponse() : UnmountArrayResponse(nullptr) {}
  virtual ~UnmountArrayResponse();
  explicit constexpr UnmountArrayResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnmountArrayResponse(const UnmountArrayResponse& from);
  UnmountArrayResponse(UnmountArrayResponse&& from) noexcept
    : UnmountArrayResponse() {
    *this = ::std::move(from);
  }

  inline UnmountArrayResponse& operator=(const UnmountArrayResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnmountArrayResponse& operator=(UnmountArrayResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnmountArrayResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnmountArrayResponse* internal_default_instance() {
    return reinterpret_cast<const UnmountArrayResponse*>(
               &_UnmountArrayResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(UnmountArrayResponse& a, UnmountArrayResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UnmountArrayResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnmountArrayResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnmountArrayResponse* New() const final {
    return CreateMaybeMessage<UnmountArrayResponse>(nullptr);
  }

  UnmountArrayResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnmountArrayResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnmountArrayResponse& from);
  void MergeFrom(const UnmountArrayResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnmountArrayResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.UnmountArrayResponse";
  }
  protected:
  explicit UnmountArrayResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef UnmountArrayResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.UnmountArrayResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::UnmountArrayResponse_Result& result() const;
  ::grpc_cli::UnmountArrayResponse_Result* release_result();
  ::grpc_cli::UnmountArrayResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::UnmountArrayResponse_Result* result);
  private:
  const ::grpc_cli::UnmountArrayResponse_Result& _internal_result() const;
  ::grpc_cli::UnmountArrayResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::UnmountArrayResponse_Result* result);
  ::grpc_cli::UnmountArrayResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.UnmountArrayResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::UnmountArrayResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class Array PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.Array) */ {
 public:
  inline Array() : Array(nullptr) {}
  virtual ~Array();
  explicit constexpr Array(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Array(const Array& from);
  Array(Array&& from) noexcept
    : Array() {
    *this = ::std::move(from);
  }

  inline Array& operator=(const Array& from) {
    CopyFrom(from);
    return *this;
  }
  inline Array& operator=(Array&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Array& default_instance() {
    return *internal_default_instance();
  }
  static inline const Array* internal_default_instance() {
    return reinterpret_cast<const Array*>(
               &_Array_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(Array& a, Array& b) {
    a.Swap(&b);
  }
  inline void Swap(Array* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Array* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Array* New() const final {
    return CreateMaybeMessage<Array>(nullptr);
  }

  Array* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Array>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Array& from);
  void MergeFrom(const Array& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Array* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.Array";
  }
  protected:
  explicit Array(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevicelistFieldNumber = 16,
    kNameFieldNumber = 3,
    kStatusFieldNumber = 4,
    kStateFieldNumber = 5,
    kSituationFieldNumber = 6,
    kCreateDatetimeFieldNumber = 7,
    kUpdateDatetimeFieldNumber = 8,
    kRebuildingProgressFieldNumber = 9,
    kGcModeFieldNumber = 12,
    kMetaRaidFieldNumber = 13,
    kDataRaidFieldNumber = 14,
    kIndexFieldNumber = 1,
    kUniqueIdFieldNumber = 2,
    kCapacityFieldNumber = 10,
    kUsedFieldNumber = 11,
    kWriteThroughEnabledFieldNumber = 15,
  };
  // repeated .grpc_cli.Device devicelist = 16;
  int devicelist_size() const;
  private:
  int _internal_devicelist_size() const;
  public:
  void clear_devicelist();
  ::grpc_cli::Device* mutable_devicelist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::Device >*
      mutable_devicelist();
  private:
  const ::grpc_cli::Device& _internal_devicelist(int index) const;
  ::grpc_cli::Device* _internal_add_devicelist();
  public:
  const ::grpc_cli::Device& devicelist(int index) const;
  ::grpc_cli::Device* add_devicelist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::Device >&
      devicelist() const;

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string status = 4;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // string state = 5;
  void clear_state();
  const std::string& state() const;
  void set_state(const std::string& value);
  void set_state(std::string&& value);
  void set_state(const char* value);
  void set_state(const char* value, size_t size);
  std::string* mutable_state();
  std::string* release_state();
  void set_allocated_state(std::string* state);
  private:
  const std::string& _internal_state() const;
  void _internal_set_state(const std::string& value);
  std::string* _internal_mutable_state();
  public:

  // string situation = 6;
  void clear_situation();
  const std::string& situation() const;
  void set_situation(const std::string& value);
  void set_situation(std::string&& value);
  void set_situation(const char* value);
  void set_situation(const char* value, size_t size);
  std::string* mutable_situation();
  std::string* release_situation();
  void set_allocated_situation(std::string* situation);
  private:
  const std::string& _internal_situation() const;
  void _internal_set_situation(const std::string& value);
  std::string* _internal_mutable_situation();
  public:

  // string createDatetime = 7;
  void clear_createdatetime();
  const std::string& createdatetime() const;
  void set_createdatetime(const std::string& value);
  void set_createdatetime(std::string&& value);
  void set_createdatetime(const char* value);
  void set_createdatetime(const char* value, size_t size);
  std::string* mutable_createdatetime();
  std::string* release_createdatetime();
  void set_allocated_createdatetime(std::string* createdatetime);
  private:
  const std::string& _internal_createdatetime() const;
  void _internal_set_createdatetime(const std::string& value);
  std::string* _internal_mutable_createdatetime();
  public:

  // string updateDatetime = 8;
  void clear_updatedatetime();
  const std::string& updatedatetime() const;
  void set_updatedatetime(const std::string& value);
  void set_updatedatetime(std::string&& value);
  void set_updatedatetime(const char* value);
  void set_updatedatetime(const char* value, size_t size);
  std::string* mutable_updatedatetime();
  std::string* release_updatedatetime();
  void set_allocated_updatedatetime(std::string* updatedatetime);
  private:
  const std::string& _internal_updatedatetime() const;
  void _internal_set_updatedatetime(const std::string& value);
  std::string* _internal_mutable_updatedatetime();
  public:

  // string rebuildingProgress = 9;
  void clear_rebuildingprogress();
  const std::string& rebuildingprogress() const;
  void set_rebuildingprogress(const std::string& value);
  void set_rebuildingprogress(std::string&& value);
  void set_rebuildingprogress(const char* value);
  void set_rebuildingprogress(const char* value, size_t size);
  std::string* mutable_rebuildingprogress();
  std::string* release_rebuildingprogress();
  void set_allocated_rebuildingprogress(std::string* rebuildingprogress);
  private:
  const std::string& _internal_rebuildingprogress() const;
  void _internal_set_rebuildingprogress(const std::string& value);
  std::string* _internal_mutable_rebuildingprogress();
  public:

  // string gcMode = 12;
  void clear_gcmode();
  const std::string& gcmode() const;
  void set_gcmode(const std::string& value);
  void set_gcmode(std::string&& value);
  void set_gcmode(const char* value);
  void set_gcmode(const char* value, size_t size);
  std::string* mutable_gcmode();
  std::string* release_gcmode();
  void set_allocated_gcmode(std::string* gcmode);
  private:
  const std::string& _internal_gcmode() const;
  void _internal_set_gcmode(const std::string& value);
  std::string* _internal_mutable_gcmode();
  public:

  // string metaRaid = 13;
  void clear_metaraid();
  const std::string& metaraid() const;
  void set_metaraid(const std::string& value);
  void set_metaraid(std::string&& value);
  void set_metaraid(const char* value);
  void set_metaraid(const char* value, size_t size);
  std::string* mutable_metaraid();
  std::string* release_metaraid();
  void set_allocated_metaraid(std::string* metaraid);
  private:
  const std::string& _internal_metaraid() const;
  void _internal_set_metaraid(const std::string& value);
  std::string* _internal_mutable_metaraid();
  public:

  // string dataRaid = 14;
  void clear_dataraid();
  const std::string& dataraid() const;
  void set_dataraid(const std::string& value);
  void set_dataraid(std::string&& value);
  void set_dataraid(const char* value);
  void set_dataraid(const char* value, size_t size);
  std::string* mutable_dataraid();
  std::string* release_dataraid();
  void set_allocated_dataraid(std::string* dataraid);
  private:
  const std::string& _internal_dataraid() const;
  void _internal_set_dataraid(const std::string& value);
  std::string* _internal_mutable_dataraid();
  public:

  // int32 index = 1;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 uniqueId = 2;
  void clear_uniqueid();
  ::PROTOBUF_NAMESPACE_ID::int32 uniqueid() const;
  void set_uniqueid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uniqueid() const;
  void _internal_set_uniqueid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint64 capacity = 10;
  void clear_capacity();
  ::PROTOBUF_NAMESPACE_ID::uint64 capacity() const;
  void set_capacity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_capacity() const;
  void _internal_set_capacity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 used = 11;
  void clear_used();
  ::PROTOBUF_NAMESPACE_ID::uint64 used() const;
  void set_used(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_used() const;
  void _internal_set_used(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool writeThroughEnabled = 15;
  void clear_writethroughenabled();
  bool writethroughenabled() const;
  void set_writethroughenabled(bool value);
  private:
  bool _internal_writethroughenabled() const;
  void _internal_set_writethroughenabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.Array)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::Device > devicelist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr situation_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr createdatetime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr updatedatetime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rebuildingprogress_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gcmode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metaraid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dataraid_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  ::PROTOBUF_NAMESPACE_ID::int32 uniqueid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 capacity_;
  ::PROTOBUF_NAMESPACE_ID::uint64 used_;
  bool writethroughenabled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ListArrayRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ListArrayRequest) */ {
 public:
  inline ListArrayRequest() : ListArrayRequest(nullptr) {}
  virtual ~ListArrayRequest();
  explicit constexpr ListArrayRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListArrayRequest(const ListArrayRequest& from);
  ListArrayRequest(ListArrayRequest&& from) noexcept
    : ListArrayRequest() {
    *this = ::std::move(from);
  }

  inline ListArrayRequest& operator=(const ListArrayRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListArrayRequest& operator=(ListArrayRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListArrayRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListArrayRequest* internal_default_instance() {
    return reinterpret_cast<const ListArrayRequest*>(
               &_ListArrayRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(ListArrayRequest& a, ListArrayRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListArrayRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListArrayRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListArrayRequest* New() const final {
    return CreateMaybeMessage<ListArrayRequest>(nullptr);
  }

  ListArrayRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListArrayRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListArrayRequest& from);
  void MergeFrom(const ListArrayRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListArrayRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ListArrayRequest";
  }
  protected:
  explicit ListArrayRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.ListArrayRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ListArrayResponse_Result_ArrayList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ListArrayResponse.Result.ArrayList) */ {
 public:
  inline ListArrayResponse_Result_ArrayList() : ListArrayResponse_Result_ArrayList(nullptr) {}
  virtual ~ListArrayResponse_Result_ArrayList();
  explicit constexpr ListArrayResponse_Result_ArrayList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListArrayResponse_Result_ArrayList(const ListArrayResponse_Result_ArrayList& from);
  ListArrayResponse_Result_ArrayList(ListArrayResponse_Result_ArrayList&& from) noexcept
    : ListArrayResponse_Result_ArrayList() {
    *this = ::std::move(from);
  }

  inline ListArrayResponse_Result_ArrayList& operator=(const ListArrayResponse_Result_ArrayList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListArrayResponse_Result_ArrayList& operator=(ListArrayResponse_Result_ArrayList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListArrayResponse_Result_ArrayList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListArrayResponse_Result_ArrayList* internal_default_instance() {
    return reinterpret_cast<const ListArrayResponse_Result_ArrayList*>(
               &_ListArrayResponse_Result_ArrayList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(ListArrayResponse_Result_ArrayList& a, ListArrayResponse_Result_ArrayList& b) {
    a.Swap(&b);
  }
  inline void Swap(ListArrayResponse_Result_ArrayList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListArrayResponse_Result_ArrayList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListArrayResponse_Result_ArrayList* New() const final {
    return CreateMaybeMessage<ListArrayResponse_Result_ArrayList>(nullptr);
  }

  ListArrayResponse_Result_ArrayList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListArrayResponse_Result_ArrayList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListArrayResponse_Result_ArrayList& from);
  void MergeFrom(const ListArrayResponse_Result_ArrayList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListArrayResponse_Result_ArrayList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ListArrayResponse.Result.ArrayList";
  }
  protected:
  explicit ListArrayResponse_Result_ArrayList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrayListFieldNumber = 1,
  };
  // repeated .grpc_cli.Array arrayList = 1;
  int arraylist_size() const;
  private:
  int _internal_arraylist_size() const;
  public:
  void clear_arraylist();
  ::grpc_cli::Array* mutable_arraylist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::Array >*
      mutable_arraylist();
  private:
  const ::grpc_cli::Array& _internal_arraylist(int index) const;
  ::grpc_cli::Array* _internal_add_arraylist();
  public:
  const ::grpc_cli::Array& arraylist(int index) const;
  ::grpc_cli::Array* add_arraylist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::Array >&
      arraylist() const;

  // @@protoc_insertion_point(class_scope:grpc_cli.ListArrayResponse.Result.ArrayList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::Array > arraylist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ListArrayResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ListArrayResponse.Result) */ {
 public:
  inline ListArrayResponse_Result() : ListArrayResponse_Result(nullptr) {}
  virtual ~ListArrayResponse_Result();
  explicit constexpr ListArrayResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListArrayResponse_Result(const ListArrayResponse_Result& from);
  ListArrayResponse_Result(ListArrayResponse_Result&& from) noexcept
    : ListArrayResponse_Result() {
    *this = ::std::move(from);
  }

  inline ListArrayResponse_Result& operator=(const ListArrayResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListArrayResponse_Result& operator=(ListArrayResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListArrayResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListArrayResponse_Result* internal_default_instance() {
    return reinterpret_cast<const ListArrayResponse_Result*>(
               &_ListArrayResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(ListArrayResponse_Result& a, ListArrayResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(ListArrayResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListArrayResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListArrayResponse_Result* New() const final {
    return CreateMaybeMessage<ListArrayResponse_Result>(nullptr);
  }

  ListArrayResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListArrayResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListArrayResponse_Result& from);
  void MergeFrom(const ListArrayResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListArrayResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ListArrayResponse.Result";
  }
  protected:
  explicit ListArrayResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ListArrayResponse_Result_ArrayList ArrayList;

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // .grpc_cli.ListArrayResponse.Result.ArrayList data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::grpc_cli::ListArrayResponse_Result_ArrayList& data() const;
  ::grpc_cli::ListArrayResponse_Result_ArrayList* release_data();
  ::grpc_cli::ListArrayResponse_Result_ArrayList* mutable_data();
  void set_allocated_data(::grpc_cli::ListArrayResponse_Result_ArrayList* data);
  private:
  const ::grpc_cli::ListArrayResponse_Result_ArrayList& _internal_data() const;
  ::grpc_cli::ListArrayResponse_Result_ArrayList* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::grpc_cli::ListArrayResponse_Result_ArrayList* data);
  ::grpc_cli::ListArrayResponse_Result_ArrayList* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:grpc_cli.ListArrayResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  ::grpc_cli::ListArrayResponse_Result_ArrayList* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ListArrayResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ListArrayResponse) */ {
 public:
  inline ListArrayResponse() : ListArrayResponse(nullptr) {}
  virtual ~ListArrayResponse();
  explicit constexpr ListArrayResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListArrayResponse(const ListArrayResponse& from);
  ListArrayResponse(ListArrayResponse&& from) noexcept
    : ListArrayResponse() {
    *this = ::std::move(from);
  }

  inline ListArrayResponse& operator=(const ListArrayResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListArrayResponse& operator=(ListArrayResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListArrayResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListArrayResponse* internal_default_instance() {
    return reinterpret_cast<const ListArrayResponse*>(
               &_ListArrayResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(ListArrayResponse& a, ListArrayResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListArrayResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListArrayResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListArrayResponse* New() const final {
    return CreateMaybeMessage<ListArrayResponse>(nullptr);
  }

  ListArrayResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListArrayResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListArrayResponse& from);
  void MergeFrom(const ListArrayResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListArrayResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ListArrayResponse";
  }
  protected:
  explicit ListArrayResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ListArrayResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.ListArrayResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::ListArrayResponse_Result& result() const;
  ::grpc_cli::ListArrayResponse_Result* release_result();
  ::grpc_cli::ListArrayResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::ListArrayResponse_Result* result);
  private:
  const ::grpc_cli::ListArrayResponse_Result& _internal_result() const;
  ::grpc_cli::ListArrayResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::ListArrayResponse_Result* result);
  ::grpc_cli::ListArrayResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.ListArrayResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::ListArrayResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ArrayInfoRequest_Param PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ArrayInfoRequest.Param) */ {
 public:
  inline ArrayInfoRequest_Param() : ArrayInfoRequest_Param(nullptr) {}
  virtual ~ArrayInfoRequest_Param();
  explicit constexpr ArrayInfoRequest_Param(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArrayInfoRequest_Param(const ArrayInfoRequest_Param& from);
  ArrayInfoRequest_Param(ArrayInfoRequest_Param&& from) noexcept
    : ArrayInfoRequest_Param() {
    *this = ::std::move(from);
  }

  inline ArrayInfoRequest_Param& operator=(const ArrayInfoRequest_Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArrayInfoRequest_Param& operator=(ArrayInfoRequest_Param&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ArrayInfoRequest_Param& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArrayInfoRequest_Param* internal_default_instance() {
    return reinterpret_cast<const ArrayInfoRequest_Param*>(
               &_ArrayInfoRequest_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(ArrayInfoRequest_Param& a, ArrayInfoRequest_Param& b) {
    a.Swap(&b);
  }
  inline void Swap(ArrayInfoRequest_Param* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArrayInfoRequest_Param* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ArrayInfoRequest_Param* New() const final {
    return CreateMaybeMessage<ArrayInfoRequest_Param>(nullptr);
  }

  ArrayInfoRequest_Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ArrayInfoRequest_Param>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ArrayInfoRequest_Param& from);
  void MergeFrom(const ArrayInfoRequest_Param& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArrayInfoRequest_Param* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ArrayInfoRequest.Param";
  }
  protected:
  explicit ArrayInfoRequest_Param(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.ArrayInfoRequest.Param)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ArrayInfoRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ArrayInfoRequest) */ {
 public:
  inline ArrayInfoRequest() : ArrayInfoRequest(nullptr) {}
  virtual ~ArrayInfoRequest();
  explicit constexpr ArrayInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArrayInfoRequest(const ArrayInfoRequest& from);
  ArrayInfoRequest(ArrayInfoRequest&& from) noexcept
    : ArrayInfoRequest() {
    *this = ::std::move(from);
  }

  inline ArrayInfoRequest& operator=(const ArrayInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArrayInfoRequest& operator=(ArrayInfoRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ArrayInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArrayInfoRequest* internal_default_instance() {
    return reinterpret_cast<const ArrayInfoRequest*>(
               &_ArrayInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(ArrayInfoRequest& a, ArrayInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ArrayInfoRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArrayInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ArrayInfoRequest* New() const final {
    return CreateMaybeMessage<ArrayInfoRequest>(nullptr);
  }

  ArrayInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ArrayInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ArrayInfoRequest& from);
  void MergeFrom(const ArrayInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArrayInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ArrayInfoRequest";
  }
  protected:
  explicit ArrayInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ArrayInfoRequest_Param Param;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
    kParamFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // .grpc_cli.ArrayInfoRequest.Param param = 4;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::grpc_cli::ArrayInfoRequest_Param& param() const;
  ::grpc_cli::ArrayInfoRequest_Param* release_param();
  ::grpc_cli::ArrayInfoRequest_Param* mutable_param();
  void set_allocated_param(::grpc_cli::ArrayInfoRequest_Param* param);
  private:
  const ::grpc_cli::ArrayInfoRequest_Param& _internal_param() const;
  ::grpc_cli::ArrayInfoRequest_Param* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::grpc_cli::ArrayInfoRequest_Param* param);
  ::grpc_cli::ArrayInfoRequest_Param* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:grpc_cli.ArrayInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  ::grpc_cli::ArrayInfoRequest_Param* param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ArrayInfoResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ArrayInfoResponse.Result) */ {
 public:
  inline ArrayInfoResponse_Result() : ArrayInfoResponse_Result(nullptr) {}
  virtual ~ArrayInfoResponse_Result();
  explicit constexpr ArrayInfoResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArrayInfoResponse_Result(const ArrayInfoResponse_Result& from);
  ArrayInfoResponse_Result(ArrayInfoResponse_Result&& from) noexcept
    : ArrayInfoResponse_Result() {
    *this = ::std::move(from);
  }

  inline ArrayInfoResponse_Result& operator=(const ArrayInfoResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArrayInfoResponse_Result& operator=(ArrayInfoResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ArrayInfoResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArrayInfoResponse_Result* internal_default_instance() {
    return reinterpret_cast<const ArrayInfoResponse_Result*>(
               &_ArrayInfoResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(ArrayInfoResponse_Result& a, ArrayInfoResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(ArrayInfoResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArrayInfoResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ArrayInfoResponse_Result* New() const final {
    return CreateMaybeMessage<ArrayInfoResponse_Result>(nullptr);
  }

  ArrayInfoResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ArrayInfoResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ArrayInfoResponse_Result& from);
  void MergeFrom(const ArrayInfoResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArrayInfoResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ArrayInfoResponse.Result";
  }
  protected:
  explicit ArrayInfoResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // .grpc_cli.Array data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::grpc_cli::Array& data() const;
  ::grpc_cli::Array* release_data();
  ::grpc_cli::Array* mutable_data();
  void set_allocated_data(::grpc_cli::Array* data);
  private:
  const ::grpc_cli::Array& _internal_data() const;
  ::grpc_cli::Array* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::grpc_cli::Array* data);
  ::grpc_cli::Array* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:grpc_cli.ArrayInfoResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  ::grpc_cli::Array* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ArrayInfoResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ArrayInfoResponse) */ {
 public:
  inline ArrayInfoResponse() : ArrayInfoResponse(nullptr) {}
  virtual ~ArrayInfoResponse();
  explicit constexpr ArrayInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArrayInfoResponse(const ArrayInfoResponse& from);
  ArrayInfoResponse(ArrayInfoResponse&& from) noexcept
    : ArrayInfoResponse() {
    *this = ::std::move(from);
  }

  inline ArrayInfoResponse& operator=(const ArrayInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArrayInfoResponse& operator=(ArrayInfoResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ArrayInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArrayInfoResponse* internal_default_instance() {
    return reinterpret_cast<const ArrayInfoResponse*>(
               &_ArrayInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(ArrayInfoResponse& a, ArrayInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ArrayInfoResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArrayInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ArrayInfoResponse* New() const final {
    return CreateMaybeMessage<ArrayInfoResponse>(nullptr);
  }

  ArrayInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ArrayInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ArrayInfoResponse& from);
  void MergeFrom(const ArrayInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArrayInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ArrayInfoResponse";
  }
  protected:
  explicit ArrayInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ArrayInfoResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.ArrayInfoResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::ArrayInfoResponse_Result& result() const;
  ::grpc_cli::ArrayInfoResponse_Result* release_result();
  ::grpc_cli::ArrayInfoResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::ArrayInfoResponse_Result* result);
  private:
  const ::grpc_cli::ArrayInfoResponse_Result& _internal_result() const;
  ::grpc_cli::ArrayInfoResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::ArrayInfoResponse_Result* result);
  ::grpc_cli::ArrayInfoResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.ArrayInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::ArrayInfoResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class RebuildArrayRequest_Param PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.RebuildArrayRequest.Param) */ {
 public:
  inline RebuildArrayRequest_Param() : RebuildArrayRequest_Param(nullptr) {}
  virtual ~RebuildArrayRequest_Param();
  explicit constexpr RebuildArrayRequest_Param(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RebuildArrayRequest_Param(const RebuildArrayRequest_Param& from);
  RebuildArrayRequest_Param(RebuildArrayRequest_Param&& from) noexcept
    : RebuildArrayRequest_Param() {
    *this = ::std::move(from);
  }

  inline RebuildArrayRequest_Param& operator=(const RebuildArrayRequest_Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline RebuildArrayRequest_Param& operator=(RebuildArrayRequest_Param&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RebuildArrayRequest_Param& default_instance() {
    return *internal_default_instance();
  }
  static inline const RebuildArrayRequest_Param* internal_default_instance() {
    return reinterpret_cast<const RebuildArrayRequest_Param*>(
               &_RebuildArrayRequest_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(RebuildArrayRequest_Param& a, RebuildArrayRequest_Param& b) {
    a.Swap(&b);
  }
  inline void Swap(RebuildArrayRequest_Param* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RebuildArrayRequest_Param* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RebuildArrayRequest_Param* New() const final {
    return CreateMaybeMessage<RebuildArrayRequest_Param>(nullptr);
  }

  RebuildArrayRequest_Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RebuildArrayRequest_Param>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RebuildArrayRequest_Param& from);
  void MergeFrom(const RebuildArrayRequest_Param& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RebuildArrayRequest_Param* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.RebuildArrayRequest.Param";
  }
  protected:
  explicit RebuildArrayRequest_Param(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.RebuildArrayRequest.Param)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class RebuildArrayRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.RebuildArrayRequest) */ {
 public:
  inline RebuildArrayRequest() : RebuildArrayRequest(nullptr) {}
  virtual ~RebuildArrayRequest();
  explicit constexpr RebuildArrayRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RebuildArrayRequest(const RebuildArrayRequest& from);
  RebuildArrayRequest(RebuildArrayRequest&& from) noexcept
    : RebuildArrayRequest() {
    *this = ::std::move(from);
  }

  inline RebuildArrayRequest& operator=(const RebuildArrayRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RebuildArrayRequest& operator=(RebuildArrayRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RebuildArrayRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RebuildArrayRequest* internal_default_instance() {
    return reinterpret_cast<const RebuildArrayRequest*>(
               &_RebuildArrayRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(RebuildArrayRequest& a, RebuildArrayRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RebuildArrayRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RebuildArrayRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RebuildArrayRequest* New() const final {
    return CreateMaybeMessage<RebuildArrayRequest>(nullptr);
  }

  RebuildArrayRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RebuildArrayRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RebuildArrayRequest& from);
  void MergeFrom(const RebuildArrayRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RebuildArrayRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.RebuildArrayRequest";
  }
  protected:
  explicit RebuildArrayRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef RebuildArrayRequest_Param Param;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
    kParamFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // .grpc_cli.RebuildArrayRequest.Param param = 4;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::grpc_cli::RebuildArrayRequest_Param& param() const;
  ::grpc_cli::RebuildArrayRequest_Param* release_param();
  ::grpc_cli::RebuildArrayRequest_Param* mutable_param();
  void set_allocated_param(::grpc_cli::RebuildArrayRequest_Param* param);
  private:
  const ::grpc_cli::RebuildArrayRequest_Param& _internal_param() const;
  ::grpc_cli::RebuildArrayRequest_Param* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::grpc_cli::RebuildArrayRequest_Param* param);
  ::grpc_cli::RebuildArrayRequest_Param* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:grpc_cli.RebuildArrayRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  ::grpc_cli::RebuildArrayRequest_Param* param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class RebuildArrayResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.RebuildArrayResponse.Result) */ {
 public:
  inline RebuildArrayResponse_Result() : RebuildArrayResponse_Result(nullptr) {}
  virtual ~RebuildArrayResponse_Result();
  explicit constexpr RebuildArrayResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RebuildArrayResponse_Result(const RebuildArrayResponse_Result& from);
  RebuildArrayResponse_Result(RebuildArrayResponse_Result&& from) noexcept
    : RebuildArrayResponse_Result() {
    *this = ::std::move(from);
  }

  inline RebuildArrayResponse_Result& operator=(const RebuildArrayResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline RebuildArrayResponse_Result& operator=(RebuildArrayResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RebuildArrayResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const RebuildArrayResponse_Result* internal_default_instance() {
    return reinterpret_cast<const RebuildArrayResponse_Result*>(
               &_RebuildArrayResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(RebuildArrayResponse_Result& a, RebuildArrayResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(RebuildArrayResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RebuildArrayResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RebuildArrayResponse_Result* New() const final {
    return CreateMaybeMessage<RebuildArrayResponse_Result>(nullptr);
  }

  RebuildArrayResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RebuildArrayResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RebuildArrayResponse_Result& from);
  void MergeFrom(const RebuildArrayResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RebuildArrayResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.RebuildArrayResponse.Result";
  }
  protected:
  explicit RebuildArrayResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:grpc_cli.RebuildArrayResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class RebuildArrayResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.RebuildArrayResponse) */ {
 public:
  inline RebuildArrayResponse() : RebuildArrayResponse(nullptr) {}
  virtual ~RebuildArrayResponse();
  explicit constexpr RebuildArrayResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RebuildArrayResponse(const RebuildArrayResponse& from);
  RebuildArrayResponse(RebuildArrayResponse&& from) noexcept
    : RebuildArrayResponse() {
    *this = ::std::move(from);
  }

  inline RebuildArrayResponse& operator=(const RebuildArrayResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RebuildArrayResponse& operator=(RebuildArrayResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RebuildArrayResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RebuildArrayResponse* internal_default_instance() {
    return reinterpret_cast<const RebuildArrayResponse*>(
               &_RebuildArrayResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(RebuildArrayResponse& a, RebuildArrayResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RebuildArrayResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RebuildArrayResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RebuildArrayResponse* New() const final {
    return CreateMaybeMessage<RebuildArrayResponse>(nullptr);
  }

  RebuildArrayResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RebuildArrayResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RebuildArrayResponse& from);
  void MergeFrom(const RebuildArrayResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RebuildArrayResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.RebuildArrayResponse";
  }
  protected:
  explicit RebuildArrayResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef RebuildArrayResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.RebuildArrayResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::RebuildArrayResponse_Result& result() const;
  ::grpc_cli::RebuildArrayResponse_Result* release_result();
  ::grpc_cli::RebuildArrayResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::RebuildArrayResponse_Result* result);
  private:
  const ::grpc_cli::RebuildArrayResponse_Result& _internal_result() const;
  ::grpc_cli::RebuildArrayResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::RebuildArrayResponse_Result* result);
  ::grpc_cli::RebuildArrayResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.RebuildArrayResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::RebuildArrayResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ListNodeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ListNodeRequest) */ {
 public:
  inline ListNodeRequest() : ListNodeRequest(nullptr) {}
  virtual ~ListNodeRequest();
  explicit constexpr ListNodeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListNodeRequest(const ListNodeRequest& from);
  ListNodeRequest(ListNodeRequest&& from) noexcept
    : ListNodeRequest() {
    *this = ::std::move(from);
  }

  inline ListNodeRequest& operator=(const ListNodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListNodeRequest& operator=(ListNodeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListNodeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListNodeRequest* internal_default_instance() {
    return reinterpret_cast<const ListNodeRequest*>(
               &_ListNodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(ListNodeRequest& a, ListNodeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListNodeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListNodeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListNodeRequest* New() const final {
    return CreateMaybeMessage<ListNodeRequest>(nullptr);
  }

  ListNodeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListNodeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListNodeRequest& from);
  void MergeFrom(const ListNodeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListNodeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ListNodeRequest";
  }
  protected:
  explicit ListNodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.ListNodeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ListNodeResponse_Result_Node PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ListNodeResponse.Result.Node) */ {
 public:
  inline ListNodeResponse_Result_Node() : ListNodeResponse_Result_Node(nullptr) {}
  virtual ~ListNodeResponse_Result_Node();
  explicit constexpr ListNodeResponse_Result_Node(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListNodeResponse_Result_Node(const ListNodeResponse_Result_Node& from);
  ListNodeResponse_Result_Node(ListNodeResponse_Result_Node&& from) noexcept
    : ListNodeResponse_Result_Node() {
    *this = ::std::move(from);
  }

  inline ListNodeResponse_Result_Node& operator=(const ListNodeResponse_Result_Node& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListNodeResponse_Result_Node& operator=(ListNodeResponse_Result_Node&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListNodeResponse_Result_Node& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListNodeResponse_Result_Node* internal_default_instance() {
    return reinterpret_cast<const ListNodeResponse_Result_Node*>(
               &_ListNodeResponse_Result_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(ListNodeResponse_Result_Node& a, ListNodeResponse_Result_Node& b) {
    a.Swap(&b);
  }
  inline void Swap(ListNodeResponse_Result_Node* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListNodeResponse_Result_Node* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListNodeResponse_Result_Node* New() const final {
    return CreateMaybeMessage<ListNodeResponse_Result_Node>(nullptr);
  }

  ListNodeResponse_Result_Node* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListNodeResponse_Result_Node>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListNodeResponse_Result_Node& from);
  void MergeFrom(const ListNodeResponse_Result_Node& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListNodeResponse_Result_Node* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ListNodeResponse.Result.Node";
  }
  protected:
  explicit ListNodeResponse_Result_Node(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kIpFieldNumber = 2,
    kLastseenFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string ip = 2;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // string lastseen = 3;
  void clear_lastseen();
  const std::string& lastseen() const;
  void set_lastseen(const std::string& value);
  void set_lastseen(std::string&& value);
  void set_lastseen(const char* value);
  void set_lastseen(const char* value, size_t size);
  std::string* mutable_lastseen();
  std::string* release_lastseen();
  void set_allocated_lastseen(std::string* lastseen);
  private:
  const std::string& _internal_lastseen() const;
  void _internal_set_lastseen(const std::string& value);
  std::string* _internal_mutable_lastseen();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.ListNodeResponse.Result.Node)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lastseen_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ListNodeResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ListNodeResponse.Result) */ {
 public:
  inline ListNodeResponse_Result() : ListNodeResponse_Result(nullptr) {}
  virtual ~ListNodeResponse_Result();
  explicit constexpr ListNodeResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListNodeResponse_Result(const ListNodeResponse_Result& from);
  ListNodeResponse_Result(ListNodeResponse_Result&& from) noexcept
    : ListNodeResponse_Result() {
    *this = ::std::move(from);
  }

  inline ListNodeResponse_Result& operator=(const ListNodeResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListNodeResponse_Result& operator=(ListNodeResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListNodeResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListNodeResponse_Result* internal_default_instance() {
    return reinterpret_cast<const ListNodeResponse_Result*>(
               &_ListNodeResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(ListNodeResponse_Result& a, ListNodeResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(ListNodeResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListNodeResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListNodeResponse_Result* New() const final {
    return CreateMaybeMessage<ListNodeResponse_Result>(nullptr);
  }

  ListNodeResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListNodeResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListNodeResponse_Result& from);
  void MergeFrom(const ListNodeResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListNodeResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ListNodeResponse.Result";
  }
  protected:
  explicit ListNodeResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ListNodeResponse_Result_Node Node;

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .grpc_cli.ListNodeResponse.Result.Node data = 2;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::grpc_cli::ListNodeResponse_Result_Node* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::ListNodeResponse_Result_Node >*
      mutable_data();
  private:
  const ::grpc_cli::ListNodeResponse_Result_Node& _internal_data(int index) const;
  ::grpc_cli::ListNodeResponse_Result_Node* _internal_add_data();
  public:
  const ::grpc_cli::ListNodeResponse_Result_Node& data(int index) const;
  ::grpc_cli::ListNodeResponse_Result_Node* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::ListNodeResponse_Result_Node >&
      data() const;

  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:grpc_cli.ListNodeResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::ListNodeResponse_Result_Node > data_;
  ::grpc_cli::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ListNodeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ListNodeResponse) */ {
 public:
  inline ListNodeResponse() : ListNodeResponse(nullptr) {}
  virtual ~ListNodeResponse();
  explicit constexpr ListNodeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListNodeResponse(const ListNodeResponse& from);
  ListNodeResponse(ListNodeResponse&& from) noexcept
    : ListNodeResponse() {
    *this = ::std::move(from);
  }

  inline ListNodeResponse& operator=(const ListNodeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListNodeResponse& operator=(ListNodeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListNodeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListNodeResponse* internal_default_instance() {
    return reinterpret_cast<const ListNodeResponse*>(
               &_ListNodeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(ListNodeResponse& a, ListNodeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListNodeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListNodeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListNodeResponse* New() const final {
    return CreateMaybeMessage<ListNodeResponse>(nullptr);
  }

  ListNodeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListNodeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListNodeResponse& from);
  void MergeFrom(const ListNodeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListNodeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ListNodeResponse";
  }
  protected:
  explicit ListNodeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ListNodeResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.ListNodeResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::ListNodeResponse_Result& result() const;
  ::grpc_cli::ListNodeResponse_Result* release_result();
  ::grpc_cli::ListNodeResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::ListNodeResponse_Result* result);
  private:
  const ::grpc_cli::ListNodeResponse_Result& _internal_result() const;
  ::grpc_cli::ListNodeResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::ListNodeResponse_Result* result);
  ::grpc_cli::ListNodeResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.ListNodeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::ListNodeResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ListHaVolumeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ListHaVolumeRequest) */ {
 public:
  inline ListHaVolumeRequest() : ListHaVolumeRequest(nullptr) {}
  virtual ~ListHaVolumeRequest();
  explicit constexpr ListHaVolumeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListHaVolumeRequest(const ListHaVolumeRequest& from);
  ListHaVolumeRequest(ListHaVolumeRequest&& from) noexcept
    : ListHaVolumeRequest() {
    *this = ::std::move(from);
  }

  inline ListHaVolumeRequest& operator=(const ListHaVolumeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListHaVolumeRequest& operator=(ListHaVolumeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListHaVolumeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListHaVolumeRequest* internal_default_instance() {
    return reinterpret_cast<const ListHaVolumeRequest*>(
               &_ListHaVolumeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(ListHaVolumeRequest& a, ListHaVolumeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListHaVolumeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListHaVolumeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListHaVolumeRequest* New() const final {
    return CreateMaybeMessage<ListHaVolumeRequest>(nullptr);
  }

  ListHaVolumeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListHaVolumeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListHaVolumeRequest& from);
  void MergeFrom(const ListHaVolumeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListHaVolumeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ListHaVolumeRequest";
  }
  protected:
  explicit ListHaVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.ListHaVolumeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ListHaVolumeResponse_Result_Volume PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ListHaVolumeResponse.Result.Volume) */ {
 public:
  inline ListHaVolumeResponse_Result_Volume() : ListHaVolumeResponse_Result_Volume(nullptr) {}
  virtual ~ListHaVolumeResponse_Result_Volume();
  explicit constexpr ListHaVolumeResponse_Result_Volume(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListHaVolumeResponse_Result_Volume(const ListHaVolumeResponse_Result_Volume& from);
  ListHaVolumeResponse_Result_Volume(ListHaVolumeResponse_Result_Volume&& from) noexcept
    : ListHaVolumeResponse_Result_Volume() {
    *this = ::std::move(from);
  }

  inline ListHaVolumeResponse_Result_Volume& operator=(const ListHaVolumeResponse_Result_Volume& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListHaVolumeResponse_Result_Volume& operator=(ListHaVolumeResponse_Result_Volume&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListHaVolumeResponse_Result_Volume& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListHaVolumeResponse_Result_Volume* internal_default_instance() {
    return reinterpret_cast<const ListHaVolumeResponse_Result_Volume*>(
               &_ListHaVolumeResponse_Result_Volume_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(ListHaVolumeResponse_Result_Volume& a, ListHaVolumeResponse_Result_Volume& b) {
    a.Swap(&b);
  }
  inline void Swap(ListHaVolumeResponse_Result_Volume* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListHaVolumeResponse_Result_Volume* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListHaVolumeResponse_Result_Volume* New() const final {
    return CreateMaybeMessage<ListHaVolumeResponse_Result_Volume>(nullptr);
  }

  ListHaVolumeResponse_Result_Volume* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListHaVolumeResponse_Result_Volume>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListHaVolumeResponse_Result_Volume& from);
  void MergeFrom(const ListHaVolumeResponse_Result_Volume& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListHaVolumeResponse_Result_Volume* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ListHaVolumeResponse.Result.Volume";
  }
  protected:
  explicit ListHaVolumeResponse_Result_Volume(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kNodeNameFieldNumber = 3,
    kArrayNameFieldNumber = 4,
    kLastseenFieldNumber = 6,
    kSizeFieldNumber = 5,
    kIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string nodeName = 3;
  void clear_nodename();
  const std::string& nodename() const;
  void set_nodename(const std::string& value);
  void set_nodename(std::string&& value);
  void set_nodename(const char* value);
  void set_nodename(const char* value, size_t size);
  std::string* mutable_nodename();
  std::string* release_nodename();
  void set_allocated_nodename(std::string* nodename);
  private:
  const std::string& _internal_nodename() const;
  void _internal_set_nodename(const std::string& value);
  std::string* _internal_mutable_nodename();
  public:

  // string arrayName = 4;
  void clear_arrayname();
  const std::string& arrayname() const;
  void set_arrayname(const std::string& value);
  void set_arrayname(std::string&& value);
  void set_arrayname(const char* value);
  void set_arrayname(const char* value, size_t size);
  std::string* mutable_arrayname();
  std::string* release_arrayname();
  void set_allocated_arrayname(std::string* arrayname);
  private:
  const std::string& _internal_arrayname() const;
  void _internal_set_arrayname(const std::string& value);
  std::string* _internal_mutable_arrayname();
  public:

  // string lastseen = 6;
  void clear_lastseen();
  const std::string& lastseen() const;
  void set_lastseen(const std::string& value);
  void set_lastseen(std::string&& value);
  void set_lastseen(const char* value);
  void set_lastseen(const char* value, size_t size);
  std::string* mutable_lastseen();
  std::string* release_lastseen();
  void set_allocated_lastseen(std::string* lastseen);
  private:
  const std::string& _internal_lastseen() const;
  void _internal_set_lastseen(const std::string& value);
  std::string* _internal_mutable_lastseen();
  public:

  // int64 size = 5;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.ListHaVolumeResponse.Result.Volume)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nodename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr arrayname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lastseen_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ListHaVolumeResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ListHaVolumeResponse.Result) */ {
 public:
  inline ListHaVolumeResponse_Result() : ListHaVolumeResponse_Result(nullptr) {}
  virtual ~ListHaVolumeResponse_Result();
  explicit constexpr ListHaVolumeResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListHaVolumeResponse_Result(const ListHaVolumeResponse_Result& from);
  ListHaVolumeResponse_Result(ListHaVolumeResponse_Result&& from) noexcept
    : ListHaVolumeResponse_Result() {
    *this = ::std::move(from);
  }

  inline ListHaVolumeResponse_Result& operator=(const ListHaVolumeResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListHaVolumeResponse_Result& operator=(ListHaVolumeResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListHaVolumeResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListHaVolumeResponse_Result* internal_default_instance() {
    return reinterpret_cast<const ListHaVolumeResponse_Result*>(
               &_ListHaVolumeResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(ListHaVolumeResponse_Result& a, ListHaVolumeResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(ListHaVolumeResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListHaVolumeResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListHaVolumeResponse_Result* New() const final {
    return CreateMaybeMessage<ListHaVolumeResponse_Result>(nullptr);
  }

  ListHaVolumeResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListHaVolumeResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListHaVolumeResponse_Result& from);
  void MergeFrom(const ListHaVolumeResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListHaVolumeResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ListHaVolumeResponse.Result";
  }
  protected:
  explicit ListHaVolumeResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ListHaVolumeResponse_Result_Volume Volume;

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .grpc_cli.ListHaVolumeResponse.Result.Volume data = 2;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::grpc_cli::ListHaVolumeResponse_Result_Volume* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::ListHaVolumeResponse_Result_Volume >*
      mutable_data();
  private:
  const ::grpc_cli::ListHaVolumeResponse_Result_Volume& _internal_data(int index) const;
  ::grpc_cli::ListHaVolumeResponse_Result_Volume* _internal_add_data();
  public:
  const ::grpc_cli::ListHaVolumeResponse_Result_Volume& data(int index) const;
  ::grpc_cli::ListHaVolumeResponse_Result_Volume* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::ListHaVolumeResponse_Result_Volume >&
      data() const;

  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:grpc_cli.ListHaVolumeResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::ListHaVolumeResponse_Result_Volume > data_;
  ::grpc_cli::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ListHaVolumeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ListHaVolumeResponse) */ {
 public:
  inline ListHaVolumeResponse() : ListHaVolumeResponse(nullptr) {}
  virtual ~ListHaVolumeResponse();
  explicit constexpr ListHaVolumeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListHaVolumeResponse(const ListHaVolumeResponse& from);
  ListHaVolumeResponse(ListHaVolumeResponse&& from) noexcept
    : ListHaVolumeResponse() {
    *this = ::std::move(from);
  }

  inline ListHaVolumeResponse& operator=(const ListHaVolumeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListHaVolumeResponse& operator=(ListHaVolumeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListHaVolumeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListHaVolumeResponse* internal_default_instance() {
    return reinterpret_cast<const ListHaVolumeResponse*>(
               &_ListHaVolumeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(ListHaVolumeResponse& a, ListHaVolumeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListHaVolumeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListHaVolumeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListHaVolumeResponse* New() const final {
    return CreateMaybeMessage<ListHaVolumeResponse>(nullptr);
  }

  ListHaVolumeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListHaVolumeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListHaVolumeResponse& from);
  void MergeFrom(const ListHaVolumeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListHaVolumeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ListHaVolumeResponse";
  }
  protected:
  explicit ListHaVolumeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ListHaVolumeResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.ListHaVolumeResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::ListHaVolumeResponse_Result& result() const;
  ::grpc_cli::ListHaVolumeResponse_Result* release_result();
  ::grpc_cli::ListHaVolumeResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::ListHaVolumeResponse_Result* result);
  private:
  const ::grpc_cli::ListHaVolumeResponse_Result& _internal_result() const;
  ::grpc_cli::ListHaVolumeResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::ListHaVolumeResponse_Result* result);
  ::grpc_cli::ListHaVolumeResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.ListHaVolumeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::ListHaVolumeResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ListHaReplicationRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ListHaReplicationRequest) */ {
 public:
  inline ListHaReplicationRequest() : ListHaReplicationRequest(nullptr) {}
  virtual ~ListHaReplicationRequest();
  explicit constexpr ListHaReplicationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListHaReplicationRequest(const ListHaReplicationRequest& from);
  ListHaReplicationRequest(ListHaReplicationRequest&& from) noexcept
    : ListHaReplicationRequest() {
    *this = ::std::move(from);
  }

  inline ListHaReplicationRequest& operator=(const ListHaReplicationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListHaReplicationRequest& operator=(ListHaReplicationRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListHaReplicationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListHaReplicationRequest* internal_default_instance() {
    return reinterpret_cast<const ListHaReplicationRequest*>(
               &_ListHaReplicationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  friend void swap(ListHaReplicationRequest& a, ListHaReplicationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListHaReplicationRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListHaReplicationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListHaReplicationRequest* New() const final {
    return CreateMaybeMessage<ListHaReplicationRequest>(nullptr);
  }

  ListHaReplicationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListHaReplicationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListHaReplicationRequest& from);
  void MergeFrom(const ListHaReplicationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListHaReplicationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ListHaReplicationRequest";
  }
  protected:
  explicit ListHaReplicationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.ListHaReplicationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ListHaReplicationResponse_Result_Replication PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ListHaReplicationResponse.Result.Replication) */ {
 public:
  inline ListHaReplicationResponse_Result_Replication() : ListHaReplicationResponse_Result_Replication(nullptr) {}
  virtual ~ListHaReplicationResponse_Result_Replication();
  explicit constexpr ListHaReplicationResponse_Result_Replication(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListHaReplicationResponse_Result_Replication(const ListHaReplicationResponse_Result_Replication& from);
  ListHaReplicationResponse_Result_Replication(ListHaReplicationResponse_Result_Replication&& from) noexcept
    : ListHaReplicationResponse_Result_Replication() {
    *this = ::std::move(from);
  }

  inline ListHaReplicationResponse_Result_Replication& operator=(const ListHaReplicationResponse_Result_Replication& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListHaReplicationResponse_Result_Replication& operator=(ListHaReplicationResponse_Result_Replication&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListHaReplicationResponse_Result_Replication& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListHaReplicationResponse_Result_Replication* internal_default_instance() {
    return reinterpret_cast<const ListHaReplicationResponse_Result_Replication*>(
               &_ListHaReplicationResponse_Result_Replication_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  friend void swap(ListHaReplicationResponse_Result_Replication& a, ListHaReplicationResponse_Result_Replication& b) {
    a.Swap(&b);
  }
  inline void Swap(ListHaReplicationResponse_Result_Replication* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListHaReplicationResponse_Result_Replication* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListHaReplicationResponse_Result_Replication* New() const final {
    return CreateMaybeMessage<ListHaReplicationResponse_Result_Replication>(nullptr);
  }

  ListHaReplicationResponse_Result_Replication* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListHaReplicationResponse_Result_Replication>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListHaReplicationResponse_Result_Replication& from);
  void MergeFrom(const ListHaReplicationResponse_Result_Replication& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListHaReplicationResponse_Result_Replication* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ListHaReplicationResponse.Result.Replication";
  }
  protected:
  explicit ListHaReplicationResponse_Result_Replication(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kSourceVolumeIdFieldNumber = 2,
    kSourceWalVolumeIdFieldNumber = 3,
    kDestinationVolumeIdFieldNumber = 4,
    kDestinationWalVolumeIdFieldNumber = 5,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sourceVolumeId = 2;
  void clear_sourcevolumeid();
  ::PROTOBUF_NAMESPACE_ID::int32 sourcevolumeid() const;
  void set_sourcevolumeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sourcevolumeid() const;
  void _internal_set_sourcevolumeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sourceWalVolume_id = 3;
  void clear_sourcewalvolume_id();
  ::PROTOBUF_NAMESPACE_ID::int32 sourcewalvolume_id() const;
  void set_sourcewalvolume_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sourcewalvolume_id() const;
  void _internal_set_sourcewalvolume_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 destinationVolumeId = 4;
  void clear_destinationvolumeid();
  ::PROTOBUF_NAMESPACE_ID::int32 destinationvolumeid() const;
  void set_destinationvolumeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_destinationvolumeid() const;
  void _internal_set_destinationvolumeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 destinationWalVolumeId = 5;
  void clear_destinationwalvolumeid();
  ::PROTOBUF_NAMESPACE_ID::int32 destinationwalvolumeid() const;
  void set_destinationwalvolumeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_destinationwalvolumeid() const;
  void _internal_set_destinationwalvolumeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.ListHaReplicationResponse.Result.Replication)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 sourcevolumeid_;
  ::PROTOBUF_NAMESPACE_ID::int32 sourcewalvolume_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 destinationvolumeid_;
  ::PROTOBUF_NAMESPACE_ID::int32 destinationwalvolumeid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ListHaReplicationResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ListHaReplicationResponse.Result) */ {
 public:
  inline ListHaReplicationResponse_Result() : ListHaReplicationResponse_Result(nullptr) {}
  virtual ~ListHaReplicationResponse_Result();
  explicit constexpr ListHaReplicationResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListHaReplicationResponse_Result(const ListHaReplicationResponse_Result& from);
  ListHaReplicationResponse_Result(ListHaReplicationResponse_Result&& from) noexcept
    : ListHaReplicationResponse_Result() {
    *this = ::std::move(from);
  }

  inline ListHaReplicationResponse_Result& operator=(const ListHaReplicationResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListHaReplicationResponse_Result& operator=(ListHaReplicationResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListHaReplicationResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListHaReplicationResponse_Result* internal_default_instance() {
    return reinterpret_cast<const ListHaReplicationResponse_Result*>(
               &_ListHaReplicationResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  friend void swap(ListHaReplicationResponse_Result& a, ListHaReplicationResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(ListHaReplicationResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListHaReplicationResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListHaReplicationResponse_Result* New() const final {
    return CreateMaybeMessage<ListHaReplicationResponse_Result>(nullptr);
  }

  ListHaReplicationResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListHaReplicationResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListHaReplicationResponse_Result& from);
  void MergeFrom(const ListHaReplicationResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListHaReplicationResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ListHaReplicationResponse.Result";
  }
  protected:
  explicit ListHaReplicationResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ListHaReplicationResponse_Result_Replication Replication;

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .grpc_cli.ListHaReplicationResponse.Result.Replication data = 2;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::grpc_cli::ListHaReplicationResponse_Result_Replication* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::ListHaReplicationResponse_Result_Replication >*
      mutable_data();
  private:
  const ::grpc_cli::ListHaReplicationResponse_Result_Replication& _internal_data(int index) const;
  ::grpc_cli::ListHaReplicationResponse_Result_Replication* _internal_add_data();
  public:
  const ::grpc_cli::ListHaReplicationResponse_Result_Replication& data(int index) const;
  ::grpc_cli::ListHaReplicationResponse_Result_Replication* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::ListHaReplicationResponse_Result_Replication >&
      data() const;

  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:grpc_cli.ListHaReplicationResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::ListHaReplicationResponse_Result_Replication > data_;
  ::grpc_cli::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ListHaReplicationResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ListHaReplicationResponse) */ {
 public:
  inline ListHaReplicationResponse() : ListHaReplicationResponse(nullptr) {}
  virtual ~ListHaReplicationResponse();
  explicit constexpr ListHaReplicationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListHaReplicationResponse(const ListHaReplicationResponse& from);
  ListHaReplicationResponse(ListHaReplicationResponse&& from) noexcept
    : ListHaReplicationResponse() {
    *this = ::std::move(from);
  }

  inline ListHaReplicationResponse& operator=(const ListHaReplicationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListHaReplicationResponse& operator=(ListHaReplicationResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListHaReplicationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListHaReplicationResponse* internal_default_instance() {
    return reinterpret_cast<const ListHaReplicationResponse*>(
               &_ListHaReplicationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  friend void swap(ListHaReplicationResponse& a, ListHaReplicationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListHaReplicationResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListHaReplicationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListHaReplicationResponse* New() const final {
    return CreateMaybeMessage<ListHaReplicationResponse>(nullptr);
  }

  ListHaReplicationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListHaReplicationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListHaReplicationResponse& from);
  void MergeFrom(const ListHaReplicationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListHaReplicationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ListHaReplicationResponse";
  }
  protected:
  explicit ListHaReplicationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ListHaReplicationResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.ListHaReplicationResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::ListHaReplicationResponse_Result& result() const;
  ::grpc_cli::ListHaReplicationResponse_Result* release_result();
  ::grpc_cli::ListHaReplicationResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::ListHaReplicationResponse_Result* result);
  private:
  const ::grpc_cli::ListHaReplicationResponse_Result& _internal_result() const;
  ::grpc_cli::ListHaReplicationResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::ListHaReplicationResponse_Result* result);
  ::grpc_cli::ListHaReplicationResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.ListHaReplicationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::ListHaReplicationResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class StartHaReplicationRequest_Param PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.StartHaReplicationRequest.Param) */ {
 public:
  inline StartHaReplicationRequest_Param() : StartHaReplicationRequest_Param(nullptr) {}
  virtual ~StartHaReplicationRequest_Param();
  explicit constexpr StartHaReplicationRequest_Param(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartHaReplicationRequest_Param(const StartHaReplicationRequest_Param& from);
  StartHaReplicationRequest_Param(StartHaReplicationRequest_Param&& from) noexcept
    : StartHaReplicationRequest_Param() {
    *this = ::std::move(from);
  }

  inline StartHaReplicationRequest_Param& operator=(const StartHaReplicationRequest_Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartHaReplicationRequest_Param& operator=(StartHaReplicationRequest_Param&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartHaReplicationRequest_Param& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartHaReplicationRequest_Param* internal_default_instance() {
    return reinterpret_cast<const StartHaReplicationRequest_Param*>(
               &_StartHaReplicationRequest_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  friend void swap(StartHaReplicationRequest_Param& a, StartHaReplicationRequest_Param& b) {
    a.Swap(&b);
  }
  inline void Swap(StartHaReplicationRequest_Param* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartHaReplicationRequest_Param* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartHaReplicationRequest_Param* New() const final {
    return CreateMaybeMessage<StartHaReplicationRequest_Param>(nullptr);
  }

  StartHaReplicationRequest_Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartHaReplicationRequest_Param>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartHaReplicationRequest_Param& from);
  void MergeFrom(const StartHaReplicationRequest_Param& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartHaReplicationRequest_Param* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.StartHaReplicationRequest.Param";
  }
  protected:
  explicit StartHaReplicationRequest_Param(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrimaryNodeNameFieldNumber = 1,
    kPrimaryArrayNameFieldNumber = 2,
    kPrimaryVolumeNameFieldNumber = 3,
    kPrimaryWalVolumeNameFieldNumber = 4,
    kSecondaryNodeNameFieldNumber = 5,
    kSecondaryArrayNameFieldNumber = 6,
    kSecondaryVolumeNameFieldNumber = 7,
    kSecondaryWalVolumeNameFieldNumber = 8,
    kStuatsFieldNumber = 9,
    kTimestampFieldNumber = 10,
  };
  // string primaryNodeName = 1;
  void clear_primarynodename();
  const std::string& primarynodename() const;
  void set_primarynodename(const std::string& value);
  void set_primarynodename(std::string&& value);
  void set_primarynodename(const char* value);
  void set_primarynodename(const char* value, size_t size);
  std::string* mutable_primarynodename();
  std::string* release_primarynodename();
  void set_allocated_primarynodename(std::string* primarynodename);
  private:
  const std::string& _internal_primarynodename() const;
  void _internal_set_primarynodename(const std::string& value);
  std::string* _internal_mutable_primarynodename();
  public:

  // string primaryArrayName = 2;
  void clear_primaryarrayname();
  const std::string& primaryarrayname() const;
  void set_primaryarrayname(const std::string& value);
  void set_primaryarrayname(std::string&& value);
  void set_primaryarrayname(const char* value);
  void set_primaryarrayname(const char* value, size_t size);
  std::string* mutable_primaryarrayname();
  std::string* release_primaryarrayname();
  void set_allocated_primaryarrayname(std::string* primaryarrayname);
  private:
  const std::string& _internal_primaryarrayname() const;
  void _internal_set_primaryarrayname(const std::string& value);
  std::string* _internal_mutable_primaryarrayname();
  public:

  // string primaryVolumeName = 3;
  void clear_primaryvolumename();
  const std::string& primaryvolumename() const;
  void set_primaryvolumename(const std::string& value);
  void set_primaryvolumename(std::string&& value);
  void set_primaryvolumename(const char* value);
  void set_primaryvolumename(const char* value, size_t size);
  std::string* mutable_primaryvolumename();
  std::string* release_primaryvolumename();
  void set_allocated_primaryvolumename(std::string* primaryvolumename);
  private:
  const std::string& _internal_primaryvolumename() const;
  void _internal_set_primaryvolumename(const std::string& value);
  std::string* _internal_mutable_primaryvolumename();
  public:

  // string primaryWalVolumeName = 4;
  void clear_primarywalvolumename();
  const std::string& primarywalvolumename() const;
  void set_primarywalvolumename(const std::string& value);
  void set_primarywalvolumename(std::string&& value);
  void set_primarywalvolumename(const char* value);
  void set_primarywalvolumename(const char* value, size_t size);
  std::string* mutable_primarywalvolumename();
  std::string* release_primarywalvolumename();
  void set_allocated_primarywalvolumename(std::string* primarywalvolumename);
  private:
  const std::string& _internal_primarywalvolumename() const;
  void _internal_set_primarywalvolumename(const std::string& value);
  std::string* _internal_mutable_primarywalvolumename();
  public:

  // string secondaryNodeName = 5;
  void clear_secondarynodename();
  const std::string& secondarynodename() const;
  void set_secondarynodename(const std::string& value);
  void set_secondarynodename(std::string&& value);
  void set_secondarynodename(const char* value);
  void set_secondarynodename(const char* value, size_t size);
  std::string* mutable_secondarynodename();
  std::string* release_secondarynodename();
  void set_allocated_secondarynodename(std::string* secondarynodename);
  private:
  const std::string& _internal_secondarynodename() const;
  void _internal_set_secondarynodename(const std::string& value);
  std::string* _internal_mutable_secondarynodename();
  public:

  // string secondaryArrayName = 6;
  void clear_secondaryarrayname();
  const std::string& secondaryarrayname() const;
  void set_secondaryarrayname(const std::string& value);
  void set_secondaryarrayname(std::string&& value);
  void set_secondaryarrayname(const char* value);
  void set_secondaryarrayname(const char* value, size_t size);
  std::string* mutable_secondaryarrayname();
  std::string* release_secondaryarrayname();
  void set_allocated_secondaryarrayname(std::string* secondaryarrayname);
  private:
  const std::string& _internal_secondaryarrayname() const;
  void _internal_set_secondaryarrayname(const std::string& value);
  std::string* _internal_mutable_secondaryarrayname();
  public:

  // string secondaryVolumeName = 7;
  void clear_secondaryvolumename();
  const std::string& secondaryvolumename() const;
  void set_secondaryvolumename(const std::string& value);
  void set_secondaryvolumename(std::string&& value);
  void set_secondaryvolumename(const char* value);
  void set_secondaryvolumename(const char* value, size_t size);
  std::string* mutable_secondaryvolumename();
  std::string* release_secondaryvolumename();
  void set_allocated_secondaryvolumename(std::string* secondaryvolumename);
  private:
  const std::string& _internal_secondaryvolumename() const;
  void _internal_set_secondaryvolumename(const std::string& value);
  std::string* _internal_mutable_secondaryvolumename();
  public:

  // string secondaryWalVolumeName = 8;
  void clear_secondarywalvolumename();
  const std::string& secondarywalvolumename() const;
  void set_secondarywalvolumename(const std::string& value);
  void set_secondarywalvolumename(std::string&& value);
  void set_secondarywalvolumename(const char* value);
  void set_secondarywalvolumename(const char* value, size_t size);
  std::string* mutable_secondarywalvolumename();
  std::string* release_secondarywalvolumename();
  void set_allocated_secondarywalvolumename(std::string* secondarywalvolumename);
  private:
  const std::string& _internal_secondarywalvolumename() const;
  void _internal_set_secondarywalvolumename(const std::string& value);
  std::string* _internal_mutable_secondarywalvolumename();
  public:

  // string stuats = 9;
  void clear_stuats();
  const std::string& stuats() const;
  void set_stuats(const std::string& value);
  void set_stuats(std::string&& value);
  void set_stuats(const char* value);
  void set_stuats(const char* value, size_t size);
  std::string* mutable_stuats();
  std::string* release_stuats();
  void set_allocated_stuats(std::string* stuats);
  private:
  const std::string& _internal_stuats() const;
  void _internal_set_stuats(const std::string& value);
  std::string* _internal_mutable_stuats();
  public:

  // string timestamp = 10;
  void clear_timestamp();
  const std::string& timestamp() const;
  void set_timestamp(const std::string& value);
  void set_timestamp(std::string&& value);
  void set_timestamp(const char* value);
  void set_timestamp(const char* value, size_t size);
  std::string* mutable_timestamp();
  std::string* release_timestamp();
  void set_allocated_timestamp(std::string* timestamp);
  private:
  const std::string& _internal_timestamp() const;
  void _internal_set_timestamp(const std::string& value);
  std::string* _internal_mutable_timestamp();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.StartHaReplicationRequest.Param)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr primarynodename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr primaryarrayname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr primaryvolumename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr primarywalvolumename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secondarynodename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secondaryarrayname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secondaryvolumename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secondarywalvolumename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stuats_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class StartHaReplicationRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.StartHaReplicationRequest) */ {
 public:
  inline StartHaReplicationRequest() : StartHaReplicationRequest(nullptr) {}
  virtual ~StartHaReplicationRequest();
  explicit constexpr StartHaReplicationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartHaReplicationRequest(const StartHaReplicationRequest& from);
  StartHaReplicationRequest(StartHaReplicationRequest&& from) noexcept
    : StartHaReplicationRequest() {
    *this = ::std::move(from);
  }

  inline StartHaReplicationRequest& operator=(const StartHaReplicationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartHaReplicationRequest& operator=(StartHaReplicationRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartHaReplicationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartHaReplicationRequest* internal_default_instance() {
    return reinterpret_cast<const StartHaReplicationRequest*>(
               &_StartHaReplicationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  friend void swap(StartHaReplicationRequest& a, StartHaReplicationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartHaReplicationRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartHaReplicationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartHaReplicationRequest* New() const final {
    return CreateMaybeMessage<StartHaReplicationRequest>(nullptr);
  }

  StartHaReplicationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartHaReplicationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartHaReplicationRequest& from);
  void MergeFrom(const StartHaReplicationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartHaReplicationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.StartHaReplicationRequest";
  }
  protected:
  explicit StartHaReplicationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef StartHaReplicationRequest_Param Param;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
    kParamFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // .grpc_cli.StartHaReplicationRequest.Param param = 4;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::grpc_cli::StartHaReplicationRequest_Param& param() const;
  ::grpc_cli::StartHaReplicationRequest_Param* release_param();
  ::grpc_cli::StartHaReplicationRequest_Param* mutable_param();
  void set_allocated_param(::grpc_cli::StartHaReplicationRequest_Param* param);
  private:
  const ::grpc_cli::StartHaReplicationRequest_Param& _internal_param() const;
  ::grpc_cli::StartHaReplicationRequest_Param* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::grpc_cli::StartHaReplicationRequest_Param* param);
  ::grpc_cli::StartHaReplicationRequest_Param* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:grpc_cli.StartHaReplicationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  ::grpc_cli::StartHaReplicationRequest_Param* param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class StartHaReplicationResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.StartHaReplicationResponse.Result) */ {
 public:
  inline StartHaReplicationResponse_Result() : StartHaReplicationResponse_Result(nullptr) {}
  virtual ~StartHaReplicationResponse_Result();
  explicit constexpr StartHaReplicationResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartHaReplicationResponse_Result(const StartHaReplicationResponse_Result& from);
  StartHaReplicationResponse_Result(StartHaReplicationResponse_Result&& from) noexcept
    : StartHaReplicationResponse_Result() {
    *this = ::std::move(from);
  }

  inline StartHaReplicationResponse_Result& operator=(const StartHaReplicationResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartHaReplicationResponse_Result& operator=(StartHaReplicationResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartHaReplicationResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartHaReplicationResponse_Result* internal_default_instance() {
    return reinterpret_cast<const StartHaReplicationResponse_Result*>(
               &_StartHaReplicationResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  friend void swap(StartHaReplicationResponse_Result& a, StartHaReplicationResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(StartHaReplicationResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartHaReplicationResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartHaReplicationResponse_Result* New() const final {
    return CreateMaybeMessage<StartHaReplicationResponse_Result>(nullptr);
  }

  StartHaReplicationResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartHaReplicationResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartHaReplicationResponse_Result& from);
  void MergeFrom(const StartHaReplicationResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartHaReplicationResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.StartHaReplicationResponse.Result";
  }
  protected:
  explicit StartHaReplicationResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:grpc_cli.StartHaReplicationResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class StartHaReplicationResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.StartHaReplicationResponse) */ {
 public:
  inline StartHaReplicationResponse() : StartHaReplicationResponse(nullptr) {}
  virtual ~StartHaReplicationResponse();
  explicit constexpr StartHaReplicationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartHaReplicationResponse(const StartHaReplicationResponse& from);
  StartHaReplicationResponse(StartHaReplicationResponse&& from) noexcept
    : StartHaReplicationResponse() {
    *this = ::std::move(from);
  }

  inline StartHaReplicationResponse& operator=(const StartHaReplicationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartHaReplicationResponse& operator=(StartHaReplicationResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartHaReplicationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartHaReplicationResponse* internal_default_instance() {
    return reinterpret_cast<const StartHaReplicationResponse*>(
               &_StartHaReplicationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  friend void swap(StartHaReplicationResponse& a, StartHaReplicationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StartHaReplicationResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartHaReplicationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartHaReplicationResponse* New() const final {
    return CreateMaybeMessage<StartHaReplicationResponse>(nullptr);
  }

  StartHaReplicationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartHaReplicationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartHaReplicationResponse& from);
  void MergeFrom(const StartHaReplicationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartHaReplicationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.StartHaReplicationResponse";
  }
  protected:
  explicit StartHaReplicationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef StartHaReplicationResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.StartHaReplicationResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::StartHaReplicationResponse_Result& result() const;
  ::grpc_cli::StartHaReplicationResponse_Result* release_result();
  ::grpc_cli::StartHaReplicationResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::StartHaReplicationResponse_Result* result);
  private:
  const ::grpc_cli::StartHaReplicationResponse_Result& _internal_result() const;
  ::grpc_cli::StartHaReplicationResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::StartHaReplicationResponse_Result* result);
  ::grpc_cli::StartHaReplicationResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.StartHaReplicationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::StartHaReplicationResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class SetLogLevelRequest_Param PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.SetLogLevelRequest.Param) */ {
 public:
  inline SetLogLevelRequest_Param() : SetLogLevelRequest_Param(nullptr) {}
  virtual ~SetLogLevelRequest_Param();
  explicit constexpr SetLogLevelRequest_Param(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetLogLevelRequest_Param(const SetLogLevelRequest_Param& from);
  SetLogLevelRequest_Param(SetLogLevelRequest_Param&& from) noexcept
    : SetLogLevelRequest_Param() {
    *this = ::std::move(from);
  }

  inline SetLogLevelRequest_Param& operator=(const SetLogLevelRequest_Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetLogLevelRequest_Param& operator=(SetLogLevelRequest_Param&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetLogLevelRequest_Param& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetLogLevelRequest_Param* internal_default_instance() {
    return reinterpret_cast<const SetLogLevelRequest_Param*>(
               &_SetLogLevelRequest_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  friend void swap(SetLogLevelRequest_Param& a, SetLogLevelRequest_Param& b) {
    a.Swap(&b);
  }
  inline void Swap(SetLogLevelRequest_Param* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetLogLevelRequest_Param* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetLogLevelRequest_Param* New() const final {
    return CreateMaybeMessage<SetLogLevelRequest_Param>(nullptr);
  }

  SetLogLevelRequest_Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetLogLevelRequest_Param>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetLogLevelRequest_Param& from);
  void MergeFrom(const SetLogLevelRequest_Param& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetLogLevelRequest_Param* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.SetLogLevelRequest.Param";
  }
  protected:
  explicit SetLogLevelRequest_Param(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLevelFieldNumber = 1,
  };
  // string level = 1;
  void clear_level();
  const std::string& level() const;
  void set_level(const std::string& value);
  void set_level(std::string&& value);
  void set_level(const char* value);
  void set_level(const char* value, size_t size);
  std::string* mutable_level();
  std::string* release_level();
  void set_allocated_level(std::string* level);
  private:
  const std::string& _internal_level() const;
  void _internal_set_level(const std::string& value);
  std::string* _internal_mutable_level();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.SetLogLevelRequest.Param)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class SetLogLevelRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.SetLogLevelRequest) */ {
 public:
  inline SetLogLevelRequest() : SetLogLevelRequest(nullptr) {}
  virtual ~SetLogLevelRequest();
  explicit constexpr SetLogLevelRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetLogLevelRequest(const SetLogLevelRequest& from);
  SetLogLevelRequest(SetLogLevelRequest&& from) noexcept
    : SetLogLevelRequest() {
    *this = ::std::move(from);
  }

  inline SetLogLevelRequest& operator=(const SetLogLevelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetLogLevelRequest& operator=(SetLogLevelRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetLogLevelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetLogLevelRequest* internal_default_instance() {
    return reinterpret_cast<const SetLogLevelRequest*>(
               &_SetLogLevelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  friend void swap(SetLogLevelRequest& a, SetLogLevelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetLogLevelRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetLogLevelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetLogLevelRequest* New() const final {
    return CreateMaybeMessage<SetLogLevelRequest>(nullptr);
  }

  SetLogLevelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetLogLevelRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetLogLevelRequest& from);
  void MergeFrom(const SetLogLevelRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetLogLevelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.SetLogLevelRequest";
  }
  protected:
  explicit SetLogLevelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef SetLogLevelRequest_Param Param;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
    kParamFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // .grpc_cli.SetLogLevelRequest.Param param = 4;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::grpc_cli::SetLogLevelRequest_Param& param() const;
  ::grpc_cli::SetLogLevelRequest_Param* release_param();
  ::grpc_cli::SetLogLevelRequest_Param* mutable_param();
  void set_allocated_param(::grpc_cli::SetLogLevelRequest_Param* param);
  private:
  const ::grpc_cli::SetLogLevelRequest_Param& _internal_param() const;
  ::grpc_cli::SetLogLevelRequest_Param* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::grpc_cli::SetLogLevelRequest_Param* param);
  ::grpc_cli::SetLogLevelRequest_Param* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:grpc_cli.SetLogLevelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  ::grpc_cli::SetLogLevelRequest_Param* param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class SetLogLevelResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.SetLogLevelResponse.Result) */ {
 public:
  inline SetLogLevelResponse_Result() : SetLogLevelResponse_Result(nullptr) {}
  virtual ~SetLogLevelResponse_Result();
  explicit constexpr SetLogLevelResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetLogLevelResponse_Result(const SetLogLevelResponse_Result& from);
  SetLogLevelResponse_Result(SetLogLevelResponse_Result&& from) noexcept
    : SetLogLevelResponse_Result() {
    *this = ::std::move(from);
  }

  inline SetLogLevelResponse_Result& operator=(const SetLogLevelResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetLogLevelResponse_Result& operator=(SetLogLevelResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetLogLevelResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetLogLevelResponse_Result* internal_default_instance() {
    return reinterpret_cast<const SetLogLevelResponse_Result*>(
               &_SetLogLevelResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    116;

  friend void swap(SetLogLevelResponse_Result& a, SetLogLevelResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(SetLogLevelResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetLogLevelResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetLogLevelResponse_Result* New() const final {
    return CreateMaybeMessage<SetLogLevelResponse_Result>(nullptr);
  }

  SetLogLevelResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetLogLevelResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetLogLevelResponse_Result& from);
  void MergeFrom(const SetLogLevelResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetLogLevelResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.SetLogLevelResponse.Result";
  }
  protected:
  explicit SetLogLevelResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:grpc_cli.SetLogLevelResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class SetLogLevelResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.SetLogLevelResponse) */ {
 public:
  inline SetLogLevelResponse() : SetLogLevelResponse(nullptr) {}
  virtual ~SetLogLevelResponse();
  explicit constexpr SetLogLevelResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetLogLevelResponse(const SetLogLevelResponse& from);
  SetLogLevelResponse(SetLogLevelResponse&& from) noexcept
    : SetLogLevelResponse() {
    *this = ::std::move(from);
  }

  inline SetLogLevelResponse& operator=(const SetLogLevelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetLogLevelResponse& operator=(SetLogLevelResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetLogLevelResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetLogLevelResponse* internal_default_instance() {
    return reinterpret_cast<const SetLogLevelResponse*>(
               &_SetLogLevelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    117;

  friend void swap(SetLogLevelResponse& a, SetLogLevelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetLogLevelResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetLogLevelResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetLogLevelResponse* New() const final {
    return CreateMaybeMessage<SetLogLevelResponse>(nullptr);
  }

  SetLogLevelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetLogLevelResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetLogLevelResponse& from);
  void MergeFrom(const SetLogLevelResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetLogLevelResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.SetLogLevelResponse";
  }
  protected:
  explicit SetLogLevelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef SetLogLevelResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.SetLogLevelResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::SetLogLevelResponse_Result& result() const;
  ::grpc_cli::SetLogLevelResponse_Result* release_result();
  ::grpc_cli::SetLogLevelResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::SetLogLevelResponse_Result* result);
  private:
  const ::grpc_cli::SetLogLevelResponse_Result& _internal_result() const;
  ::grpc_cli::SetLogLevelResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::SetLogLevelResponse_Result* result);
  ::grpc_cli::SetLogLevelResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.SetLogLevelResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::SetLogLevelResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class SetLogPreferenceRequest_Param PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.SetLogPreferenceRequest.Param) */ {
 public:
  inline SetLogPreferenceRequest_Param() : SetLogPreferenceRequest_Param(nullptr) {}
  virtual ~SetLogPreferenceRequest_Param();
  explicit constexpr SetLogPreferenceRequest_Param(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetLogPreferenceRequest_Param(const SetLogPreferenceRequest_Param& from);
  SetLogPreferenceRequest_Param(SetLogPreferenceRequest_Param&& from) noexcept
    : SetLogPreferenceRequest_Param() {
    *this = ::std::move(from);
  }

  inline SetLogPreferenceRequest_Param& operator=(const SetLogPreferenceRequest_Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetLogPreferenceRequest_Param& operator=(SetLogPreferenceRequest_Param&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetLogPreferenceRequest_Param& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetLogPreferenceRequest_Param* internal_default_instance() {
    return reinterpret_cast<const SetLogPreferenceRequest_Param*>(
               &_SetLogPreferenceRequest_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    118;

  friend void swap(SetLogPreferenceRequest_Param& a, SetLogPreferenceRequest_Param& b) {
    a.Swap(&b);
  }
  inline void Swap(SetLogPreferenceRequest_Param* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetLogPreferenceRequest_Param* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetLogPreferenceRequest_Param* New() const final {
    return CreateMaybeMessage<SetLogPreferenceRequest_Param>(nullptr);
  }

  SetLogPreferenceRequest_Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetLogPreferenceRequest_Param>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetLogPreferenceRequest_Param& from);
  void MergeFrom(const SetLogPreferenceRequest_Param& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetLogPreferenceRequest_Param* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.SetLogPreferenceRequest.Param";
  }
  protected:
  explicit SetLogPreferenceRequest_Param(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStructuredLoggingFieldNumber = 1,
  };
  // string structuredLogging = 1;
  void clear_structuredlogging();
  const std::string& structuredlogging() const;
  void set_structuredlogging(const std::string& value);
  void set_structuredlogging(std::string&& value);
  void set_structuredlogging(const char* value);
  void set_structuredlogging(const char* value, size_t size);
  std::string* mutable_structuredlogging();
  std::string* release_structuredlogging();
  void set_allocated_structuredlogging(std::string* structuredlogging);
  private:
  const std::string& _internal_structuredlogging() const;
  void _internal_set_structuredlogging(const std::string& value);
  std::string* _internal_mutable_structuredlogging();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.SetLogPreferenceRequest.Param)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr structuredlogging_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class SetLogPreferenceRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.SetLogPreferenceRequest) */ {
 public:
  inline SetLogPreferenceRequest() : SetLogPreferenceRequest(nullptr) {}
  virtual ~SetLogPreferenceRequest();
  explicit constexpr SetLogPreferenceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetLogPreferenceRequest(const SetLogPreferenceRequest& from);
  SetLogPreferenceRequest(SetLogPreferenceRequest&& from) noexcept
    : SetLogPreferenceRequest() {
    *this = ::std::move(from);
  }

  inline SetLogPreferenceRequest& operator=(const SetLogPreferenceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetLogPreferenceRequest& operator=(SetLogPreferenceRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetLogPreferenceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetLogPreferenceRequest* internal_default_instance() {
    return reinterpret_cast<const SetLogPreferenceRequest*>(
               &_SetLogPreferenceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    119;

  friend void swap(SetLogPreferenceRequest& a, SetLogPreferenceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetLogPreferenceRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetLogPreferenceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetLogPreferenceRequest* New() const final {
    return CreateMaybeMessage<SetLogPreferenceRequest>(nullptr);
  }

  SetLogPreferenceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetLogPreferenceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetLogPreferenceRequest& from);
  void MergeFrom(const SetLogPreferenceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetLogPreferenceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.SetLogPreferenceRequest";
  }
  protected:
  explicit SetLogPreferenceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef SetLogPreferenceRequest_Param Param;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
    kParamFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // .grpc_cli.SetLogPreferenceRequest.Param param = 4;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::grpc_cli::SetLogPreferenceRequest_Param& param() const;
  ::grpc_cli::SetLogPreferenceRequest_Param* release_param();
  ::grpc_cli::SetLogPreferenceRequest_Param* mutable_param();
  void set_allocated_param(::grpc_cli::SetLogPreferenceRequest_Param* param);
  private:
  const ::grpc_cli::SetLogPreferenceRequest_Param& _internal_param() const;
  ::grpc_cli::SetLogPreferenceRequest_Param* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::grpc_cli::SetLogPreferenceRequest_Param* param);
  ::grpc_cli::SetLogPreferenceRequest_Param* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:grpc_cli.SetLogPreferenceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  ::grpc_cli::SetLogPreferenceRequest_Param* param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class SetLogPreferenceResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.SetLogPreferenceResponse.Result) */ {
 public:
  inline SetLogPreferenceResponse_Result() : SetLogPreferenceResponse_Result(nullptr) {}
  virtual ~SetLogPreferenceResponse_Result();
  explicit constexpr SetLogPreferenceResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetLogPreferenceResponse_Result(const SetLogPreferenceResponse_Result& from);
  SetLogPreferenceResponse_Result(SetLogPreferenceResponse_Result&& from) noexcept
    : SetLogPreferenceResponse_Result() {
    *this = ::std::move(from);
  }

  inline SetLogPreferenceResponse_Result& operator=(const SetLogPreferenceResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetLogPreferenceResponse_Result& operator=(SetLogPreferenceResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetLogPreferenceResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetLogPreferenceResponse_Result* internal_default_instance() {
    return reinterpret_cast<const SetLogPreferenceResponse_Result*>(
               &_SetLogPreferenceResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    120;

  friend void swap(SetLogPreferenceResponse_Result& a, SetLogPreferenceResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(SetLogPreferenceResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetLogPreferenceResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetLogPreferenceResponse_Result* New() const final {
    return CreateMaybeMessage<SetLogPreferenceResponse_Result>(nullptr);
  }

  SetLogPreferenceResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetLogPreferenceResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetLogPreferenceResponse_Result& from);
  void MergeFrom(const SetLogPreferenceResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetLogPreferenceResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.SetLogPreferenceResponse.Result";
  }
  protected:
  explicit SetLogPreferenceResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:grpc_cli.SetLogPreferenceResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class SetLogPreferenceResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.SetLogPreferenceResponse) */ {
 public:
  inline SetLogPreferenceResponse() : SetLogPreferenceResponse(nullptr) {}
  virtual ~SetLogPreferenceResponse();
  explicit constexpr SetLogPreferenceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetLogPreferenceResponse(const SetLogPreferenceResponse& from);
  SetLogPreferenceResponse(SetLogPreferenceResponse&& from) noexcept
    : SetLogPreferenceResponse() {
    *this = ::std::move(from);
  }

  inline SetLogPreferenceResponse& operator=(const SetLogPreferenceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetLogPreferenceResponse& operator=(SetLogPreferenceResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetLogPreferenceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetLogPreferenceResponse* internal_default_instance() {
    return reinterpret_cast<const SetLogPreferenceResponse*>(
               &_SetLogPreferenceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    121;

  friend void swap(SetLogPreferenceResponse& a, SetLogPreferenceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetLogPreferenceResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetLogPreferenceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetLogPreferenceResponse* New() const final {
    return CreateMaybeMessage<SetLogPreferenceResponse>(nullptr);
  }

  SetLogPreferenceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetLogPreferenceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetLogPreferenceResponse& from);
  void MergeFrom(const SetLogPreferenceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetLogPreferenceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.SetLogPreferenceResponse";
  }
  protected:
  explicit SetLogPreferenceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef SetLogPreferenceResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.SetLogPreferenceResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::SetLogPreferenceResponse_Result& result() const;
  ::grpc_cli::SetLogPreferenceResponse_Result* release_result();
  ::grpc_cli::SetLogPreferenceResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::SetLogPreferenceResponse_Result* result);
  private:
  const ::grpc_cli::SetLogPreferenceResponse_Result& _internal_result() const;
  ::grpc_cli::SetLogPreferenceResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::SetLogPreferenceResponse_Result* result);
  ::grpc_cli::SetLogPreferenceResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.SetLogPreferenceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::SetLogPreferenceResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class LoggerInfoRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.LoggerInfoRequest) */ {
 public:
  inline LoggerInfoRequest() : LoggerInfoRequest(nullptr) {}
  virtual ~LoggerInfoRequest();
  explicit constexpr LoggerInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoggerInfoRequest(const LoggerInfoRequest& from);
  LoggerInfoRequest(LoggerInfoRequest&& from) noexcept
    : LoggerInfoRequest() {
    *this = ::std::move(from);
  }

  inline LoggerInfoRequest& operator=(const LoggerInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoggerInfoRequest& operator=(LoggerInfoRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoggerInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoggerInfoRequest* internal_default_instance() {
    return reinterpret_cast<const LoggerInfoRequest*>(
               &_LoggerInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    122;

  friend void swap(LoggerInfoRequest& a, LoggerInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoggerInfoRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoggerInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoggerInfoRequest* New() const final {
    return CreateMaybeMessage<LoggerInfoRequest>(nullptr);
  }

  LoggerInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoggerInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoggerInfoRequest& from);
  void MergeFrom(const LoggerInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoggerInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.LoggerInfoRequest";
  }
  protected:
  explicit LoggerInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.LoggerInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class LoggerInfoResponse_Result_LoggerInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.LoggerInfoResponse.Result.LoggerInfo) */ {
 public:
  inline LoggerInfoResponse_Result_LoggerInfo() : LoggerInfoResponse_Result_LoggerInfo(nullptr) {}
  virtual ~LoggerInfoResponse_Result_LoggerInfo();
  explicit constexpr LoggerInfoResponse_Result_LoggerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoggerInfoResponse_Result_LoggerInfo(const LoggerInfoResponse_Result_LoggerInfo& from);
  LoggerInfoResponse_Result_LoggerInfo(LoggerInfoResponse_Result_LoggerInfo&& from) noexcept
    : LoggerInfoResponse_Result_LoggerInfo() {
    *this = ::std::move(from);
  }

  inline LoggerInfoResponse_Result_LoggerInfo& operator=(const LoggerInfoResponse_Result_LoggerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoggerInfoResponse_Result_LoggerInfo& operator=(LoggerInfoResponse_Result_LoggerInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoggerInfoResponse_Result_LoggerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoggerInfoResponse_Result_LoggerInfo* internal_default_instance() {
    return reinterpret_cast<const LoggerInfoResponse_Result_LoggerInfo*>(
               &_LoggerInfoResponse_Result_LoggerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    123;

  friend void swap(LoggerInfoResponse_Result_LoggerInfo& a, LoggerInfoResponse_Result_LoggerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(LoggerInfoResponse_Result_LoggerInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoggerInfoResponse_Result_LoggerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoggerInfoResponse_Result_LoggerInfo* New() const final {
    return CreateMaybeMessage<LoggerInfoResponse_Result_LoggerInfo>(nullptr);
  }

  LoggerInfoResponse_Result_LoggerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoggerInfoResponse_Result_LoggerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoggerInfoResponse_Result_LoggerInfo& from);
  void MergeFrom(const LoggerInfoResponse_Result_LoggerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoggerInfoResponse_Result_LoggerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.LoggerInfoResponse.Result.LoggerInfo";
  }
  protected:
  explicit LoggerInfoResponse_Result_LoggerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinorLogPathFieldNumber = 1,
    kMajorLogPathFieldNumber = 2,
    kLogfileSizeInMbFieldNumber = 3,
    kMinAllowableLogLevelFieldNumber = 5,
    kFilterIncludedFieldNumber = 7,
    kFilterExcludedFieldNumber = 8,
    kLogfileRotationCountFieldNumber = 4,
    kFilterEnabledFieldNumber = 6,
    kStructuredLoggingFieldNumber = 9,
  };
  // string minorLogPath = 1;
  void clear_minorlogpath();
  const std::string& minorlogpath() const;
  void set_minorlogpath(const std::string& value);
  void set_minorlogpath(std::string&& value);
  void set_minorlogpath(const char* value);
  void set_minorlogpath(const char* value, size_t size);
  std::string* mutable_minorlogpath();
  std::string* release_minorlogpath();
  void set_allocated_minorlogpath(std::string* minorlogpath);
  private:
  const std::string& _internal_minorlogpath() const;
  void _internal_set_minorlogpath(const std::string& value);
  std::string* _internal_mutable_minorlogpath();
  public:

  // string majorLogPath = 2;
  void clear_majorlogpath();
  const std::string& majorlogpath() const;
  void set_majorlogpath(const std::string& value);
  void set_majorlogpath(std::string&& value);
  void set_majorlogpath(const char* value);
  void set_majorlogpath(const char* value, size_t size);
  std::string* mutable_majorlogpath();
  std::string* release_majorlogpath();
  void set_allocated_majorlogpath(std::string* majorlogpath);
  private:
  const std::string& _internal_majorlogpath() const;
  void _internal_set_majorlogpath(const std::string& value);
  std::string* _internal_mutable_majorlogpath();
  public:

  // string logfileSizeInMb = 3;
  void clear_logfilesizeinmb();
  const std::string& logfilesizeinmb() const;
  void set_logfilesizeinmb(const std::string& value);
  void set_logfilesizeinmb(std::string&& value);
  void set_logfilesizeinmb(const char* value);
  void set_logfilesizeinmb(const char* value, size_t size);
  std::string* mutable_logfilesizeinmb();
  std::string* release_logfilesizeinmb();
  void set_allocated_logfilesizeinmb(std::string* logfilesizeinmb);
  private:
  const std::string& _internal_logfilesizeinmb() const;
  void _internal_set_logfilesizeinmb(const std::string& value);
  std::string* _internal_mutable_logfilesizeinmb();
  public:

  // string minAllowableLogLevel = 5;
  void clear_minallowableloglevel();
  const std::string& minallowableloglevel() const;
  void set_minallowableloglevel(const std::string& value);
  void set_minallowableloglevel(std::string&& value);
  void set_minallowableloglevel(const char* value);
  void set_minallowableloglevel(const char* value, size_t size);
  std::string* mutable_minallowableloglevel();
  std::string* release_minallowableloglevel();
  void set_allocated_minallowableloglevel(std::string* minallowableloglevel);
  private:
  const std::string& _internal_minallowableloglevel() const;
  void _internal_set_minallowableloglevel(const std::string& value);
  std::string* _internal_mutable_minallowableloglevel();
  public:

  // string filterIncluded = 7;
  void clear_filterincluded();
  const std::string& filterincluded() const;
  void set_filterincluded(const std::string& value);
  void set_filterincluded(std::string&& value);
  void set_filterincluded(const char* value);
  void set_filterincluded(const char* value, size_t size);
  std::string* mutable_filterincluded();
  std::string* release_filterincluded();
  void set_allocated_filterincluded(std::string* filterincluded);
  private:
  const std::string& _internal_filterincluded() const;
  void _internal_set_filterincluded(const std::string& value);
  std::string* _internal_mutable_filterincluded();
  public:

  // string filterExcluded = 8;
  void clear_filterexcluded();
  const std::string& filterexcluded() const;
  void set_filterexcluded(const std::string& value);
  void set_filterexcluded(std::string&& value);
  void set_filterexcluded(const char* value);
  void set_filterexcluded(const char* value, size_t size);
  std::string* mutable_filterexcluded();
  std::string* release_filterexcluded();
  void set_allocated_filterexcluded(std::string* filterexcluded);
  private:
  const std::string& _internal_filterexcluded() const;
  void _internal_set_filterexcluded(const std::string& value);
  std::string* _internal_mutable_filterexcluded();
  public:

  // int32 logfileRotationCount = 4;
  void clear_logfilerotationcount();
  ::PROTOBUF_NAMESPACE_ID::int32 logfilerotationcount() const;
  void set_logfilerotationcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_logfilerotationcount() const;
  void _internal_set_logfilerotationcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 filterEnabled = 6;
  void clear_filterenabled();
  ::PROTOBUF_NAMESPACE_ID::int32 filterenabled() const;
  void set_filterenabled(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_filterenabled() const;
  void _internal_set_filterenabled(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool structuredLogging = 9;
  void clear_structuredlogging();
  bool structuredlogging() const;
  void set_structuredlogging(bool value);
  private:
  bool _internal_structuredlogging() const;
  void _internal_set_structuredlogging(bool value);
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.LoggerInfoResponse.Result.LoggerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr minorlogpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr majorlogpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logfilesizeinmb_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr minallowableloglevel_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filterincluded_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filterexcluded_;
  ::PROTOBUF_NAMESPACE_ID::int32 logfilerotationcount_;
  ::PROTOBUF_NAMESPACE_ID::int32 filterenabled_;
  bool structuredlogging_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class LoggerInfoResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.LoggerInfoResponse.Result) */ {
 public:
  inline LoggerInfoResponse_Result() : LoggerInfoResponse_Result(nullptr) {}
  virtual ~LoggerInfoResponse_Result();
  explicit constexpr LoggerInfoResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoggerInfoResponse_Result(const LoggerInfoResponse_Result& from);
  LoggerInfoResponse_Result(LoggerInfoResponse_Result&& from) noexcept
    : LoggerInfoResponse_Result() {
    *this = ::std::move(from);
  }

  inline LoggerInfoResponse_Result& operator=(const LoggerInfoResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoggerInfoResponse_Result& operator=(LoggerInfoResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoggerInfoResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoggerInfoResponse_Result* internal_default_instance() {
    return reinterpret_cast<const LoggerInfoResponse_Result*>(
               &_LoggerInfoResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    124;

  friend void swap(LoggerInfoResponse_Result& a, LoggerInfoResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(LoggerInfoResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoggerInfoResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoggerInfoResponse_Result* New() const final {
    return CreateMaybeMessage<LoggerInfoResponse_Result>(nullptr);
  }

  LoggerInfoResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoggerInfoResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoggerInfoResponse_Result& from);
  void MergeFrom(const LoggerInfoResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoggerInfoResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.LoggerInfoResponse.Result";
  }
  protected:
  explicit LoggerInfoResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef LoggerInfoResponse_Result_LoggerInfo LoggerInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // .grpc_cli.LoggerInfoResponse.Result.LoggerInfo data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::grpc_cli::LoggerInfoResponse_Result_LoggerInfo& data() const;
  ::grpc_cli::LoggerInfoResponse_Result_LoggerInfo* release_data();
  ::grpc_cli::LoggerInfoResponse_Result_LoggerInfo* mutable_data();
  void set_allocated_data(::grpc_cli::LoggerInfoResponse_Result_LoggerInfo* data);
  private:
  const ::grpc_cli::LoggerInfoResponse_Result_LoggerInfo& _internal_data() const;
  ::grpc_cli::LoggerInfoResponse_Result_LoggerInfo* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::grpc_cli::LoggerInfoResponse_Result_LoggerInfo* data);
  ::grpc_cli::LoggerInfoResponse_Result_LoggerInfo* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:grpc_cli.LoggerInfoResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  ::grpc_cli::LoggerInfoResponse_Result_LoggerInfo* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class LoggerInfoResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.LoggerInfoResponse) */ {
 public:
  inline LoggerInfoResponse() : LoggerInfoResponse(nullptr) {}
  virtual ~LoggerInfoResponse();
  explicit constexpr LoggerInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoggerInfoResponse(const LoggerInfoResponse& from);
  LoggerInfoResponse(LoggerInfoResponse&& from) noexcept
    : LoggerInfoResponse() {
    *this = ::std::move(from);
  }

  inline LoggerInfoResponse& operator=(const LoggerInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoggerInfoResponse& operator=(LoggerInfoResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoggerInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoggerInfoResponse* internal_default_instance() {
    return reinterpret_cast<const LoggerInfoResponse*>(
               &_LoggerInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    125;

  friend void swap(LoggerInfoResponse& a, LoggerInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LoggerInfoResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoggerInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoggerInfoResponse* New() const final {
    return CreateMaybeMessage<LoggerInfoResponse>(nullptr);
  }

  LoggerInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoggerInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoggerInfoResponse& from);
  void MergeFrom(const LoggerInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoggerInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.LoggerInfoResponse";
  }
  protected:
  explicit LoggerInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef LoggerInfoResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.LoggerInfoResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::LoggerInfoResponse_Result& result() const;
  ::grpc_cli::LoggerInfoResponse_Result* release_result();
  ::grpc_cli::LoggerInfoResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::LoggerInfoResponse_Result* result);
  private:
  const ::grpc_cli::LoggerInfoResponse_Result& _internal_result() const;
  ::grpc_cli::LoggerInfoResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::LoggerInfoResponse_Result* result);
  ::grpc_cli::LoggerInfoResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.LoggerInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::LoggerInfoResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class GetLogLevelRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.GetLogLevelRequest) */ {
 public:
  inline GetLogLevelRequest() : GetLogLevelRequest(nullptr) {}
  virtual ~GetLogLevelRequest();
  explicit constexpr GetLogLevelRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetLogLevelRequest(const GetLogLevelRequest& from);
  GetLogLevelRequest(GetLogLevelRequest&& from) noexcept
    : GetLogLevelRequest() {
    *this = ::std::move(from);
  }

  inline GetLogLevelRequest& operator=(const GetLogLevelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLogLevelRequest& operator=(GetLogLevelRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLogLevelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLogLevelRequest* internal_default_instance() {
    return reinterpret_cast<const GetLogLevelRequest*>(
               &_GetLogLevelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    126;

  friend void swap(GetLogLevelRequest& a, GetLogLevelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLogLevelRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLogLevelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLogLevelRequest* New() const final {
    return CreateMaybeMessage<GetLogLevelRequest>(nullptr);
  }

  GetLogLevelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLogLevelRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLogLevelRequest& from);
  void MergeFrom(const GetLogLevelRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLogLevelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.GetLogLevelRequest";
  }
  protected:
  explicit GetLogLevelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.GetLogLevelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class GetLogLevelResponse_Result_LogLevel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.GetLogLevelResponse.Result.LogLevel) */ {
 public:
  inline GetLogLevelResponse_Result_LogLevel() : GetLogLevelResponse_Result_LogLevel(nullptr) {}
  virtual ~GetLogLevelResponse_Result_LogLevel();
  explicit constexpr GetLogLevelResponse_Result_LogLevel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetLogLevelResponse_Result_LogLevel(const GetLogLevelResponse_Result_LogLevel& from);
  GetLogLevelResponse_Result_LogLevel(GetLogLevelResponse_Result_LogLevel&& from) noexcept
    : GetLogLevelResponse_Result_LogLevel() {
    *this = ::std::move(from);
  }

  inline GetLogLevelResponse_Result_LogLevel& operator=(const GetLogLevelResponse_Result_LogLevel& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLogLevelResponse_Result_LogLevel& operator=(GetLogLevelResponse_Result_LogLevel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLogLevelResponse_Result_LogLevel& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLogLevelResponse_Result_LogLevel* internal_default_instance() {
    return reinterpret_cast<const GetLogLevelResponse_Result_LogLevel*>(
               &_GetLogLevelResponse_Result_LogLevel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    127;

  friend void swap(GetLogLevelResponse_Result_LogLevel& a, GetLogLevelResponse_Result_LogLevel& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLogLevelResponse_Result_LogLevel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLogLevelResponse_Result_LogLevel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLogLevelResponse_Result_LogLevel* New() const final {
    return CreateMaybeMessage<GetLogLevelResponse_Result_LogLevel>(nullptr);
  }

  GetLogLevelResponse_Result_LogLevel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLogLevelResponse_Result_LogLevel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLogLevelResponse_Result_LogLevel& from);
  void MergeFrom(const GetLogLevelResponse_Result_LogLevel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLogLevelResponse_Result_LogLevel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.GetLogLevelResponse.Result.LogLevel";
  }
  protected:
  explicit GetLogLevelResponse_Result_LogLevel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLevelFieldNumber = 1,
  };
  // string level = 1;
  void clear_level();
  const std::string& level() const;
  void set_level(const std::string& value);
  void set_level(std::string&& value);
  void set_level(const char* value);
  void set_level(const char* value, size_t size);
  std::string* mutable_level();
  std::string* release_level();
  void set_allocated_level(std::string* level);
  private:
  const std::string& _internal_level() const;
  void _internal_set_level(const std::string& value);
  std::string* _internal_mutable_level();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.GetLogLevelResponse.Result.LogLevel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class GetLogLevelResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.GetLogLevelResponse.Result) */ {
 public:
  inline GetLogLevelResponse_Result() : GetLogLevelResponse_Result(nullptr) {}
  virtual ~GetLogLevelResponse_Result();
  explicit constexpr GetLogLevelResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetLogLevelResponse_Result(const GetLogLevelResponse_Result& from);
  GetLogLevelResponse_Result(GetLogLevelResponse_Result&& from) noexcept
    : GetLogLevelResponse_Result() {
    *this = ::std::move(from);
  }

  inline GetLogLevelResponse_Result& operator=(const GetLogLevelResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLogLevelResponse_Result& operator=(GetLogLevelResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLogLevelResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLogLevelResponse_Result* internal_default_instance() {
    return reinterpret_cast<const GetLogLevelResponse_Result*>(
               &_GetLogLevelResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    128;

  friend void swap(GetLogLevelResponse_Result& a, GetLogLevelResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLogLevelResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLogLevelResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLogLevelResponse_Result* New() const final {
    return CreateMaybeMessage<GetLogLevelResponse_Result>(nullptr);
  }

  GetLogLevelResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLogLevelResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLogLevelResponse_Result& from);
  void MergeFrom(const GetLogLevelResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLogLevelResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.GetLogLevelResponse.Result";
  }
  protected:
  explicit GetLogLevelResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetLogLevelResponse_Result_LogLevel LogLevel;

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // .grpc_cli.GetLogLevelResponse.Result.LogLevel data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::grpc_cli::GetLogLevelResponse_Result_LogLevel& data() const;
  ::grpc_cli::GetLogLevelResponse_Result_LogLevel* release_data();
  ::grpc_cli::GetLogLevelResponse_Result_LogLevel* mutable_data();
  void set_allocated_data(::grpc_cli::GetLogLevelResponse_Result_LogLevel* data);
  private:
  const ::grpc_cli::GetLogLevelResponse_Result_LogLevel& _internal_data() const;
  ::grpc_cli::GetLogLevelResponse_Result_LogLevel* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::grpc_cli::GetLogLevelResponse_Result_LogLevel* data);
  ::grpc_cli::GetLogLevelResponse_Result_LogLevel* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:grpc_cli.GetLogLevelResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  ::grpc_cli::GetLogLevelResponse_Result_LogLevel* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class GetLogLevelResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.GetLogLevelResponse) */ {
 public:
  inline GetLogLevelResponse() : GetLogLevelResponse(nullptr) {}
  virtual ~GetLogLevelResponse();
  explicit constexpr GetLogLevelResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetLogLevelResponse(const GetLogLevelResponse& from);
  GetLogLevelResponse(GetLogLevelResponse&& from) noexcept
    : GetLogLevelResponse() {
    *this = ::std::move(from);
  }

  inline GetLogLevelResponse& operator=(const GetLogLevelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLogLevelResponse& operator=(GetLogLevelResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLogLevelResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLogLevelResponse* internal_default_instance() {
    return reinterpret_cast<const GetLogLevelResponse*>(
               &_GetLogLevelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    129;

  friend void swap(GetLogLevelResponse& a, GetLogLevelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLogLevelResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLogLevelResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLogLevelResponse* New() const final {
    return CreateMaybeMessage<GetLogLevelResponse>(nullptr);
  }

  GetLogLevelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLogLevelResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLogLevelResponse& from);
  void MergeFrom(const GetLogLevelResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLogLevelResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.GetLogLevelResponse";
  }
  protected:
  explicit GetLogLevelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetLogLevelResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.GetLogLevelResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::GetLogLevelResponse_Result& result() const;
  ::grpc_cli::GetLogLevelResponse_Result* release_result();
  ::grpc_cli::GetLogLevelResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::GetLogLevelResponse_Result* result);
  private:
  const ::grpc_cli::GetLogLevelResponse_Result& _internal_result() const;
  ::grpc_cli::GetLogLevelResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::GetLogLevelResponse_Result* result);
  ::grpc_cli::GetLogLevelResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.GetLogLevelResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::GetLogLevelResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ApplyLogFilterRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ApplyLogFilterRequest) */ {
 public:
  inline ApplyLogFilterRequest() : ApplyLogFilterRequest(nullptr) {}
  virtual ~ApplyLogFilterRequest();
  explicit constexpr ApplyLogFilterRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ApplyLogFilterRequest(const ApplyLogFilterRequest& from);
  ApplyLogFilterRequest(ApplyLogFilterRequest&& from) noexcept
    : ApplyLogFilterRequest() {
    *this = ::std::move(from);
  }

  inline ApplyLogFilterRequest& operator=(const ApplyLogFilterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApplyLogFilterRequest& operator=(ApplyLogFilterRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ApplyLogFilterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ApplyLogFilterRequest* internal_default_instance() {
    return reinterpret_cast<const ApplyLogFilterRequest*>(
               &_ApplyLogFilterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    130;

  friend void swap(ApplyLogFilterRequest& a, ApplyLogFilterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ApplyLogFilterRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ApplyLogFilterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ApplyLogFilterRequest* New() const final {
    return CreateMaybeMessage<ApplyLogFilterRequest>(nullptr);
  }

  ApplyLogFilterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ApplyLogFilterRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ApplyLogFilterRequest& from);
  void MergeFrom(const ApplyLogFilterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApplyLogFilterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ApplyLogFilterRequest";
  }
  protected:
  explicit ApplyLogFilterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.ApplyLogFilterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ApplyLogFilterResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ApplyLogFilterResponse.Result) */ {
 public:
  inline ApplyLogFilterResponse_Result() : ApplyLogFilterResponse_Result(nullptr) {}
  virtual ~ApplyLogFilterResponse_Result();
  explicit constexpr ApplyLogFilterResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ApplyLogFilterResponse_Result(const ApplyLogFilterResponse_Result& from);
  ApplyLogFilterResponse_Result(ApplyLogFilterResponse_Result&& from) noexcept
    : ApplyLogFilterResponse_Result() {
    *this = ::std::move(from);
  }

  inline ApplyLogFilterResponse_Result& operator=(const ApplyLogFilterResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApplyLogFilterResponse_Result& operator=(ApplyLogFilterResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ApplyLogFilterResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const ApplyLogFilterResponse_Result* internal_default_instance() {
    return reinterpret_cast<const ApplyLogFilterResponse_Result*>(
               &_ApplyLogFilterResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    131;

  friend void swap(ApplyLogFilterResponse_Result& a, ApplyLogFilterResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(ApplyLogFilterResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ApplyLogFilterResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ApplyLogFilterResponse_Result* New() const final {
    return CreateMaybeMessage<ApplyLogFilterResponse_Result>(nullptr);
  }

  ApplyLogFilterResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ApplyLogFilterResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ApplyLogFilterResponse_Result& from);
  void MergeFrom(const ApplyLogFilterResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApplyLogFilterResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ApplyLogFilterResponse.Result";
  }
  protected:
  explicit ApplyLogFilterResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:grpc_cli.ApplyLogFilterResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ApplyLogFilterResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ApplyLogFilterResponse) */ {
 public:
  inline ApplyLogFilterResponse() : ApplyLogFilterResponse(nullptr) {}
  virtual ~ApplyLogFilterResponse();
  explicit constexpr ApplyLogFilterResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ApplyLogFilterResponse(const ApplyLogFilterResponse& from);
  ApplyLogFilterResponse(ApplyLogFilterResponse&& from) noexcept
    : ApplyLogFilterResponse() {
    *this = ::std::move(from);
  }

  inline ApplyLogFilterResponse& operator=(const ApplyLogFilterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApplyLogFilterResponse& operator=(ApplyLogFilterResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ApplyLogFilterResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ApplyLogFilterResponse* internal_default_instance() {
    return reinterpret_cast<const ApplyLogFilterResponse*>(
               &_ApplyLogFilterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    132;

  friend void swap(ApplyLogFilterResponse& a, ApplyLogFilterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ApplyLogFilterResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ApplyLogFilterResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ApplyLogFilterResponse* New() const final {
    return CreateMaybeMessage<ApplyLogFilterResponse>(nullptr);
  }

  ApplyLogFilterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ApplyLogFilterResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ApplyLogFilterResponse& from);
  void MergeFrom(const ApplyLogFilterResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApplyLogFilterResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ApplyLogFilterResponse";
  }
  protected:
  explicit ApplyLogFilterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ApplyLogFilterResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.ApplyLogFilterResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::ApplyLogFilterResponse_Result& result() const;
  ::grpc_cli::ApplyLogFilterResponse_Result* release_result();
  ::grpc_cli::ApplyLogFilterResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::ApplyLogFilterResponse_Result* result);
  private:
  const ::grpc_cli::ApplyLogFilterResponse_Result& _internal_result() const;
  ::grpc_cli::ApplyLogFilterResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::ApplyLogFilterResponse_Result* result);
  ::grpc_cli::ApplyLogFilterResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.ApplyLogFilterResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::ApplyLogFilterResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class CreateDeviceRequest_Param PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.CreateDeviceRequest.Param) */ {
 public:
  inline CreateDeviceRequest_Param() : CreateDeviceRequest_Param(nullptr) {}
  virtual ~CreateDeviceRequest_Param();
  explicit constexpr CreateDeviceRequest_Param(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateDeviceRequest_Param(const CreateDeviceRequest_Param& from);
  CreateDeviceRequest_Param(CreateDeviceRequest_Param&& from) noexcept
    : CreateDeviceRequest_Param() {
    *this = ::std::move(from);
  }

  inline CreateDeviceRequest_Param& operator=(const CreateDeviceRequest_Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateDeviceRequest_Param& operator=(CreateDeviceRequest_Param&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateDeviceRequest_Param& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateDeviceRequest_Param* internal_default_instance() {
    return reinterpret_cast<const CreateDeviceRequest_Param*>(
               &_CreateDeviceRequest_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    133;

  friend void swap(CreateDeviceRequest_Param& a, CreateDeviceRequest_Param& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateDeviceRequest_Param* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateDeviceRequest_Param* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateDeviceRequest_Param* New() const final {
    return CreateMaybeMessage<CreateDeviceRequest_Param>(nullptr);
  }

  CreateDeviceRequest_Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateDeviceRequest_Param>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateDeviceRequest_Param& from);
  void MergeFrom(const CreateDeviceRequest_Param& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateDeviceRequest_Param* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.CreateDeviceRequest.Param";
  }
  protected:
  explicit CreateDeviceRequest_Param(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDevTypeFieldNumber = 4,
    kNumBlocksFieldNumber = 2,
    kBlockSizeFieldNumber = 3,
    kNumaFieldNumber = 5,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string devType = 4;
  void clear_devtype();
  const std::string& devtype() const;
  void set_devtype(const std::string& value);
  void set_devtype(std::string&& value);
  void set_devtype(const char* value);
  void set_devtype(const char* value, size_t size);
  std::string* mutable_devtype();
  std::string* release_devtype();
  void set_allocated_devtype(std::string* devtype);
  private:
  const std::string& _internal_devtype() const;
  void _internal_set_devtype(const std::string& value);
  std::string* _internal_mutable_devtype();
  public:

  // uint32 numBlocks = 2;
  void clear_numblocks();
  ::PROTOBUF_NAMESPACE_ID::uint32 numblocks() const;
  void set_numblocks(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_numblocks() const;
  void _internal_set_numblocks(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 blockSize = 3;
  void clear_blocksize();
  ::PROTOBUF_NAMESPACE_ID::uint32 blocksize() const;
  void set_blocksize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_blocksize() const;
  void _internal_set_blocksize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 numa = 5;
  void clear_numa();
  ::PROTOBUF_NAMESPACE_ID::uint32 numa() const;
  void set_numa(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_numa() const;
  void _internal_set_numa(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.CreateDeviceRequest.Param)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr devtype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 numblocks_;
  ::PROTOBUF_NAMESPACE_ID::uint32 blocksize_;
  ::PROTOBUF_NAMESPACE_ID::uint32 numa_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class CreateDeviceRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.CreateDeviceRequest) */ {
 public:
  inline CreateDeviceRequest() : CreateDeviceRequest(nullptr) {}
  virtual ~CreateDeviceRequest();
  explicit constexpr CreateDeviceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateDeviceRequest(const CreateDeviceRequest& from);
  CreateDeviceRequest(CreateDeviceRequest&& from) noexcept
    : CreateDeviceRequest() {
    *this = ::std::move(from);
  }

  inline CreateDeviceRequest& operator=(const CreateDeviceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateDeviceRequest& operator=(CreateDeviceRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateDeviceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateDeviceRequest* internal_default_instance() {
    return reinterpret_cast<const CreateDeviceRequest*>(
               &_CreateDeviceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    134;

  friend void swap(CreateDeviceRequest& a, CreateDeviceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateDeviceRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateDeviceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateDeviceRequest* New() const final {
    return CreateMaybeMessage<CreateDeviceRequest>(nullptr);
  }

  CreateDeviceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateDeviceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateDeviceRequest& from);
  void MergeFrom(const CreateDeviceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateDeviceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.CreateDeviceRequest";
  }
  protected:
  explicit CreateDeviceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CreateDeviceRequest_Param Param;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
    kParamFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // .grpc_cli.CreateDeviceRequest.Param param = 4;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::grpc_cli::CreateDeviceRequest_Param& param() const;
  ::grpc_cli::CreateDeviceRequest_Param* release_param();
  ::grpc_cli::CreateDeviceRequest_Param* mutable_param();
  void set_allocated_param(::grpc_cli::CreateDeviceRequest_Param* param);
  private:
  const ::grpc_cli::CreateDeviceRequest_Param& _internal_param() const;
  ::grpc_cli::CreateDeviceRequest_Param* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::grpc_cli::CreateDeviceRequest_Param* param);
  ::grpc_cli::CreateDeviceRequest_Param* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:grpc_cli.CreateDeviceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  ::grpc_cli::CreateDeviceRequest_Param* param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class CreateDeviceResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.CreateDeviceResponse.Result) */ {
 public:
  inline CreateDeviceResponse_Result() : CreateDeviceResponse_Result(nullptr) {}
  virtual ~CreateDeviceResponse_Result();
  explicit constexpr CreateDeviceResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateDeviceResponse_Result(const CreateDeviceResponse_Result& from);
  CreateDeviceResponse_Result(CreateDeviceResponse_Result&& from) noexcept
    : CreateDeviceResponse_Result() {
    *this = ::std::move(from);
  }

  inline CreateDeviceResponse_Result& operator=(const CreateDeviceResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateDeviceResponse_Result& operator=(CreateDeviceResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateDeviceResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateDeviceResponse_Result* internal_default_instance() {
    return reinterpret_cast<const CreateDeviceResponse_Result*>(
               &_CreateDeviceResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    135;

  friend void swap(CreateDeviceResponse_Result& a, CreateDeviceResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateDeviceResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateDeviceResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateDeviceResponse_Result* New() const final {
    return CreateMaybeMessage<CreateDeviceResponse_Result>(nullptr);
  }

  CreateDeviceResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateDeviceResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateDeviceResponse_Result& from);
  void MergeFrom(const CreateDeviceResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateDeviceResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.CreateDeviceResponse.Result";
  }
  protected:
  explicit CreateDeviceResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:grpc_cli.CreateDeviceResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class CreateDeviceResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.CreateDeviceResponse) */ {
 public:
  inline CreateDeviceResponse() : CreateDeviceResponse(nullptr) {}
  virtual ~CreateDeviceResponse();
  explicit constexpr CreateDeviceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateDeviceResponse(const CreateDeviceResponse& from);
  CreateDeviceResponse(CreateDeviceResponse&& from) noexcept
    : CreateDeviceResponse() {
    *this = ::std::move(from);
  }

  inline CreateDeviceResponse& operator=(const CreateDeviceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateDeviceResponse& operator=(CreateDeviceResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateDeviceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateDeviceResponse* internal_default_instance() {
    return reinterpret_cast<const CreateDeviceResponse*>(
               &_CreateDeviceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    136;

  friend void swap(CreateDeviceResponse& a, CreateDeviceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateDeviceResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateDeviceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateDeviceResponse* New() const final {
    return CreateMaybeMessage<CreateDeviceResponse>(nullptr);
  }

  CreateDeviceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateDeviceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateDeviceResponse& from);
  void MergeFrom(const CreateDeviceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateDeviceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.CreateDeviceResponse";
  }
  protected:
  explicit CreateDeviceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CreateDeviceResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.CreateDeviceResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::CreateDeviceResponse_Result& result() const;
  ::grpc_cli::CreateDeviceResponse_Result* release_result();
  ::grpc_cli::CreateDeviceResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::CreateDeviceResponse_Result* result);
  private:
  const ::grpc_cli::CreateDeviceResponse_Result& _internal_result() const;
  ::grpc_cli::CreateDeviceResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::CreateDeviceResponse_Result* result);
  ::grpc_cli::CreateDeviceResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.CreateDeviceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::CreateDeviceResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ScanDeviceRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ScanDeviceRequest) */ {
 public:
  inline ScanDeviceRequest() : ScanDeviceRequest(nullptr) {}
  virtual ~ScanDeviceRequest();
  explicit constexpr ScanDeviceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScanDeviceRequest(const ScanDeviceRequest& from);
  ScanDeviceRequest(ScanDeviceRequest&& from) noexcept
    : ScanDeviceRequest() {
    *this = ::std::move(from);
  }

  inline ScanDeviceRequest& operator=(const ScanDeviceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScanDeviceRequest& operator=(ScanDeviceRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScanDeviceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScanDeviceRequest* internal_default_instance() {
    return reinterpret_cast<const ScanDeviceRequest*>(
               &_ScanDeviceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    137;

  friend void swap(ScanDeviceRequest& a, ScanDeviceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ScanDeviceRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScanDeviceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScanDeviceRequest* New() const final {
    return CreateMaybeMessage<ScanDeviceRequest>(nullptr);
  }

  ScanDeviceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScanDeviceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScanDeviceRequest& from);
  void MergeFrom(const ScanDeviceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScanDeviceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ScanDeviceRequest";
  }
  protected:
  explicit ScanDeviceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.ScanDeviceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ScanDeviceResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ScanDeviceResponse.Result) */ {
 public:
  inline ScanDeviceResponse_Result() : ScanDeviceResponse_Result(nullptr) {}
  virtual ~ScanDeviceResponse_Result();
  explicit constexpr ScanDeviceResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScanDeviceResponse_Result(const ScanDeviceResponse_Result& from);
  ScanDeviceResponse_Result(ScanDeviceResponse_Result&& from) noexcept
    : ScanDeviceResponse_Result() {
    *this = ::std::move(from);
  }

  inline ScanDeviceResponse_Result& operator=(const ScanDeviceResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScanDeviceResponse_Result& operator=(ScanDeviceResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScanDeviceResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScanDeviceResponse_Result* internal_default_instance() {
    return reinterpret_cast<const ScanDeviceResponse_Result*>(
               &_ScanDeviceResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    138;

  friend void swap(ScanDeviceResponse_Result& a, ScanDeviceResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(ScanDeviceResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScanDeviceResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScanDeviceResponse_Result* New() const final {
    return CreateMaybeMessage<ScanDeviceResponse_Result>(nullptr);
  }

  ScanDeviceResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScanDeviceResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScanDeviceResponse_Result& from);
  void MergeFrom(const ScanDeviceResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScanDeviceResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ScanDeviceResponse.Result";
  }
  protected:
  explicit ScanDeviceResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:grpc_cli.ScanDeviceResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ScanDeviceResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ScanDeviceResponse) */ {
 public:
  inline ScanDeviceResponse() : ScanDeviceResponse(nullptr) {}
  virtual ~ScanDeviceResponse();
  explicit constexpr ScanDeviceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScanDeviceResponse(const ScanDeviceResponse& from);
  ScanDeviceResponse(ScanDeviceResponse&& from) noexcept
    : ScanDeviceResponse() {
    *this = ::std::move(from);
  }

  inline ScanDeviceResponse& operator=(const ScanDeviceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScanDeviceResponse& operator=(ScanDeviceResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScanDeviceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScanDeviceResponse* internal_default_instance() {
    return reinterpret_cast<const ScanDeviceResponse*>(
               &_ScanDeviceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    139;

  friend void swap(ScanDeviceResponse& a, ScanDeviceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ScanDeviceResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScanDeviceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScanDeviceResponse* New() const final {
    return CreateMaybeMessage<ScanDeviceResponse>(nullptr);
  }

  ScanDeviceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScanDeviceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScanDeviceResponse& from);
  void MergeFrom(const ScanDeviceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScanDeviceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ScanDeviceResponse";
  }
  protected:
  explicit ScanDeviceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ScanDeviceResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.ScanDeviceResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::ScanDeviceResponse_Result& result() const;
  ::grpc_cli::ScanDeviceResponse_Result* release_result();
  ::grpc_cli::ScanDeviceResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::ScanDeviceResponse_Result* result);
  private:
  const ::grpc_cli::ScanDeviceResponse_Result& _internal_result() const;
  ::grpc_cli::ScanDeviceResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::ScanDeviceResponse_Result* result);
  ::grpc_cli::ScanDeviceResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.ScanDeviceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::ScanDeviceResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class Device PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.Device) */ {
 public:
  inline Device() : Device(nullptr) {}
  virtual ~Device();
  explicit constexpr Device(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Device(const Device& from);
  Device(Device&& from) noexcept
    : Device() {
    *this = ::std::move(from);
  }

  inline Device& operator=(const Device& from) {
    CopyFrom(from);
    return *this;
  }
  inline Device& operator=(Device&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Device& default_instance() {
    return *internal_default_instance();
  }
  static inline const Device* internal_default_instance() {
    return reinterpret_cast<const Device*>(
               &_Device_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    140;

  friend void swap(Device& a, Device& b) {
    a.Swap(&b);
  }
  inline void Swap(Device* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Device* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Device* New() const final {
    return CreateMaybeMessage<Device>(nullptr);
  }

  Device* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Device>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Device& from);
  void MergeFrom(const Device& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Device* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.Device";
  }
  protected:
  explicit Device(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
    kAddressFieldNumber = 3,
    kClassFieldNumber = 4,
    kModelNumberFieldNumber = 5,
    kNumaFieldNumber = 6,
    kSerialNumberFieldNumber = 8,
    kSizeFieldNumber = 7,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string address = 3;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // string class = 4;
  void clear_class_();
  const std::string& class_() const;
  void set_class_(const std::string& value);
  void set_class_(std::string&& value);
  void set_class_(const char* value);
  void set_class_(const char* value, size_t size);
  std::string* mutable_class_();
  std::string* release_class_();
  void set_allocated_class_(std::string* class_);
  private:
  const std::string& _internal_class_() const;
  void _internal_set_class_(const std::string& value);
  std::string* _internal_mutable_class_();
  public:

  // string modelNumber = 5;
  void clear_modelnumber();
  const std::string& modelnumber() const;
  void set_modelnumber(const std::string& value);
  void set_modelnumber(std::string&& value);
  void set_modelnumber(const char* value);
  void set_modelnumber(const char* value, size_t size);
  std::string* mutable_modelnumber();
  std::string* release_modelnumber();
  void set_allocated_modelnumber(std::string* modelnumber);
  private:
  const std::string& _internal_modelnumber() const;
  void _internal_set_modelnumber(const std::string& value);
  std::string* _internal_mutable_modelnumber();
  public:

  // string numa = 6;
  void clear_numa();
  const std::string& numa() const;
  void set_numa(const std::string& value);
  void set_numa(std::string&& value);
  void set_numa(const char* value);
  void set_numa(const char* value, size_t size);
  std::string* mutable_numa();
  std::string* release_numa();
  void set_allocated_numa(std::string* numa);
  private:
  const std::string& _internal_numa() const;
  void _internal_set_numa(const std::string& value);
  std::string* _internal_mutable_numa();
  public:

  // string serialNumber = 8;
  void clear_serialnumber();
  const std::string& serialnumber() const;
  void set_serialnumber(const std::string& value);
  void set_serialnumber(std::string&& value);
  void set_serialnumber(const char* value);
  void set_serialnumber(const char* value, size_t size);
  std::string* mutable_serialnumber();
  std::string* release_serialnumber();
  void set_allocated_serialnumber(std::string* serialnumber);
  private:
  const std::string& _internal_serialnumber() const;
  void _internal_set_serialnumber(const std::string& value);
  std::string* _internal_mutable_serialnumber();
  public:

  // uint64 size = 7;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.Device)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr class__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr modelnumber_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr numa_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serialnumber_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ListDeviceRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ListDeviceRequest) */ {
 public:
  inline ListDeviceRequest() : ListDeviceRequest(nullptr) {}
  virtual ~ListDeviceRequest();
  explicit constexpr ListDeviceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListDeviceRequest(const ListDeviceRequest& from);
  ListDeviceRequest(ListDeviceRequest&& from) noexcept
    : ListDeviceRequest() {
    *this = ::std::move(from);
  }

  inline ListDeviceRequest& operator=(const ListDeviceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDeviceRequest& operator=(ListDeviceRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListDeviceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListDeviceRequest* internal_default_instance() {
    return reinterpret_cast<const ListDeviceRequest*>(
               &_ListDeviceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    141;

  friend void swap(ListDeviceRequest& a, ListDeviceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDeviceRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDeviceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListDeviceRequest* New() const final {
    return CreateMaybeMessage<ListDeviceRequest>(nullptr);
  }

  ListDeviceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListDeviceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListDeviceRequest& from);
  void MergeFrom(const ListDeviceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDeviceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ListDeviceRequest";
  }
  protected:
  explicit ListDeviceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.ListDeviceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ListDeviceResponse_Result_DeviceList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ListDeviceResponse.Result.DeviceList) */ {
 public:
  inline ListDeviceResponse_Result_DeviceList() : ListDeviceResponse_Result_DeviceList(nullptr) {}
  virtual ~ListDeviceResponse_Result_DeviceList();
  explicit constexpr ListDeviceResponse_Result_DeviceList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListDeviceResponse_Result_DeviceList(const ListDeviceResponse_Result_DeviceList& from);
  ListDeviceResponse_Result_DeviceList(ListDeviceResponse_Result_DeviceList&& from) noexcept
    : ListDeviceResponse_Result_DeviceList() {
    *this = ::std::move(from);
  }

  inline ListDeviceResponse_Result_DeviceList& operator=(const ListDeviceResponse_Result_DeviceList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDeviceResponse_Result_DeviceList& operator=(ListDeviceResponse_Result_DeviceList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListDeviceResponse_Result_DeviceList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListDeviceResponse_Result_DeviceList* internal_default_instance() {
    return reinterpret_cast<const ListDeviceResponse_Result_DeviceList*>(
               &_ListDeviceResponse_Result_DeviceList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    142;

  friend void swap(ListDeviceResponse_Result_DeviceList& a, ListDeviceResponse_Result_DeviceList& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDeviceResponse_Result_DeviceList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDeviceResponse_Result_DeviceList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListDeviceResponse_Result_DeviceList* New() const final {
    return CreateMaybeMessage<ListDeviceResponse_Result_DeviceList>(nullptr);
  }

  ListDeviceResponse_Result_DeviceList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListDeviceResponse_Result_DeviceList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListDeviceResponse_Result_DeviceList& from);
  void MergeFrom(const ListDeviceResponse_Result_DeviceList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDeviceResponse_Result_DeviceList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ListDeviceResponse.Result.DeviceList";
  }
  protected:
  explicit ListDeviceResponse_Result_DeviceList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevicelistFieldNumber = 1,
  };
  // repeated .grpc_cli.Device devicelist = 1;
  int devicelist_size() const;
  private:
  int _internal_devicelist_size() const;
  public:
  void clear_devicelist();
  ::grpc_cli::Device* mutable_devicelist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::Device >*
      mutable_devicelist();
  private:
  const ::grpc_cli::Device& _internal_devicelist(int index) const;
  ::grpc_cli::Device* _internal_add_devicelist();
  public:
  const ::grpc_cli::Device& devicelist(int index) const;
  ::grpc_cli::Device* add_devicelist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::Device >&
      devicelist() const;

  // @@protoc_insertion_point(class_scope:grpc_cli.ListDeviceResponse.Result.DeviceList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::Device > devicelist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ListDeviceResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ListDeviceResponse.Result) */ {
 public:
  inline ListDeviceResponse_Result() : ListDeviceResponse_Result(nullptr) {}
  virtual ~ListDeviceResponse_Result();
  explicit constexpr ListDeviceResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListDeviceResponse_Result(const ListDeviceResponse_Result& from);
  ListDeviceResponse_Result(ListDeviceResponse_Result&& from) noexcept
    : ListDeviceResponse_Result() {
    *this = ::std::move(from);
  }

  inline ListDeviceResponse_Result& operator=(const ListDeviceResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDeviceResponse_Result& operator=(ListDeviceResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListDeviceResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListDeviceResponse_Result* internal_default_instance() {
    return reinterpret_cast<const ListDeviceResponse_Result*>(
               &_ListDeviceResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    143;

  friend void swap(ListDeviceResponse_Result& a, ListDeviceResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDeviceResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDeviceResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListDeviceResponse_Result* New() const final {
    return CreateMaybeMessage<ListDeviceResponse_Result>(nullptr);
  }

  ListDeviceResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListDeviceResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListDeviceResponse_Result& from);
  void MergeFrom(const ListDeviceResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDeviceResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ListDeviceResponse.Result";
  }
  protected:
  explicit ListDeviceResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ListDeviceResponse_Result_DeviceList DeviceList;

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // .grpc_cli.ListDeviceResponse.Result.DeviceList data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::grpc_cli::ListDeviceResponse_Result_DeviceList& data() const;
  ::grpc_cli::ListDeviceResponse_Result_DeviceList* release_data();
  ::grpc_cli::ListDeviceResponse_Result_DeviceList* mutable_data();
  void set_allocated_data(::grpc_cli::ListDeviceResponse_Result_DeviceList* data);
  private:
  const ::grpc_cli::ListDeviceResponse_Result_DeviceList& _internal_data() const;
  ::grpc_cli::ListDeviceResponse_Result_DeviceList* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::grpc_cli::ListDeviceResponse_Result_DeviceList* data);
  ::grpc_cli::ListDeviceResponse_Result_DeviceList* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:grpc_cli.ListDeviceResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  ::grpc_cli::ListDeviceResponse_Result_DeviceList* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ListDeviceResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ListDeviceResponse) */ {
 public:
  inline ListDeviceResponse() : ListDeviceResponse(nullptr) {}
  virtual ~ListDeviceResponse();
  explicit constexpr ListDeviceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListDeviceResponse(const ListDeviceResponse& from);
  ListDeviceResponse(ListDeviceResponse&& from) noexcept
    : ListDeviceResponse() {
    *this = ::std::move(from);
  }

  inline ListDeviceResponse& operator=(const ListDeviceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDeviceResponse& operator=(ListDeviceResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListDeviceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListDeviceResponse* internal_default_instance() {
    return reinterpret_cast<const ListDeviceResponse*>(
               &_ListDeviceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    144;

  friend void swap(ListDeviceResponse& a, ListDeviceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDeviceResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDeviceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListDeviceResponse* New() const final {
    return CreateMaybeMessage<ListDeviceResponse>(nullptr);
  }

  ListDeviceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListDeviceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListDeviceResponse& from);
  void MergeFrom(const ListDeviceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDeviceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ListDeviceResponse";
  }
  protected:
  explicit ListDeviceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ListDeviceResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.ListDeviceResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::ListDeviceResponse_Result& result() const;
  ::grpc_cli::ListDeviceResponse_Result* release_result();
  ::grpc_cli::ListDeviceResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::ListDeviceResponse_Result* result);
  private:
  const ::grpc_cli::ListDeviceResponse_Result& _internal_result() const;
  ::grpc_cli::ListDeviceResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::ListDeviceResponse_Result* result);
  ::grpc_cli::ListDeviceResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.ListDeviceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::ListDeviceResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class SmartLog PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.SmartLog) */ {
 public:
  inline SmartLog() : SmartLog(nullptr) {}
  virtual ~SmartLog();
  explicit constexpr SmartLog(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SmartLog(const SmartLog& from);
  SmartLog(SmartLog&& from) noexcept
    : SmartLog() {
    *this = ::std::move(from);
  }

  inline SmartLog& operator=(const SmartLog& from) {
    CopyFrom(from);
    return *this;
  }
  inline SmartLog& operator=(SmartLog&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SmartLog& default_instance() {
    return *internal_default_instance();
  }
  static inline const SmartLog* internal_default_instance() {
    return reinterpret_cast<const SmartLog*>(
               &_SmartLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    145;

  friend void swap(SmartLog& a, SmartLog& b) {
    a.Swap(&b);
  }
  inline void Swap(SmartLog* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SmartLog* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SmartLog* New() const final {
    return CreateMaybeMessage<SmartLog>(nullptr);
  }

  SmartLog* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SmartLog>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SmartLog& from);
  void MergeFrom(const SmartLog& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SmartLog* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.SmartLog";
  }
  protected:
  explicit SmartLog(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTemperatureSensorFieldNumber = 22,
    kAvailableSpareSpaceFieldNumber = 1,
    kTemperatureFieldNumber = 2,
    kDeviceReliabilityFieldNumber = 3,
    kReadOnlyFieldNumber = 4,
    kVolatileMemoryBackupFieldNumber = 5,
    kCurrentTemperatureFieldNumber = 6,
    kAvailableSpareFieldNumber = 7,
    kAvailableSpareThresholdFieldNumber = 8,
    kLifePercentageUsedFieldNumber = 9,
    kDataUnitsReadFieldNumber = 10,
    kDataUnitsWrittenFieldNumber = 11,
    kHostReadCommandsFieldNumber = 12,
    kHostWriteCommandsFieldNumber = 13,
    kControllerBusyTimeFieldNumber = 14,
    kPowerCyclesFieldNumber = 15,
    kPowerOnHoursFieldNumber = 16,
    kUnsafeShutdownsFieldNumber = 17,
    kUnrecoverableMediaErrorsFieldNumber = 18,
    kLifetimeErrorLogEntriesFieldNumber = 19,
    kWarningTemperatureTimeFieldNumber = 20,
    kCriticalTemperatureTimeFieldNumber = 21,
  };
  // repeated string temperatureSensor = 22;
  int temperaturesensor_size() const;
  private:
  int _internal_temperaturesensor_size() const;
  public:
  void clear_temperaturesensor();
  const std::string& temperaturesensor(int index) const;
  std::string* mutable_temperaturesensor(int index);
  void set_temperaturesensor(int index, const std::string& value);
  void set_temperaturesensor(int index, std::string&& value);
  void set_temperaturesensor(int index, const char* value);
  void set_temperaturesensor(int index, const char* value, size_t size);
  std::string* add_temperaturesensor();
  void add_temperaturesensor(const std::string& value);
  void add_temperaturesensor(std::string&& value);
  void add_temperaturesensor(const char* value);
  void add_temperaturesensor(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& temperaturesensor() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_temperaturesensor();
  private:
  const std::string& _internal_temperaturesensor(int index) const;
  std::string* _internal_add_temperaturesensor();
  public:

  // string availableSpareSpace = 1;
  void clear_availablesparespace();
  const std::string& availablesparespace() const;
  void set_availablesparespace(const std::string& value);
  void set_availablesparespace(std::string&& value);
  void set_availablesparespace(const char* value);
  void set_availablesparespace(const char* value, size_t size);
  std::string* mutable_availablesparespace();
  std::string* release_availablesparespace();
  void set_allocated_availablesparespace(std::string* availablesparespace);
  private:
  const std::string& _internal_availablesparespace() const;
  void _internal_set_availablesparespace(const std::string& value);
  std::string* _internal_mutable_availablesparespace();
  public:

  // string temperature = 2;
  void clear_temperature();
  const std::string& temperature() const;
  void set_temperature(const std::string& value);
  void set_temperature(std::string&& value);
  void set_temperature(const char* value);
  void set_temperature(const char* value, size_t size);
  std::string* mutable_temperature();
  std::string* release_temperature();
  void set_allocated_temperature(std::string* temperature);
  private:
  const std::string& _internal_temperature() const;
  void _internal_set_temperature(const std::string& value);
  std::string* _internal_mutable_temperature();
  public:

  // string deviceReliability = 3;
  void clear_devicereliability();
  const std::string& devicereliability() const;
  void set_devicereliability(const std::string& value);
  void set_devicereliability(std::string&& value);
  void set_devicereliability(const char* value);
  void set_devicereliability(const char* value, size_t size);
  std::string* mutable_devicereliability();
  std::string* release_devicereliability();
  void set_allocated_devicereliability(std::string* devicereliability);
  private:
  const std::string& _internal_devicereliability() const;
  void _internal_set_devicereliability(const std::string& value);
  std::string* _internal_mutable_devicereliability();
  public:

  // string readOnly = 4;
  void clear_readonly();
  const std::string& readonly() const;
  void set_readonly(const std::string& value);
  void set_readonly(std::string&& value);
  void set_readonly(const char* value);
  void set_readonly(const char* value, size_t size);
  std::string* mutable_readonly();
  std::string* release_readonly();
  void set_allocated_readonly(std::string* readonly);
  private:
  const std::string& _internal_readonly() const;
  void _internal_set_readonly(const std::string& value);
  std::string* _internal_mutable_readonly();
  public:

  // string volatileMemoryBackup = 5;
  void clear_volatilememorybackup();
  const std::string& volatilememorybackup() const;
  void set_volatilememorybackup(const std::string& value);
  void set_volatilememorybackup(std::string&& value);
  void set_volatilememorybackup(const char* value);
  void set_volatilememorybackup(const char* value, size_t size);
  std::string* mutable_volatilememorybackup();
  std::string* release_volatilememorybackup();
  void set_allocated_volatilememorybackup(std::string* volatilememorybackup);
  private:
  const std::string& _internal_volatilememorybackup() const;
  void _internal_set_volatilememorybackup(const std::string& value);
  std::string* _internal_mutable_volatilememorybackup();
  public:

  // string currentTemperature = 6;
  void clear_currenttemperature();
  const std::string& currenttemperature() const;
  void set_currenttemperature(const std::string& value);
  void set_currenttemperature(std::string&& value);
  void set_currenttemperature(const char* value);
  void set_currenttemperature(const char* value, size_t size);
  std::string* mutable_currenttemperature();
  std::string* release_currenttemperature();
  void set_allocated_currenttemperature(std::string* currenttemperature);
  private:
  const std::string& _internal_currenttemperature() const;
  void _internal_set_currenttemperature(const std::string& value);
  std::string* _internal_mutable_currenttemperature();
  public:

  // string availableSpare = 7;
  void clear_availablespare();
  const std::string& availablespare() const;
  void set_availablespare(const std::string& value);
  void set_availablespare(std::string&& value);
  void set_availablespare(const char* value);
  void set_availablespare(const char* value, size_t size);
  std::string* mutable_availablespare();
  std::string* release_availablespare();
  void set_allocated_availablespare(std::string* availablespare);
  private:
  const std::string& _internal_availablespare() const;
  void _internal_set_availablespare(const std::string& value);
  std::string* _internal_mutable_availablespare();
  public:

  // string availableSpareThreshold = 8;
  void clear_availablesparethreshold();
  const std::string& availablesparethreshold() const;
  void set_availablesparethreshold(const std::string& value);
  void set_availablesparethreshold(std::string&& value);
  void set_availablesparethreshold(const char* value);
  void set_availablesparethreshold(const char* value, size_t size);
  std::string* mutable_availablesparethreshold();
  std::string* release_availablesparethreshold();
  void set_allocated_availablesparethreshold(std::string* availablesparethreshold);
  private:
  const std::string& _internal_availablesparethreshold() const;
  void _internal_set_availablesparethreshold(const std::string& value);
  std::string* _internal_mutable_availablesparethreshold();
  public:

  // string lifePercentageUsed = 9;
  void clear_lifepercentageused();
  const std::string& lifepercentageused() const;
  void set_lifepercentageused(const std::string& value);
  void set_lifepercentageused(std::string&& value);
  void set_lifepercentageused(const char* value);
  void set_lifepercentageused(const char* value, size_t size);
  std::string* mutable_lifepercentageused();
  std::string* release_lifepercentageused();
  void set_allocated_lifepercentageused(std::string* lifepercentageused);
  private:
  const std::string& _internal_lifepercentageused() const;
  void _internal_set_lifepercentageused(const std::string& value);
  std::string* _internal_mutable_lifepercentageused();
  public:

  // string dataUnitsRead = 10;
  void clear_dataunitsread();
  const std::string& dataunitsread() const;
  void set_dataunitsread(const std::string& value);
  void set_dataunitsread(std::string&& value);
  void set_dataunitsread(const char* value);
  void set_dataunitsread(const char* value, size_t size);
  std::string* mutable_dataunitsread();
  std::string* release_dataunitsread();
  void set_allocated_dataunitsread(std::string* dataunitsread);
  private:
  const std::string& _internal_dataunitsread() const;
  void _internal_set_dataunitsread(const std::string& value);
  std::string* _internal_mutable_dataunitsread();
  public:

  // string dataUnitsWritten = 11;
  void clear_dataunitswritten();
  const std::string& dataunitswritten() const;
  void set_dataunitswritten(const std::string& value);
  void set_dataunitswritten(std::string&& value);
  void set_dataunitswritten(const char* value);
  void set_dataunitswritten(const char* value, size_t size);
  std::string* mutable_dataunitswritten();
  std::string* release_dataunitswritten();
  void set_allocated_dataunitswritten(std::string* dataunitswritten);
  private:
  const std::string& _internal_dataunitswritten() const;
  void _internal_set_dataunitswritten(const std::string& value);
  std::string* _internal_mutable_dataunitswritten();
  public:

  // string hostReadCommands = 12;
  void clear_hostreadcommands();
  const std::string& hostreadcommands() const;
  void set_hostreadcommands(const std::string& value);
  void set_hostreadcommands(std::string&& value);
  void set_hostreadcommands(const char* value);
  void set_hostreadcommands(const char* value, size_t size);
  std::string* mutable_hostreadcommands();
  std::string* release_hostreadcommands();
  void set_allocated_hostreadcommands(std::string* hostreadcommands);
  private:
  const std::string& _internal_hostreadcommands() const;
  void _internal_set_hostreadcommands(const std::string& value);
  std::string* _internal_mutable_hostreadcommands();
  public:

  // string hostWriteCommands = 13;
  void clear_hostwritecommands();
  const std::string& hostwritecommands() const;
  void set_hostwritecommands(const std::string& value);
  void set_hostwritecommands(std::string&& value);
  void set_hostwritecommands(const char* value);
  void set_hostwritecommands(const char* value, size_t size);
  std::string* mutable_hostwritecommands();
  std::string* release_hostwritecommands();
  void set_allocated_hostwritecommands(std::string* hostwritecommands);
  private:
  const std::string& _internal_hostwritecommands() const;
  void _internal_set_hostwritecommands(const std::string& value);
  std::string* _internal_mutable_hostwritecommands();
  public:

  // string controllerBusyTime = 14;
  void clear_controllerbusytime();
  const std::string& controllerbusytime() const;
  void set_controllerbusytime(const std::string& value);
  void set_controllerbusytime(std::string&& value);
  void set_controllerbusytime(const char* value);
  void set_controllerbusytime(const char* value, size_t size);
  std::string* mutable_controllerbusytime();
  std::string* release_controllerbusytime();
  void set_allocated_controllerbusytime(std::string* controllerbusytime);
  private:
  const std::string& _internal_controllerbusytime() const;
  void _internal_set_controllerbusytime(const std::string& value);
  std::string* _internal_mutable_controllerbusytime();
  public:

  // string powerCycles = 15;
  void clear_powercycles();
  const std::string& powercycles() const;
  void set_powercycles(const std::string& value);
  void set_powercycles(std::string&& value);
  void set_powercycles(const char* value);
  void set_powercycles(const char* value, size_t size);
  std::string* mutable_powercycles();
  std::string* release_powercycles();
  void set_allocated_powercycles(std::string* powercycles);
  private:
  const std::string& _internal_powercycles() const;
  void _internal_set_powercycles(const std::string& value);
  std::string* _internal_mutable_powercycles();
  public:

  // string powerOnHours = 16;
  void clear_poweronhours();
  const std::string& poweronhours() const;
  void set_poweronhours(const std::string& value);
  void set_poweronhours(std::string&& value);
  void set_poweronhours(const char* value);
  void set_poweronhours(const char* value, size_t size);
  std::string* mutable_poweronhours();
  std::string* release_poweronhours();
  void set_allocated_poweronhours(std::string* poweronhours);
  private:
  const std::string& _internal_poweronhours() const;
  void _internal_set_poweronhours(const std::string& value);
  std::string* _internal_mutable_poweronhours();
  public:

  // string unsafeShutdowns = 17;
  void clear_unsafeshutdowns();
  const std::string& unsafeshutdowns() const;
  void set_unsafeshutdowns(const std::string& value);
  void set_unsafeshutdowns(std::string&& value);
  void set_unsafeshutdowns(const char* value);
  void set_unsafeshutdowns(const char* value, size_t size);
  std::string* mutable_unsafeshutdowns();
  std::string* release_unsafeshutdowns();
  void set_allocated_unsafeshutdowns(std::string* unsafeshutdowns);
  private:
  const std::string& _internal_unsafeshutdowns() const;
  void _internal_set_unsafeshutdowns(const std::string& value);
  std::string* _internal_mutable_unsafeshutdowns();
  public:

  // string unrecoverableMediaErrors = 18;
  void clear_unrecoverablemediaerrors();
  const std::string& unrecoverablemediaerrors() const;
  void set_unrecoverablemediaerrors(const std::string& value);
  void set_unrecoverablemediaerrors(std::string&& value);
  void set_unrecoverablemediaerrors(const char* value);
  void set_unrecoverablemediaerrors(const char* value, size_t size);
  std::string* mutable_unrecoverablemediaerrors();
  std::string* release_unrecoverablemediaerrors();
  void set_allocated_unrecoverablemediaerrors(std::string* unrecoverablemediaerrors);
  private:
  const std::string& _internal_unrecoverablemediaerrors() const;
  void _internal_set_unrecoverablemediaerrors(const std::string& value);
  std::string* _internal_mutable_unrecoverablemediaerrors();
  public:

  // string lifetimeErrorLogEntries = 19;
  void clear_lifetimeerrorlogentries();
  const std::string& lifetimeerrorlogentries() const;
  void set_lifetimeerrorlogentries(const std::string& value);
  void set_lifetimeerrorlogentries(std::string&& value);
  void set_lifetimeerrorlogentries(const char* value);
  void set_lifetimeerrorlogentries(const char* value, size_t size);
  std::string* mutable_lifetimeerrorlogentries();
  std::string* release_lifetimeerrorlogentries();
  void set_allocated_lifetimeerrorlogentries(std::string* lifetimeerrorlogentries);
  private:
  const std::string& _internal_lifetimeerrorlogentries() const;
  void _internal_set_lifetimeerrorlogentries(const std::string& value);
  std::string* _internal_mutable_lifetimeerrorlogentries();
  public:

  // string warningTemperatureTime = 20;
  void clear_warningtemperaturetime();
  const std::string& warningtemperaturetime() const;
  void set_warningtemperaturetime(const std::string& value);
  void set_warningtemperaturetime(std::string&& value);
  void set_warningtemperaturetime(const char* value);
  void set_warningtemperaturetime(const char* value, size_t size);
  std::string* mutable_warningtemperaturetime();
  std::string* release_warningtemperaturetime();
  void set_allocated_warningtemperaturetime(std::string* warningtemperaturetime);
  private:
  const std::string& _internal_warningtemperaturetime() const;
  void _internal_set_warningtemperaturetime(const std::string& value);
  std::string* _internal_mutable_warningtemperaturetime();
  public:

  // string criticalTemperatureTime = 21;
  void clear_criticaltemperaturetime();
  const std::string& criticaltemperaturetime() const;
  void set_criticaltemperaturetime(const std::string& value);
  void set_criticaltemperaturetime(std::string&& value);
  void set_criticaltemperaturetime(const char* value);
  void set_criticaltemperaturetime(const char* value, size_t size);
  std::string* mutable_criticaltemperaturetime();
  std::string* release_criticaltemperaturetime();
  void set_allocated_criticaltemperaturetime(std::string* criticaltemperaturetime);
  private:
  const std::string& _internal_criticaltemperaturetime() const;
  void _internal_set_criticaltemperaturetime(const std::string& value);
  std::string* _internal_mutable_criticaltemperaturetime();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.SmartLog)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> temperaturesensor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr availablesparespace_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr temperature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr devicereliability_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr readonly_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr volatilememorybackup_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currenttemperature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr availablespare_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr availablesparethreshold_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lifepercentageused_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dataunitsread_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dataunitswritten_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostreadcommands_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostwritecommands_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr controllerbusytime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr powercycles_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr poweronhours_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unsafeshutdowns_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unrecoverablemediaerrors_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lifetimeerrorlogentries_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr warningtemperaturetime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr criticaltemperaturetime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class GetSmartLogRequest_Param PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.GetSmartLogRequest.Param) */ {
 public:
  inline GetSmartLogRequest_Param() : GetSmartLogRequest_Param(nullptr) {}
  virtual ~GetSmartLogRequest_Param();
  explicit constexpr GetSmartLogRequest_Param(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSmartLogRequest_Param(const GetSmartLogRequest_Param& from);
  GetSmartLogRequest_Param(GetSmartLogRequest_Param&& from) noexcept
    : GetSmartLogRequest_Param() {
    *this = ::std::move(from);
  }

  inline GetSmartLogRequest_Param& operator=(const GetSmartLogRequest_Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSmartLogRequest_Param& operator=(GetSmartLogRequest_Param&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSmartLogRequest_Param& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSmartLogRequest_Param* internal_default_instance() {
    return reinterpret_cast<const GetSmartLogRequest_Param*>(
               &_GetSmartLogRequest_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    146;

  friend void swap(GetSmartLogRequest_Param& a, GetSmartLogRequest_Param& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSmartLogRequest_Param* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSmartLogRequest_Param* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSmartLogRequest_Param* New() const final {
    return CreateMaybeMessage<GetSmartLogRequest_Param>(nullptr);
  }

  GetSmartLogRequest_Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSmartLogRequest_Param>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSmartLogRequest_Param& from);
  void MergeFrom(const GetSmartLogRequest_Param& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSmartLogRequest_Param* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.GetSmartLogRequest.Param";
  }
  protected:
  explicit GetSmartLogRequest_Param(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.GetSmartLogRequest.Param)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class GetSmartLogRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.GetSmartLogRequest) */ {
 public:
  inline GetSmartLogRequest() : GetSmartLogRequest(nullptr) {}
  virtual ~GetSmartLogRequest();
  explicit constexpr GetSmartLogRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSmartLogRequest(const GetSmartLogRequest& from);
  GetSmartLogRequest(GetSmartLogRequest&& from) noexcept
    : GetSmartLogRequest() {
    *this = ::std::move(from);
  }

  inline GetSmartLogRequest& operator=(const GetSmartLogRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSmartLogRequest& operator=(GetSmartLogRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSmartLogRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSmartLogRequest* internal_default_instance() {
    return reinterpret_cast<const GetSmartLogRequest*>(
               &_GetSmartLogRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    147;

  friend void swap(GetSmartLogRequest& a, GetSmartLogRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSmartLogRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSmartLogRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSmartLogRequest* New() const final {
    return CreateMaybeMessage<GetSmartLogRequest>(nullptr);
  }

  GetSmartLogRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSmartLogRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSmartLogRequest& from);
  void MergeFrom(const GetSmartLogRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSmartLogRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.GetSmartLogRequest";
  }
  protected:
  explicit GetSmartLogRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetSmartLogRequest_Param Param;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
    kParamFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // .grpc_cli.GetSmartLogRequest.Param param = 4;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::grpc_cli::GetSmartLogRequest_Param& param() const;
  ::grpc_cli::GetSmartLogRequest_Param* release_param();
  ::grpc_cli::GetSmartLogRequest_Param* mutable_param();
  void set_allocated_param(::grpc_cli::GetSmartLogRequest_Param* param);
  private:
  const ::grpc_cli::GetSmartLogRequest_Param& _internal_param() const;
  ::grpc_cli::GetSmartLogRequest_Param* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::grpc_cli::GetSmartLogRequest_Param* param);
  ::grpc_cli::GetSmartLogRequest_Param* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:grpc_cli.GetSmartLogRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  ::grpc_cli::GetSmartLogRequest_Param* param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class GetSmartLogResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.GetSmartLogResponse.Result) */ {
 public:
  inline GetSmartLogResponse_Result() : GetSmartLogResponse_Result(nullptr) {}
  virtual ~GetSmartLogResponse_Result();
  explicit constexpr GetSmartLogResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSmartLogResponse_Result(const GetSmartLogResponse_Result& from);
  GetSmartLogResponse_Result(GetSmartLogResponse_Result&& from) noexcept
    : GetSmartLogResponse_Result() {
    *this = ::std::move(from);
  }

  inline GetSmartLogResponse_Result& operator=(const GetSmartLogResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSmartLogResponse_Result& operator=(GetSmartLogResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSmartLogResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSmartLogResponse_Result* internal_default_instance() {
    return reinterpret_cast<const GetSmartLogResponse_Result*>(
               &_GetSmartLogResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    148;

  friend void swap(GetSmartLogResponse_Result& a, GetSmartLogResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSmartLogResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSmartLogResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSmartLogResponse_Result* New() const final {
    return CreateMaybeMessage<GetSmartLogResponse_Result>(nullptr);
  }

  GetSmartLogResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSmartLogResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSmartLogResponse_Result& from);
  void MergeFrom(const GetSmartLogResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSmartLogResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.GetSmartLogResponse.Result";
  }
  protected:
  explicit GetSmartLogResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // .grpc_cli.SmartLog data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::grpc_cli::SmartLog& data() const;
  ::grpc_cli::SmartLog* release_data();
  ::grpc_cli::SmartLog* mutable_data();
  void set_allocated_data(::grpc_cli::SmartLog* data);
  private:
  const ::grpc_cli::SmartLog& _internal_data() const;
  ::grpc_cli::SmartLog* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::grpc_cli::SmartLog* data);
  ::grpc_cli::SmartLog* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:grpc_cli.GetSmartLogResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  ::grpc_cli::SmartLog* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class GetSmartLogResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.GetSmartLogResponse) */ {
 public:
  inline GetSmartLogResponse() : GetSmartLogResponse(nullptr) {}
  virtual ~GetSmartLogResponse();
  explicit constexpr GetSmartLogResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSmartLogResponse(const GetSmartLogResponse& from);
  GetSmartLogResponse(GetSmartLogResponse&& from) noexcept
    : GetSmartLogResponse() {
    *this = ::std::move(from);
  }

  inline GetSmartLogResponse& operator=(const GetSmartLogResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSmartLogResponse& operator=(GetSmartLogResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSmartLogResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSmartLogResponse* internal_default_instance() {
    return reinterpret_cast<const GetSmartLogResponse*>(
               &_GetSmartLogResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    149;

  friend void swap(GetSmartLogResponse& a, GetSmartLogResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSmartLogResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSmartLogResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSmartLogResponse* New() const final {
    return CreateMaybeMessage<GetSmartLogResponse>(nullptr);
  }

  GetSmartLogResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSmartLogResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSmartLogResponse& from);
  void MergeFrom(const GetSmartLogResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSmartLogResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.GetSmartLogResponse";
  }
  protected:
  explicit GetSmartLogResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetSmartLogResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.GetSmartLogResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::GetSmartLogResponse_Result& result() const;
  ::grpc_cli::GetSmartLogResponse_Result* release_result();
  ::grpc_cli::GetSmartLogResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::GetSmartLogResponse_Result* result);
  private:
  const ::grpc_cli::GetSmartLogResponse_Result& _internal_result() const;
  ::grpc_cli::GetSmartLogResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::GetSmartLogResponse_Result* result);
  ::grpc_cli::GetSmartLogResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.GetSmartLogResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::GetSmartLogResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class CreateSubsystemRequest_Param PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.CreateSubsystemRequest.Param) */ {
 public:
  inline CreateSubsystemRequest_Param() : CreateSubsystemRequest_Param(nullptr) {}
  virtual ~CreateSubsystemRequest_Param();
  explicit constexpr CreateSubsystemRequest_Param(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateSubsystemRequest_Param(const CreateSubsystemRequest_Param& from);
  CreateSubsystemRequest_Param(CreateSubsystemRequest_Param&& from) noexcept
    : CreateSubsystemRequest_Param() {
    *this = ::std::move(from);
  }

  inline CreateSubsystemRequest_Param& operator=(const CreateSubsystemRequest_Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateSubsystemRequest_Param& operator=(CreateSubsystemRequest_Param&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateSubsystemRequest_Param& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateSubsystemRequest_Param* internal_default_instance() {
    return reinterpret_cast<const CreateSubsystemRequest_Param*>(
               &_CreateSubsystemRequest_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    150;

  friend void swap(CreateSubsystemRequest_Param& a, CreateSubsystemRequest_Param& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateSubsystemRequest_Param* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateSubsystemRequest_Param* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateSubsystemRequest_Param* New() const final {
    return CreateMaybeMessage<CreateSubsystemRequest_Param>(nullptr);
  }

  CreateSubsystemRequest_Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateSubsystemRequest_Param>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateSubsystemRequest_Param& from);
  void MergeFrom(const CreateSubsystemRequest_Param& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateSubsystemRequest_Param* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.CreateSubsystemRequest.Param";
  }
  protected:
  explicit CreateSubsystemRequest_Param(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNqnFieldNumber = 1,
    kSerialNumberFieldNumber = 2,
    kModelNumberFieldNumber = 3,
    kMaxNamespacesFieldNumber = 4,
    kAllowAnyHostFieldNumber = 5,
    kAnaReportingFieldNumber = 6,
  };
  // string nqn = 1;
  void clear_nqn();
  const std::string& nqn() const;
  void set_nqn(const std::string& value);
  void set_nqn(std::string&& value);
  void set_nqn(const char* value);
  void set_nqn(const char* value, size_t size);
  std::string* mutable_nqn();
  std::string* release_nqn();
  void set_allocated_nqn(std::string* nqn);
  private:
  const std::string& _internal_nqn() const;
  void _internal_set_nqn(const std::string& value);
  std::string* _internal_mutable_nqn();
  public:

  // string serialNumber = 2;
  void clear_serialnumber();
  const std::string& serialnumber() const;
  void set_serialnumber(const std::string& value);
  void set_serialnumber(std::string&& value);
  void set_serialnumber(const char* value);
  void set_serialnumber(const char* value, size_t size);
  std::string* mutable_serialnumber();
  std::string* release_serialnumber();
  void set_allocated_serialnumber(std::string* serialnumber);
  private:
  const std::string& _internal_serialnumber() const;
  void _internal_set_serialnumber(const std::string& value);
  std::string* _internal_mutable_serialnumber();
  public:

  // string modelNumber = 3;
  void clear_modelnumber();
  const std::string& modelnumber() const;
  void set_modelnumber(const std::string& value);
  void set_modelnumber(std::string&& value);
  void set_modelnumber(const char* value);
  void set_modelnumber(const char* value, size_t size);
  std::string* mutable_modelnumber();
  std::string* release_modelnumber();
  void set_allocated_modelnumber(std::string* modelnumber);
  private:
  const std::string& _internal_modelnumber() const;
  void _internal_set_modelnumber(const std::string& value);
  std::string* _internal_mutable_modelnumber();
  public:

  // uint32 maxNamespaces = 4;
  void clear_maxnamespaces();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxnamespaces() const;
  void set_maxnamespaces(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxnamespaces() const;
  void _internal_set_maxnamespaces(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool allowAnyHost = 5;
  void clear_allowanyhost();
  bool allowanyhost() const;
  void set_allowanyhost(bool value);
  private:
  bool _internal_allowanyhost() const;
  void _internal_set_allowanyhost(bool value);
  public:

  // bool anaReporting = 6;
  void clear_anareporting();
  bool anareporting() const;
  void set_anareporting(bool value);
  private:
  bool _internal_anareporting() const;
  void _internal_set_anareporting(bool value);
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.CreateSubsystemRequest.Param)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nqn_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serialnumber_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr modelnumber_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxnamespaces_;
  bool allowanyhost_;
  bool anareporting_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class CreateSubsystemRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.CreateSubsystemRequest) */ {
 public:
  inline CreateSubsystemRequest() : CreateSubsystemRequest(nullptr) {}
  virtual ~CreateSubsystemRequest();
  explicit constexpr CreateSubsystemRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateSubsystemRequest(const CreateSubsystemRequest& from);
  CreateSubsystemRequest(CreateSubsystemRequest&& from) noexcept
    : CreateSubsystemRequest() {
    *this = ::std::move(from);
  }

  inline CreateSubsystemRequest& operator=(const CreateSubsystemRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateSubsystemRequest& operator=(CreateSubsystemRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateSubsystemRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateSubsystemRequest* internal_default_instance() {
    return reinterpret_cast<const CreateSubsystemRequest*>(
               &_CreateSubsystemRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    151;

  friend void swap(CreateSubsystemRequest& a, CreateSubsystemRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateSubsystemRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateSubsystemRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateSubsystemRequest* New() const final {
    return CreateMaybeMessage<CreateSubsystemRequest>(nullptr);
  }

  CreateSubsystemRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateSubsystemRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateSubsystemRequest& from);
  void MergeFrom(const CreateSubsystemRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateSubsystemRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.CreateSubsystemRequest";
  }
  protected:
  explicit CreateSubsystemRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CreateSubsystemRequest_Param Param;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
    kParamFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // .grpc_cli.CreateSubsystemRequest.Param param = 4;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::grpc_cli::CreateSubsystemRequest_Param& param() const;
  ::grpc_cli::CreateSubsystemRequest_Param* release_param();
  ::grpc_cli::CreateSubsystemRequest_Param* mutable_param();
  void set_allocated_param(::grpc_cli::CreateSubsystemRequest_Param* param);
  private:
  const ::grpc_cli::CreateSubsystemRequest_Param& _internal_param() const;
  ::grpc_cli::CreateSubsystemRequest_Param* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::grpc_cli::CreateSubsystemRequest_Param* param);
  ::grpc_cli::CreateSubsystemRequest_Param* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:grpc_cli.CreateSubsystemRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  ::grpc_cli::CreateSubsystemRequest_Param* param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class CreateSubsystemResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.CreateSubsystemResponse.Result) */ {
 public:
  inline CreateSubsystemResponse_Result() : CreateSubsystemResponse_Result(nullptr) {}
  virtual ~CreateSubsystemResponse_Result();
  explicit constexpr CreateSubsystemResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateSubsystemResponse_Result(const CreateSubsystemResponse_Result& from);
  CreateSubsystemResponse_Result(CreateSubsystemResponse_Result&& from) noexcept
    : CreateSubsystemResponse_Result() {
    *this = ::std::move(from);
  }

  inline CreateSubsystemResponse_Result& operator=(const CreateSubsystemResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateSubsystemResponse_Result& operator=(CreateSubsystemResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateSubsystemResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateSubsystemResponse_Result* internal_default_instance() {
    return reinterpret_cast<const CreateSubsystemResponse_Result*>(
               &_CreateSubsystemResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    152;

  friend void swap(CreateSubsystemResponse_Result& a, CreateSubsystemResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateSubsystemResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateSubsystemResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateSubsystemResponse_Result* New() const final {
    return CreateMaybeMessage<CreateSubsystemResponse_Result>(nullptr);
  }

  CreateSubsystemResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateSubsystemResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateSubsystemResponse_Result& from);
  void MergeFrom(const CreateSubsystemResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateSubsystemResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.CreateSubsystemResponse.Result";
  }
  protected:
  explicit CreateSubsystemResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:grpc_cli.CreateSubsystemResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class CreateSubsystemResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.CreateSubsystemResponse) */ {
 public:
  inline CreateSubsystemResponse() : CreateSubsystemResponse(nullptr) {}
  virtual ~CreateSubsystemResponse();
  explicit constexpr CreateSubsystemResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateSubsystemResponse(const CreateSubsystemResponse& from);
  CreateSubsystemResponse(CreateSubsystemResponse&& from) noexcept
    : CreateSubsystemResponse() {
    *this = ::std::move(from);
  }

  inline CreateSubsystemResponse& operator=(const CreateSubsystemResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateSubsystemResponse& operator=(CreateSubsystemResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateSubsystemResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateSubsystemResponse* internal_default_instance() {
    return reinterpret_cast<const CreateSubsystemResponse*>(
               &_CreateSubsystemResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    153;

  friend void swap(CreateSubsystemResponse& a, CreateSubsystemResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateSubsystemResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateSubsystemResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateSubsystemResponse* New() const final {
    return CreateMaybeMessage<CreateSubsystemResponse>(nullptr);
  }

  CreateSubsystemResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateSubsystemResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateSubsystemResponse& from);
  void MergeFrom(const CreateSubsystemResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateSubsystemResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.CreateSubsystemResponse";
  }
  protected:
  explicit CreateSubsystemResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CreateSubsystemResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.CreateSubsystemResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::CreateSubsystemResponse_Result& result() const;
  ::grpc_cli::CreateSubsystemResponse_Result* release_result();
  ::grpc_cli::CreateSubsystemResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::CreateSubsystemResponse_Result* result);
  private:
  const ::grpc_cli::CreateSubsystemResponse_Result& _internal_result() const;
  ::grpc_cli::CreateSubsystemResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::CreateSubsystemResponse_Result* result);
  ::grpc_cli::CreateSubsystemResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.CreateSubsystemResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::CreateSubsystemResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class DeleteSubsystemRequest_Param PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.DeleteSubsystemRequest.Param) */ {
 public:
  inline DeleteSubsystemRequest_Param() : DeleteSubsystemRequest_Param(nullptr) {}
  virtual ~DeleteSubsystemRequest_Param();
  explicit constexpr DeleteSubsystemRequest_Param(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteSubsystemRequest_Param(const DeleteSubsystemRequest_Param& from);
  DeleteSubsystemRequest_Param(DeleteSubsystemRequest_Param&& from) noexcept
    : DeleteSubsystemRequest_Param() {
    *this = ::std::move(from);
  }

  inline DeleteSubsystemRequest_Param& operator=(const DeleteSubsystemRequest_Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteSubsystemRequest_Param& operator=(DeleteSubsystemRequest_Param&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteSubsystemRequest_Param& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteSubsystemRequest_Param* internal_default_instance() {
    return reinterpret_cast<const DeleteSubsystemRequest_Param*>(
               &_DeleteSubsystemRequest_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    154;

  friend void swap(DeleteSubsystemRequest_Param& a, DeleteSubsystemRequest_Param& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteSubsystemRequest_Param* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteSubsystemRequest_Param* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteSubsystemRequest_Param* New() const final {
    return CreateMaybeMessage<DeleteSubsystemRequest_Param>(nullptr);
  }

  DeleteSubsystemRequest_Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteSubsystemRequest_Param>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteSubsystemRequest_Param& from);
  void MergeFrom(const DeleteSubsystemRequest_Param& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteSubsystemRequest_Param* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.DeleteSubsystemRequest.Param";
  }
  protected:
  explicit DeleteSubsystemRequest_Param(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubnqnFieldNumber = 1,
  };
  // string subnqn = 1;
  void clear_subnqn();
  const std::string& subnqn() const;
  void set_subnqn(const std::string& value);
  void set_subnqn(std::string&& value);
  void set_subnqn(const char* value);
  void set_subnqn(const char* value, size_t size);
  std::string* mutable_subnqn();
  std::string* release_subnqn();
  void set_allocated_subnqn(std::string* subnqn);
  private:
  const std::string& _internal_subnqn() const;
  void _internal_set_subnqn(const std::string& value);
  std::string* _internal_mutable_subnqn();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.DeleteSubsystemRequest.Param)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subnqn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class DeleteSubsystemRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.DeleteSubsystemRequest) */ {
 public:
  inline DeleteSubsystemRequest() : DeleteSubsystemRequest(nullptr) {}
  virtual ~DeleteSubsystemRequest();
  explicit constexpr DeleteSubsystemRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteSubsystemRequest(const DeleteSubsystemRequest& from);
  DeleteSubsystemRequest(DeleteSubsystemRequest&& from) noexcept
    : DeleteSubsystemRequest() {
    *this = ::std::move(from);
  }

  inline DeleteSubsystemRequest& operator=(const DeleteSubsystemRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteSubsystemRequest& operator=(DeleteSubsystemRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteSubsystemRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteSubsystemRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteSubsystemRequest*>(
               &_DeleteSubsystemRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    155;

  friend void swap(DeleteSubsystemRequest& a, DeleteSubsystemRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteSubsystemRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteSubsystemRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteSubsystemRequest* New() const final {
    return CreateMaybeMessage<DeleteSubsystemRequest>(nullptr);
  }

  DeleteSubsystemRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteSubsystemRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteSubsystemRequest& from);
  void MergeFrom(const DeleteSubsystemRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteSubsystemRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.DeleteSubsystemRequest";
  }
  protected:
  explicit DeleteSubsystemRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef DeleteSubsystemRequest_Param Param;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
    kParamFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // .grpc_cli.DeleteSubsystemRequest.Param param = 4;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::grpc_cli::DeleteSubsystemRequest_Param& param() const;
  ::grpc_cli::DeleteSubsystemRequest_Param* release_param();
  ::grpc_cli::DeleteSubsystemRequest_Param* mutable_param();
  void set_allocated_param(::grpc_cli::DeleteSubsystemRequest_Param* param);
  private:
  const ::grpc_cli::DeleteSubsystemRequest_Param& _internal_param() const;
  ::grpc_cli::DeleteSubsystemRequest_Param* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::grpc_cli::DeleteSubsystemRequest_Param* param);
  ::grpc_cli::DeleteSubsystemRequest_Param* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:grpc_cli.DeleteSubsystemRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  ::grpc_cli::DeleteSubsystemRequest_Param* param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class DeleteSubsystemResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.DeleteSubsystemResponse.Result) */ {
 public:
  inline DeleteSubsystemResponse_Result() : DeleteSubsystemResponse_Result(nullptr) {}
  virtual ~DeleteSubsystemResponse_Result();
  explicit constexpr DeleteSubsystemResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteSubsystemResponse_Result(const DeleteSubsystemResponse_Result& from);
  DeleteSubsystemResponse_Result(DeleteSubsystemResponse_Result&& from) noexcept
    : DeleteSubsystemResponse_Result() {
    *this = ::std::move(from);
  }

  inline DeleteSubsystemResponse_Result& operator=(const DeleteSubsystemResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteSubsystemResponse_Result& operator=(DeleteSubsystemResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteSubsystemResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteSubsystemResponse_Result* internal_default_instance() {
    return reinterpret_cast<const DeleteSubsystemResponse_Result*>(
               &_DeleteSubsystemResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    156;

  friend void swap(DeleteSubsystemResponse_Result& a, DeleteSubsystemResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteSubsystemResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteSubsystemResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteSubsystemResponse_Result* New() const final {
    return CreateMaybeMessage<DeleteSubsystemResponse_Result>(nullptr);
  }

  DeleteSubsystemResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteSubsystemResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteSubsystemResponse_Result& from);
  void MergeFrom(const DeleteSubsystemResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteSubsystemResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.DeleteSubsystemResponse.Result";
  }
  protected:
  explicit DeleteSubsystemResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:grpc_cli.DeleteSubsystemResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class DeleteSubsystemResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.DeleteSubsystemResponse) */ {
 public:
  inline DeleteSubsystemResponse() : DeleteSubsystemResponse(nullptr) {}
  virtual ~DeleteSubsystemResponse();
  explicit constexpr DeleteSubsystemResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteSubsystemResponse(const DeleteSubsystemResponse& from);
  DeleteSubsystemResponse(DeleteSubsystemResponse&& from) noexcept
    : DeleteSubsystemResponse() {
    *this = ::std::move(from);
  }

  inline DeleteSubsystemResponse& operator=(const DeleteSubsystemResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteSubsystemResponse& operator=(DeleteSubsystemResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteSubsystemResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteSubsystemResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteSubsystemResponse*>(
               &_DeleteSubsystemResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    157;

  friend void swap(DeleteSubsystemResponse& a, DeleteSubsystemResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteSubsystemResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteSubsystemResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteSubsystemResponse* New() const final {
    return CreateMaybeMessage<DeleteSubsystemResponse>(nullptr);
  }

  DeleteSubsystemResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteSubsystemResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteSubsystemResponse& from);
  void MergeFrom(const DeleteSubsystemResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteSubsystemResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.DeleteSubsystemResponse";
  }
  protected:
  explicit DeleteSubsystemResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef DeleteSubsystemResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.DeleteSubsystemResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::DeleteSubsystemResponse_Result& result() const;
  ::grpc_cli::DeleteSubsystemResponse_Result* release_result();
  ::grpc_cli::DeleteSubsystemResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::DeleteSubsystemResponse_Result* result);
  private:
  const ::grpc_cli::DeleteSubsystemResponse_Result& _internal_result() const;
  ::grpc_cli::DeleteSubsystemResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::DeleteSubsystemResponse_Result* result);
  ::grpc_cli::DeleteSubsystemResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.DeleteSubsystemResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::DeleteSubsystemResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class AddListenerRequest_Param PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.AddListenerRequest.Param) */ {
 public:
  inline AddListenerRequest_Param() : AddListenerRequest_Param(nullptr) {}
  virtual ~AddListenerRequest_Param();
  explicit constexpr AddListenerRequest_Param(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddListenerRequest_Param(const AddListenerRequest_Param& from);
  AddListenerRequest_Param(AddListenerRequest_Param&& from) noexcept
    : AddListenerRequest_Param() {
    *this = ::std::move(from);
  }

  inline AddListenerRequest_Param& operator=(const AddListenerRequest_Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddListenerRequest_Param& operator=(AddListenerRequest_Param&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddListenerRequest_Param& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddListenerRequest_Param* internal_default_instance() {
    return reinterpret_cast<const AddListenerRequest_Param*>(
               &_AddListenerRequest_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    158;

  friend void swap(AddListenerRequest_Param& a, AddListenerRequest_Param& b) {
    a.Swap(&b);
  }
  inline void Swap(AddListenerRequest_Param* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddListenerRequest_Param* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddListenerRequest_Param* New() const final {
    return CreateMaybeMessage<AddListenerRequest_Param>(nullptr);
  }

  AddListenerRequest_Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddListenerRequest_Param>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddListenerRequest_Param& from);
  void MergeFrom(const AddListenerRequest_Param& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddListenerRequest_Param* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.AddListenerRequest.Param";
  }
  protected:
  explicit AddListenerRequest_Param(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubnqnFieldNumber = 1,
    kTransportTypeFieldNumber = 2,
    kTargetAddressFieldNumber = 3,
    kTransportServiceIdFieldNumber = 4,
  };
  // string subnqn = 1;
  void clear_subnqn();
  const std::string& subnqn() const;
  void set_subnqn(const std::string& value);
  void set_subnqn(std::string&& value);
  void set_subnqn(const char* value);
  void set_subnqn(const char* value, size_t size);
  std::string* mutable_subnqn();
  std::string* release_subnqn();
  void set_allocated_subnqn(std::string* subnqn);
  private:
  const std::string& _internal_subnqn() const;
  void _internal_set_subnqn(const std::string& value);
  std::string* _internal_mutable_subnqn();
  public:

  // string transportType = 2;
  void clear_transporttype();
  const std::string& transporttype() const;
  void set_transporttype(const std::string& value);
  void set_transporttype(std::string&& value);
  void set_transporttype(const char* value);
  void set_transporttype(const char* value, size_t size);
  std::string* mutable_transporttype();
  std::string* release_transporttype();
  void set_allocated_transporttype(std::string* transporttype);
  private:
  const std::string& _internal_transporttype() const;
  void _internal_set_transporttype(const std::string& value);
  std::string* _internal_mutable_transporttype();
  public:

  // string targetAddress = 3;
  void clear_targetaddress();
  const std::string& targetaddress() const;
  void set_targetaddress(const std::string& value);
  void set_targetaddress(std::string&& value);
  void set_targetaddress(const char* value);
  void set_targetaddress(const char* value, size_t size);
  std::string* mutable_targetaddress();
  std::string* release_targetaddress();
  void set_allocated_targetaddress(std::string* targetaddress);
  private:
  const std::string& _internal_targetaddress() const;
  void _internal_set_targetaddress(const std::string& value);
  std::string* _internal_mutable_targetaddress();
  public:

  // string transportServiceId = 4;
  void clear_transportserviceid();
  const std::string& transportserviceid() const;
  void set_transportserviceid(const std::string& value);
  void set_transportserviceid(std::string&& value);
  void set_transportserviceid(const char* value);
  void set_transportserviceid(const char* value, size_t size);
  std::string* mutable_transportserviceid();
  std::string* release_transportserviceid();
  void set_allocated_transportserviceid(std::string* transportserviceid);
  private:
  const std::string& _internal_transportserviceid() const;
  void _internal_set_transportserviceid(const std::string& value);
  std::string* _internal_mutable_transportserviceid();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.AddListenerRequest.Param)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subnqn_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transporttype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr targetaddress_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transportserviceid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class AddListenerRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.AddListenerRequest) */ {
 public:
  inline AddListenerRequest() : AddListenerRequest(nullptr) {}
  virtual ~AddListenerRequest();
  explicit constexpr AddListenerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddListenerRequest(const AddListenerRequest& from);
  AddListenerRequest(AddListenerRequest&& from) noexcept
    : AddListenerRequest() {
    *this = ::std::move(from);
  }

  inline AddListenerRequest& operator=(const AddListenerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddListenerRequest& operator=(AddListenerRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddListenerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddListenerRequest* internal_default_instance() {
    return reinterpret_cast<const AddListenerRequest*>(
               &_AddListenerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    159;

  friend void swap(AddListenerRequest& a, AddListenerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddListenerRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddListenerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddListenerRequest* New() const final {
    return CreateMaybeMessage<AddListenerRequest>(nullptr);
  }

  AddListenerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddListenerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddListenerRequest& from);
  void MergeFrom(const AddListenerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddListenerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.AddListenerRequest";
  }
  protected:
  explicit AddListenerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef AddListenerRequest_Param Param;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
    kParamFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // .grpc_cli.AddListenerRequest.Param param = 4;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::grpc_cli::AddListenerRequest_Param& param() const;
  ::grpc_cli::AddListenerRequest_Param* release_param();
  ::grpc_cli::AddListenerRequest_Param* mutable_param();
  void set_allocated_param(::grpc_cli::AddListenerRequest_Param* param);
  private:
  const ::grpc_cli::AddListenerRequest_Param& _internal_param() const;
  ::grpc_cli::AddListenerRequest_Param* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::grpc_cli::AddListenerRequest_Param* param);
  ::grpc_cli::AddListenerRequest_Param* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:grpc_cli.AddListenerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  ::grpc_cli::AddListenerRequest_Param* param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class AddListenerResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.AddListenerResponse.Result) */ {
 public:
  inline AddListenerResponse_Result() : AddListenerResponse_Result(nullptr) {}
  virtual ~AddListenerResponse_Result();
  explicit constexpr AddListenerResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddListenerResponse_Result(const AddListenerResponse_Result& from);
  AddListenerResponse_Result(AddListenerResponse_Result&& from) noexcept
    : AddListenerResponse_Result() {
    *this = ::std::move(from);
  }

  inline AddListenerResponse_Result& operator=(const AddListenerResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddListenerResponse_Result& operator=(AddListenerResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddListenerResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddListenerResponse_Result* internal_default_instance() {
    return reinterpret_cast<const AddListenerResponse_Result*>(
               &_AddListenerResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    160;

  friend void swap(AddListenerResponse_Result& a, AddListenerResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(AddListenerResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddListenerResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddListenerResponse_Result* New() const final {
    return CreateMaybeMessage<AddListenerResponse_Result>(nullptr);
  }

  AddListenerResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddListenerResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddListenerResponse_Result& from);
  void MergeFrom(const AddListenerResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddListenerResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.AddListenerResponse.Result";
  }
  protected:
  explicit AddListenerResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:grpc_cli.AddListenerResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class AddListenerResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.AddListenerResponse) */ {
 public:
  inline AddListenerResponse() : AddListenerResponse(nullptr) {}
  virtual ~AddListenerResponse();
  explicit constexpr AddListenerResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddListenerResponse(const AddListenerResponse& from);
  AddListenerResponse(AddListenerResponse&& from) noexcept
    : AddListenerResponse() {
    *this = ::std::move(from);
  }

  inline AddListenerResponse& operator=(const AddListenerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddListenerResponse& operator=(AddListenerResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddListenerResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddListenerResponse* internal_default_instance() {
    return reinterpret_cast<const AddListenerResponse*>(
               &_AddListenerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    161;

  friend void swap(AddListenerResponse& a, AddListenerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddListenerResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddListenerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddListenerResponse* New() const final {
    return CreateMaybeMessage<AddListenerResponse>(nullptr);
  }

  AddListenerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddListenerResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddListenerResponse& from);
  void MergeFrom(const AddListenerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddListenerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.AddListenerResponse";
  }
  protected:
  explicit AddListenerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef AddListenerResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.AddListenerResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::AddListenerResponse_Result& result() const;
  ::grpc_cli::AddListenerResponse_Result* release_result();
  ::grpc_cli::AddListenerResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::AddListenerResponse_Result* result);
  private:
  const ::grpc_cli::AddListenerResponse_Result& _internal_result() const;
  ::grpc_cli::AddListenerResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::AddListenerResponse_Result* result);
  ::grpc_cli::AddListenerResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.AddListenerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::AddListenerResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class Subsystem_AddressInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.Subsystem.AddressInfo) */ {
 public:
  inline Subsystem_AddressInfo() : Subsystem_AddressInfo(nullptr) {}
  virtual ~Subsystem_AddressInfo();
  explicit constexpr Subsystem_AddressInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Subsystem_AddressInfo(const Subsystem_AddressInfo& from);
  Subsystem_AddressInfo(Subsystem_AddressInfo&& from) noexcept
    : Subsystem_AddressInfo() {
    *this = ::std::move(from);
  }

  inline Subsystem_AddressInfo& operator=(const Subsystem_AddressInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Subsystem_AddressInfo& operator=(Subsystem_AddressInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Subsystem_AddressInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const Subsystem_AddressInfo* internal_default_instance() {
    return reinterpret_cast<const Subsystem_AddressInfo*>(
               &_Subsystem_AddressInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    162;

  friend void swap(Subsystem_AddressInfo& a, Subsystem_AddressInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(Subsystem_AddressInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Subsystem_AddressInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Subsystem_AddressInfo* New() const final {
    return CreateMaybeMessage<Subsystem_AddressInfo>(nullptr);
  }

  Subsystem_AddressInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Subsystem_AddressInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Subsystem_AddressInfo& from);
  void MergeFrom(const Subsystem_AddressInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Subsystem_AddressInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.Subsystem.AddressInfo";
  }
  protected:
  explicit Subsystem_AddressInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransportTypeFieldNumber = 1,
    kAddressFamilyFieldNumber = 2,
    kTargetAddressFieldNumber = 3,
    kTransportServiceIdFieldNumber = 4,
  };
  // string transportType = 1;
  void clear_transporttype();
  const std::string& transporttype() const;
  void set_transporttype(const std::string& value);
  void set_transporttype(std::string&& value);
  void set_transporttype(const char* value);
  void set_transporttype(const char* value, size_t size);
  std::string* mutable_transporttype();
  std::string* release_transporttype();
  void set_allocated_transporttype(std::string* transporttype);
  private:
  const std::string& _internal_transporttype() const;
  void _internal_set_transporttype(const std::string& value);
  std::string* _internal_mutable_transporttype();
  public:

  // string addressFamily = 2;
  void clear_addressfamily();
  const std::string& addressfamily() const;
  void set_addressfamily(const std::string& value);
  void set_addressfamily(std::string&& value);
  void set_addressfamily(const char* value);
  void set_addressfamily(const char* value, size_t size);
  std::string* mutable_addressfamily();
  std::string* release_addressfamily();
  void set_allocated_addressfamily(std::string* addressfamily);
  private:
  const std::string& _internal_addressfamily() const;
  void _internal_set_addressfamily(const std::string& value);
  std::string* _internal_mutable_addressfamily();
  public:

  // string targetAddress = 3;
  void clear_targetaddress();
  const std::string& targetaddress() const;
  void set_targetaddress(const std::string& value);
  void set_targetaddress(std::string&& value);
  void set_targetaddress(const char* value);
  void set_targetaddress(const char* value, size_t size);
  std::string* mutable_targetaddress();
  std::string* release_targetaddress();
  void set_allocated_targetaddress(std::string* targetaddress);
  private:
  const std::string& _internal_targetaddress() const;
  void _internal_set_targetaddress(const std::string& value);
  std::string* _internal_mutable_targetaddress();
  public:

  // string transportServiceId = 4;
  void clear_transportserviceid();
  const std::string& transportserviceid() const;
  void set_transportserviceid(const std::string& value);
  void set_transportserviceid(std::string&& value);
  void set_transportserviceid(const char* value);
  void set_transportserviceid(const char* value, size_t size);
  std::string* mutable_transportserviceid();
  std::string* release_transportserviceid();
  void set_allocated_transportserviceid(std::string* transportserviceid);
  private:
  const std::string& _internal_transportserviceid() const;
  void _internal_set_transportserviceid(const std::string& value);
  std::string* _internal_mutable_transportserviceid();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.Subsystem.AddressInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transporttype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addressfamily_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr targetaddress_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transportserviceid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class Subsystem_Host PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.Subsystem.Host) */ {
 public:
  inline Subsystem_Host() : Subsystem_Host(nullptr) {}
  virtual ~Subsystem_Host();
  explicit constexpr Subsystem_Host(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Subsystem_Host(const Subsystem_Host& from);
  Subsystem_Host(Subsystem_Host&& from) noexcept
    : Subsystem_Host() {
    *this = ::std::move(from);
  }

  inline Subsystem_Host& operator=(const Subsystem_Host& from) {
    CopyFrom(from);
    return *this;
  }
  inline Subsystem_Host& operator=(Subsystem_Host&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Subsystem_Host& default_instance() {
    return *internal_default_instance();
  }
  static inline const Subsystem_Host* internal_default_instance() {
    return reinterpret_cast<const Subsystem_Host*>(
               &_Subsystem_Host_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    163;

  friend void swap(Subsystem_Host& a, Subsystem_Host& b) {
    a.Swap(&b);
  }
  inline void Swap(Subsystem_Host* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Subsystem_Host* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Subsystem_Host* New() const final {
    return CreateMaybeMessage<Subsystem_Host>(nullptr);
  }

  Subsystem_Host* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Subsystem_Host>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Subsystem_Host& from);
  void MergeFrom(const Subsystem_Host& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Subsystem_Host* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.Subsystem.Host";
  }
  protected:
  explicit Subsystem_Host(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNqnFieldNumber = 1,
  };
  // string nqn = 1;
  void clear_nqn();
  const std::string& nqn() const;
  void set_nqn(const std::string& value);
  void set_nqn(std::string&& value);
  void set_nqn(const char* value);
  void set_nqn(const char* value, size_t size);
  std::string* mutable_nqn();
  std::string* release_nqn();
  void set_allocated_nqn(std::string* nqn);
  private:
  const std::string& _internal_nqn() const;
  void _internal_set_nqn(const std::string& value);
  std::string* _internal_mutable_nqn();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.Subsystem.Host)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nqn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class Subsystem_Namespace PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.Subsystem.Namespace) */ {
 public:
  inline Subsystem_Namespace() : Subsystem_Namespace(nullptr) {}
  virtual ~Subsystem_Namespace();
  explicit constexpr Subsystem_Namespace(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Subsystem_Namespace(const Subsystem_Namespace& from);
  Subsystem_Namespace(Subsystem_Namespace&& from) noexcept
    : Subsystem_Namespace() {
    *this = ::std::move(from);
  }

  inline Subsystem_Namespace& operator=(const Subsystem_Namespace& from) {
    CopyFrom(from);
    return *this;
  }
  inline Subsystem_Namespace& operator=(Subsystem_Namespace&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Subsystem_Namespace& default_instance() {
    return *internal_default_instance();
  }
  static inline const Subsystem_Namespace* internal_default_instance() {
    return reinterpret_cast<const Subsystem_Namespace*>(
               &_Subsystem_Namespace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    164;

  friend void swap(Subsystem_Namespace& a, Subsystem_Namespace& b) {
    a.Swap(&b);
  }
  inline void Swap(Subsystem_Namespace* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Subsystem_Namespace* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Subsystem_Namespace* New() const final {
    return CreateMaybeMessage<Subsystem_Namespace>(nullptr);
  }

  Subsystem_Namespace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Subsystem_Namespace>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Subsystem_Namespace& from);
  void MergeFrom(const Subsystem_Namespace& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Subsystem_Namespace* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.Subsystem.Namespace";
  }
  protected:
  explicit Subsystem_Namespace(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBdevNameFieldNumber = 2,
    kUuidFieldNumber = 3,
    kNsidFieldNumber = 1,
  };
  // string bdevName = 2;
  void clear_bdevname();
  const std::string& bdevname() const;
  void set_bdevname(const std::string& value);
  void set_bdevname(std::string&& value);
  void set_bdevname(const char* value);
  void set_bdevname(const char* value, size_t size);
  std::string* mutable_bdevname();
  std::string* release_bdevname();
  void set_allocated_bdevname(std::string* bdevname);
  private:
  const std::string& _internal_bdevname() const;
  void _internal_set_bdevname(const std::string& value);
  std::string* _internal_mutable_bdevname();
  public:

  // string uuid = 3;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // int32 nsid = 1;
  void clear_nsid();
  ::PROTOBUF_NAMESPACE_ID::int32 nsid() const;
  void set_nsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nsid() const;
  void _internal_set_nsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.Subsystem.Namespace)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bdevname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 nsid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class Subsystem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.Subsystem) */ {
 public:
  inline Subsystem() : Subsystem(nullptr) {}
  virtual ~Subsystem();
  explicit constexpr Subsystem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Subsystem(const Subsystem& from);
  Subsystem(Subsystem&& from) noexcept
    : Subsystem() {
    *this = ::std::move(from);
  }

  inline Subsystem& operator=(const Subsystem& from) {
    CopyFrom(from);
    return *this;
  }
  inline Subsystem& operator=(Subsystem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Subsystem& default_instance() {
    return *internal_default_instance();
  }
  static inline const Subsystem* internal_default_instance() {
    return reinterpret_cast<const Subsystem*>(
               &_Subsystem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    165;

  friend void swap(Subsystem& a, Subsystem& b) {
    a.Swap(&b);
  }
  inline void Swap(Subsystem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Subsystem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Subsystem* New() const final {
    return CreateMaybeMessage<Subsystem>(nullptr);
  }

  Subsystem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Subsystem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Subsystem& from);
  void MergeFrom(const Subsystem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Subsystem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.Subsystem";
  }
  protected:
  explicit Subsystem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Subsystem_AddressInfo AddressInfo;
  typedef Subsystem_Host Host;
  typedef Subsystem_Namespace Namespace;

  // accessors -------------------------------------------------------

  enum : int {
    kListenAddressesFieldNumber = 3,
    kHostsFieldNumber = 5,
    kNamespacesFieldNumber = 9,
    kNqnFieldNumber = 1,
    kSubtypeFieldNumber = 2,
    kSerialNumberFieldNumber = 6,
    kModelNumberFieldNumber = 7,
    kAllowAnyHostFieldNumber = 4,
    kMaxNamespacesFieldNumber = 8,
  };
  // repeated .grpc_cli.Subsystem.AddressInfo listenAddresses = 3;
  int listenaddresses_size() const;
  private:
  int _internal_listenaddresses_size() const;
  public:
  void clear_listenaddresses();
  ::grpc_cli::Subsystem_AddressInfo* mutable_listenaddresses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::Subsystem_AddressInfo >*
      mutable_listenaddresses();
  private:
  const ::grpc_cli::Subsystem_AddressInfo& _internal_listenaddresses(int index) const;
  ::grpc_cli::Subsystem_AddressInfo* _internal_add_listenaddresses();
  public:
  const ::grpc_cli::Subsystem_AddressInfo& listenaddresses(int index) const;
  ::grpc_cli::Subsystem_AddressInfo* add_listenaddresses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::Subsystem_AddressInfo >&
      listenaddresses() const;

  // repeated .grpc_cli.Subsystem.Host hosts = 5;
  int hosts_size() const;
  private:
  int _internal_hosts_size() const;
  public:
  void clear_hosts();
  ::grpc_cli::Subsystem_Host* mutable_hosts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::Subsystem_Host >*
      mutable_hosts();
  private:
  const ::grpc_cli::Subsystem_Host& _internal_hosts(int index) const;
  ::grpc_cli::Subsystem_Host* _internal_add_hosts();
  public:
  const ::grpc_cli::Subsystem_Host& hosts(int index) const;
  ::grpc_cli::Subsystem_Host* add_hosts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::Subsystem_Host >&
      hosts() const;

  // repeated .grpc_cli.Subsystem.Namespace namespaces = 9;
  int namespaces_size() const;
  private:
  int _internal_namespaces_size() const;
  public:
  void clear_namespaces();
  ::grpc_cli::Subsystem_Namespace* mutable_namespaces(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::Subsystem_Namespace >*
      mutable_namespaces();
  private:
  const ::grpc_cli::Subsystem_Namespace& _internal_namespaces(int index) const;
  ::grpc_cli::Subsystem_Namespace* _internal_add_namespaces();
  public:
  const ::grpc_cli::Subsystem_Namespace& namespaces(int index) const;
  ::grpc_cli::Subsystem_Namespace* add_namespaces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::Subsystem_Namespace >&
      namespaces() const;

  // string nqn = 1;
  void clear_nqn();
  const std::string& nqn() const;
  void set_nqn(const std::string& value);
  void set_nqn(std::string&& value);
  void set_nqn(const char* value);
  void set_nqn(const char* value, size_t size);
  std::string* mutable_nqn();
  std::string* release_nqn();
  void set_allocated_nqn(std::string* nqn);
  private:
  const std::string& _internal_nqn() const;
  void _internal_set_nqn(const std::string& value);
  std::string* _internal_mutable_nqn();
  public:

  // string subtype = 2;
  void clear_subtype();
  const std::string& subtype() const;
  void set_subtype(const std::string& value);
  void set_subtype(std::string&& value);
  void set_subtype(const char* value);
  void set_subtype(const char* value, size_t size);
  std::string* mutable_subtype();
  std::string* release_subtype();
  void set_allocated_subtype(std::string* subtype);
  private:
  const std::string& _internal_subtype() const;
  void _internal_set_subtype(const std::string& value);
  std::string* _internal_mutable_subtype();
  public:

  // string serialNumber = 6;
  void clear_serialnumber();
  const std::string& serialnumber() const;
  void set_serialnumber(const std::string& value);
  void set_serialnumber(std::string&& value);
  void set_serialnumber(const char* value);
  void set_serialnumber(const char* value, size_t size);
  std::string* mutable_serialnumber();
  std::string* release_serialnumber();
  void set_allocated_serialnumber(std::string* serialnumber);
  private:
  const std::string& _internal_serialnumber() const;
  void _internal_set_serialnumber(const std::string& value);
  std::string* _internal_mutable_serialnumber();
  public:

  // string modelNumber = 7;
  void clear_modelnumber();
  const std::string& modelnumber() const;
  void set_modelnumber(const std::string& value);
  void set_modelnumber(std::string&& value);
  void set_modelnumber(const char* value);
  void set_modelnumber(const char* value, size_t size);
  std::string* mutable_modelnumber();
  std::string* release_modelnumber();
  void set_allocated_modelnumber(std::string* modelnumber);
  private:
  const std::string& _internal_modelnumber() const;
  void _internal_set_modelnumber(const std::string& value);
  std::string* _internal_mutable_modelnumber();
  public:

  // int32 allowAnyHost = 4;
  void clear_allowanyhost();
  ::PROTOBUF_NAMESPACE_ID::int32 allowanyhost() const;
  void set_allowanyhost(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_allowanyhost() const;
  void _internal_set_allowanyhost(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 maxNamespaces = 8;
  void clear_maxnamespaces();
  ::PROTOBUF_NAMESPACE_ID::int32 maxnamespaces() const;
  void set_maxnamespaces(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxnamespaces() const;
  void _internal_set_maxnamespaces(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.Subsystem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::Subsystem_AddressInfo > listenaddresses_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::Subsystem_Host > hosts_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::Subsystem_Namespace > namespaces_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nqn_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subtype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serialnumber_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr modelnumber_;
  ::PROTOBUF_NAMESPACE_ID::int32 allowanyhost_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxnamespaces_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ListSubsystemRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ListSubsystemRequest) */ {
 public:
  inline ListSubsystemRequest() : ListSubsystemRequest(nullptr) {}
  virtual ~ListSubsystemRequest();
  explicit constexpr ListSubsystemRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListSubsystemRequest(const ListSubsystemRequest& from);
  ListSubsystemRequest(ListSubsystemRequest&& from) noexcept
    : ListSubsystemRequest() {
    *this = ::std::move(from);
  }

  inline ListSubsystemRequest& operator=(const ListSubsystemRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSubsystemRequest& operator=(ListSubsystemRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListSubsystemRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListSubsystemRequest* internal_default_instance() {
    return reinterpret_cast<const ListSubsystemRequest*>(
               &_ListSubsystemRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    166;

  friend void swap(ListSubsystemRequest& a, ListSubsystemRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSubsystemRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSubsystemRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListSubsystemRequest* New() const final {
    return CreateMaybeMessage<ListSubsystemRequest>(nullptr);
  }

  ListSubsystemRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListSubsystemRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListSubsystemRequest& from);
  void MergeFrom(const ListSubsystemRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSubsystemRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ListSubsystemRequest";
  }
  protected:
  explicit ListSubsystemRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.ListSubsystemRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ListSubsystemResponse_Result_SubsystemList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ListSubsystemResponse.Result.SubsystemList) */ {
 public:
  inline ListSubsystemResponse_Result_SubsystemList() : ListSubsystemResponse_Result_SubsystemList(nullptr) {}
  virtual ~ListSubsystemResponse_Result_SubsystemList();
  explicit constexpr ListSubsystemResponse_Result_SubsystemList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListSubsystemResponse_Result_SubsystemList(const ListSubsystemResponse_Result_SubsystemList& from);
  ListSubsystemResponse_Result_SubsystemList(ListSubsystemResponse_Result_SubsystemList&& from) noexcept
    : ListSubsystemResponse_Result_SubsystemList() {
    *this = ::std::move(from);
  }

  inline ListSubsystemResponse_Result_SubsystemList& operator=(const ListSubsystemResponse_Result_SubsystemList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSubsystemResponse_Result_SubsystemList& operator=(ListSubsystemResponse_Result_SubsystemList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListSubsystemResponse_Result_SubsystemList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListSubsystemResponse_Result_SubsystemList* internal_default_instance() {
    return reinterpret_cast<const ListSubsystemResponse_Result_SubsystemList*>(
               &_ListSubsystemResponse_Result_SubsystemList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    167;

  friend void swap(ListSubsystemResponse_Result_SubsystemList& a, ListSubsystemResponse_Result_SubsystemList& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSubsystemResponse_Result_SubsystemList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSubsystemResponse_Result_SubsystemList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListSubsystemResponse_Result_SubsystemList* New() const final {
    return CreateMaybeMessage<ListSubsystemResponse_Result_SubsystemList>(nullptr);
  }

  ListSubsystemResponse_Result_SubsystemList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListSubsystemResponse_Result_SubsystemList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListSubsystemResponse_Result_SubsystemList& from);
  void MergeFrom(const ListSubsystemResponse_Result_SubsystemList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSubsystemResponse_Result_SubsystemList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ListSubsystemResponse.Result.SubsystemList";
  }
  protected:
  explicit ListSubsystemResponse_Result_SubsystemList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubsystemlistFieldNumber = 1,
  };
  // repeated .grpc_cli.Subsystem subsystemlist = 1;
  int subsystemlist_size() const;
  private:
  int _internal_subsystemlist_size() const;
  public:
  void clear_subsystemlist();
  ::grpc_cli::Subsystem* mutable_subsystemlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::Subsystem >*
      mutable_subsystemlist();
  private:
  const ::grpc_cli::Subsystem& _internal_subsystemlist(int index) const;
  ::grpc_cli::Subsystem* _internal_add_subsystemlist();
  public:
  const ::grpc_cli::Subsystem& subsystemlist(int index) const;
  ::grpc_cli::Subsystem* add_subsystemlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::Subsystem >&
      subsystemlist() const;

  // @@protoc_insertion_point(class_scope:grpc_cli.ListSubsystemResponse.Result.SubsystemList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::Subsystem > subsystemlist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ListSubsystemResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ListSubsystemResponse.Result) */ {
 public:
  inline ListSubsystemResponse_Result() : ListSubsystemResponse_Result(nullptr) {}
  virtual ~ListSubsystemResponse_Result();
  explicit constexpr ListSubsystemResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListSubsystemResponse_Result(const ListSubsystemResponse_Result& from);
  ListSubsystemResponse_Result(ListSubsystemResponse_Result&& from) noexcept
    : ListSubsystemResponse_Result() {
    *this = ::std::move(from);
  }

  inline ListSubsystemResponse_Result& operator=(const ListSubsystemResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSubsystemResponse_Result& operator=(ListSubsystemResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListSubsystemResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListSubsystemResponse_Result* internal_default_instance() {
    return reinterpret_cast<const ListSubsystemResponse_Result*>(
               &_ListSubsystemResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    168;

  friend void swap(ListSubsystemResponse_Result& a, ListSubsystemResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSubsystemResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSubsystemResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListSubsystemResponse_Result* New() const final {
    return CreateMaybeMessage<ListSubsystemResponse_Result>(nullptr);
  }

  ListSubsystemResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListSubsystemResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListSubsystemResponse_Result& from);
  void MergeFrom(const ListSubsystemResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSubsystemResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ListSubsystemResponse.Result";
  }
  protected:
  explicit ListSubsystemResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ListSubsystemResponse_Result_SubsystemList SubsystemList;

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // .grpc_cli.ListSubsystemResponse.Result.SubsystemList data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::grpc_cli::ListSubsystemResponse_Result_SubsystemList& data() const;
  ::grpc_cli::ListSubsystemResponse_Result_SubsystemList* release_data();
  ::grpc_cli::ListSubsystemResponse_Result_SubsystemList* mutable_data();
  void set_allocated_data(::grpc_cli::ListSubsystemResponse_Result_SubsystemList* data);
  private:
  const ::grpc_cli::ListSubsystemResponse_Result_SubsystemList& _internal_data() const;
  ::grpc_cli::ListSubsystemResponse_Result_SubsystemList* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::grpc_cli::ListSubsystemResponse_Result_SubsystemList* data);
  ::grpc_cli::ListSubsystemResponse_Result_SubsystemList* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:grpc_cli.ListSubsystemResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  ::grpc_cli::ListSubsystemResponse_Result_SubsystemList* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ListSubsystemResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ListSubsystemResponse) */ {
 public:
  inline ListSubsystemResponse() : ListSubsystemResponse(nullptr) {}
  virtual ~ListSubsystemResponse();
  explicit constexpr ListSubsystemResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListSubsystemResponse(const ListSubsystemResponse& from);
  ListSubsystemResponse(ListSubsystemResponse&& from) noexcept
    : ListSubsystemResponse() {
    *this = ::std::move(from);
  }

  inline ListSubsystemResponse& operator=(const ListSubsystemResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSubsystemResponse& operator=(ListSubsystemResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListSubsystemResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListSubsystemResponse* internal_default_instance() {
    return reinterpret_cast<const ListSubsystemResponse*>(
               &_ListSubsystemResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    169;

  friend void swap(ListSubsystemResponse& a, ListSubsystemResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSubsystemResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSubsystemResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListSubsystemResponse* New() const final {
    return CreateMaybeMessage<ListSubsystemResponse>(nullptr);
  }

  ListSubsystemResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListSubsystemResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListSubsystemResponse& from);
  void MergeFrom(const ListSubsystemResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSubsystemResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ListSubsystemResponse";
  }
  protected:
  explicit ListSubsystemResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ListSubsystemResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.ListSubsystemResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::ListSubsystemResponse_Result& result() const;
  ::grpc_cli::ListSubsystemResponse_Result* release_result();
  ::grpc_cli::ListSubsystemResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::ListSubsystemResponse_Result* result);
  private:
  const ::grpc_cli::ListSubsystemResponse_Result& _internal_result() const;
  ::grpc_cli::ListSubsystemResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::ListSubsystemResponse_Result* result);
  ::grpc_cli::ListSubsystemResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.ListSubsystemResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::ListSubsystemResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class SubsystemInfoRequest_Param PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.SubsystemInfoRequest.Param) */ {
 public:
  inline SubsystemInfoRequest_Param() : SubsystemInfoRequest_Param(nullptr) {}
  virtual ~SubsystemInfoRequest_Param();
  explicit constexpr SubsystemInfoRequest_Param(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubsystemInfoRequest_Param(const SubsystemInfoRequest_Param& from);
  SubsystemInfoRequest_Param(SubsystemInfoRequest_Param&& from) noexcept
    : SubsystemInfoRequest_Param() {
    *this = ::std::move(from);
  }

  inline SubsystemInfoRequest_Param& operator=(const SubsystemInfoRequest_Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubsystemInfoRequest_Param& operator=(SubsystemInfoRequest_Param&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubsystemInfoRequest_Param& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubsystemInfoRequest_Param* internal_default_instance() {
    return reinterpret_cast<const SubsystemInfoRequest_Param*>(
               &_SubsystemInfoRequest_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    170;

  friend void swap(SubsystemInfoRequest_Param& a, SubsystemInfoRequest_Param& b) {
    a.Swap(&b);
  }
  inline void Swap(SubsystemInfoRequest_Param* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubsystemInfoRequest_Param* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubsystemInfoRequest_Param* New() const final {
    return CreateMaybeMessage<SubsystemInfoRequest_Param>(nullptr);
  }

  SubsystemInfoRequest_Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubsystemInfoRequest_Param>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubsystemInfoRequest_Param& from);
  void MergeFrom(const SubsystemInfoRequest_Param& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubsystemInfoRequest_Param* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.SubsystemInfoRequest.Param";
  }
  protected:
  explicit SubsystemInfoRequest_Param(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubnqnFieldNumber = 1,
  };
  // string subnqn = 1;
  void clear_subnqn();
  const std::string& subnqn() const;
  void set_subnqn(const std::string& value);
  void set_subnqn(std::string&& value);
  void set_subnqn(const char* value);
  void set_subnqn(const char* value, size_t size);
  std::string* mutable_subnqn();
  std::string* release_subnqn();
  void set_allocated_subnqn(std::string* subnqn);
  private:
  const std::string& _internal_subnqn() const;
  void _internal_set_subnqn(const std::string& value);
  std::string* _internal_mutable_subnqn();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.SubsystemInfoRequest.Param)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subnqn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class SubsystemInfoRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.SubsystemInfoRequest) */ {
 public:
  inline SubsystemInfoRequest() : SubsystemInfoRequest(nullptr) {}
  virtual ~SubsystemInfoRequest();
  explicit constexpr SubsystemInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubsystemInfoRequest(const SubsystemInfoRequest& from);
  SubsystemInfoRequest(SubsystemInfoRequest&& from) noexcept
    : SubsystemInfoRequest() {
    *this = ::std::move(from);
  }

  inline SubsystemInfoRequest& operator=(const SubsystemInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubsystemInfoRequest& operator=(SubsystemInfoRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubsystemInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubsystemInfoRequest* internal_default_instance() {
    return reinterpret_cast<const SubsystemInfoRequest*>(
               &_SubsystemInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    171;

  friend void swap(SubsystemInfoRequest& a, SubsystemInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubsystemInfoRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubsystemInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubsystemInfoRequest* New() const final {
    return CreateMaybeMessage<SubsystemInfoRequest>(nullptr);
  }

  SubsystemInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubsystemInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubsystemInfoRequest& from);
  void MergeFrom(const SubsystemInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubsystemInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.SubsystemInfoRequest";
  }
  protected:
  explicit SubsystemInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef SubsystemInfoRequest_Param Param;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
    kParamFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // .grpc_cli.SubsystemInfoRequest.Param param = 4;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::grpc_cli::SubsystemInfoRequest_Param& param() const;
  ::grpc_cli::SubsystemInfoRequest_Param* release_param();
  ::grpc_cli::SubsystemInfoRequest_Param* mutable_param();
  void set_allocated_param(::grpc_cli::SubsystemInfoRequest_Param* param);
  private:
  const ::grpc_cli::SubsystemInfoRequest_Param& _internal_param() const;
  ::grpc_cli::SubsystemInfoRequest_Param* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::grpc_cli::SubsystemInfoRequest_Param* param);
  ::grpc_cli::SubsystemInfoRequest_Param* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:grpc_cli.SubsystemInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  ::grpc_cli::SubsystemInfoRequest_Param* param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class SubsystemInfoResponse_Result_SubsystemList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.SubsystemInfoResponse.Result.SubsystemList) */ {
 public:
  inline SubsystemInfoResponse_Result_SubsystemList() : SubsystemInfoResponse_Result_SubsystemList(nullptr) {}
  virtual ~SubsystemInfoResponse_Result_SubsystemList();
  explicit constexpr SubsystemInfoResponse_Result_SubsystemList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubsystemInfoResponse_Result_SubsystemList(const SubsystemInfoResponse_Result_SubsystemList& from);
  SubsystemInfoResponse_Result_SubsystemList(SubsystemInfoResponse_Result_SubsystemList&& from) noexcept
    : SubsystemInfoResponse_Result_SubsystemList() {
    *this = ::std::move(from);
  }

  inline SubsystemInfoResponse_Result_SubsystemList& operator=(const SubsystemInfoResponse_Result_SubsystemList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubsystemInfoResponse_Result_SubsystemList& operator=(SubsystemInfoResponse_Result_SubsystemList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubsystemInfoResponse_Result_SubsystemList& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubsystemInfoResponse_Result_SubsystemList* internal_default_instance() {
    return reinterpret_cast<const SubsystemInfoResponse_Result_SubsystemList*>(
               &_SubsystemInfoResponse_Result_SubsystemList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    172;

  friend void swap(SubsystemInfoResponse_Result_SubsystemList& a, SubsystemInfoResponse_Result_SubsystemList& b) {
    a.Swap(&b);
  }
  inline void Swap(SubsystemInfoResponse_Result_SubsystemList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubsystemInfoResponse_Result_SubsystemList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubsystemInfoResponse_Result_SubsystemList* New() const final {
    return CreateMaybeMessage<SubsystemInfoResponse_Result_SubsystemList>(nullptr);
  }

  SubsystemInfoResponse_Result_SubsystemList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubsystemInfoResponse_Result_SubsystemList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubsystemInfoResponse_Result_SubsystemList& from);
  void MergeFrom(const SubsystemInfoResponse_Result_SubsystemList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubsystemInfoResponse_Result_SubsystemList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.SubsystemInfoResponse.Result.SubsystemList";
  }
  protected:
  explicit SubsystemInfoResponse_Result_SubsystemList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubsystemlistFieldNumber = 1,
  };
  // repeated .grpc_cli.Subsystem subsystemlist = 1;
  int subsystemlist_size() const;
  private:
  int _internal_subsystemlist_size() const;
  public:
  void clear_subsystemlist();
  ::grpc_cli::Subsystem* mutable_subsystemlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::Subsystem >*
      mutable_subsystemlist();
  private:
  const ::grpc_cli::Subsystem& _internal_subsystemlist(int index) const;
  ::grpc_cli::Subsystem* _internal_add_subsystemlist();
  public:
  const ::grpc_cli::Subsystem& subsystemlist(int index) const;
  ::grpc_cli::Subsystem* add_subsystemlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::Subsystem >&
      subsystemlist() const;

  // @@protoc_insertion_point(class_scope:grpc_cli.SubsystemInfoResponse.Result.SubsystemList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::Subsystem > subsystemlist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class SubsystemInfoResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.SubsystemInfoResponse.Result) */ {
 public:
  inline SubsystemInfoResponse_Result() : SubsystemInfoResponse_Result(nullptr) {}
  virtual ~SubsystemInfoResponse_Result();
  explicit constexpr SubsystemInfoResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubsystemInfoResponse_Result(const SubsystemInfoResponse_Result& from);
  SubsystemInfoResponse_Result(SubsystemInfoResponse_Result&& from) noexcept
    : SubsystemInfoResponse_Result() {
    *this = ::std::move(from);
  }

  inline SubsystemInfoResponse_Result& operator=(const SubsystemInfoResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubsystemInfoResponse_Result& operator=(SubsystemInfoResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubsystemInfoResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubsystemInfoResponse_Result* internal_default_instance() {
    return reinterpret_cast<const SubsystemInfoResponse_Result*>(
               &_SubsystemInfoResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    173;

  friend void swap(SubsystemInfoResponse_Result& a, SubsystemInfoResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(SubsystemInfoResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubsystemInfoResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubsystemInfoResponse_Result* New() const final {
    return CreateMaybeMessage<SubsystemInfoResponse_Result>(nullptr);
  }

  SubsystemInfoResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubsystemInfoResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubsystemInfoResponse_Result& from);
  void MergeFrom(const SubsystemInfoResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubsystemInfoResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.SubsystemInfoResponse.Result";
  }
  protected:
  explicit SubsystemInfoResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef SubsystemInfoResponse_Result_SubsystemList SubsystemList;

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // .grpc_cli.SubsystemInfoResponse.Result.SubsystemList data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::grpc_cli::SubsystemInfoResponse_Result_SubsystemList& data() const;
  ::grpc_cli::SubsystemInfoResponse_Result_SubsystemList* release_data();
  ::grpc_cli::SubsystemInfoResponse_Result_SubsystemList* mutable_data();
  void set_allocated_data(::grpc_cli::SubsystemInfoResponse_Result_SubsystemList* data);
  private:
  const ::grpc_cli::SubsystemInfoResponse_Result_SubsystemList& _internal_data() const;
  ::grpc_cli::SubsystemInfoResponse_Result_SubsystemList* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::grpc_cli::SubsystemInfoResponse_Result_SubsystemList* data);
  ::grpc_cli::SubsystemInfoResponse_Result_SubsystemList* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:grpc_cli.SubsystemInfoResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  ::grpc_cli::SubsystemInfoResponse_Result_SubsystemList* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class SubsystemInfoResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.SubsystemInfoResponse) */ {
 public:
  inline SubsystemInfoResponse() : SubsystemInfoResponse(nullptr) {}
  virtual ~SubsystemInfoResponse();
  explicit constexpr SubsystemInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubsystemInfoResponse(const SubsystemInfoResponse& from);
  SubsystemInfoResponse(SubsystemInfoResponse&& from) noexcept
    : SubsystemInfoResponse() {
    *this = ::std::move(from);
  }

  inline SubsystemInfoResponse& operator=(const SubsystemInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubsystemInfoResponse& operator=(SubsystemInfoResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubsystemInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubsystemInfoResponse* internal_default_instance() {
    return reinterpret_cast<const SubsystemInfoResponse*>(
               &_SubsystemInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    174;

  friend void swap(SubsystemInfoResponse& a, SubsystemInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SubsystemInfoResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubsystemInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubsystemInfoResponse* New() const final {
    return CreateMaybeMessage<SubsystemInfoResponse>(nullptr);
  }

  SubsystemInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubsystemInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubsystemInfoResponse& from);
  void MergeFrom(const SubsystemInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubsystemInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.SubsystemInfoResponse";
  }
  protected:
  explicit SubsystemInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef SubsystemInfoResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.SubsystemInfoResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::SubsystemInfoResponse_Result& result() const;
  ::grpc_cli::SubsystemInfoResponse_Result* release_result();
  ::grpc_cli::SubsystemInfoResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::SubsystemInfoResponse_Result* result);
  private:
  const ::grpc_cli::SubsystemInfoResponse_Result& _internal_result() const;
  ::grpc_cli::SubsystemInfoResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::SubsystemInfoResponse_Result* result);
  ::grpc_cli::SubsystemInfoResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.SubsystemInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::SubsystemInfoResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class CreateTransportRequest_Param PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.CreateTransportRequest.Param) */ {
 public:
  inline CreateTransportRequest_Param() : CreateTransportRequest_Param(nullptr) {}
  virtual ~CreateTransportRequest_Param();
  explicit constexpr CreateTransportRequest_Param(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateTransportRequest_Param(const CreateTransportRequest_Param& from);
  CreateTransportRequest_Param(CreateTransportRequest_Param&& from) noexcept
    : CreateTransportRequest_Param() {
    *this = ::std::move(from);
  }

  inline CreateTransportRequest_Param& operator=(const CreateTransportRequest_Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateTransportRequest_Param& operator=(CreateTransportRequest_Param&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateTransportRequest_Param& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateTransportRequest_Param* internal_default_instance() {
    return reinterpret_cast<const CreateTransportRequest_Param*>(
               &_CreateTransportRequest_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    175;

  friend void swap(CreateTransportRequest_Param& a, CreateTransportRequest_Param& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateTransportRequest_Param* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateTransportRequest_Param* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateTransportRequest_Param* New() const final {
    return CreateMaybeMessage<CreateTransportRequest_Param>(nullptr);
  }

  CreateTransportRequest_Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateTransportRequest_Param>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateTransportRequest_Param& from);
  void MergeFrom(const CreateTransportRequest_Param& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTransportRequest_Param* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.CreateTransportRequest.Param";
  }
  protected:
  explicit CreateTransportRequest_Param(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransportTypeFieldNumber = 1,
    kBufCacheSizeFieldNumber = 2,
    kNumSharedBufFieldNumber = 3,
  };
  // string transportType = 1;
  void clear_transporttype();
  const std::string& transporttype() const;
  void set_transporttype(const std::string& value);
  void set_transporttype(std::string&& value);
  void set_transporttype(const char* value);
  void set_transporttype(const char* value, size_t size);
  std::string* mutable_transporttype();
  std::string* release_transporttype();
  void set_allocated_transporttype(std::string* transporttype);
  private:
  const std::string& _internal_transporttype() const;
  void _internal_set_transporttype(const std::string& value);
  std::string* _internal_mutable_transporttype();
  public:

  // int32 bufCacheSize = 2;
  void clear_bufcachesize();
  ::PROTOBUF_NAMESPACE_ID::int32 bufcachesize() const;
  void set_bufcachesize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bufcachesize() const;
  void _internal_set_bufcachesize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 numSharedBuf = 3;
  void clear_numsharedbuf();
  ::PROTOBUF_NAMESPACE_ID::int32 numsharedbuf() const;
  void set_numsharedbuf(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_numsharedbuf() const;
  void _internal_set_numsharedbuf(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.CreateTransportRequest.Param)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transporttype_;
  ::PROTOBUF_NAMESPACE_ID::int32 bufcachesize_;
  ::PROTOBUF_NAMESPACE_ID::int32 numsharedbuf_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class CreateTransportRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.CreateTransportRequest) */ {
 public:
  inline CreateTransportRequest() : CreateTransportRequest(nullptr) {}
  virtual ~CreateTransportRequest();
  explicit constexpr CreateTransportRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateTransportRequest(const CreateTransportRequest& from);
  CreateTransportRequest(CreateTransportRequest&& from) noexcept
    : CreateTransportRequest() {
    *this = ::std::move(from);
  }

  inline CreateTransportRequest& operator=(const CreateTransportRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateTransportRequest& operator=(CreateTransportRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateTransportRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateTransportRequest* internal_default_instance() {
    return reinterpret_cast<const CreateTransportRequest*>(
               &_CreateTransportRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    176;

  friend void swap(CreateTransportRequest& a, CreateTransportRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateTransportRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateTransportRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateTransportRequest* New() const final {
    return CreateMaybeMessage<CreateTransportRequest>(nullptr);
  }

  CreateTransportRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateTransportRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateTransportRequest& from);
  void MergeFrom(const CreateTransportRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTransportRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.CreateTransportRequest";
  }
  protected:
  explicit CreateTransportRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CreateTransportRequest_Param Param;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
    kParamFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // .grpc_cli.CreateTransportRequest.Param param = 4;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::grpc_cli::CreateTransportRequest_Param& param() const;
  ::grpc_cli::CreateTransportRequest_Param* release_param();
  ::grpc_cli::CreateTransportRequest_Param* mutable_param();
  void set_allocated_param(::grpc_cli::CreateTransportRequest_Param* param);
  private:
  const ::grpc_cli::CreateTransportRequest_Param& _internal_param() const;
  ::grpc_cli::CreateTransportRequest_Param* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::grpc_cli::CreateTransportRequest_Param* param);
  ::grpc_cli::CreateTransportRequest_Param* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:grpc_cli.CreateTransportRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  ::grpc_cli::CreateTransportRequest_Param* param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class CreateTransportResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.CreateTransportResponse.Result) */ {
 public:
  inline CreateTransportResponse_Result() : CreateTransportResponse_Result(nullptr) {}
  virtual ~CreateTransportResponse_Result();
  explicit constexpr CreateTransportResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateTransportResponse_Result(const CreateTransportResponse_Result& from);
  CreateTransportResponse_Result(CreateTransportResponse_Result&& from) noexcept
    : CreateTransportResponse_Result() {
    *this = ::std::move(from);
  }

  inline CreateTransportResponse_Result& operator=(const CreateTransportResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateTransportResponse_Result& operator=(CreateTransportResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateTransportResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateTransportResponse_Result* internal_default_instance() {
    return reinterpret_cast<const CreateTransportResponse_Result*>(
               &_CreateTransportResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    177;

  friend void swap(CreateTransportResponse_Result& a, CreateTransportResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateTransportResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateTransportResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateTransportResponse_Result* New() const final {
    return CreateMaybeMessage<CreateTransportResponse_Result>(nullptr);
  }

  CreateTransportResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateTransportResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateTransportResponse_Result& from);
  void MergeFrom(const CreateTransportResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTransportResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.CreateTransportResponse.Result";
  }
  protected:
  explicit CreateTransportResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:grpc_cli.CreateTransportResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class CreateTransportResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.CreateTransportResponse) */ {
 public:
  inline CreateTransportResponse() : CreateTransportResponse(nullptr) {}
  virtual ~CreateTransportResponse();
  explicit constexpr CreateTransportResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateTransportResponse(const CreateTransportResponse& from);
  CreateTransportResponse(CreateTransportResponse&& from) noexcept
    : CreateTransportResponse() {
    *this = ::std::move(from);
  }

  inline CreateTransportResponse& operator=(const CreateTransportResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateTransportResponse& operator=(CreateTransportResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateTransportResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateTransportResponse* internal_default_instance() {
    return reinterpret_cast<const CreateTransportResponse*>(
               &_CreateTransportResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    178;

  friend void swap(CreateTransportResponse& a, CreateTransportResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateTransportResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateTransportResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateTransportResponse* New() const final {
    return CreateMaybeMessage<CreateTransportResponse>(nullptr);
  }

  CreateTransportResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateTransportResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateTransportResponse& from);
  void MergeFrom(const CreateTransportResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTransportResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.CreateTransportResponse";
  }
  protected:
  explicit CreateTransportResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CreateTransportResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.CreateTransportResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::CreateTransportResponse_Result& result() const;
  ::grpc_cli::CreateTransportResponse_Result* release_result();
  ::grpc_cli::CreateTransportResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::CreateTransportResponse_Result* result);
  private:
  const ::grpc_cli::CreateTransportResponse_Result& _internal_result() const;
  ::grpc_cli::CreateTransportResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::CreateTransportResponse_Result* result);
  ::grpc_cli::CreateTransportResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.CreateTransportResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::CreateTransportResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class CreateVolumeRequest_Param PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.CreateVolumeRequest.Param) */ {
 public:
  inline CreateVolumeRequest_Param() : CreateVolumeRequest_Param(nullptr) {}
  virtual ~CreateVolumeRequest_Param();
  explicit constexpr CreateVolumeRequest_Param(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateVolumeRequest_Param(const CreateVolumeRequest_Param& from);
  CreateVolumeRequest_Param(CreateVolumeRequest_Param&& from) noexcept
    : CreateVolumeRequest_Param() {
    *this = ::std::move(from);
  }

  inline CreateVolumeRequest_Param& operator=(const CreateVolumeRequest_Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateVolumeRequest_Param& operator=(CreateVolumeRequest_Param&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateVolumeRequest_Param& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateVolumeRequest_Param* internal_default_instance() {
    return reinterpret_cast<const CreateVolumeRequest_Param*>(
               &_CreateVolumeRequest_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    179;

  friend void swap(CreateVolumeRequest_Param& a, CreateVolumeRequest_Param& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateVolumeRequest_Param* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateVolumeRequest_Param* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateVolumeRequest_Param* New() const final {
    return CreateMaybeMessage<CreateVolumeRequest_Param>(nullptr);
  }

  CreateVolumeRequest_Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateVolumeRequest_Param>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateVolumeRequest_Param& from);
  void MergeFrom(const CreateVolumeRequest_Param& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateVolumeRequest_Param* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.CreateVolumeRequest.Param";
  }
  protected:
  explicit CreateVolumeRequest_Param(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kArrayFieldNumber = 2,
    kUuidFieldNumber = 7,
    kSizeFieldNumber = 3,
    kMaxiopsFieldNumber = 4,
    kMaxbwFieldNumber = 5,
    kNsidFieldNumber = 8,
    kIsWalVolFieldNumber = 6,
    kIsPrimaryFieldNumber = 9,
    kIsAnaNonoptimizedFieldNumber = 10,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string array = 2;
  void clear_array();
  const std::string& array() const;
  void set_array(const std::string& value);
  void set_array(std::string&& value);
  void set_array(const char* value);
  void set_array(const char* value, size_t size);
  std::string* mutable_array();
  std::string* release_array();
  void set_allocated_array(std::string* array);
  private:
  const std::string& _internal_array() const;
  void _internal_set_array(const std::string& value);
  std::string* _internal_mutable_array();
  public:

  // string uuid = 7;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // uint64 size = 3;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 maxiops = 4;
  void clear_maxiops();
  ::PROTOBUF_NAMESPACE_ID::uint64 maxiops() const;
  void set_maxiops(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_maxiops() const;
  void _internal_set_maxiops(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 maxbw = 5;
  void clear_maxbw();
  ::PROTOBUF_NAMESPACE_ID::uint64 maxbw() const;
  void set_maxbw(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_maxbw() const;
  void _internal_set_maxbw(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 nsid = 8;
  void clear_nsid();
  ::PROTOBUF_NAMESPACE_ID::int32 nsid() const;
  void set_nsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nsid() const;
  void _internal_set_nsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool isWalVol = 6;
  void clear_iswalvol();
  bool iswalvol() const;
  void set_iswalvol(bool value);
  private:
  bool _internal_iswalvol() const;
  void _internal_set_iswalvol(bool value);
  public:

  // bool isPrimary = 9;
  void clear_isprimary();
  bool isprimary() const;
  void set_isprimary(bool value);
  private:
  bool _internal_isprimary() const;
  void _internal_set_isprimary(bool value);
  public:

  // bool isAnaNonoptimized = 10;
  void clear_isananonoptimized();
  bool isananonoptimized() const;
  void set_isananonoptimized(bool value);
  private:
  bool _internal_isananonoptimized() const;
  void _internal_set_isananonoptimized(bool value);
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.CreateVolumeRequest.Param)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr array_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 maxiops_;
  ::PROTOBUF_NAMESPACE_ID::uint64 maxbw_;
  ::PROTOBUF_NAMESPACE_ID::int32 nsid_;
  bool iswalvol_;
  bool isprimary_;
  bool isananonoptimized_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class CreateVolumeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.CreateVolumeRequest) */ {
 public:
  inline CreateVolumeRequest() : CreateVolumeRequest(nullptr) {}
  virtual ~CreateVolumeRequest();
  explicit constexpr CreateVolumeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateVolumeRequest(const CreateVolumeRequest& from);
  CreateVolumeRequest(CreateVolumeRequest&& from) noexcept
    : CreateVolumeRequest() {
    *this = ::std::move(from);
  }

  inline CreateVolumeRequest& operator=(const CreateVolumeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateVolumeRequest& operator=(CreateVolumeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateVolumeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateVolumeRequest* internal_default_instance() {
    return reinterpret_cast<const CreateVolumeRequest*>(
               &_CreateVolumeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    180;

  friend void swap(CreateVolumeRequest& a, CreateVolumeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateVolumeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateVolumeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateVolumeRequest* New() const final {
    return CreateMaybeMessage<CreateVolumeRequest>(nullptr);
  }

  CreateVolumeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateVolumeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateVolumeRequest& from);
  void MergeFrom(const CreateVolumeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateVolumeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.CreateVolumeRequest";
  }
  protected:
  explicit CreateVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CreateVolumeRequest_Param Param;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
    kParamFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // .grpc_cli.CreateVolumeRequest.Param param = 4;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::grpc_cli::CreateVolumeRequest_Param& param() const;
  ::grpc_cli::CreateVolumeRequest_Param* release_param();
  ::grpc_cli::CreateVolumeRequest_Param* mutable_param();
  void set_allocated_param(::grpc_cli::CreateVolumeRequest_Param* param);
  private:
  const ::grpc_cli::CreateVolumeRequest_Param& _internal_param() const;
  ::grpc_cli::CreateVolumeRequest_Param* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::grpc_cli::CreateVolumeRequest_Param* param);
  ::grpc_cli::CreateVolumeRequest_Param* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:grpc_cli.CreateVolumeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  ::grpc_cli::CreateVolumeRequest_Param* param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class CreateVolumeResponse_Result_CreateVolumeData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.CreateVolumeResponse.Result.CreateVolumeData) */ {
 public:
  inline CreateVolumeResponse_Result_CreateVolumeData() : CreateVolumeResponse_Result_CreateVolumeData(nullptr) {}
  virtual ~CreateVolumeResponse_Result_CreateVolumeData();
  explicit constexpr CreateVolumeResponse_Result_CreateVolumeData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateVolumeResponse_Result_CreateVolumeData(const CreateVolumeResponse_Result_CreateVolumeData& from);
  CreateVolumeResponse_Result_CreateVolumeData(CreateVolumeResponse_Result_CreateVolumeData&& from) noexcept
    : CreateVolumeResponse_Result_CreateVolumeData() {
    *this = ::std::move(from);
  }

  inline CreateVolumeResponse_Result_CreateVolumeData& operator=(const CreateVolumeResponse_Result_CreateVolumeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateVolumeResponse_Result_CreateVolumeData& operator=(CreateVolumeResponse_Result_CreateVolumeData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateVolumeResponse_Result_CreateVolumeData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateVolumeResponse_Result_CreateVolumeData* internal_default_instance() {
    return reinterpret_cast<const CreateVolumeResponse_Result_CreateVolumeData*>(
               &_CreateVolumeResponse_Result_CreateVolumeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    181;

  friend void swap(CreateVolumeResponse_Result_CreateVolumeData& a, CreateVolumeResponse_Result_CreateVolumeData& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateVolumeResponse_Result_CreateVolumeData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateVolumeResponse_Result_CreateVolumeData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateVolumeResponse_Result_CreateVolumeData* New() const final {
    return CreateMaybeMessage<CreateVolumeResponse_Result_CreateVolumeData>(nullptr);
  }

  CreateVolumeResponse_Result_CreateVolumeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateVolumeResponse_Result_CreateVolumeData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateVolumeResponse_Result_CreateVolumeData& from);
  void MergeFrom(const CreateVolumeResponse_Result_CreateVolumeData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateVolumeResponse_Result_CreateVolumeData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.CreateVolumeResponse.Result.CreateVolumeData";
  }
  protected:
  explicit CreateVolumeResponse_Result_CreateVolumeData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetAddressFieldNumber = 1,
  };
  // string targetAddress = 1;
  void clear_targetaddress();
  const std::string& targetaddress() const;
  void set_targetaddress(const std::string& value);
  void set_targetaddress(std::string&& value);
  void set_targetaddress(const char* value);
  void set_targetaddress(const char* value, size_t size);
  std::string* mutable_targetaddress();
  std::string* release_targetaddress();
  void set_allocated_targetaddress(std::string* targetaddress);
  private:
  const std::string& _internal_targetaddress() const;
  void _internal_set_targetaddress(const std::string& value);
  std::string* _internal_mutable_targetaddress();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.CreateVolumeResponse.Result.CreateVolumeData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr targetaddress_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class CreateVolumeResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.CreateVolumeResponse.Result) */ {
 public:
  inline CreateVolumeResponse_Result() : CreateVolumeResponse_Result(nullptr) {}
  virtual ~CreateVolumeResponse_Result();
  explicit constexpr CreateVolumeResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateVolumeResponse_Result(const CreateVolumeResponse_Result& from);
  CreateVolumeResponse_Result(CreateVolumeResponse_Result&& from) noexcept
    : CreateVolumeResponse_Result() {
    *this = ::std::move(from);
  }

  inline CreateVolumeResponse_Result& operator=(const CreateVolumeResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateVolumeResponse_Result& operator=(CreateVolumeResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateVolumeResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateVolumeResponse_Result* internal_default_instance() {
    return reinterpret_cast<const CreateVolumeResponse_Result*>(
               &_CreateVolumeResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    182;

  friend void swap(CreateVolumeResponse_Result& a, CreateVolumeResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateVolumeResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateVolumeResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateVolumeResponse_Result* New() const final {
    return CreateMaybeMessage<CreateVolumeResponse_Result>(nullptr);
  }

  CreateVolumeResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateVolumeResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateVolumeResponse_Result& from);
  void MergeFrom(const CreateVolumeResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateVolumeResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.CreateVolumeResponse.Result";
  }
  protected:
  explicit CreateVolumeResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CreateVolumeResponse_Result_CreateVolumeData CreateVolumeData;

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // .grpc_cli.CreateVolumeResponse.Result.CreateVolumeData data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::grpc_cli::CreateVolumeResponse_Result_CreateVolumeData& data() const;
  ::grpc_cli::CreateVolumeResponse_Result_CreateVolumeData* release_data();
  ::grpc_cli::CreateVolumeResponse_Result_CreateVolumeData* mutable_data();
  void set_allocated_data(::grpc_cli::CreateVolumeResponse_Result_CreateVolumeData* data);
  private:
  const ::grpc_cli::CreateVolumeResponse_Result_CreateVolumeData& _internal_data() const;
  ::grpc_cli::CreateVolumeResponse_Result_CreateVolumeData* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::grpc_cli::CreateVolumeResponse_Result_CreateVolumeData* data);
  ::grpc_cli::CreateVolumeResponse_Result_CreateVolumeData* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:grpc_cli.CreateVolumeResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  ::grpc_cli::CreateVolumeResponse_Result_CreateVolumeData* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class CreateVolumeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.CreateVolumeResponse) */ {
 public:
  inline CreateVolumeResponse() : CreateVolumeResponse(nullptr) {}
  virtual ~CreateVolumeResponse();
  explicit constexpr CreateVolumeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateVolumeResponse(const CreateVolumeResponse& from);
  CreateVolumeResponse(CreateVolumeResponse&& from) noexcept
    : CreateVolumeResponse() {
    *this = ::std::move(from);
  }

  inline CreateVolumeResponse& operator=(const CreateVolumeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateVolumeResponse& operator=(CreateVolumeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateVolumeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateVolumeResponse* internal_default_instance() {
    return reinterpret_cast<const CreateVolumeResponse*>(
               &_CreateVolumeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    183;

  friend void swap(CreateVolumeResponse& a, CreateVolumeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateVolumeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateVolumeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateVolumeResponse* New() const final {
    return CreateMaybeMessage<CreateVolumeResponse>(nullptr);
  }

  CreateVolumeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateVolumeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateVolumeResponse& from);
  void MergeFrom(const CreateVolumeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateVolumeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.CreateVolumeResponse";
  }
  protected:
  explicit CreateVolumeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CreateVolumeResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.CreateVolumeResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::CreateVolumeResponse_Result& result() const;
  ::grpc_cli::CreateVolumeResponse_Result* release_result();
  ::grpc_cli::CreateVolumeResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::CreateVolumeResponse_Result* result);
  private:
  const ::grpc_cli::CreateVolumeResponse_Result& _internal_result() const;
  ::grpc_cli::CreateVolumeResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::CreateVolumeResponse_Result* result);
  ::grpc_cli::CreateVolumeResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.CreateVolumeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::CreateVolumeResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class DeleteVolumeRequest_Param PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.DeleteVolumeRequest.Param) */ {
 public:
  inline DeleteVolumeRequest_Param() : DeleteVolumeRequest_Param(nullptr) {}
  virtual ~DeleteVolumeRequest_Param();
  explicit constexpr DeleteVolumeRequest_Param(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteVolumeRequest_Param(const DeleteVolumeRequest_Param& from);
  DeleteVolumeRequest_Param(DeleteVolumeRequest_Param&& from) noexcept
    : DeleteVolumeRequest_Param() {
    *this = ::std::move(from);
  }

  inline DeleteVolumeRequest_Param& operator=(const DeleteVolumeRequest_Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteVolumeRequest_Param& operator=(DeleteVolumeRequest_Param&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteVolumeRequest_Param& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteVolumeRequest_Param* internal_default_instance() {
    return reinterpret_cast<const DeleteVolumeRequest_Param*>(
               &_DeleteVolumeRequest_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    184;

  friend void swap(DeleteVolumeRequest_Param& a, DeleteVolumeRequest_Param& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteVolumeRequest_Param* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteVolumeRequest_Param* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteVolumeRequest_Param* New() const final {
    return CreateMaybeMessage<DeleteVolumeRequest_Param>(nullptr);
  }

  DeleteVolumeRequest_Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteVolumeRequest_Param>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteVolumeRequest_Param& from);
  void MergeFrom(const DeleteVolumeRequest_Param& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteVolumeRequest_Param* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.DeleteVolumeRequest.Param";
  }
  protected:
  explicit DeleteVolumeRequest_Param(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kArrayFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string array = 2;
  void clear_array();
  const std::string& array() const;
  void set_array(const std::string& value);
  void set_array(std::string&& value);
  void set_array(const char* value);
  void set_array(const char* value, size_t size);
  std::string* mutable_array();
  std::string* release_array();
  void set_allocated_array(std::string* array);
  private:
  const std::string& _internal_array() const;
  void _internal_set_array(const std::string& value);
  std::string* _internal_mutable_array();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.DeleteVolumeRequest.Param)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr array_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class DeleteVolumeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.DeleteVolumeRequest) */ {
 public:
  inline DeleteVolumeRequest() : DeleteVolumeRequest(nullptr) {}
  virtual ~DeleteVolumeRequest();
  explicit constexpr DeleteVolumeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteVolumeRequest(const DeleteVolumeRequest& from);
  DeleteVolumeRequest(DeleteVolumeRequest&& from) noexcept
    : DeleteVolumeRequest() {
    *this = ::std::move(from);
  }

  inline DeleteVolumeRequest& operator=(const DeleteVolumeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteVolumeRequest& operator=(DeleteVolumeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteVolumeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteVolumeRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteVolumeRequest*>(
               &_DeleteVolumeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    185;

  friend void swap(DeleteVolumeRequest& a, DeleteVolumeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteVolumeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteVolumeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteVolumeRequest* New() const final {
    return CreateMaybeMessage<DeleteVolumeRequest>(nullptr);
  }

  DeleteVolumeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteVolumeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteVolumeRequest& from);
  void MergeFrom(const DeleteVolumeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteVolumeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.DeleteVolumeRequest";
  }
  protected:
  explicit DeleteVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef DeleteVolumeRequest_Param Param;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
    kParamFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // .grpc_cli.DeleteVolumeRequest.Param param = 4;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::grpc_cli::DeleteVolumeRequest_Param& param() const;
  ::grpc_cli::DeleteVolumeRequest_Param* release_param();
  ::grpc_cli::DeleteVolumeRequest_Param* mutable_param();
  void set_allocated_param(::grpc_cli::DeleteVolumeRequest_Param* param);
  private:
  const ::grpc_cli::DeleteVolumeRequest_Param& _internal_param() const;
  ::grpc_cli::DeleteVolumeRequest_Param* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::grpc_cli::DeleteVolumeRequest_Param* param);
  ::grpc_cli::DeleteVolumeRequest_Param* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:grpc_cli.DeleteVolumeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  ::grpc_cli::DeleteVolumeRequest_Param* param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class DeleteVolumeResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.DeleteVolumeResponse.Result) */ {
 public:
  inline DeleteVolumeResponse_Result() : DeleteVolumeResponse_Result(nullptr) {}
  virtual ~DeleteVolumeResponse_Result();
  explicit constexpr DeleteVolumeResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteVolumeResponse_Result(const DeleteVolumeResponse_Result& from);
  DeleteVolumeResponse_Result(DeleteVolumeResponse_Result&& from) noexcept
    : DeleteVolumeResponse_Result() {
    *this = ::std::move(from);
  }

  inline DeleteVolumeResponse_Result& operator=(const DeleteVolumeResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteVolumeResponse_Result& operator=(DeleteVolumeResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteVolumeResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteVolumeResponse_Result* internal_default_instance() {
    return reinterpret_cast<const DeleteVolumeResponse_Result*>(
               &_DeleteVolumeResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    186;

  friend void swap(DeleteVolumeResponse_Result& a, DeleteVolumeResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteVolumeResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteVolumeResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteVolumeResponse_Result* New() const final {
    return CreateMaybeMessage<DeleteVolumeResponse_Result>(nullptr);
  }

  DeleteVolumeResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteVolumeResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteVolumeResponse_Result& from);
  void MergeFrom(const DeleteVolumeResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteVolumeResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.DeleteVolumeResponse.Result";
  }
  protected:
  explicit DeleteVolumeResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:grpc_cli.DeleteVolumeResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class DeleteVolumeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.DeleteVolumeResponse) */ {
 public:
  inline DeleteVolumeResponse() : DeleteVolumeResponse(nullptr) {}
  virtual ~DeleteVolumeResponse();
  explicit constexpr DeleteVolumeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteVolumeResponse(const DeleteVolumeResponse& from);
  DeleteVolumeResponse(DeleteVolumeResponse&& from) noexcept
    : DeleteVolumeResponse() {
    *this = ::std::move(from);
  }

  inline DeleteVolumeResponse& operator=(const DeleteVolumeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteVolumeResponse& operator=(DeleteVolumeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteVolumeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteVolumeResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteVolumeResponse*>(
               &_DeleteVolumeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    187;

  friend void swap(DeleteVolumeResponse& a, DeleteVolumeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteVolumeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteVolumeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteVolumeResponse* New() const final {
    return CreateMaybeMessage<DeleteVolumeResponse>(nullptr);
  }

  DeleteVolumeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteVolumeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteVolumeResponse& from);
  void MergeFrom(const DeleteVolumeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteVolumeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.DeleteVolumeResponse";
  }
  protected:
  explicit DeleteVolumeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef DeleteVolumeResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.DeleteVolumeResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::DeleteVolumeResponse_Result& result() const;
  ::grpc_cli::DeleteVolumeResponse_Result* release_result();
  ::grpc_cli::DeleteVolumeResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::DeleteVolumeResponse_Result* result);
  private:
  const ::grpc_cli::DeleteVolumeResponse_Result& _internal_result() const;
  ::grpc_cli::DeleteVolumeResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::DeleteVolumeResponse_Result* result);
  ::grpc_cli::DeleteVolumeResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.DeleteVolumeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::DeleteVolumeResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class UnmountVolumeRequest_Param PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.UnmountVolumeRequest.Param) */ {
 public:
  inline UnmountVolumeRequest_Param() : UnmountVolumeRequest_Param(nullptr) {}
  virtual ~UnmountVolumeRequest_Param();
  explicit constexpr UnmountVolumeRequest_Param(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnmountVolumeRequest_Param(const UnmountVolumeRequest_Param& from);
  UnmountVolumeRequest_Param(UnmountVolumeRequest_Param&& from) noexcept
    : UnmountVolumeRequest_Param() {
    *this = ::std::move(from);
  }

  inline UnmountVolumeRequest_Param& operator=(const UnmountVolumeRequest_Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnmountVolumeRequest_Param& operator=(UnmountVolumeRequest_Param&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnmountVolumeRequest_Param& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnmountVolumeRequest_Param* internal_default_instance() {
    return reinterpret_cast<const UnmountVolumeRequest_Param*>(
               &_UnmountVolumeRequest_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    188;

  friend void swap(UnmountVolumeRequest_Param& a, UnmountVolumeRequest_Param& b) {
    a.Swap(&b);
  }
  inline void Swap(UnmountVolumeRequest_Param* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnmountVolumeRequest_Param* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnmountVolumeRequest_Param* New() const final {
    return CreateMaybeMessage<UnmountVolumeRequest_Param>(nullptr);
  }

  UnmountVolumeRequest_Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnmountVolumeRequest_Param>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnmountVolumeRequest_Param& from);
  void MergeFrom(const UnmountVolumeRequest_Param& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnmountVolumeRequest_Param* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.UnmountVolumeRequest.Param";
  }
  protected:
  explicit UnmountVolumeRequest_Param(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kArrayFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string array = 2;
  void clear_array();
  const std::string& array() const;
  void set_array(const std::string& value);
  void set_array(std::string&& value);
  void set_array(const char* value);
  void set_array(const char* value, size_t size);
  std::string* mutable_array();
  std::string* release_array();
  void set_allocated_array(std::string* array);
  private:
  const std::string& _internal_array() const;
  void _internal_set_array(const std::string& value);
  std::string* _internal_mutable_array();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.UnmountVolumeRequest.Param)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr array_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class UnmountVolumeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.UnmountVolumeRequest) */ {
 public:
  inline UnmountVolumeRequest() : UnmountVolumeRequest(nullptr) {}
  virtual ~UnmountVolumeRequest();
  explicit constexpr UnmountVolumeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnmountVolumeRequest(const UnmountVolumeRequest& from);
  UnmountVolumeRequest(UnmountVolumeRequest&& from) noexcept
    : UnmountVolumeRequest() {
    *this = ::std::move(from);
  }

  inline UnmountVolumeRequest& operator=(const UnmountVolumeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnmountVolumeRequest& operator=(UnmountVolumeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnmountVolumeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnmountVolumeRequest* internal_default_instance() {
    return reinterpret_cast<const UnmountVolumeRequest*>(
               &_UnmountVolumeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    189;

  friend void swap(UnmountVolumeRequest& a, UnmountVolumeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UnmountVolumeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnmountVolumeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnmountVolumeRequest* New() const final {
    return CreateMaybeMessage<UnmountVolumeRequest>(nullptr);
  }

  UnmountVolumeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnmountVolumeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnmountVolumeRequest& from);
  void MergeFrom(const UnmountVolumeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnmountVolumeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.UnmountVolumeRequest";
  }
  protected:
  explicit UnmountVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef UnmountVolumeRequest_Param Param;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
    kParamFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // .grpc_cli.UnmountVolumeRequest.Param param = 4;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::grpc_cli::UnmountVolumeRequest_Param& param() const;
  ::grpc_cli::UnmountVolumeRequest_Param* release_param();
  ::grpc_cli::UnmountVolumeRequest_Param* mutable_param();
  void set_allocated_param(::grpc_cli::UnmountVolumeRequest_Param* param);
  private:
  const ::grpc_cli::UnmountVolumeRequest_Param& _internal_param() const;
  ::grpc_cli::UnmountVolumeRequest_Param* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::grpc_cli::UnmountVolumeRequest_Param* param);
  ::grpc_cli::UnmountVolumeRequest_Param* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:grpc_cli.UnmountVolumeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  ::grpc_cli::UnmountVolumeRequest_Param* param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class UnmountVolumeResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.UnmountVolumeResponse.Result) */ {
 public:
  inline UnmountVolumeResponse_Result() : UnmountVolumeResponse_Result(nullptr) {}
  virtual ~UnmountVolumeResponse_Result();
  explicit constexpr UnmountVolumeResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnmountVolumeResponse_Result(const UnmountVolumeResponse_Result& from);
  UnmountVolumeResponse_Result(UnmountVolumeResponse_Result&& from) noexcept
    : UnmountVolumeResponse_Result() {
    *this = ::std::move(from);
  }

  inline UnmountVolumeResponse_Result& operator=(const UnmountVolumeResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnmountVolumeResponse_Result& operator=(UnmountVolumeResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnmountVolumeResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnmountVolumeResponse_Result* internal_default_instance() {
    return reinterpret_cast<const UnmountVolumeResponse_Result*>(
               &_UnmountVolumeResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    190;

  friend void swap(UnmountVolumeResponse_Result& a, UnmountVolumeResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(UnmountVolumeResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnmountVolumeResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnmountVolumeResponse_Result* New() const final {
    return CreateMaybeMessage<UnmountVolumeResponse_Result>(nullptr);
  }

  UnmountVolumeResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnmountVolumeResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnmountVolumeResponse_Result& from);
  void MergeFrom(const UnmountVolumeResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnmountVolumeResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.UnmountVolumeResponse.Result";
  }
  protected:
  explicit UnmountVolumeResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:grpc_cli.UnmountVolumeResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class UnmountVolumeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.UnmountVolumeResponse) */ {
 public:
  inline UnmountVolumeResponse() : UnmountVolumeResponse(nullptr) {}
  virtual ~UnmountVolumeResponse();
  explicit constexpr UnmountVolumeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnmountVolumeResponse(const UnmountVolumeResponse& from);
  UnmountVolumeResponse(UnmountVolumeResponse&& from) noexcept
    : UnmountVolumeResponse() {
    *this = ::std::move(from);
  }

  inline UnmountVolumeResponse& operator=(const UnmountVolumeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnmountVolumeResponse& operator=(UnmountVolumeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnmountVolumeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnmountVolumeResponse* internal_default_instance() {
    return reinterpret_cast<const UnmountVolumeResponse*>(
               &_UnmountVolumeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    191;

  friend void swap(UnmountVolumeResponse& a, UnmountVolumeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UnmountVolumeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnmountVolumeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnmountVolumeResponse* New() const final {
    return CreateMaybeMessage<UnmountVolumeResponse>(nullptr);
  }

  UnmountVolumeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnmountVolumeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnmountVolumeResponse& from);
  void MergeFrom(const UnmountVolumeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnmountVolumeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.UnmountVolumeResponse";
  }
  protected:
  explicit UnmountVolumeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef UnmountVolumeResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.UnmountVolumeResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::UnmountVolumeResponse_Result& result() const;
  ::grpc_cli::UnmountVolumeResponse_Result* release_result();
  ::grpc_cli::UnmountVolumeResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::UnmountVolumeResponse_Result* result);
  private:
  const ::grpc_cli::UnmountVolumeResponse_Result& _internal_result() const;
  ::grpc_cli::UnmountVolumeResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::UnmountVolumeResponse_Result* result);
  ::grpc_cli::UnmountVolumeResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.UnmountVolumeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::UnmountVolumeResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class MountVolumeRequest_Param PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.MountVolumeRequest.Param) */ {
 public:
  inline MountVolumeRequest_Param() : MountVolumeRequest_Param(nullptr) {}
  virtual ~MountVolumeRequest_Param();
  explicit constexpr MountVolumeRequest_Param(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MountVolumeRequest_Param(const MountVolumeRequest_Param& from);
  MountVolumeRequest_Param(MountVolumeRequest_Param&& from) noexcept
    : MountVolumeRequest_Param() {
    *this = ::std::move(from);
  }

  inline MountVolumeRequest_Param& operator=(const MountVolumeRequest_Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline MountVolumeRequest_Param& operator=(MountVolumeRequest_Param&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MountVolumeRequest_Param& default_instance() {
    return *internal_default_instance();
  }
  static inline const MountVolumeRequest_Param* internal_default_instance() {
    return reinterpret_cast<const MountVolumeRequest_Param*>(
               &_MountVolumeRequest_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    192;

  friend void swap(MountVolumeRequest_Param& a, MountVolumeRequest_Param& b) {
    a.Swap(&b);
  }
  inline void Swap(MountVolumeRequest_Param* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MountVolumeRequest_Param* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MountVolumeRequest_Param* New() const final {
    return CreateMaybeMessage<MountVolumeRequest_Param>(nullptr);
  }

  MountVolumeRequest_Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MountVolumeRequest_Param>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MountVolumeRequest_Param& from);
  void MergeFrom(const MountVolumeRequest_Param& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MountVolumeRequest_Param* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.MountVolumeRequest.Param";
  }
  protected:
  explicit MountVolumeRequest_Param(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSubnqnFieldNumber = 2,
    kArrayFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string subnqn = 2;
  void clear_subnqn();
  const std::string& subnqn() const;
  void set_subnqn(const std::string& value);
  void set_subnqn(std::string&& value);
  void set_subnqn(const char* value);
  void set_subnqn(const char* value, size_t size);
  std::string* mutable_subnqn();
  std::string* release_subnqn();
  void set_allocated_subnqn(std::string* subnqn);
  private:
  const std::string& _internal_subnqn() const;
  void _internal_set_subnqn(const std::string& value);
  std::string* _internal_mutable_subnqn();
  public:

  // string array = 3;
  void clear_array();
  const std::string& array() const;
  void set_array(const std::string& value);
  void set_array(std::string&& value);
  void set_array(const char* value);
  void set_array(const char* value, size_t size);
  std::string* mutable_array();
  std::string* release_array();
  void set_allocated_array(std::string* array);
  private:
  const std::string& _internal_array() const;
  void _internal_set_array(const std::string& value);
  std::string* _internal_mutable_array();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.MountVolumeRequest.Param)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subnqn_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr array_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class MountVolumeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.MountVolumeRequest) */ {
 public:
  inline MountVolumeRequest() : MountVolumeRequest(nullptr) {}
  virtual ~MountVolumeRequest();
  explicit constexpr MountVolumeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MountVolumeRequest(const MountVolumeRequest& from);
  MountVolumeRequest(MountVolumeRequest&& from) noexcept
    : MountVolumeRequest() {
    *this = ::std::move(from);
  }

  inline MountVolumeRequest& operator=(const MountVolumeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MountVolumeRequest& operator=(MountVolumeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MountVolumeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MountVolumeRequest* internal_default_instance() {
    return reinterpret_cast<const MountVolumeRequest*>(
               &_MountVolumeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    193;

  friend void swap(MountVolumeRequest& a, MountVolumeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MountVolumeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MountVolumeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MountVolumeRequest* New() const final {
    return CreateMaybeMessage<MountVolumeRequest>(nullptr);
  }

  MountVolumeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MountVolumeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MountVolumeRequest& from);
  void MergeFrom(const MountVolumeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MountVolumeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.MountVolumeRequest";
  }
  protected:
  explicit MountVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef MountVolumeRequest_Param Param;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
    kParamFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // .grpc_cli.MountVolumeRequest.Param param = 4;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::grpc_cli::MountVolumeRequest_Param& param() const;
  ::grpc_cli::MountVolumeRequest_Param* release_param();
  ::grpc_cli::MountVolumeRequest_Param* mutable_param();
  void set_allocated_param(::grpc_cli::MountVolumeRequest_Param* param);
  private:
  const ::grpc_cli::MountVolumeRequest_Param& _internal_param() const;
  ::grpc_cli::MountVolumeRequest_Param* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::grpc_cli::MountVolumeRequest_Param* param);
  ::grpc_cli::MountVolumeRequest_Param* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:grpc_cli.MountVolumeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  ::grpc_cli::MountVolumeRequest_Param* param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class MountVolumeResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.MountVolumeResponse.Result) */ {
 public:
  inline MountVolumeResponse_Result() : MountVolumeResponse_Result(nullptr) {}
  virtual ~MountVolumeResponse_Result();
  explicit constexpr MountVolumeResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MountVolumeResponse_Result(const MountVolumeResponse_Result& from);
  MountVolumeResponse_Result(MountVolumeResponse_Result&& from) noexcept
    : MountVolumeResponse_Result() {
    *this = ::std::move(from);
  }

  inline MountVolumeResponse_Result& operator=(const MountVolumeResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline MountVolumeResponse_Result& operator=(MountVolumeResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MountVolumeResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const MountVolumeResponse_Result* internal_default_instance() {
    return reinterpret_cast<const MountVolumeResponse_Result*>(
               &_MountVolumeResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    194;

  friend void swap(MountVolumeResponse_Result& a, MountVolumeResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(MountVolumeResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MountVolumeResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MountVolumeResponse_Result* New() const final {
    return CreateMaybeMessage<MountVolumeResponse_Result>(nullptr);
  }

  MountVolumeResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MountVolumeResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MountVolumeResponse_Result& from);
  void MergeFrom(const MountVolumeResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MountVolumeResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.MountVolumeResponse.Result";
  }
  protected:
  explicit MountVolumeResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:grpc_cli.MountVolumeResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class MountVolumeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.MountVolumeResponse) */ {
 public:
  inline MountVolumeResponse() : MountVolumeResponse(nullptr) {}
  virtual ~MountVolumeResponse();
  explicit constexpr MountVolumeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MountVolumeResponse(const MountVolumeResponse& from);
  MountVolumeResponse(MountVolumeResponse&& from) noexcept
    : MountVolumeResponse() {
    *this = ::std::move(from);
  }

  inline MountVolumeResponse& operator=(const MountVolumeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MountVolumeResponse& operator=(MountVolumeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MountVolumeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MountVolumeResponse* internal_default_instance() {
    return reinterpret_cast<const MountVolumeResponse*>(
               &_MountVolumeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    195;

  friend void swap(MountVolumeResponse& a, MountVolumeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MountVolumeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MountVolumeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MountVolumeResponse* New() const final {
    return CreateMaybeMessage<MountVolumeResponse>(nullptr);
  }

  MountVolumeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MountVolumeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MountVolumeResponse& from);
  void MergeFrom(const MountVolumeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MountVolumeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.MountVolumeResponse";
  }
  protected:
  explicit MountVolumeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef MountVolumeResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.MountVolumeResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::MountVolumeResponse_Result& result() const;
  ::grpc_cli::MountVolumeResponse_Result* release_result();
  ::grpc_cli::MountVolumeResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::MountVolumeResponse_Result* result);
  private:
  const ::grpc_cli::MountVolumeResponse_Result& _internal_result() const;
  ::grpc_cli::MountVolumeResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::MountVolumeResponse_Result* result);
  ::grpc_cli::MountVolumeResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.MountVolumeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::MountVolumeResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class SetVolumePropertyRequest_Param PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.SetVolumePropertyRequest.Param) */ {
 public:
  inline SetVolumePropertyRequest_Param() : SetVolumePropertyRequest_Param(nullptr) {}
  virtual ~SetVolumePropertyRequest_Param();
  explicit constexpr SetVolumePropertyRequest_Param(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetVolumePropertyRequest_Param(const SetVolumePropertyRequest_Param& from);
  SetVolumePropertyRequest_Param(SetVolumePropertyRequest_Param&& from) noexcept
    : SetVolumePropertyRequest_Param() {
    *this = ::std::move(from);
  }

  inline SetVolumePropertyRequest_Param& operator=(const SetVolumePropertyRequest_Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetVolumePropertyRequest_Param& operator=(SetVolumePropertyRequest_Param&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetVolumePropertyRequest_Param& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetVolumePropertyRequest_Param* internal_default_instance() {
    return reinterpret_cast<const SetVolumePropertyRequest_Param*>(
               &_SetVolumePropertyRequest_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    196;

  friend void swap(SetVolumePropertyRequest_Param& a, SetVolumePropertyRequest_Param& b) {
    a.Swap(&b);
  }
  inline void Swap(SetVolumePropertyRequest_Param* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetVolumePropertyRequest_Param* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetVolumePropertyRequest_Param* New() const final {
    return CreateMaybeMessage<SetVolumePropertyRequest_Param>(nullptr);
  }

  SetVolumePropertyRequest_Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetVolumePropertyRequest_Param>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetVolumePropertyRequest_Param& from);
  void MergeFrom(const SetVolumePropertyRequest_Param& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetVolumePropertyRequest_Param* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.SetVolumePropertyRequest.Param";
  }
  protected:
  explicit SetVolumePropertyRequest_Param(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kArrayFieldNumber = 2,
    kNewVolumeNameFieldNumber = 3,
    kSizeFieldNumber = 4,
    kMaxiopsFieldNumber = 5,
    kMaxbwFieldNumber = 6,
    kUpdateprimaryvolFieldNumber = 7,
    kIsprimaryvolFieldNumber = 8,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string array = 2;
  void clear_array();
  const std::string& array() const;
  void set_array(const std::string& value);
  void set_array(std::string&& value);
  void set_array(const char* value);
  void set_array(const char* value, size_t size);
  std::string* mutable_array();
  std::string* release_array();
  void set_allocated_array(std::string* array);
  private:
  const std::string& _internal_array() const;
  void _internal_set_array(const std::string& value);
  std::string* _internal_mutable_array();
  public:

  // string newVolumeName = 3;
  void clear_newvolumename();
  const std::string& newvolumename() const;
  void set_newvolumename(const std::string& value);
  void set_newvolumename(std::string&& value);
  void set_newvolumename(const char* value);
  void set_newvolumename(const char* value, size_t size);
  std::string* mutable_newvolumename();
  std::string* release_newvolumename();
  void set_allocated_newvolumename(std::string* newvolumename);
  private:
  const std::string& _internal_newvolumename() const;
  void _internal_set_newvolumename(const std::string& value);
  std::string* _internal_mutable_newvolumename();
  public:

  // uint64 size = 4;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 maxiops = 5;
  void clear_maxiops();
  ::PROTOBUF_NAMESPACE_ID::uint64 maxiops() const;
  void set_maxiops(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_maxiops() const;
  void _internal_set_maxiops(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 maxbw = 6;
  void clear_maxbw();
  ::PROTOBUF_NAMESPACE_ID::uint64 maxbw() const;
  void set_maxbw(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_maxbw() const;
  void _internal_set_maxbw(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool updateprimaryvol = 7;
  void clear_updateprimaryvol();
  bool updateprimaryvol() const;
  void set_updateprimaryvol(bool value);
  private:
  bool _internal_updateprimaryvol() const;
  void _internal_set_updateprimaryvol(bool value);
  public:

  // bool isprimaryvol = 8;
  void clear_isprimaryvol();
  bool isprimaryvol() const;
  void set_isprimaryvol(bool value);
  private:
  bool _internal_isprimaryvol() const;
  void _internal_set_isprimaryvol(bool value);
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.SetVolumePropertyRequest.Param)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr array_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr newvolumename_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 maxiops_;
  ::PROTOBUF_NAMESPACE_ID::uint64 maxbw_;
  bool updateprimaryvol_;
  bool isprimaryvol_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class SetVolumePropertyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.SetVolumePropertyRequest) */ {
 public:
  inline SetVolumePropertyRequest() : SetVolumePropertyRequest(nullptr) {}
  virtual ~SetVolumePropertyRequest();
  explicit constexpr SetVolumePropertyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetVolumePropertyRequest(const SetVolumePropertyRequest& from);
  SetVolumePropertyRequest(SetVolumePropertyRequest&& from) noexcept
    : SetVolumePropertyRequest() {
    *this = ::std::move(from);
  }

  inline SetVolumePropertyRequest& operator=(const SetVolumePropertyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetVolumePropertyRequest& operator=(SetVolumePropertyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetVolumePropertyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetVolumePropertyRequest* internal_default_instance() {
    return reinterpret_cast<const SetVolumePropertyRequest*>(
               &_SetVolumePropertyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    197;

  friend void swap(SetVolumePropertyRequest& a, SetVolumePropertyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetVolumePropertyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetVolumePropertyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetVolumePropertyRequest* New() const final {
    return CreateMaybeMessage<SetVolumePropertyRequest>(nullptr);
  }

  SetVolumePropertyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetVolumePropertyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetVolumePropertyRequest& from);
  void MergeFrom(const SetVolumePropertyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetVolumePropertyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.SetVolumePropertyRequest";
  }
  protected:
  explicit SetVolumePropertyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef SetVolumePropertyRequest_Param Param;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
    kParamFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // .grpc_cli.SetVolumePropertyRequest.Param param = 4;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::grpc_cli::SetVolumePropertyRequest_Param& param() const;
  ::grpc_cli::SetVolumePropertyRequest_Param* release_param();
  ::grpc_cli::SetVolumePropertyRequest_Param* mutable_param();
  void set_allocated_param(::grpc_cli::SetVolumePropertyRequest_Param* param);
  private:
  const ::grpc_cli::SetVolumePropertyRequest_Param& _internal_param() const;
  ::grpc_cli::SetVolumePropertyRequest_Param* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::grpc_cli::SetVolumePropertyRequest_Param* param);
  ::grpc_cli::SetVolumePropertyRequest_Param* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:grpc_cli.SetVolumePropertyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  ::grpc_cli::SetVolumePropertyRequest_Param* param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class SetVolumePropertyResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.SetVolumePropertyResponse.Result) */ {
 public:
  inline SetVolumePropertyResponse_Result() : SetVolumePropertyResponse_Result(nullptr) {}
  virtual ~SetVolumePropertyResponse_Result();
  explicit constexpr SetVolumePropertyResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetVolumePropertyResponse_Result(const SetVolumePropertyResponse_Result& from);
  SetVolumePropertyResponse_Result(SetVolumePropertyResponse_Result&& from) noexcept
    : SetVolumePropertyResponse_Result() {
    *this = ::std::move(from);
  }

  inline SetVolumePropertyResponse_Result& operator=(const SetVolumePropertyResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetVolumePropertyResponse_Result& operator=(SetVolumePropertyResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetVolumePropertyResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetVolumePropertyResponse_Result* internal_default_instance() {
    return reinterpret_cast<const SetVolumePropertyResponse_Result*>(
               &_SetVolumePropertyResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    198;

  friend void swap(SetVolumePropertyResponse_Result& a, SetVolumePropertyResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(SetVolumePropertyResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetVolumePropertyResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetVolumePropertyResponse_Result* New() const final {
    return CreateMaybeMessage<SetVolumePropertyResponse_Result>(nullptr);
  }

  SetVolumePropertyResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetVolumePropertyResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetVolumePropertyResponse_Result& from);
  void MergeFrom(const SetVolumePropertyResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetVolumePropertyResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.SetVolumePropertyResponse.Result";
  }
  protected:
  explicit SetVolumePropertyResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:grpc_cli.SetVolumePropertyResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class SetVolumePropertyResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.SetVolumePropertyResponse) */ {
 public:
  inline SetVolumePropertyResponse() : SetVolumePropertyResponse(nullptr) {}
  virtual ~SetVolumePropertyResponse();
  explicit constexpr SetVolumePropertyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetVolumePropertyResponse(const SetVolumePropertyResponse& from);
  SetVolumePropertyResponse(SetVolumePropertyResponse&& from) noexcept
    : SetVolumePropertyResponse() {
    *this = ::std::move(from);
  }

  inline SetVolumePropertyResponse& operator=(const SetVolumePropertyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetVolumePropertyResponse& operator=(SetVolumePropertyResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetVolumePropertyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetVolumePropertyResponse* internal_default_instance() {
    return reinterpret_cast<const SetVolumePropertyResponse*>(
               &_SetVolumePropertyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    199;

  friend void swap(SetVolumePropertyResponse& a, SetVolumePropertyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetVolumePropertyResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetVolumePropertyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetVolumePropertyResponse* New() const final {
    return CreateMaybeMessage<SetVolumePropertyResponse>(nullptr);
  }

  SetVolumePropertyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetVolumePropertyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetVolumePropertyResponse& from);
  void MergeFrom(const SetVolumePropertyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetVolumePropertyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.SetVolumePropertyResponse";
  }
  protected:
  explicit SetVolumePropertyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef SetVolumePropertyResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.SetVolumePropertyResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::SetVolumePropertyResponse_Result& result() const;
  ::grpc_cli::SetVolumePropertyResponse_Result* release_result();
  ::grpc_cli::SetVolumePropertyResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::SetVolumePropertyResponse_Result* result);
  private:
  const ::grpc_cli::SetVolumePropertyResponse_Result& _internal_result() const;
  ::grpc_cli::SetVolumePropertyResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::SetVolumePropertyResponse_Result* result);
  ::grpc_cli::SetVolumePropertyResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.SetVolumePropertyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::SetVolumePropertyResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class Volume PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.Volume) */ {
 public:
  inline Volume() : Volume(nullptr) {}
  virtual ~Volume();
  explicit constexpr Volume(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Volume(const Volume& from);
  Volume(Volume&& from) noexcept
    : Volume() {
    *this = ::std::move(from);
  }

  inline Volume& operator=(const Volume& from) {
    CopyFrom(from);
    return *this;
  }
  inline Volume& operator=(Volume&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Volume& default_instance() {
    return *internal_default_instance();
  }
  static inline const Volume* internal_default_instance() {
    return reinterpret_cast<const Volume*>(
               &_Volume_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    200;

  friend void swap(Volume& a, Volume& b) {
    a.Swap(&b);
  }
  inline void Swap(Volume* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Volume* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Volume* New() const final {
    return CreateMaybeMessage<Volume>(nullptr);
  }

  Volume* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Volume>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Volume& from);
  void MergeFrom(const Volume& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Volume* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.Volume";
  }
  protected:
  explicit Volume(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kStatusFieldNumber = 5,
    kSubnqnFieldNumber = 10,
    kUuidFieldNumber = 11,
    kArraynameFieldNumber = 12,
    kTotalFieldNumber = 3,
    kRemainFieldNumber = 4,
    kMaxiopsFieldNumber = 6,
    kMaxbwFieldNumber = 7,
    kMiniopsFieldNumber = 8,
    kMinbwFieldNumber = 9,
    kIndexFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string status = 5;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // string subnqn = 10;
  void clear_subnqn();
  const std::string& subnqn() const;
  void set_subnqn(const std::string& value);
  void set_subnqn(std::string&& value);
  void set_subnqn(const char* value);
  void set_subnqn(const char* value, size_t size);
  std::string* mutable_subnqn();
  std::string* release_subnqn();
  void set_allocated_subnqn(std::string* subnqn);
  private:
  const std::string& _internal_subnqn() const;
  void _internal_set_subnqn(const std::string& value);
  std::string* _internal_mutable_subnqn();
  public:

  // string uuid = 11;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string arrayname = 12;
  void clear_arrayname();
  const std::string& arrayname() const;
  void set_arrayname(const std::string& value);
  void set_arrayname(std::string&& value);
  void set_arrayname(const char* value);
  void set_arrayname(const char* value, size_t size);
  std::string* mutable_arrayname();
  std::string* release_arrayname();
  void set_allocated_arrayname(std::string* arrayname);
  private:
  const std::string& _internal_arrayname() const;
  void _internal_set_arrayname(const std::string& value);
  std::string* _internal_mutable_arrayname();
  public:

  // uint64 total = 3;
  void clear_total();
  ::PROTOBUF_NAMESPACE_ID::uint64 total() const;
  void set_total(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_total() const;
  void _internal_set_total(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 remain = 4;
  void clear_remain();
  ::PROTOBUF_NAMESPACE_ID::uint64 remain() const;
  void set_remain(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_remain() const;
  void _internal_set_remain(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 maxiops = 6;
  void clear_maxiops();
  ::PROTOBUF_NAMESPACE_ID::uint64 maxiops() const;
  void set_maxiops(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_maxiops() const;
  void _internal_set_maxiops(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 maxbw = 7;
  void clear_maxbw();
  ::PROTOBUF_NAMESPACE_ID::uint64 maxbw() const;
  void set_maxbw(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_maxbw() const;
  void _internal_set_maxbw(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 miniops = 8;
  void clear_miniops();
  ::PROTOBUF_NAMESPACE_ID::uint64 miniops() const;
  void set_miniops(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_miniops() const;
  void _internal_set_miniops(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 minbw = 9;
  void clear_minbw();
  ::PROTOBUF_NAMESPACE_ID::uint64 minbw() const;
  void set_minbw(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_minbw() const;
  void _internal_set_minbw(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 index = 2;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.Volume)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subnqn_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr arrayname_;
  ::PROTOBUF_NAMESPACE_ID::uint64 total_;
  ::PROTOBUF_NAMESPACE_ID::uint64 remain_;
  ::PROTOBUF_NAMESPACE_ID::uint64 maxiops_;
  ::PROTOBUF_NAMESPACE_ID::uint64 maxbw_;
  ::PROTOBUF_NAMESPACE_ID::uint64 miniops_;
  ::PROTOBUF_NAMESPACE_ID::uint64 minbw_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ListVolumeRequest_Param PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ListVolumeRequest.Param) */ {
 public:
  inline ListVolumeRequest_Param() : ListVolumeRequest_Param(nullptr) {}
  virtual ~ListVolumeRequest_Param();
  explicit constexpr ListVolumeRequest_Param(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListVolumeRequest_Param(const ListVolumeRequest_Param& from);
  ListVolumeRequest_Param(ListVolumeRequest_Param&& from) noexcept
    : ListVolumeRequest_Param() {
    *this = ::std::move(from);
  }

  inline ListVolumeRequest_Param& operator=(const ListVolumeRequest_Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListVolumeRequest_Param& operator=(ListVolumeRequest_Param&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListVolumeRequest_Param& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListVolumeRequest_Param* internal_default_instance() {
    return reinterpret_cast<const ListVolumeRequest_Param*>(
               &_ListVolumeRequest_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    201;

  friend void swap(ListVolumeRequest_Param& a, ListVolumeRequest_Param& b) {
    a.Swap(&b);
  }
  inline void Swap(ListVolumeRequest_Param* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListVolumeRequest_Param* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListVolumeRequest_Param* New() const final {
    return CreateMaybeMessage<ListVolumeRequest_Param>(nullptr);
  }

  ListVolumeRequest_Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListVolumeRequest_Param>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListVolumeRequest_Param& from);
  void MergeFrom(const ListVolumeRequest_Param& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListVolumeRequest_Param* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ListVolumeRequest.Param";
  }
  protected:
  explicit ListVolumeRequest_Param(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrayFieldNumber = 1,
  };
  // string array = 1;
  void clear_array();
  const std::string& array() const;
  void set_array(const std::string& value);
  void set_array(std::string&& value);
  void set_array(const char* value);
  void set_array(const char* value, size_t size);
  std::string* mutable_array();
  std::string* release_array();
  void set_allocated_array(std::string* array);
  private:
  const std::string& _internal_array() const;
  void _internal_set_array(const std::string& value);
  std::string* _internal_mutable_array();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.ListVolumeRequest.Param)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr array_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ListVolumeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ListVolumeRequest) */ {
 public:
  inline ListVolumeRequest() : ListVolumeRequest(nullptr) {}
  virtual ~ListVolumeRequest();
  explicit constexpr ListVolumeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListVolumeRequest(const ListVolumeRequest& from);
  ListVolumeRequest(ListVolumeRequest&& from) noexcept
    : ListVolumeRequest() {
    *this = ::std::move(from);
  }

  inline ListVolumeRequest& operator=(const ListVolumeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListVolumeRequest& operator=(ListVolumeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListVolumeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListVolumeRequest* internal_default_instance() {
    return reinterpret_cast<const ListVolumeRequest*>(
               &_ListVolumeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    202;

  friend void swap(ListVolumeRequest& a, ListVolumeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListVolumeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListVolumeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListVolumeRequest* New() const final {
    return CreateMaybeMessage<ListVolumeRequest>(nullptr);
  }

  ListVolumeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListVolumeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListVolumeRequest& from);
  void MergeFrom(const ListVolumeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListVolumeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ListVolumeRequest";
  }
  protected:
  explicit ListVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ListVolumeRequest_Param Param;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
    kParamFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // .grpc_cli.ListVolumeRequest.Param param = 4;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::grpc_cli::ListVolumeRequest_Param& param() const;
  ::grpc_cli::ListVolumeRequest_Param* release_param();
  ::grpc_cli::ListVolumeRequest_Param* mutable_param();
  void set_allocated_param(::grpc_cli::ListVolumeRequest_Param* param);
  private:
  const ::grpc_cli::ListVolumeRequest_Param& _internal_param() const;
  ::grpc_cli::ListVolumeRequest_Param* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::grpc_cli::ListVolumeRequest_Param* param);
  ::grpc_cli::ListVolumeRequest_Param* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:grpc_cli.ListVolumeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  ::grpc_cli::ListVolumeRequest_Param* param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ListVolumeResponse_Result_VolumeList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ListVolumeResponse.Result.VolumeList) */ {
 public:
  inline ListVolumeResponse_Result_VolumeList() : ListVolumeResponse_Result_VolumeList(nullptr) {}
  virtual ~ListVolumeResponse_Result_VolumeList();
  explicit constexpr ListVolumeResponse_Result_VolumeList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListVolumeResponse_Result_VolumeList(const ListVolumeResponse_Result_VolumeList& from);
  ListVolumeResponse_Result_VolumeList(ListVolumeResponse_Result_VolumeList&& from) noexcept
    : ListVolumeResponse_Result_VolumeList() {
    *this = ::std::move(from);
  }

  inline ListVolumeResponse_Result_VolumeList& operator=(const ListVolumeResponse_Result_VolumeList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListVolumeResponse_Result_VolumeList& operator=(ListVolumeResponse_Result_VolumeList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListVolumeResponse_Result_VolumeList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListVolumeResponse_Result_VolumeList* internal_default_instance() {
    return reinterpret_cast<const ListVolumeResponse_Result_VolumeList*>(
               &_ListVolumeResponse_Result_VolumeList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    203;

  friend void swap(ListVolumeResponse_Result_VolumeList& a, ListVolumeResponse_Result_VolumeList& b) {
    a.Swap(&b);
  }
  inline void Swap(ListVolumeResponse_Result_VolumeList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListVolumeResponse_Result_VolumeList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListVolumeResponse_Result_VolumeList* New() const final {
    return CreateMaybeMessage<ListVolumeResponse_Result_VolumeList>(nullptr);
  }

  ListVolumeResponse_Result_VolumeList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListVolumeResponse_Result_VolumeList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListVolumeResponse_Result_VolumeList& from);
  void MergeFrom(const ListVolumeResponse_Result_VolumeList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListVolumeResponse_Result_VolumeList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ListVolumeResponse.Result.VolumeList";
  }
  protected:
  explicit ListVolumeResponse_Result_VolumeList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVolumesFieldNumber = 1,
  };
  // repeated .grpc_cli.Volume volumes = 1;
  int volumes_size() const;
  private:
  int _internal_volumes_size() const;
  public:
  void clear_volumes();
  ::grpc_cli::Volume* mutable_volumes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::Volume >*
      mutable_volumes();
  private:
  const ::grpc_cli::Volume& _internal_volumes(int index) const;
  ::grpc_cli::Volume* _internal_add_volumes();
  public:
  const ::grpc_cli::Volume& volumes(int index) const;
  ::grpc_cli::Volume* add_volumes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::Volume >&
      volumes() const;

  // @@protoc_insertion_point(class_scope:grpc_cli.ListVolumeResponse.Result.VolumeList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::Volume > volumes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ListVolumeResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ListVolumeResponse.Result) */ {
 public:
  inline ListVolumeResponse_Result() : ListVolumeResponse_Result(nullptr) {}
  virtual ~ListVolumeResponse_Result();
  explicit constexpr ListVolumeResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListVolumeResponse_Result(const ListVolumeResponse_Result& from);
  ListVolumeResponse_Result(ListVolumeResponse_Result&& from) noexcept
    : ListVolumeResponse_Result() {
    *this = ::std::move(from);
  }

  inline ListVolumeResponse_Result& operator=(const ListVolumeResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListVolumeResponse_Result& operator=(ListVolumeResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListVolumeResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListVolumeResponse_Result* internal_default_instance() {
    return reinterpret_cast<const ListVolumeResponse_Result*>(
               &_ListVolumeResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    204;

  friend void swap(ListVolumeResponse_Result& a, ListVolumeResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(ListVolumeResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListVolumeResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListVolumeResponse_Result* New() const final {
    return CreateMaybeMessage<ListVolumeResponse_Result>(nullptr);
  }

  ListVolumeResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListVolumeResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListVolumeResponse_Result& from);
  void MergeFrom(const ListVolumeResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListVolumeResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ListVolumeResponse.Result";
  }
  protected:
  explicit ListVolumeResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ListVolumeResponse_Result_VolumeList VolumeList;

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // .grpc_cli.ListVolumeResponse.Result.VolumeList data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::grpc_cli::ListVolumeResponse_Result_VolumeList& data() const;
  ::grpc_cli::ListVolumeResponse_Result_VolumeList* release_data();
  ::grpc_cli::ListVolumeResponse_Result_VolumeList* mutable_data();
  void set_allocated_data(::grpc_cli::ListVolumeResponse_Result_VolumeList* data);
  private:
  const ::grpc_cli::ListVolumeResponse_Result_VolumeList& _internal_data() const;
  ::grpc_cli::ListVolumeResponse_Result_VolumeList* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::grpc_cli::ListVolumeResponse_Result_VolumeList* data);
  ::grpc_cli::ListVolumeResponse_Result_VolumeList* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:grpc_cli.ListVolumeResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  ::grpc_cli::ListVolumeResponse_Result_VolumeList* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ListVolumeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ListVolumeResponse) */ {
 public:
  inline ListVolumeResponse() : ListVolumeResponse(nullptr) {}
  virtual ~ListVolumeResponse();
  explicit constexpr ListVolumeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListVolumeResponse(const ListVolumeResponse& from);
  ListVolumeResponse(ListVolumeResponse&& from) noexcept
    : ListVolumeResponse() {
    *this = ::std::move(from);
  }

  inline ListVolumeResponse& operator=(const ListVolumeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListVolumeResponse& operator=(ListVolumeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListVolumeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListVolumeResponse* internal_default_instance() {
    return reinterpret_cast<const ListVolumeResponse*>(
               &_ListVolumeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    205;

  friend void swap(ListVolumeResponse& a, ListVolumeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListVolumeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListVolumeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListVolumeResponse* New() const final {
    return CreateMaybeMessage<ListVolumeResponse>(nullptr);
  }

  ListVolumeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListVolumeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListVolumeResponse& from);
  void MergeFrom(const ListVolumeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListVolumeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ListVolumeResponse";
  }
  protected:
  explicit ListVolumeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ListVolumeResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.ListVolumeResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::ListVolumeResponse_Result& result() const;
  ::grpc_cli::ListVolumeResponse_Result* release_result();
  ::grpc_cli::ListVolumeResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::ListVolumeResponse_Result* result);
  private:
  const ::grpc_cli::ListVolumeResponse_Result& _internal_result() const;
  ::grpc_cli::ListVolumeResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::ListVolumeResponse_Result* result);
  ::grpc_cli::ListVolumeResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.ListVolumeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::ListVolumeResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class QosVolumeNameParam PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.QosVolumeNameParam) */ {
 public:
  inline QosVolumeNameParam() : QosVolumeNameParam(nullptr) {}
  virtual ~QosVolumeNameParam();
  explicit constexpr QosVolumeNameParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QosVolumeNameParam(const QosVolumeNameParam& from);
  QosVolumeNameParam(QosVolumeNameParam&& from) noexcept
    : QosVolumeNameParam() {
    *this = ::std::move(from);
  }

  inline QosVolumeNameParam& operator=(const QosVolumeNameParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline QosVolumeNameParam& operator=(QosVolumeNameParam&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QosVolumeNameParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const QosVolumeNameParam* internal_default_instance() {
    return reinterpret_cast<const QosVolumeNameParam*>(
               &_QosVolumeNameParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    206;

  friend void swap(QosVolumeNameParam& a, QosVolumeNameParam& b) {
    a.Swap(&b);
  }
  inline void Swap(QosVolumeNameParam* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QosVolumeNameParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QosVolumeNameParam* New() const final {
    return CreateMaybeMessage<QosVolumeNameParam>(nullptr);
  }

  QosVolumeNameParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QosVolumeNameParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QosVolumeNameParam& from);
  void MergeFrom(const QosVolumeNameParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QosVolumeNameParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.QosVolumeNameParam";
  }
  protected:
  explicit QosVolumeNameParam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVolumeNameFieldNumber = 1,
  };
  // string volumeName = 1;
  void clear_volumename();
  const std::string& volumename() const;
  void set_volumename(const std::string& value);
  void set_volumename(std::string&& value);
  void set_volumename(const char* value);
  void set_volumename(const char* value, size_t size);
  std::string* mutable_volumename();
  std::string* release_volumename();
  void set_allocated_volumename(std::string* volumename);
  private:
  const std::string& _internal_volumename() const;
  void _internal_set_volumename(const std::string& value);
  std::string* _internal_mutable_volumename();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.QosVolumeNameParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr volumename_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class QosCreateVolumePolicyRequest_Param PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.QosCreateVolumePolicyRequest.Param) */ {
 public:
  inline QosCreateVolumePolicyRequest_Param() : QosCreateVolumePolicyRequest_Param(nullptr) {}
  virtual ~QosCreateVolumePolicyRequest_Param();
  explicit constexpr QosCreateVolumePolicyRequest_Param(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QosCreateVolumePolicyRequest_Param(const QosCreateVolumePolicyRequest_Param& from);
  QosCreateVolumePolicyRequest_Param(QosCreateVolumePolicyRequest_Param&& from) noexcept
    : QosCreateVolumePolicyRequest_Param() {
    *this = ::std::move(from);
  }

  inline QosCreateVolumePolicyRequest_Param& operator=(const QosCreateVolumePolicyRequest_Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline QosCreateVolumePolicyRequest_Param& operator=(QosCreateVolumePolicyRequest_Param&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QosCreateVolumePolicyRequest_Param& default_instance() {
    return *internal_default_instance();
  }
  static inline const QosCreateVolumePolicyRequest_Param* internal_default_instance() {
    return reinterpret_cast<const QosCreateVolumePolicyRequest_Param*>(
               &_QosCreateVolumePolicyRequest_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    207;

  friend void swap(QosCreateVolumePolicyRequest_Param& a, QosCreateVolumePolicyRequest_Param& b) {
    a.Swap(&b);
  }
  inline void Swap(QosCreateVolumePolicyRequest_Param* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QosCreateVolumePolicyRequest_Param* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QosCreateVolumePolicyRequest_Param* New() const final {
    return CreateMaybeMessage<QosCreateVolumePolicyRequest_Param>(nullptr);
  }

  QosCreateVolumePolicyRequest_Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QosCreateVolumePolicyRequest_Param>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QosCreateVolumePolicyRequest_Param& from);
  void MergeFrom(const QosCreateVolumePolicyRequest_Param& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QosCreateVolumePolicyRequest_Param* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.QosCreateVolumePolicyRequest.Param";
  }
  protected:
  explicit QosCreateVolumePolicyRequest_Param(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVolFieldNumber = 2,
    kArrayFieldNumber = 1,
    kMinbwFieldNumber = 3,
    kMiniopsFieldNumber = 4,
    kMaxbwFieldNumber = 5,
    kMaxiopsFieldNumber = 6,
  };
  // repeated .grpc_cli.QosVolumeNameParam vol = 2;
  int vol_size() const;
  private:
  int _internal_vol_size() const;
  public:
  void clear_vol();
  ::grpc_cli::QosVolumeNameParam* mutable_vol(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::QosVolumeNameParam >*
      mutable_vol();
  private:
  const ::grpc_cli::QosVolumeNameParam& _internal_vol(int index) const;
  ::grpc_cli::QosVolumeNameParam* _internal_add_vol();
  public:
  const ::grpc_cli::QosVolumeNameParam& vol(int index) const;
  ::grpc_cli::QosVolumeNameParam* add_vol();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::QosVolumeNameParam >&
      vol() const;

  // string array = 1;
  void clear_array();
  const std::string& array() const;
  void set_array(const std::string& value);
  void set_array(std::string&& value);
  void set_array(const char* value);
  void set_array(const char* value, size_t size);
  std::string* mutable_array();
  std::string* release_array();
  void set_allocated_array(std::string* array);
  private:
  const std::string& _internal_array() const;
  void _internal_set_array(const std::string& value);
  std::string* _internal_mutable_array();
  public:

  // int64 minbw = 3;
  void clear_minbw();
  ::PROTOBUF_NAMESPACE_ID::int64 minbw() const;
  void set_minbw(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_minbw() const;
  void _internal_set_minbw(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 miniops = 4;
  void clear_miniops();
  ::PROTOBUF_NAMESPACE_ID::int64 miniops() const;
  void set_miniops(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_miniops() const;
  void _internal_set_miniops(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 maxbw = 5;
  void clear_maxbw();
  ::PROTOBUF_NAMESPACE_ID::int64 maxbw() const;
  void set_maxbw(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_maxbw() const;
  void _internal_set_maxbw(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 maxiops = 6;
  void clear_maxiops();
  ::PROTOBUF_NAMESPACE_ID::int64 maxiops() const;
  void set_maxiops(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_maxiops() const;
  void _internal_set_maxiops(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.QosCreateVolumePolicyRequest.Param)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::QosVolumeNameParam > vol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr array_;
  ::PROTOBUF_NAMESPACE_ID::int64 minbw_;
  ::PROTOBUF_NAMESPACE_ID::int64 miniops_;
  ::PROTOBUF_NAMESPACE_ID::int64 maxbw_;
  ::PROTOBUF_NAMESPACE_ID::int64 maxiops_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class QosCreateVolumePolicyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.QosCreateVolumePolicyRequest) */ {
 public:
  inline QosCreateVolumePolicyRequest() : QosCreateVolumePolicyRequest(nullptr) {}
  virtual ~QosCreateVolumePolicyRequest();
  explicit constexpr QosCreateVolumePolicyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QosCreateVolumePolicyRequest(const QosCreateVolumePolicyRequest& from);
  QosCreateVolumePolicyRequest(QosCreateVolumePolicyRequest&& from) noexcept
    : QosCreateVolumePolicyRequest() {
    *this = ::std::move(from);
  }

  inline QosCreateVolumePolicyRequest& operator=(const QosCreateVolumePolicyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QosCreateVolumePolicyRequest& operator=(QosCreateVolumePolicyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QosCreateVolumePolicyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QosCreateVolumePolicyRequest* internal_default_instance() {
    return reinterpret_cast<const QosCreateVolumePolicyRequest*>(
               &_QosCreateVolumePolicyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    208;

  friend void swap(QosCreateVolumePolicyRequest& a, QosCreateVolumePolicyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QosCreateVolumePolicyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QosCreateVolumePolicyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QosCreateVolumePolicyRequest* New() const final {
    return CreateMaybeMessage<QosCreateVolumePolicyRequest>(nullptr);
  }

  QosCreateVolumePolicyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QosCreateVolumePolicyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QosCreateVolumePolicyRequest& from);
  void MergeFrom(const QosCreateVolumePolicyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QosCreateVolumePolicyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.QosCreateVolumePolicyRequest";
  }
  protected:
  explicit QosCreateVolumePolicyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef QosCreateVolumePolicyRequest_Param Param;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
    kParamFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // .grpc_cli.QosCreateVolumePolicyRequest.Param param = 4;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::grpc_cli::QosCreateVolumePolicyRequest_Param& param() const;
  ::grpc_cli::QosCreateVolumePolicyRequest_Param* release_param();
  ::grpc_cli::QosCreateVolumePolicyRequest_Param* mutable_param();
  void set_allocated_param(::grpc_cli::QosCreateVolumePolicyRequest_Param* param);
  private:
  const ::grpc_cli::QosCreateVolumePolicyRequest_Param& _internal_param() const;
  ::grpc_cli::QosCreateVolumePolicyRequest_Param* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::grpc_cli::QosCreateVolumePolicyRequest_Param* param);
  ::grpc_cli::QosCreateVolumePolicyRequest_Param* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:grpc_cli.QosCreateVolumePolicyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  ::grpc_cli::QosCreateVolumePolicyRequest_Param* param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class QosCreateVolumePolicyResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.QosCreateVolumePolicyResponse.Result) */ {
 public:
  inline QosCreateVolumePolicyResponse_Result() : QosCreateVolumePolicyResponse_Result(nullptr) {}
  virtual ~QosCreateVolumePolicyResponse_Result();
  explicit constexpr QosCreateVolumePolicyResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QosCreateVolumePolicyResponse_Result(const QosCreateVolumePolicyResponse_Result& from);
  QosCreateVolumePolicyResponse_Result(QosCreateVolumePolicyResponse_Result&& from) noexcept
    : QosCreateVolumePolicyResponse_Result() {
    *this = ::std::move(from);
  }

  inline QosCreateVolumePolicyResponse_Result& operator=(const QosCreateVolumePolicyResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline QosCreateVolumePolicyResponse_Result& operator=(QosCreateVolumePolicyResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QosCreateVolumePolicyResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const QosCreateVolumePolicyResponse_Result* internal_default_instance() {
    return reinterpret_cast<const QosCreateVolumePolicyResponse_Result*>(
               &_QosCreateVolumePolicyResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    209;

  friend void swap(QosCreateVolumePolicyResponse_Result& a, QosCreateVolumePolicyResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(QosCreateVolumePolicyResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QosCreateVolumePolicyResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QosCreateVolumePolicyResponse_Result* New() const final {
    return CreateMaybeMessage<QosCreateVolumePolicyResponse_Result>(nullptr);
  }

  QosCreateVolumePolicyResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QosCreateVolumePolicyResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QosCreateVolumePolicyResponse_Result& from);
  void MergeFrom(const QosCreateVolumePolicyResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QosCreateVolumePolicyResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.QosCreateVolumePolicyResponse.Result";
  }
  protected:
  explicit QosCreateVolumePolicyResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:grpc_cli.QosCreateVolumePolicyResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class QosCreateVolumePolicyResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.QosCreateVolumePolicyResponse) */ {
 public:
  inline QosCreateVolumePolicyResponse() : QosCreateVolumePolicyResponse(nullptr) {}
  virtual ~QosCreateVolumePolicyResponse();
  explicit constexpr QosCreateVolumePolicyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QosCreateVolumePolicyResponse(const QosCreateVolumePolicyResponse& from);
  QosCreateVolumePolicyResponse(QosCreateVolumePolicyResponse&& from) noexcept
    : QosCreateVolumePolicyResponse() {
    *this = ::std::move(from);
  }

  inline QosCreateVolumePolicyResponse& operator=(const QosCreateVolumePolicyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QosCreateVolumePolicyResponse& operator=(QosCreateVolumePolicyResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QosCreateVolumePolicyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QosCreateVolumePolicyResponse* internal_default_instance() {
    return reinterpret_cast<const QosCreateVolumePolicyResponse*>(
               &_QosCreateVolumePolicyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    210;

  friend void swap(QosCreateVolumePolicyResponse& a, QosCreateVolumePolicyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QosCreateVolumePolicyResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QosCreateVolumePolicyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QosCreateVolumePolicyResponse* New() const final {
    return CreateMaybeMessage<QosCreateVolumePolicyResponse>(nullptr);
  }

  QosCreateVolumePolicyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QosCreateVolumePolicyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QosCreateVolumePolicyResponse& from);
  void MergeFrom(const QosCreateVolumePolicyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QosCreateVolumePolicyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.QosCreateVolumePolicyResponse";
  }
  protected:
  explicit QosCreateVolumePolicyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef QosCreateVolumePolicyResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.QosCreateVolumePolicyResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::QosCreateVolumePolicyResponse_Result& result() const;
  ::grpc_cli::QosCreateVolumePolicyResponse_Result* release_result();
  ::grpc_cli::QosCreateVolumePolicyResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::QosCreateVolumePolicyResponse_Result* result);
  private:
  const ::grpc_cli::QosCreateVolumePolicyResponse_Result& _internal_result() const;
  ::grpc_cli::QosCreateVolumePolicyResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::QosCreateVolumePolicyResponse_Result* result);
  ::grpc_cli::QosCreateVolumePolicyResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.QosCreateVolumePolicyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::QosCreateVolumePolicyResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class QosResetVolumePolicyRequest_Param PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.QosResetVolumePolicyRequest.Param) */ {
 public:
  inline QosResetVolumePolicyRequest_Param() : QosResetVolumePolicyRequest_Param(nullptr) {}
  virtual ~QosResetVolumePolicyRequest_Param();
  explicit constexpr QosResetVolumePolicyRequest_Param(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QosResetVolumePolicyRequest_Param(const QosResetVolumePolicyRequest_Param& from);
  QosResetVolumePolicyRequest_Param(QosResetVolumePolicyRequest_Param&& from) noexcept
    : QosResetVolumePolicyRequest_Param() {
    *this = ::std::move(from);
  }

  inline QosResetVolumePolicyRequest_Param& operator=(const QosResetVolumePolicyRequest_Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline QosResetVolumePolicyRequest_Param& operator=(QosResetVolumePolicyRequest_Param&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QosResetVolumePolicyRequest_Param& default_instance() {
    return *internal_default_instance();
  }
  static inline const QosResetVolumePolicyRequest_Param* internal_default_instance() {
    return reinterpret_cast<const QosResetVolumePolicyRequest_Param*>(
               &_QosResetVolumePolicyRequest_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    211;

  friend void swap(QosResetVolumePolicyRequest_Param& a, QosResetVolumePolicyRequest_Param& b) {
    a.Swap(&b);
  }
  inline void Swap(QosResetVolumePolicyRequest_Param* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QosResetVolumePolicyRequest_Param* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QosResetVolumePolicyRequest_Param* New() const final {
    return CreateMaybeMessage<QosResetVolumePolicyRequest_Param>(nullptr);
  }

  QosResetVolumePolicyRequest_Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QosResetVolumePolicyRequest_Param>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QosResetVolumePolicyRequest_Param& from);
  void MergeFrom(const QosResetVolumePolicyRequest_Param& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QosResetVolumePolicyRequest_Param* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.QosResetVolumePolicyRequest.Param";
  }
  protected:
  explicit QosResetVolumePolicyRequest_Param(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVolFieldNumber = 2,
    kArrayFieldNumber = 1,
  };
  // repeated .grpc_cli.QosVolumeNameParam vol = 2;
  int vol_size() const;
  private:
  int _internal_vol_size() const;
  public:
  void clear_vol();
  ::grpc_cli::QosVolumeNameParam* mutable_vol(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::QosVolumeNameParam >*
      mutable_vol();
  private:
  const ::grpc_cli::QosVolumeNameParam& _internal_vol(int index) const;
  ::grpc_cli::QosVolumeNameParam* _internal_add_vol();
  public:
  const ::grpc_cli::QosVolumeNameParam& vol(int index) const;
  ::grpc_cli::QosVolumeNameParam* add_vol();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::QosVolumeNameParam >&
      vol() const;

  // string array = 1;
  void clear_array();
  const std::string& array() const;
  void set_array(const std::string& value);
  void set_array(std::string&& value);
  void set_array(const char* value);
  void set_array(const char* value, size_t size);
  std::string* mutable_array();
  std::string* release_array();
  void set_allocated_array(std::string* array);
  private:
  const std::string& _internal_array() const;
  void _internal_set_array(const std::string& value);
  std::string* _internal_mutable_array();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.QosResetVolumePolicyRequest.Param)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::QosVolumeNameParam > vol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr array_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class QosResetVolumePolicyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.QosResetVolumePolicyRequest) */ {
 public:
  inline QosResetVolumePolicyRequest() : QosResetVolumePolicyRequest(nullptr) {}
  virtual ~QosResetVolumePolicyRequest();
  explicit constexpr QosResetVolumePolicyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QosResetVolumePolicyRequest(const QosResetVolumePolicyRequest& from);
  QosResetVolumePolicyRequest(QosResetVolumePolicyRequest&& from) noexcept
    : QosResetVolumePolicyRequest() {
    *this = ::std::move(from);
  }

  inline QosResetVolumePolicyRequest& operator=(const QosResetVolumePolicyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QosResetVolumePolicyRequest& operator=(QosResetVolumePolicyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QosResetVolumePolicyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QosResetVolumePolicyRequest* internal_default_instance() {
    return reinterpret_cast<const QosResetVolumePolicyRequest*>(
               &_QosResetVolumePolicyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    212;

  friend void swap(QosResetVolumePolicyRequest& a, QosResetVolumePolicyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QosResetVolumePolicyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QosResetVolumePolicyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QosResetVolumePolicyRequest* New() const final {
    return CreateMaybeMessage<QosResetVolumePolicyRequest>(nullptr);
  }

  QosResetVolumePolicyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QosResetVolumePolicyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QosResetVolumePolicyRequest& from);
  void MergeFrom(const QosResetVolumePolicyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QosResetVolumePolicyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.QosResetVolumePolicyRequest";
  }
  protected:
  explicit QosResetVolumePolicyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef QosResetVolumePolicyRequest_Param Param;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
    kParamFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // .grpc_cli.QosResetVolumePolicyRequest.Param param = 4;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::grpc_cli::QosResetVolumePolicyRequest_Param& param() const;
  ::grpc_cli::QosResetVolumePolicyRequest_Param* release_param();
  ::grpc_cli::QosResetVolumePolicyRequest_Param* mutable_param();
  void set_allocated_param(::grpc_cli::QosResetVolumePolicyRequest_Param* param);
  private:
  const ::grpc_cli::QosResetVolumePolicyRequest_Param& _internal_param() const;
  ::grpc_cli::QosResetVolumePolicyRequest_Param* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::grpc_cli::QosResetVolumePolicyRequest_Param* param);
  ::grpc_cli::QosResetVolumePolicyRequest_Param* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:grpc_cli.QosResetVolumePolicyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  ::grpc_cli::QosResetVolumePolicyRequest_Param* param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class VolumeInfoRequest_Param PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.VolumeInfoRequest.Param) */ {
 public:
  inline VolumeInfoRequest_Param() : VolumeInfoRequest_Param(nullptr) {}
  virtual ~VolumeInfoRequest_Param();
  explicit constexpr VolumeInfoRequest_Param(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VolumeInfoRequest_Param(const VolumeInfoRequest_Param& from);
  VolumeInfoRequest_Param(VolumeInfoRequest_Param&& from) noexcept
    : VolumeInfoRequest_Param() {
    *this = ::std::move(from);
  }

  inline VolumeInfoRequest_Param& operator=(const VolumeInfoRequest_Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline VolumeInfoRequest_Param& operator=(VolumeInfoRequest_Param&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VolumeInfoRequest_Param& default_instance() {
    return *internal_default_instance();
  }
  static inline const VolumeInfoRequest_Param* internal_default_instance() {
    return reinterpret_cast<const VolumeInfoRequest_Param*>(
               &_VolumeInfoRequest_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    213;

  friend void swap(VolumeInfoRequest_Param& a, VolumeInfoRequest_Param& b) {
    a.Swap(&b);
  }
  inline void Swap(VolumeInfoRequest_Param* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VolumeInfoRequest_Param* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VolumeInfoRequest_Param* New() const final {
    return CreateMaybeMessage<VolumeInfoRequest_Param>(nullptr);
  }

  VolumeInfoRequest_Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VolumeInfoRequest_Param>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VolumeInfoRequest_Param& from);
  void MergeFrom(const VolumeInfoRequest_Param& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VolumeInfoRequest_Param* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.VolumeInfoRequest.Param";
  }
  protected:
  explicit VolumeInfoRequest_Param(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrayFieldNumber = 1,
    kVolumeFieldNumber = 2,
  };
  // string array = 1;
  void clear_array();
  const std::string& array() const;
  void set_array(const std::string& value);
  void set_array(std::string&& value);
  void set_array(const char* value);
  void set_array(const char* value, size_t size);
  std::string* mutable_array();
  std::string* release_array();
  void set_allocated_array(std::string* array);
  private:
  const std::string& _internal_array() const;
  void _internal_set_array(const std::string& value);
  std::string* _internal_mutable_array();
  public:

  // string volume = 2;
  void clear_volume();
  const std::string& volume() const;
  void set_volume(const std::string& value);
  void set_volume(std::string&& value);
  void set_volume(const char* value);
  void set_volume(const char* value, size_t size);
  std::string* mutable_volume();
  std::string* release_volume();
  void set_allocated_volume(std::string* volume);
  private:
  const std::string& _internal_volume() const;
  void _internal_set_volume(const std::string& value);
  std::string* _internal_mutable_volume();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.VolumeInfoRequest.Param)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr array_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr volume_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class VolumeInfoRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.VolumeInfoRequest) */ {
 public:
  inline VolumeInfoRequest() : VolumeInfoRequest(nullptr) {}
  virtual ~VolumeInfoRequest();
  explicit constexpr VolumeInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VolumeInfoRequest(const VolumeInfoRequest& from);
  VolumeInfoRequest(VolumeInfoRequest&& from) noexcept
    : VolumeInfoRequest() {
    *this = ::std::move(from);
  }

  inline VolumeInfoRequest& operator=(const VolumeInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VolumeInfoRequest& operator=(VolumeInfoRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VolumeInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const VolumeInfoRequest* internal_default_instance() {
    return reinterpret_cast<const VolumeInfoRequest*>(
               &_VolumeInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    214;

  friend void swap(VolumeInfoRequest& a, VolumeInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VolumeInfoRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VolumeInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VolumeInfoRequest* New() const final {
    return CreateMaybeMessage<VolumeInfoRequest>(nullptr);
  }

  VolumeInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VolumeInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VolumeInfoRequest& from);
  void MergeFrom(const VolumeInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VolumeInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.VolumeInfoRequest";
  }
  protected:
  explicit VolumeInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef VolumeInfoRequest_Param Param;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
    kParamFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // .grpc_cli.VolumeInfoRequest.Param param = 4;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::grpc_cli::VolumeInfoRequest_Param& param() const;
  ::grpc_cli::VolumeInfoRequest_Param* release_param();
  ::grpc_cli::VolumeInfoRequest_Param* mutable_param();
  void set_allocated_param(::grpc_cli::VolumeInfoRequest_Param* param);
  private:
  const ::grpc_cli::VolumeInfoRequest_Param& _internal_param() const;
  ::grpc_cli::VolumeInfoRequest_Param* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::grpc_cli::VolumeInfoRequest_Param* param);
  ::grpc_cli::VolumeInfoRequest_Param* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:grpc_cli.VolumeInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  ::grpc_cli::VolumeInfoRequest_Param* param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class QosResetVolumePolicyResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.QosResetVolumePolicyResponse.Result) */ {
 public:
  inline QosResetVolumePolicyResponse_Result() : QosResetVolumePolicyResponse_Result(nullptr) {}
  virtual ~QosResetVolumePolicyResponse_Result();
  explicit constexpr QosResetVolumePolicyResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QosResetVolumePolicyResponse_Result(const QosResetVolumePolicyResponse_Result& from);
  QosResetVolumePolicyResponse_Result(QosResetVolumePolicyResponse_Result&& from) noexcept
    : QosResetVolumePolicyResponse_Result() {
    *this = ::std::move(from);
  }

  inline QosResetVolumePolicyResponse_Result& operator=(const QosResetVolumePolicyResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline QosResetVolumePolicyResponse_Result& operator=(QosResetVolumePolicyResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QosResetVolumePolicyResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const QosResetVolumePolicyResponse_Result* internal_default_instance() {
    return reinterpret_cast<const QosResetVolumePolicyResponse_Result*>(
               &_QosResetVolumePolicyResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    215;

  friend void swap(QosResetVolumePolicyResponse_Result& a, QosResetVolumePolicyResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(QosResetVolumePolicyResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QosResetVolumePolicyResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QosResetVolumePolicyResponse_Result* New() const final {
    return CreateMaybeMessage<QosResetVolumePolicyResponse_Result>(nullptr);
  }

  QosResetVolumePolicyResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QosResetVolumePolicyResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QosResetVolumePolicyResponse_Result& from);
  void MergeFrom(const QosResetVolumePolicyResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QosResetVolumePolicyResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.QosResetVolumePolicyResponse.Result";
  }
  protected:
  explicit QosResetVolumePolicyResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:grpc_cli.QosResetVolumePolicyResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class QosResetVolumePolicyResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.QosResetVolumePolicyResponse) */ {
 public:
  inline QosResetVolumePolicyResponse() : QosResetVolumePolicyResponse(nullptr) {}
  virtual ~QosResetVolumePolicyResponse();
  explicit constexpr QosResetVolumePolicyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QosResetVolumePolicyResponse(const QosResetVolumePolicyResponse& from);
  QosResetVolumePolicyResponse(QosResetVolumePolicyResponse&& from) noexcept
    : QosResetVolumePolicyResponse() {
    *this = ::std::move(from);
  }

  inline QosResetVolumePolicyResponse& operator=(const QosResetVolumePolicyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QosResetVolumePolicyResponse& operator=(QosResetVolumePolicyResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QosResetVolumePolicyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QosResetVolumePolicyResponse* internal_default_instance() {
    return reinterpret_cast<const QosResetVolumePolicyResponse*>(
               &_QosResetVolumePolicyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    216;

  friend void swap(QosResetVolumePolicyResponse& a, QosResetVolumePolicyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QosResetVolumePolicyResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QosResetVolumePolicyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QosResetVolumePolicyResponse* New() const final {
    return CreateMaybeMessage<QosResetVolumePolicyResponse>(nullptr);
  }

  QosResetVolumePolicyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QosResetVolumePolicyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QosResetVolumePolicyResponse& from);
  void MergeFrom(const QosResetVolumePolicyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QosResetVolumePolicyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.QosResetVolumePolicyResponse";
  }
  protected:
  explicit QosResetVolumePolicyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef QosResetVolumePolicyResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.QosResetVolumePolicyResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::QosResetVolumePolicyResponse_Result& result() const;
  ::grpc_cli::QosResetVolumePolicyResponse_Result* release_result();
  ::grpc_cli::QosResetVolumePolicyResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::QosResetVolumePolicyResponse_Result* result);
  private:
  const ::grpc_cli::QosResetVolumePolicyResponse_Result& _internal_result() const;
  ::grpc_cli::QosResetVolumePolicyResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::QosResetVolumePolicyResponse_Result* result);
  ::grpc_cli::QosResetVolumePolicyResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.QosResetVolumePolicyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::QosResetVolumePolicyResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class VolumeInfoResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.VolumeInfoResponse.Result) */ {
 public:
  inline VolumeInfoResponse_Result() : VolumeInfoResponse_Result(nullptr) {}
  virtual ~VolumeInfoResponse_Result();
  explicit constexpr VolumeInfoResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VolumeInfoResponse_Result(const VolumeInfoResponse_Result& from);
  VolumeInfoResponse_Result(VolumeInfoResponse_Result&& from) noexcept
    : VolumeInfoResponse_Result() {
    *this = ::std::move(from);
  }

  inline VolumeInfoResponse_Result& operator=(const VolumeInfoResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline VolumeInfoResponse_Result& operator=(VolumeInfoResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VolumeInfoResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const VolumeInfoResponse_Result* internal_default_instance() {
    return reinterpret_cast<const VolumeInfoResponse_Result*>(
               &_VolumeInfoResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    217;

  friend void swap(VolumeInfoResponse_Result& a, VolumeInfoResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(VolumeInfoResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VolumeInfoResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VolumeInfoResponse_Result* New() const final {
    return CreateMaybeMessage<VolumeInfoResponse_Result>(nullptr);
  }

  VolumeInfoResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VolumeInfoResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VolumeInfoResponse_Result& from);
  void MergeFrom(const VolumeInfoResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VolumeInfoResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.VolumeInfoResponse.Result";
  }
  protected:
  explicit VolumeInfoResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // .grpc_cli.Volume data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::grpc_cli::Volume& data() const;
  ::grpc_cli::Volume* release_data();
  ::grpc_cli::Volume* mutable_data();
  void set_allocated_data(::grpc_cli::Volume* data);
  private:
  const ::grpc_cli::Volume& _internal_data() const;
  ::grpc_cli::Volume* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::grpc_cli::Volume* data);
  ::grpc_cli::Volume* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:grpc_cli.VolumeInfoResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  ::grpc_cli::Volume* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class VolumeInfoResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.VolumeInfoResponse) */ {
 public:
  inline VolumeInfoResponse() : VolumeInfoResponse(nullptr) {}
  virtual ~VolumeInfoResponse();
  explicit constexpr VolumeInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VolumeInfoResponse(const VolumeInfoResponse& from);
  VolumeInfoResponse(VolumeInfoResponse&& from) noexcept
    : VolumeInfoResponse() {
    *this = ::std::move(from);
  }

  inline VolumeInfoResponse& operator=(const VolumeInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VolumeInfoResponse& operator=(VolumeInfoResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VolumeInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const VolumeInfoResponse* internal_default_instance() {
    return reinterpret_cast<const VolumeInfoResponse*>(
               &_VolumeInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    218;

  friend void swap(VolumeInfoResponse& a, VolumeInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VolumeInfoResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VolumeInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VolumeInfoResponse* New() const final {
    return CreateMaybeMessage<VolumeInfoResponse>(nullptr);
  }

  VolumeInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VolumeInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VolumeInfoResponse& from);
  void MergeFrom(const VolumeInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VolumeInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.VolumeInfoResponse";
  }
  protected:
  explicit VolumeInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef VolumeInfoResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.VolumeInfoResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::VolumeInfoResponse_Result& result() const;
  ::grpc_cli::VolumeInfoResponse_Result* release_result();
  ::grpc_cli::VolumeInfoResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::VolumeInfoResponse_Result* result);
  private:
  const ::grpc_cli::VolumeInfoResponse_Result& _internal_result() const;
  ::grpc_cli::VolumeInfoResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::VolumeInfoResponse_Result* result);
  ::grpc_cli::VolumeInfoResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.VolumeInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::VolumeInfoResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class VolumeRenameRequest_Param PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.VolumeRenameRequest.Param) */ {
 public:
  inline VolumeRenameRequest_Param() : VolumeRenameRequest_Param(nullptr) {}
  virtual ~VolumeRenameRequest_Param();
  explicit constexpr VolumeRenameRequest_Param(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VolumeRenameRequest_Param(const VolumeRenameRequest_Param& from);
  VolumeRenameRequest_Param(VolumeRenameRequest_Param&& from) noexcept
    : VolumeRenameRequest_Param() {
    *this = ::std::move(from);
  }

  inline VolumeRenameRequest_Param& operator=(const VolumeRenameRequest_Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline VolumeRenameRequest_Param& operator=(VolumeRenameRequest_Param&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VolumeRenameRequest_Param& default_instance() {
    return *internal_default_instance();
  }
  static inline const VolumeRenameRequest_Param* internal_default_instance() {
    return reinterpret_cast<const VolumeRenameRequest_Param*>(
               &_VolumeRenameRequest_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    219;

  friend void swap(VolumeRenameRequest_Param& a, VolumeRenameRequest_Param& b) {
    a.Swap(&b);
  }
  inline void Swap(VolumeRenameRequest_Param* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VolumeRenameRequest_Param* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VolumeRenameRequest_Param* New() const final {
    return CreateMaybeMessage<VolumeRenameRequest_Param>(nullptr);
  }

  VolumeRenameRequest_Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VolumeRenameRequest_Param>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VolumeRenameRequest_Param& from);
  void MergeFrom(const VolumeRenameRequest_Param& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VolumeRenameRequest_Param* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.VolumeRenameRequest.Param";
  }
  protected:
  explicit VolumeRenameRequest_Param(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrayFieldNumber = 1,
    kNameFieldNumber = 2,
    kNewnameFieldNumber = 3,
  };
  // string array = 1;
  void clear_array();
  const std::string& array() const;
  void set_array(const std::string& value);
  void set_array(std::string&& value);
  void set_array(const char* value);
  void set_array(const char* value, size_t size);
  std::string* mutable_array();
  std::string* release_array();
  void set_allocated_array(std::string* array);
  private:
  const std::string& _internal_array() const;
  void _internal_set_array(const std::string& value);
  std::string* _internal_mutable_array();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string newname = 3;
  void clear_newname();
  const std::string& newname() const;
  void set_newname(const std::string& value);
  void set_newname(std::string&& value);
  void set_newname(const char* value);
  void set_newname(const char* value, size_t size);
  std::string* mutable_newname();
  std::string* release_newname();
  void set_allocated_newname(std::string* newname);
  private:
  const std::string& _internal_newname() const;
  void _internal_set_newname(const std::string& value);
  std::string* _internal_mutable_newname();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.VolumeRenameRequest.Param)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr array_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr newname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class VolumeRenameRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.VolumeRenameRequest) */ {
 public:
  inline VolumeRenameRequest() : VolumeRenameRequest(nullptr) {}
  virtual ~VolumeRenameRequest();
  explicit constexpr VolumeRenameRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VolumeRenameRequest(const VolumeRenameRequest& from);
  VolumeRenameRequest(VolumeRenameRequest&& from) noexcept
    : VolumeRenameRequest() {
    *this = ::std::move(from);
  }

  inline VolumeRenameRequest& operator=(const VolumeRenameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VolumeRenameRequest& operator=(VolumeRenameRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VolumeRenameRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const VolumeRenameRequest* internal_default_instance() {
    return reinterpret_cast<const VolumeRenameRequest*>(
               &_VolumeRenameRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    220;

  friend void swap(VolumeRenameRequest& a, VolumeRenameRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VolumeRenameRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VolumeRenameRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VolumeRenameRequest* New() const final {
    return CreateMaybeMessage<VolumeRenameRequest>(nullptr);
  }

  VolumeRenameRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VolumeRenameRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VolumeRenameRequest& from);
  void MergeFrom(const VolumeRenameRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VolumeRenameRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.VolumeRenameRequest";
  }
  protected:
  explicit VolumeRenameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef VolumeRenameRequest_Param Param;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
    kParamFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // .grpc_cli.VolumeRenameRequest.Param param = 4;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::grpc_cli::VolumeRenameRequest_Param& param() const;
  ::grpc_cli::VolumeRenameRequest_Param* release_param();
  ::grpc_cli::VolumeRenameRequest_Param* mutable_param();
  void set_allocated_param(::grpc_cli::VolumeRenameRequest_Param* param);
  private:
  const ::grpc_cli::VolumeRenameRequest_Param& _internal_param() const;
  ::grpc_cli::VolumeRenameRequest_Param* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::grpc_cli::VolumeRenameRequest_Param* param);
  ::grpc_cli::VolumeRenameRequest_Param* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:grpc_cli.VolumeRenameRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  ::grpc_cli::VolumeRenameRequest_Param* param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class VolumeRenameResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.VolumeRenameResponse.Result) */ {
 public:
  inline VolumeRenameResponse_Result() : VolumeRenameResponse_Result(nullptr) {}
  virtual ~VolumeRenameResponse_Result();
  explicit constexpr VolumeRenameResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VolumeRenameResponse_Result(const VolumeRenameResponse_Result& from);
  VolumeRenameResponse_Result(VolumeRenameResponse_Result&& from) noexcept
    : VolumeRenameResponse_Result() {
    *this = ::std::move(from);
  }

  inline VolumeRenameResponse_Result& operator=(const VolumeRenameResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline VolumeRenameResponse_Result& operator=(VolumeRenameResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VolumeRenameResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const VolumeRenameResponse_Result* internal_default_instance() {
    return reinterpret_cast<const VolumeRenameResponse_Result*>(
               &_VolumeRenameResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    221;

  friend void swap(VolumeRenameResponse_Result& a, VolumeRenameResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(VolumeRenameResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VolumeRenameResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VolumeRenameResponse_Result* New() const final {
    return CreateMaybeMessage<VolumeRenameResponse_Result>(nullptr);
  }

  VolumeRenameResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VolumeRenameResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VolumeRenameResponse_Result& from);
  void MergeFrom(const VolumeRenameResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VolumeRenameResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.VolumeRenameResponse.Result";
  }
  protected:
  explicit VolumeRenameResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:grpc_cli.VolumeRenameResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class VolumeRenameResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.VolumeRenameResponse) */ {
 public:
  inline VolumeRenameResponse() : VolumeRenameResponse(nullptr) {}
  virtual ~VolumeRenameResponse();
  explicit constexpr VolumeRenameResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VolumeRenameResponse(const VolumeRenameResponse& from);
  VolumeRenameResponse(VolumeRenameResponse&& from) noexcept
    : VolumeRenameResponse() {
    *this = ::std::move(from);
  }

  inline VolumeRenameResponse& operator=(const VolumeRenameResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VolumeRenameResponse& operator=(VolumeRenameResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VolumeRenameResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const VolumeRenameResponse* internal_default_instance() {
    return reinterpret_cast<const VolumeRenameResponse*>(
               &_VolumeRenameResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    222;

  friend void swap(VolumeRenameResponse& a, VolumeRenameResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VolumeRenameResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VolumeRenameResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VolumeRenameResponse* New() const final {
    return CreateMaybeMessage<VolumeRenameResponse>(nullptr);
  }

  VolumeRenameResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VolumeRenameResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VolumeRenameResponse& from);
  void MergeFrom(const VolumeRenameResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VolumeRenameResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.VolumeRenameResponse";
  }
  protected:
  explicit VolumeRenameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef VolumeRenameResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.VolumeRenameResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::VolumeRenameResponse_Result& result() const;
  ::grpc_cli::VolumeRenameResponse_Result* release_result();
  ::grpc_cli::VolumeRenameResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::VolumeRenameResponse_Result* result);
  private:
  const ::grpc_cli::VolumeRenameResponse_Result& _internal_result() const;
  ::grpc_cli::VolumeRenameResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::VolumeRenameResponse_Result* result);
  ::grpc_cli::VolumeRenameResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.VolumeRenameResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::VolumeRenameResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ListWBTRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ListWBTRequest) */ {
 public:
  inline ListWBTRequest() : ListWBTRequest(nullptr) {}
  virtual ~ListWBTRequest();
  explicit constexpr ListWBTRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListWBTRequest(const ListWBTRequest& from);
  ListWBTRequest(ListWBTRequest&& from) noexcept
    : ListWBTRequest() {
    *this = ::std::move(from);
  }

  inline ListWBTRequest& operator=(const ListWBTRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListWBTRequest& operator=(ListWBTRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListWBTRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListWBTRequest* internal_default_instance() {
    return reinterpret_cast<const ListWBTRequest*>(
               &_ListWBTRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    223;

  friend void swap(ListWBTRequest& a, ListWBTRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListWBTRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListWBTRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListWBTRequest* New() const final {
    return CreateMaybeMessage<ListWBTRequest>(nullptr);
  }

  ListWBTRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListWBTRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListWBTRequest& from);
  void MergeFrom(const ListWBTRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListWBTRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ListWBTRequest";
  }
  protected:
  explicit ListWBTRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.ListWBTRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class WBTTest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.WBTTest) */ {
 public:
  inline WBTTest() : WBTTest(nullptr) {}
  virtual ~WBTTest();
  explicit constexpr WBTTest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WBTTest(const WBTTest& from);
  WBTTest(WBTTest&& from) noexcept
    : WBTTest() {
    *this = ::std::move(from);
  }

  inline WBTTest& operator=(const WBTTest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WBTTest& operator=(WBTTest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WBTTest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WBTTest* internal_default_instance() {
    return reinterpret_cast<const WBTTest*>(
               &_WBTTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    224;

  friend void swap(WBTTest& a, WBTTest& b) {
    a.Swap(&b);
  }
  inline void Swap(WBTTest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WBTTest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WBTTest* New() const final {
    return CreateMaybeMessage<WBTTest>(nullptr);
  }

  WBTTest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WBTTest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WBTTest& from);
  void MergeFrom(const WBTTest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WBTTest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.WBTTest";
  }
  protected:
  explicit WBTTest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTestnameFieldNumber = 1,
  };
  // string testname = 1;
  void clear_testname();
  const std::string& testname() const;
  void set_testname(const std::string& value);
  void set_testname(std::string&& value);
  void set_testname(const char* value);
  void set_testname(const char* value, size_t size);
  std::string* mutable_testname();
  std::string* release_testname();
  void set_allocated_testname(std::string* testname);
  private:
  const std::string& _internal_testname() const;
  void _internal_set_testname(const std::string& value);
  std::string* _internal_mutable_testname();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.WBTTest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr testname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ListWBTResponse_Result_Tests PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ListWBTResponse.Result.Tests) */ {
 public:
  inline ListWBTResponse_Result_Tests() : ListWBTResponse_Result_Tests(nullptr) {}
  virtual ~ListWBTResponse_Result_Tests();
  explicit constexpr ListWBTResponse_Result_Tests(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListWBTResponse_Result_Tests(const ListWBTResponse_Result_Tests& from);
  ListWBTResponse_Result_Tests(ListWBTResponse_Result_Tests&& from) noexcept
    : ListWBTResponse_Result_Tests() {
    *this = ::std::move(from);
  }

  inline ListWBTResponse_Result_Tests& operator=(const ListWBTResponse_Result_Tests& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListWBTResponse_Result_Tests& operator=(ListWBTResponse_Result_Tests&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListWBTResponse_Result_Tests& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListWBTResponse_Result_Tests* internal_default_instance() {
    return reinterpret_cast<const ListWBTResponse_Result_Tests*>(
               &_ListWBTResponse_Result_Tests_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    225;

  friend void swap(ListWBTResponse_Result_Tests& a, ListWBTResponse_Result_Tests& b) {
    a.Swap(&b);
  }
  inline void Swap(ListWBTResponse_Result_Tests* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListWBTResponse_Result_Tests* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListWBTResponse_Result_Tests* New() const final {
    return CreateMaybeMessage<ListWBTResponse_Result_Tests>(nullptr);
  }

  ListWBTResponse_Result_Tests* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListWBTResponse_Result_Tests>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListWBTResponse_Result_Tests& from);
  void MergeFrom(const ListWBTResponse_Result_Tests& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListWBTResponse_Result_Tests* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ListWBTResponse.Result.Tests";
  }
  protected:
  explicit ListWBTResponse_Result_Tests(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTestlistFieldNumber = 1,
  };
  // repeated .grpc_cli.WBTTest testlist = 1;
  int testlist_size() const;
  private:
  int _internal_testlist_size() const;
  public:
  void clear_testlist();
  ::grpc_cli::WBTTest* mutable_testlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::WBTTest >*
      mutable_testlist();
  private:
  const ::grpc_cli::WBTTest& _internal_testlist(int index) const;
  ::grpc_cli::WBTTest* _internal_add_testlist();
  public:
  const ::grpc_cli::WBTTest& testlist(int index) const;
  ::grpc_cli::WBTTest* add_testlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::WBTTest >&
      testlist() const;

  // @@protoc_insertion_point(class_scope:grpc_cli.ListWBTResponse.Result.Tests)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::WBTTest > testlist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ListWBTResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ListWBTResponse.Result) */ {
 public:
  inline ListWBTResponse_Result() : ListWBTResponse_Result(nullptr) {}
  virtual ~ListWBTResponse_Result();
  explicit constexpr ListWBTResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListWBTResponse_Result(const ListWBTResponse_Result& from);
  ListWBTResponse_Result(ListWBTResponse_Result&& from) noexcept
    : ListWBTResponse_Result() {
    *this = ::std::move(from);
  }

  inline ListWBTResponse_Result& operator=(const ListWBTResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListWBTResponse_Result& operator=(ListWBTResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListWBTResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListWBTResponse_Result* internal_default_instance() {
    return reinterpret_cast<const ListWBTResponse_Result*>(
               &_ListWBTResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    226;

  friend void swap(ListWBTResponse_Result& a, ListWBTResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(ListWBTResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListWBTResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListWBTResponse_Result* New() const final {
    return CreateMaybeMessage<ListWBTResponse_Result>(nullptr);
  }

  ListWBTResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListWBTResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListWBTResponse_Result& from);
  void MergeFrom(const ListWBTResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListWBTResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ListWBTResponse.Result";
  }
  protected:
  explicit ListWBTResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ListWBTResponse_Result_Tests Tests;

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // .grpc_cli.ListWBTResponse.Result.Tests data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::grpc_cli::ListWBTResponse_Result_Tests& data() const;
  ::grpc_cli::ListWBTResponse_Result_Tests* release_data();
  ::grpc_cli::ListWBTResponse_Result_Tests* mutable_data();
  void set_allocated_data(::grpc_cli::ListWBTResponse_Result_Tests* data);
  private:
  const ::grpc_cli::ListWBTResponse_Result_Tests& _internal_data() const;
  ::grpc_cli::ListWBTResponse_Result_Tests* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::grpc_cli::ListWBTResponse_Result_Tests* data);
  ::grpc_cli::ListWBTResponse_Result_Tests* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:grpc_cli.ListWBTResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  ::grpc_cli::ListWBTResponse_Result_Tests* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ListWBTResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ListWBTResponse) */ {
 public:
  inline ListWBTResponse() : ListWBTResponse(nullptr) {}
  virtual ~ListWBTResponse();
  explicit constexpr ListWBTResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListWBTResponse(const ListWBTResponse& from);
  ListWBTResponse(ListWBTResponse&& from) noexcept
    : ListWBTResponse() {
    *this = ::std::move(from);
  }

  inline ListWBTResponse& operator=(const ListWBTResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListWBTResponse& operator=(ListWBTResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListWBTResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListWBTResponse* internal_default_instance() {
    return reinterpret_cast<const ListWBTResponse*>(
               &_ListWBTResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    227;

  friend void swap(ListWBTResponse& a, ListWBTResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListWBTResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListWBTResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListWBTResponse* New() const final {
    return CreateMaybeMessage<ListWBTResponse>(nullptr);
  }

  ListWBTResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListWBTResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListWBTResponse& from);
  void MergeFrom(const ListWBTResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListWBTResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ListWBTResponse";
  }
  protected:
  explicit ListWBTResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ListWBTResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.ListWBTResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::ListWBTResponse_Result& result() const;
  ::grpc_cli::ListWBTResponse_Result* release_result();
  ::grpc_cli::ListWBTResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::ListWBTResponse_Result* result);
  private:
  const ::grpc_cli::ListWBTResponse_Result& _internal_result() const;
  ::grpc_cli::ListWBTResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::ListWBTResponse_Result* result);
  ::grpc_cli::ListWBTResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.ListWBTResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::ListWBTResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ListQOSPolicyRequest_Param_Volume PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ListQOSPolicyRequest.Param.Volume) */ {
 public:
  inline ListQOSPolicyRequest_Param_Volume() : ListQOSPolicyRequest_Param_Volume(nullptr) {}
  virtual ~ListQOSPolicyRequest_Param_Volume();
  explicit constexpr ListQOSPolicyRequest_Param_Volume(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListQOSPolicyRequest_Param_Volume(const ListQOSPolicyRequest_Param_Volume& from);
  ListQOSPolicyRequest_Param_Volume(ListQOSPolicyRequest_Param_Volume&& from) noexcept
    : ListQOSPolicyRequest_Param_Volume() {
    *this = ::std::move(from);
  }

  inline ListQOSPolicyRequest_Param_Volume& operator=(const ListQOSPolicyRequest_Param_Volume& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListQOSPolicyRequest_Param_Volume& operator=(ListQOSPolicyRequest_Param_Volume&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListQOSPolicyRequest_Param_Volume& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListQOSPolicyRequest_Param_Volume* internal_default_instance() {
    return reinterpret_cast<const ListQOSPolicyRequest_Param_Volume*>(
               &_ListQOSPolicyRequest_Param_Volume_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    228;

  friend void swap(ListQOSPolicyRequest_Param_Volume& a, ListQOSPolicyRequest_Param_Volume& b) {
    a.Swap(&b);
  }
  inline void Swap(ListQOSPolicyRequest_Param_Volume* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListQOSPolicyRequest_Param_Volume* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListQOSPolicyRequest_Param_Volume* New() const final {
    return CreateMaybeMessage<ListQOSPolicyRequest_Param_Volume>(nullptr);
  }

  ListQOSPolicyRequest_Param_Volume* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListQOSPolicyRequest_Param_Volume>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListQOSPolicyRequest_Param_Volume& from);
  void MergeFrom(const ListQOSPolicyRequest_Param_Volume& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListQOSPolicyRequest_Param_Volume* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ListQOSPolicyRequest.Param.Volume";
  }
  protected:
  explicit ListQOSPolicyRequest_Param_Volume(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVolumeNameFieldNumber = 1,
  };
  // string volumeName = 1;
  void clear_volumename();
  const std::string& volumename() const;
  void set_volumename(const std::string& value);
  void set_volumename(std::string&& value);
  void set_volumename(const char* value);
  void set_volumename(const char* value, size_t size);
  std::string* mutable_volumename();
  std::string* release_volumename();
  void set_allocated_volumename(std::string* volumename);
  private:
  const std::string& _internal_volumename() const;
  void _internal_set_volumename(const std::string& value);
  std::string* _internal_mutable_volumename();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.ListQOSPolicyRequest.Param.Volume)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr volumename_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ListQOSPolicyRequest_Param PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ListQOSPolicyRequest.Param) */ {
 public:
  inline ListQOSPolicyRequest_Param() : ListQOSPolicyRequest_Param(nullptr) {}
  virtual ~ListQOSPolicyRequest_Param();
  explicit constexpr ListQOSPolicyRequest_Param(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListQOSPolicyRequest_Param(const ListQOSPolicyRequest_Param& from);
  ListQOSPolicyRequest_Param(ListQOSPolicyRequest_Param&& from) noexcept
    : ListQOSPolicyRequest_Param() {
    *this = ::std::move(from);
  }

  inline ListQOSPolicyRequest_Param& operator=(const ListQOSPolicyRequest_Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListQOSPolicyRequest_Param& operator=(ListQOSPolicyRequest_Param&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListQOSPolicyRequest_Param& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListQOSPolicyRequest_Param* internal_default_instance() {
    return reinterpret_cast<const ListQOSPolicyRequest_Param*>(
               &_ListQOSPolicyRequest_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    229;

  friend void swap(ListQOSPolicyRequest_Param& a, ListQOSPolicyRequest_Param& b) {
    a.Swap(&b);
  }
  inline void Swap(ListQOSPolicyRequest_Param* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListQOSPolicyRequest_Param* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListQOSPolicyRequest_Param* New() const final {
    return CreateMaybeMessage<ListQOSPolicyRequest_Param>(nullptr);
  }

  ListQOSPolicyRequest_Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListQOSPolicyRequest_Param>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListQOSPolicyRequest_Param& from);
  void MergeFrom(const ListQOSPolicyRequest_Param& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListQOSPolicyRequest_Param* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ListQOSPolicyRequest.Param";
  }
  protected:
  explicit ListQOSPolicyRequest_Param(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ListQOSPolicyRequest_Param_Volume Volume;

  // accessors -------------------------------------------------------

  enum : int {
    kVolFieldNumber = 2,
    kArrayFieldNumber = 1,
  };
  // repeated .grpc_cli.ListQOSPolicyRequest.Param.Volume vol = 2;
  int vol_size() const;
  private:
  int _internal_vol_size() const;
  public:
  void clear_vol();
  ::grpc_cli::ListQOSPolicyRequest_Param_Volume* mutable_vol(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::ListQOSPolicyRequest_Param_Volume >*
      mutable_vol();
  private:
  const ::grpc_cli::ListQOSPolicyRequest_Param_Volume& _internal_vol(int index) const;
  ::grpc_cli::ListQOSPolicyRequest_Param_Volume* _internal_add_vol();
  public:
  const ::grpc_cli::ListQOSPolicyRequest_Param_Volume& vol(int index) const;
  ::grpc_cli::ListQOSPolicyRequest_Param_Volume* add_vol();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::ListQOSPolicyRequest_Param_Volume >&
      vol() const;

  // string array = 1;
  void clear_array();
  const std::string& array() const;
  void set_array(const std::string& value);
  void set_array(std::string&& value);
  void set_array(const char* value);
  void set_array(const char* value, size_t size);
  std::string* mutable_array();
  std::string* release_array();
  void set_allocated_array(std::string* array);
  private:
  const std::string& _internal_array() const;
  void _internal_set_array(const std::string& value);
  std::string* _internal_mutable_array();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.ListQOSPolicyRequest.Param)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::ListQOSPolicyRequest_Param_Volume > vol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr array_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ListQOSPolicyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ListQOSPolicyRequest) */ {
 public:
  inline ListQOSPolicyRequest() : ListQOSPolicyRequest(nullptr) {}
  virtual ~ListQOSPolicyRequest();
  explicit constexpr ListQOSPolicyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListQOSPolicyRequest(const ListQOSPolicyRequest& from);
  ListQOSPolicyRequest(ListQOSPolicyRequest&& from) noexcept
    : ListQOSPolicyRequest() {
    *this = ::std::move(from);
  }

  inline ListQOSPolicyRequest& operator=(const ListQOSPolicyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListQOSPolicyRequest& operator=(ListQOSPolicyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListQOSPolicyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListQOSPolicyRequest* internal_default_instance() {
    return reinterpret_cast<const ListQOSPolicyRequest*>(
               &_ListQOSPolicyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    230;

  friend void swap(ListQOSPolicyRequest& a, ListQOSPolicyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListQOSPolicyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListQOSPolicyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListQOSPolicyRequest* New() const final {
    return CreateMaybeMessage<ListQOSPolicyRequest>(nullptr);
  }

  ListQOSPolicyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListQOSPolicyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListQOSPolicyRequest& from);
  void MergeFrom(const ListQOSPolicyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListQOSPolicyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ListQOSPolicyRequest";
  }
  protected:
  explicit ListQOSPolicyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ListQOSPolicyRequest_Param Param;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
    kParamFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // .grpc_cli.ListQOSPolicyRequest.Param param = 4;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::grpc_cli::ListQOSPolicyRequest_Param& param() const;
  ::grpc_cli::ListQOSPolicyRequest_Param* release_param();
  ::grpc_cli::ListQOSPolicyRequest_Param* mutable_param();
  void set_allocated_param(::grpc_cli::ListQOSPolicyRequest_Param* param);
  private:
  const ::grpc_cli::ListQOSPolicyRequest_Param& _internal_param() const;
  ::grpc_cli::ListQOSPolicyRequest_Param* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::grpc_cli::ListQOSPolicyRequest_Param* param);
  ::grpc_cli::ListQOSPolicyRequest_Param* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:grpc_cli.ListQOSPolicyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  ::grpc_cli::ListQOSPolicyRequest_Param* param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class QOSResult_Arrays PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.QOSResult.Arrays) */ {
 public:
  inline QOSResult_Arrays() : QOSResult_Arrays(nullptr) {}
  virtual ~QOSResult_Arrays();
  explicit constexpr QOSResult_Arrays(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QOSResult_Arrays(const QOSResult_Arrays& from);
  QOSResult_Arrays(QOSResult_Arrays&& from) noexcept
    : QOSResult_Arrays() {
    *this = ::std::move(from);
  }

  inline QOSResult_Arrays& operator=(const QOSResult_Arrays& from) {
    CopyFrom(from);
    return *this;
  }
  inline QOSResult_Arrays& operator=(QOSResult_Arrays&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QOSResult_Arrays& default_instance() {
    return *internal_default_instance();
  }
  static inline const QOSResult_Arrays* internal_default_instance() {
    return reinterpret_cast<const QOSResult_Arrays*>(
               &_QOSResult_Arrays_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    231;

  friend void swap(QOSResult_Arrays& a, QOSResult_Arrays& b) {
    a.Swap(&b);
  }
  inline void Swap(QOSResult_Arrays* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QOSResult_Arrays* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QOSResult_Arrays* New() const final {
    return CreateMaybeMessage<QOSResult_Arrays>(nullptr);
  }

  QOSResult_Arrays* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QOSResult_Arrays>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QOSResult_Arrays& from);
  void MergeFrom(const QOSResult_Arrays& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QOSResult_Arrays* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.QOSResult.Arrays";
  }
  protected:
  explicit QOSResult_Arrays(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrayNameFieldNumber = 1,
  };
  // string ArrayName = 1;
  void clear_arrayname();
  const std::string& arrayname() const;
  void set_arrayname(const std::string& value);
  void set_arrayname(std::string&& value);
  void set_arrayname(const char* value);
  void set_arrayname(const char* value, size_t size);
  std::string* mutable_arrayname();
  std::string* release_arrayname();
  void set_allocated_arrayname(std::string* arrayname);
  private:
  const std::string& _internal_arrayname() const;
  void _internal_set_arrayname(const std::string& value);
  std::string* _internal_mutable_arrayname();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.QOSResult.Arrays)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr arrayname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class QOSResult_RebuildPolicy PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.QOSResult.RebuildPolicy) */ {
 public:
  inline QOSResult_RebuildPolicy() : QOSResult_RebuildPolicy(nullptr) {}
  virtual ~QOSResult_RebuildPolicy();
  explicit constexpr QOSResult_RebuildPolicy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QOSResult_RebuildPolicy(const QOSResult_RebuildPolicy& from);
  QOSResult_RebuildPolicy(QOSResult_RebuildPolicy&& from) noexcept
    : QOSResult_RebuildPolicy() {
    *this = ::std::move(from);
  }

  inline QOSResult_RebuildPolicy& operator=(const QOSResult_RebuildPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  inline QOSResult_RebuildPolicy& operator=(QOSResult_RebuildPolicy&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QOSResult_RebuildPolicy& default_instance() {
    return *internal_default_instance();
  }
  static inline const QOSResult_RebuildPolicy* internal_default_instance() {
    return reinterpret_cast<const QOSResult_RebuildPolicy*>(
               &_QOSResult_RebuildPolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    232;

  friend void swap(QOSResult_RebuildPolicy& a, QOSResult_RebuildPolicy& b) {
    a.Swap(&b);
  }
  inline void Swap(QOSResult_RebuildPolicy* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QOSResult_RebuildPolicy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QOSResult_RebuildPolicy* New() const final {
    return CreateMaybeMessage<QOSResult_RebuildPolicy>(nullptr);
  }

  QOSResult_RebuildPolicy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QOSResult_RebuildPolicy>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QOSResult_RebuildPolicy& from);
  void MergeFrom(const QOSResult_RebuildPolicy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QOSResult_RebuildPolicy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.QOSResult.RebuildPolicy";
  }
  protected:
  explicit QOSResult_RebuildPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRebuildFieldNumber = 1,
  };
  // string rebuild = 1;
  void clear_rebuild();
  const std::string& rebuild() const;
  void set_rebuild(const std::string& value);
  void set_rebuild(std::string&& value);
  void set_rebuild(const char* value);
  void set_rebuild(const char* value, size_t size);
  std::string* mutable_rebuild();
  std::string* release_rebuild();
  void set_allocated_rebuild(std::string* rebuild);
  private:
  const std::string& _internal_rebuild() const;
  void _internal_set_rebuild(const std::string& value);
  std::string* _internal_mutable_rebuild();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.QOSResult.RebuildPolicy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rebuild_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class QOSResult_VolumePolicies PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.QOSResult.VolumePolicies) */ {
 public:
  inline QOSResult_VolumePolicies() : QOSResult_VolumePolicies(nullptr) {}
  virtual ~QOSResult_VolumePolicies();
  explicit constexpr QOSResult_VolumePolicies(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QOSResult_VolumePolicies(const QOSResult_VolumePolicies& from);
  QOSResult_VolumePolicies(QOSResult_VolumePolicies&& from) noexcept
    : QOSResult_VolumePolicies() {
    *this = ::std::move(from);
  }

  inline QOSResult_VolumePolicies& operator=(const QOSResult_VolumePolicies& from) {
    CopyFrom(from);
    return *this;
  }
  inline QOSResult_VolumePolicies& operator=(QOSResult_VolumePolicies&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QOSResult_VolumePolicies& default_instance() {
    return *internal_default_instance();
  }
  static inline const QOSResult_VolumePolicies* internal_default_instance() {
    return reinterpret_cast<const QOSResult_VolumePolicies*>(
               &_QOSResult_VolumePolicies_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    233;

  friend void swap(QOSResult_VolumePolicies& a, QOSResult_VolumePolicies& b) {
    a.Swap(&b);
  }
  inline void Swap(QOSResult_VolumePolicies* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QOSResult_VolumePolicies* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QOSResult_VolumePolicies* New() const final {
    return CreateMaybeMessage<QOSResult_VolumePolicies>(nullptr);
  }

  QOSResult_VolumePolicies* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QOSResult_VolumePolicies>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QOSResult_VolumePolicies& from);
  void MergeFrom(const QOSResult_VolumePolicies& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QOSResult_VolumePolicies* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.QOSResult.VolumePolicies";
  }
  protected:
  explicit QOSResult_VolumePolicies(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxbwFieldNumber = 2,
    kMaxiopsFieldNumber = 3,
    kMiniopsFieldNumber = 4,
    kMinbwFieldNumber = 5,
    kMinBwGuaranteeFieldNumber = 6,
    kMinIopsGuaranteeFieldNumber = 7,
    kNameFieldNumber = 8,
    kIdFieldNumber = 1,
  };
  // string maxbw = 2;
  void clear_maxbw();
  const std::string& maxbw() const;
  void set_maxbw(const std::string& value);
  void set_maxbw(std::string&& value);
  void set_maxbw(const char* value);
  void set_maxbw(const char* value, size_t size);
  std::string* mutable_maxbw();
  std::string* release_maxbw();
  void set_allocated_maxbw(std::string* maxbw);
  private:
  const std::string& _internal_maxbw() const;
  void _internal_set_maxbw(const std::string& value);
  std::string* _internal_mutable_maxbw();
  public:

  // string maxiops = 3;
  void clear_maxiops();
  const std::string& maxiops() const;
  void set_maxiops(const std::string& value);
  void set_maxiops(std::string&& value);
  void set_maxiops(const char* value);
  void set_maxiops(const char* value, size_t size);
  std::string* mutable_maxiops();
  std::string* release_maxiops();
  void set_allocated_maxiops(std::string* maxiops);
  private:
  const std::string& _internal_maxiops() const;
  void _internal_set_maxiops(const std::string& value);
  std::string* _internal_mutable_maxiops();
  public:

  // string miniops = 4;
  void clear_miniops();
  const std::string& miniops() const;
  void set_miniops(const std::string& value);
  void set_miniops(std::string&& value);
  void set_miniops(const char* value);
  void set_miniops(const char* value, size_t size);
  std::string* mutable_miniops();
  std::string* release_miniops();
  void set_allocated_miniops(std::string* miniops);
  private:
  const std::string& _internal_miniops() const;
  void _internal_set_miniops(const std::string& value);
  std::string* _internal_mutable_miniops();
  public:

  // string minbw = 5;
  void clear_minbw();
  const std::string& minbw() const;
  void set_minbw(const std::string& value);
  void set_minbw(std::string&& value);
  void set_minbw(const char* value);
  void set_minbw(const char* value, size_t size);
  std::string* mutable_minbw();
  std::string* release_minbw();
  void set_allocated_minbw(std::string* minbw);
  private:
  const std::string& _internal_minbw() const;
  void _internal_set_minbw(const std::string& value);
  std::string* _internal_mutable_minbw();
  public:

  // string min_bw_guarantee = 6;
  void clear_min_bw_guarantee();
  const std::string& min_bw_guarantee() const;
  void set_min_bw_guarantee(const std::string& value);
  void set_min_bw_guarantee(std::string&& value);
  void set_min_bw_guarantee(const char* value);
  void set_min_bw_guarantee(const char* value, size_t size);
  std::string* mutable_min_bw_guarantee();
  std::string* release_min_bw_guarantee();
  void set_allocated_min_bw_guarantee(std::string* min_bw_guarantee);
  private:
  const std::string& _internal_min_bw_guarantee() const;
  void _internal_set_min_bw_guarantee(const std::string& value);
  std::string* _internal_mutable_min_bw_guarantee();
  public:

  // string min_iops_guarantee = 7;
  void clear_min_iops_guarantee();
  const std::string& min_iops_guarantee() const;
  void set_min_iops_guarantee(const std::string& value);
  void set_min_iops_guarantee(std::string&& value);
  void set_min_iops_guarantee(const char* value);
  void set_min_iops_guarantee(const char* value, size_t size);
  std::string* mutable_min_iops_guarantee();
  std::string* release_min_iops_guarantee();
  void set_allocated_min_iops_guarantee(std::string* min_iops_guarantee);
  private:
  const std::string& _internal_min_iops_guarantee() const;
  void _internal_set_min_iops_guarantee(const std::string& value);
  std::string* _internal_mutable_min_iops_guarantee();
  public:

  // string name = 8;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.QOSResult.VolumePolicies)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr maxbw_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr maxiops_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr miniops_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr minbw_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr min_bw_guarantee_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr min_iops_guarantee_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class QOSResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.QOSResult) */ {
 public:
  inline QOSResult() : QOSResult(nullptr) {}
  virtual ~QOSResult();
  explicit constexpr QOSResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QOSResult(const QOSResult& from);
  QOSResult(QOSResult&& from) noexcept
    : QOSResult() {
    *this = ::std::move(from);
  }

  inline QOSResult& operator=(const QOSResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline QOSResult& operator=(QOSResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QOSResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const QOSResult* internal_default_instance() {
    return reinterpret_cast<const QOSResult*>(
               &_QOSResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    234;

  friend void swap(QOSResult& a, QOSResult& b) {
    a.Swap(&b);
  }
  inline void Swap(QOSResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QOSResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QOSResult* New() const final {
    return CreateMaybeMessage<QOSResult>(nullptr);
  }

  QOSResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QOSResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QOSResult& from);
  void MergeFrom(const QOSResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QOSResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.QOSResult";
  }
  protected:
  explicit QOSResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef QOSResult_Arrays Arrays;
  typedef QOSResult_RebuildPolicy RebuildPolicy;
  typedef QOSResult_VolumePolicies VolumePolicies;

  // accessors -------------------------------------------------------

  enum : int {
    kArrayNameFieldNumber = 1,
    kRebuildPolicyFieldNumber = 2,
    kVolumePoliciesFieldNumber = 3,
  };
  // repeated .grpc_cli.QOSResult.Arrays arrayName = 1;
  int arrayname_size() const;
  private:
  int _internal_arrayname_size() const;
  public:
  void clear_arrayname();
  ::grpc_cli::QOSResult_Arrays* mutable_arrayname(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::QOSResult_Arrays >*
      mutable_arrayname();
  private:
  const ::grpc_cli::QOSResult_Arrays& _internal_arrayname(int index) const;
  ::grpc_cli::QOSResult_Arrays* _internal_add_arrayname();
  public:
  const ::grpc_cli::QOSResult_Arrays& arrayname(int index) const;
  ::grpc_cli::QOSResult_Arrays* add_arrayname();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::QOSResult_Arrays >&
      arrayname() const;

  // repeated .grpc_cli.QOSResult.RebuildPolicy rebuildPolicy = 2;
  int rebuildpolicy_size() const;
  private:
  int _internal_rebuildpolicy_size() const;
  public:
  void clear_rebuildpolicy();
  ::grpc_cli::QOSResult_RebuildPolicy* mutable_rebuildpolicy(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::QOSResult_RebuildPolicy >*
      mutable_rebuildpolicy();
  private:
  const ::grpc_cli::QOSResult_RebuildPolicy& _internal_rebuildpolicy(int index) const;
  ::grpc_cli::QOSResult_RebuildPolicy* _internal_add_rebuildpolicy();
  public:
  const ::grpc_cli::QOSResult_RebuildPolicy& rebuildpolicy(int index) const;
  ::grpc_cli::QOSResult_RebuildPolicy* add_rebuildpolicy();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::QOSResult_RebuildPolicy >&
      rebuildpolicy() const;

  // repeated .grpc_cli.QOSResult.VolumePolicies volumePolicies = 3;
  int volumepolicies_size() const;
  private:
  int _internal_volumepolicies_size() const;
  public:
  void clear_volumepolicies();
  ::grpc_cli::QOSResult_VolumePolicies* mutable_volumepolicies(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::QOSResult_VolumePolicies >*
      mutable_volumepolicies();
  private:
  const ::grpc_cli::QOSResult_VolumePolicies& _internal_volumepolicies(int index) const;
  ::grpc_cli::QOSResult_VolumePolicies* _internal_add_volumepolicies();
  public:
  const ::grpc_cli::QOSResult_VolumePolicies& volumepolicies(int index) const;
  ::grpc_cli::QOSResult_VolumePolicies* add_volumepolicies();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::QOSResult_VolumePolicies >&
      volumepolicies() const;

  // @@protoc_insertion_point(class_scope:grpc_cli.QOSResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::QOSResult_Arrays > arrayname_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::QOSResult_RebuildPolicy > rebuildpolicy_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::QOSResult_VolumePolicies > volumepolicies_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ListQOSPolicyResponse_Result_ListQOSResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ListQOSPolicyResponse.Result.ListQOSResult) */ {
 public:
  inline ListQOSPolicyResponse_Result_ListQOSResult() : ListQOSPolicyResponse_Result_ListQOSResult(nullptr) {}
  virtual ~ListQOSPolicyResponse_Result_ListQOSResult();
  explicit constexpr ListQOSPolicyResponse_Result_ListQOSResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListQOSPolicyResponse_Result_ListQOSResult(const ListQOSPolicyResponse_Result_ListQOSResult& from);
  ListQOSPolicyResponse_Result_ListQOSResult(ListQOSPolicyResponse_Result_ListQOSResult&& from) noexcept
    : ListQOSPolicyResponse_Result_ListQOSResult() {
    *this = ::std::move(from);
  }

  inline ListQOSPolicyResponse_Result_ListQOSResult& operator=(const ListQOSPolicyResponse_Result_ListQOSResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListQOSPolicyResponse_Result_ListQOSResult& operator=(ListQOSPolicyResponse_Result_ListQOSResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListQOSPolicyResponse_Result_ListQOSResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListQOSPolicyResponse_Result_ListQOSResult* internal_default_instance() {
    return reinterpret_cast<const ListQOSPolicyResponse_Result_ListQOSResult*>(
               &_ListQOSPolicyResponse_Result_ListQOSResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    235;

  friend void swap(ListQOSPolicyResponse_Result_ListQOSResult& a, ListQOSPolicyResponse_Result_ListQOSResult& b) {
    a.Swap(&b);
  }
  inline void Swap(ListQOSPolicyResponse_Result_ListQOSResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListQOSPolicyResponse_Result_ListQOSResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListQOSPolicyResponse_Result_ListQOSResult* New() const final {
    return CreateMaybeMessage<ListQOSPolicyResponse_Result_ListQOSResult>(nullptr);
  }

  ListQOSPolicyResponse_Result_ListQOSResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListQOSPolicyResponse_Result_ListQOSResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListQOSPolicyResponse_Result_ListQOSResult& from);
  void MergeFrom(const ListQOSPolicyResponse_Result_ListQOSResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListQOSPolicyResponse_Result_ListQOSResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ListQOSPolicyResponse.Result.ListQOSResult";
  }
  protected:
  explicit ListQOSPolicyResponse_Result_ListQOSResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQosresultFieldNumber = 1,
  };
  // repeated .grpc_cli.QOSResult qosresult = 1;
  int qosresult_size() const;
  private:
  int _internal_qosresult_size() const;
  public:
  void clear_qosresult();
  ::grpc_cli::QOSResult* mutable_qosresult(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::QOSResult >*
      mutable_qosresult();
  private:
  const ::grpc_cli::QOSResult& _internal_qosresult(int index) const;
  ::grpc_cli::QOSResult* _internal_add_qosresult();
  public:
  const ::grpc_cli::QOSResult& qosresult(int index) const;
  ::grpc_cli::QOSResult* add_qosresult();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::QOSResult >&
      qosresult() const;

  // @@protoc_insertion_point(class_scope:grpc_cli.ListQOSPolicyResponse.Result.ListQOSResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::QOSResult > qosresult_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ListQOSPolicyResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ListQOSPolicyResponse.Result) */ {
 public:
  inline ListQOSPolicyResponse_Result() : ListQOSPolicyResponse_Result(nullptr) {}
  virtual ~ListQOSPolicyResponse_Result();
  explicit constexpr ListQOSPolicyResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListQOSPolicyResponse_Result(const ListQOSPolicyResponse_Result& from);
  ListQOSPolicyResponse_Result(ListQOSPolicyResponse_Result&& from) noexcept
    : ListQOSPolicyResponse_Result() {
    *this = ::std::move(from);
  }

  inline ListQOSPolicyResponse_Result& operator=(const ListQOSPolicyResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListQOSPolicyResponse_Result& operator=(ListQOSPolicyResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListQOSPolicyResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListQOSPolicyResponse_Result* internal_default_instance() {
    return reinterpret_cast<const ListQOSPolicyResponse_Result*>(
               &_ListQOSPolicyResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    236;

  friend void swap(ListQOSPolicyResponse_Result& a, ListQOSPolicyResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(ListQOSPolicyResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListQOSPolicyResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListQOSPolicyResponse_Result* New() const final {
    return CreateMaybeMessage<ListQOSPolicyResponse_Result>(nullptr);
  }

  ListQOSPolicyResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListQOSPolicyResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListQOSPolicyResponse_Result& from);
  void MergeFrom(const ListQOSPolicyResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListQOSPolicyResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ListQOSPolicyResponse.Result";
  }
  protected:
  explicit ListQOSPolicyResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ListQOSPolicyResponse_Result_ListQOSResult ListQOSResult;

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // .grpc_cli.ListQOSPolicyResponse.Result.ListQOSResult data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::grpc_cli::ListQOSPolicyResponse_Result_ListQOSResult& data() const;
  ::grpc_cli::ListQOSPolicyResponse_Result_ListQOSResult* release_data();
  ::grpc_cli::ListQOSPolicyResponse_Result_ListQOSResult* mutable_data();
  void set_allocated_data(::grpc_cli::ListQOSPolicyResponse_Result_ListQOSResult* data);
  private:
  const ::grpc_cli::ListQOSPolicyResponse_Result_ListQOSResult& _internal_data() const;
  ::grpc_cli::ListQOSPolicyResponse_Result_ListQOSResult* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::grpc_cli::ListQOSPolicyResponse_Result_ListQOSResult* data);
  ::grpc_cli::ListQOSPolicyResponse_Result_ListQOSResult* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:grpc_cli.ListQOSPolicyResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  ::grpc_cli::ListQOSPolicyResponse_Result_ListQOSResult* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ListQOSPolicyResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ListQOSPolicyResponse) */ {
 public:
  inline ListQOSPolicyResponse() : ListQOSPolicyResponse(nullptr) {}
  virtual ~ListQOSPolicyResponse();
  explicit constexpr ListQOSPolicyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListQOSPolicyResponse(const ListQOSPolicyResponse& from);
  ListQOSPolicyResponse(ListQOSPolicyResponse&& from) noexcept
    : ListQOSPolicyResponse() {
    *this = ::std::move(from);
  }

  inline ListQOSPolicyResponse& operator=(const ListQOSPolicyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListQOSPolicyResponse& operator=(ListQOSPolicyResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListQOSPolicyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListQOSPolicyResponse* internal_default_instance() {
    return reinterpret_cast<const ListQOSPolicyResponse*>(
               &_ListQOSPolicyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    237;

  friend void swap(ListQOSPolicyResponse& a, ListQOSPolicyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListQOSPolicyResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListQOSPolicyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListQOSPolicyResponse* New() const final {
    return CreateMaybeMessage<ListQOSPolicyResponse>(nullptr);
  }

  ListQOSPolicyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListQOSPolicyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListQOSPolicyResponse& from);
  void MergeFrom(const ListQOSPolicyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListQOSPolicyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ListQOSPolicyResponse";
  }
  protected:
  explicit ListQOSPolicyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ListQOSPolicyResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.ListQOSPolicyResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::ListQOSPolicyResponse_Result& result() const;
  ::grpc_cli::ListQOSPolicyResponse_Result* release_result();
  ::grpc_cli::ListQOSPolicyResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::ListQOSPolicyResponse_Result* result);
  private:
  const ::grpc_cli::ListQOSPolicyResponse_Result& _internal_result() const;
  ::grpc_cli::ListQOSPolicyResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::ListQOSPolicyResponse_Result* result);
  ::grpc_cli::ListQOSPolicyResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.ListQOSPolicyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::ListQOSPolicyResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class WBTRequest_Param_ArgvEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<WBTRequest_Param_ArgvEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<WBTRequest_Param_ArgvEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  WBTRequest_Param_ArgvEntry_DoNotUse();
  explicit constexpr WBTRequest_Param_ArgvEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit WBTRequest_Param_ArgvEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const WBTRequest_Param_ArgvEntry_DoNotUse& other);
  static const WBTRequest_Param_ArgvEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const WBTRequest_Param_ArgvEntry_DoNotUse*>(&_WBTRequest_Param_ArgvEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "grpc_cli.WBTRequest.Param.ArgvEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "grpc_cli.WBTRequest.Param.ArgvEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cli_2eproto);
    return ::descriptor_table_cli_2eproto.file_level_metadata[238];
  }

  public:
};

// -------------------------------------------------------------------

class WBTRequest_Param PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.WBTRequest.Param) */ {
 public:
  inline WBTRequest_Param() : WBTRequest_Param(nullptr) {}
  virtual ~WBTRequest_Param();
  explicit constexpr WBTRequest_Param(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WBTRequest_Param(const WBTRequest_Param& from);
  WBTRequest_Param(WBTRequest_Param&& from) noexcept
    : WBTRequest_Param() {
    *this = ::std::move(from);
  }

  inline WBTRequest_Param& operator=(const WBTRequest_Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline WBTRequest_Param& operator=(WBTRequest_Param&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WBTRequest_Param& default_instance() {
    return *internal_default_instance();
  }
  static inline const WBTRequest_Param* internal_default_instance() {
    return reinterpret_cast<const WBTRequest_Param*>(
               &_WBTRequest_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    239;

  friend void swap(WBTRequest_Param& a, WBTRequest_Param& b) {
    a.Swap(&b);
  }
  inline void Swap(WBTRequest_Param* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WBTRequest_Param* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WBTRequest_Param* New() const final {
    return CreateMaybeMessage<WBTRequest_Param>(nullptr);
  }

  WBTRequest_Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WBTRequest_Param>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WBTRequest_Param& from);
  void MergeFrom(const WBTRequest_Param& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WBTRequest_Param* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.WBTRequest.Param";
  }
  protected:
  explicit WBTRequest_Param(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kArgvFieldNumber = 2,
    kTestnameFieldNumber = 1,
  };
  // map<string, string> argv = 2;
  int argv_size() const;
  private:
  int _internal_argv_size() const;
  public:
  void clear_argv();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_argv() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_argv();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      argv() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_argv();

  // string testname = 1;
  void clear_testname();
  const std::string& testname() const;
  void set_testname(const std::string& value);
  void set_testname(std::string&& value);
  void set_testname(const char* value);
  void set_testname(const char* value, size_t size);
  std::string* mutable_testname();
  std::string* release_testname();
  void set_allocated_testname(std::string* testname);
  private:
  const std::string& _internal_testname() const;
  void _internal_set_testname(const std::string& value);
  std::string* _internal_mutable_testname();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.WBTRequest.Param)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      WBTRequest_Param_ArgvEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> argv_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr testname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class WBTRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.WBTRequest) */ {
 public:
  inline WBTRequest() : WBTRequest(nullptr) {}
  virtual ~WBTRequest();
  explicit constexpr WBTRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WBTRequest(const WBTRequest& from);
  WBTRequest(WBTRequest&& from) noexcept
    : WBTRequest() {
    *this = ::std::move(from);
  }

  inline WBTRequest& operator=(const WBTRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WBTRequest& operator=(WBTRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WBTRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WBTRequest* internal_default_instance() {
    return reinterpret_cast<const WBTRequest*>(
               &_WBTRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    240;

  friend void swap(WBTRequest& a, WBTRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WBTRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WBTRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WBTRequest* New() const final {
    return CreateMaybeMessage<WBTRequest>(nullptr);
  }

  WBTRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WBTRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WBTRequest& from);
  void MergeFrom(const WBTRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WBTRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.WBTRequest";
  }
  protected:
  explicit WBTRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef WBTRequest_Param Param;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
    kParamFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // .grpc_cli.WBTRequest.Param param = 4;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::grpc_cli::WBTRequest_Param& param() const;
  ::grpc_cli::WBTRequest_Param* release_param();
  ::grpc_cli::WBTRequest_Param* mutable_param();
  void set_allocated_param(::grpc_cli::WBTRequest_Param* param);
  private:
  const ::grpc_cli::WBTRequest_Param& _internal_param() const;
  ::grpc_cli::WBTRequest_Param* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::grpc_cli::WBTRequest_Param* param);
  ::grpc_cli::WBTRequest_Param* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:grpc_cli.WBTRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  ::grpc_cli::WBTRequest_Param* param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class WBTResponse_Result_TestData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.WBTResponse.Result.TestData) */ {
 public:
  inline WBTResponse_Result_TestData() : WBTResponse_Result_TestData(nullptr) {}
  virtual ~WBTResponse_Result_TestData();
  explicit constexpr WBTResponse_Result_TestData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WBTResponse_Result_TestData(const WBTResponse_Result_TestData& from);
  WBTResponse_Result_TestData(WBTResponse_Result_TestData&& from) noexcept
    : WBTResponse_Result_TestData() {
    *this = ::std::move(from);
  }

  inline WBTResponse_Result_TestData& operator=(const WBTResponse_Result_TestData& from) {
    CopyFrom(from);
    return *this;
  }
  inline WBTResponse_Result_TestData& operator=(WBTResponse_Result_TestData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WBTResponse_Result_TestData& default_instance() {
    return *internal_default_instance();
  }
  static inline const WBTResponse_Result_TestData* internal_default_instance() {
    return reinterpret_cast<const WBTResponse_Result_TestData*>(
               &_WBTResponse_Result_TestData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    241;

  friend void swap(WBTResponse_Result_TestData& a, WBTResponse_Result_TestData& b) {
    a.Swap(&b);
  }
  inline void Swap(WBTResponse_Result_TestData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WBTResponse_Result_TestData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WBTResponse_Result_TestData* New() const final {
    return CreateMaybeMessage<WBTResponse_Result_TestData>(nullptr);
  }

  WBTResponse_Result_TestData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WBTResponse_Result_TestData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WBTResponse_Result_TestData& from);
  void MergeFrom(const WBTResponse_Result_TestData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WBTResponse_Result_TestData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.WBTResponse.Result.TestData";
  }
  protected:
  explicit WBTResponse_Result_TestData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTestdataFieldNumber = 1,
  };
  // string testdata = 1;
  void clear_testdata();
  const std::string& testdata() const;
  void set_testdata(const std::string& value);
  void set_testdata(std::string&& value);
  void set_testdata(const char* value);
  void set_testdata(const char* value, size_t size);
  std::string* mutable_testdata();
  std::string* release_testdata();
  void set_allocated_testdata(std::string* testdata);
  private:
  const std::string& _internal_testdata() const;
  void _internal_set_testdata(const std::string& value);
  std::string* _internal_mutable_testdata();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.WBTResponse.Result.TestData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr testdata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class WBTResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.WBTResponse.Result) */ {
 public:
  inline WBTResponse_Result() : WBTResponse_Result(nullptr) {}
  virtual ~WBTResponse_Result();
  explicit constexpr WBTResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WBTResponse_Result(const WBTResponse_Result& from);
  WBTResponse_Result(WBTResponse_Result&& from) noexcept
    : WBTResponse_Result() {
    *this = ::std::move(from);
  }

  inline WBTResponse_Result& operator=(const WBTResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline WBTResponse_Result& operator=(WBTResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WBTResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const WBTResponse_Result* internal_default_instance() {
    return reinterpret_cast<const WBTResponse_Result*>(
               &_WBTResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    242;

  friend void swap(WBTResponse_Result& a, WBTResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(WBTResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WBTResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WBTResponse_Result* New() const final {
    return CreateMaybeMessage<WBTResponse_Result>(nullptr);
  }

  WBTResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WBTResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WBTResponse_Result& from);
  void MergeFrom(const WBTResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WBTResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.WBTResponse.Result";
  }
  protected:
  explicit WBTResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef WBTResponse_Result_TestData TestData;

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // .grpc_cli.WBTResponse.Result.TestData data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::grpc_cli::WBTResponse_Result_TestData& data() const;
  ::grpc_cli::WBTResponse_Result_TestData* release_data();
  ::grpc_cli::WBTResponse_Result_TestData* mutable_data();
  void set_allocated_data(::grpc_cli::WBTResponse_Result_TestData* data);
  private:
  const ::grpc_cli::WBTResponse_Result_TestData& _internal_data() const;
  ::grpc_cli::WBTResponse_Result_TestData* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::grpc_cli::WBTResponse_Result_TestData* data);
  ::grpc_cli::WBTResponse_Result_TestData* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:grpc_cli.WBTResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  ::grpc_cli::WBTResponse_Result_TestData* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class WBTResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.WBTResponse) */ {
 public:
  inline WBTResponse() : WBTResponse(nullptr) {}
  virtual ~WBTResponse();
  explicit constexpr WBTResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WBTResponse(const WBTResponse& from);
  WBTResponse(WBTResponse&& from) noexcept
    : WBTResponse() {
    *this = ::std::move(from);
  }

  inline WBTResponse& operator=(const WBTResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WBTResponse& operator=(WBTResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WBTResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WBTResponse* internal_default_instance() {
    return reinterpret_cast<const WBTResponse*>(
               &_WBTResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    243;

  friend void swap(WBTResponse& a, WBTResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WBTResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WBTResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WBTResponse* New() const final {
    return CreateMaybeMessage<WBTResponse>(nullptr);
  }

  WBTResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WBTResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WBTResponse& from);
  void MergeFrom(const WBTResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WBTResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.WBTResponse";
  }
  protected:
  explicit WBTResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef WBTResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.WBTResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::WBTResponse_Result& result() const;
  ::grpc_cli::WBTResponse_Result* release_result();
  ::grpc_cli::WBTResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::WBTResponse_Result* result);
  private:
  const ::grpc_cli::WBTResponse_Result& _internal_result() const;
  ::grpc_cli::WBTResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::WBTResponse_Result* result);
  ::grpc_cli::WBTResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.WBTResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::WBTResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Status

// int32 code = 1;
inline bool Status::_internal_has_code() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Status::has_code() const {
  return _internal_has_code();
}
inline void Status::clear_code() {
  code_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Status::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Status::code() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Status.code)
  return _internal_code();
}
inline void Status::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  code_ = value;
}
inline void Status::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Status.code)
}

// string event_name = 2;
inline bool Status::_internal_has_event_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Status::has_event_name() const {
  return _internal_has_event_name();
}
inline void Status::clear_event_name() {
  event_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Status::event_name() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Status.event_name)
  return _internal_event_name();
}
inline void Status::set_event_name(const std::string& value) {
  _internal_set_event_name(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Status.event_name)
}
inline std::string* Status::mutable_event_name() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Status.event_name)
  return _internal_mutable_event_name();
}
inline const std::string& Status::_internal_event_name() const {
  return event_name_.Get();
}
inline void Status::_internal_set_event_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  event_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Status::set_event_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  event_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Status.event_name)
}
inline void Status::set_event_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  event_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Status.event_name)
}
inline void Status::set_event_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  event_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Status.event_name)
}
inline std::string* Status::_internal_mutable_event_name() {
  _has_bits_[0] |= 0x00000001u;
  return event_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Status::release_event_name() {
  // @@protoc_insertion_point(field_release:grpc_cli.Status.event_name)
  if (!_internal_has_event_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return event_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Status::set_allocated_event_name(std::string* event_name) {
  if (event_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  event_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Status.event_name)
}

// string description = 3;
inline bool Status::_internal_has_description() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Status::has_description() const {
  return _internal_has_description();
}
inline void Status::clear_description() {
  description_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Status::description() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Status.description)
  return _internal_description();
}
inline void Status::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Status.description)
}
inline std::string* Status::mutable_description() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Status.description)
  return _internal_mutable_description();
}
inline const std::string& Status::_internal_description() const {
  return description_.Get();
}
inline void Status::_internal_set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Status::set_description(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Status.description)
}
inline void Status::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Status.description)
}
inline void Status::set_description(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Status.description)
}
inline std::string* Status::_internal_mutable_description() {
  _has_bits_[0] |= 0x00000002u;
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Status::release_description() {
  // @@protoc_insertion_point(field_release:grpc_cli.Status.description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Status::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Status.description)
}

// string cause = 4;
inline bool Status::_internal_has_cause() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Status::has_cause() const {
  return _internal_has_cause();
}
inline void Status::clear_cause() {
  cause_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Status::cause() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Status.cause)
  return _internal_cause();
}
inline void Status::set_cause(const std::string& value) {
  _internal_set_cause(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Status.cause)
}
inline std::string* Status::mutable_cause() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Status.cause)
  return _internal_mutable_cause();
}
inline const std::string& Status::_internal_cause() const {
  return cause_.Get();
}
inline void Status::_internal_set_cause(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  cause_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Status::set_cause(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  cause_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Status.cause)
}
inline void Status::set_cause(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  cause_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Status.cause)
}
inline void Status::set_cause(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  cause_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Status.cause)
}
inline std::string* Status::_internal_mutable_cause() {
  _has_bits_[0] |= 0x00000004u;
  return cause_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Status::release_cause() {
  // @@protoc_insertion_point(field_release:grpc_cli.Status.cause)
  if (!_internal_has_cause()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return cause_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Status::set_allocated_cause(std::string* cause) {
  if (cause != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  cause_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cause,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Status.cause)
}

// string solution = 5;
inline bool Status::_internal_has_solution() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Status::has_solution() const {
  return _internal_has_solution();
}
inline void Status::clear_solution() {
  solution_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Status::solution() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Status.solution)
  return _internal_solution();
}
inline void Status::set_solution(const std::string& value) {
  _internal_set_solution(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Status.solution)
}
inline std::string* Status::mutable_solution() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Status.solution)
  return _internal_mutable_solution();
}
inline const std::string& Status::_internal_solution() const {
  return solution_.Get();
}
inline void Status::_internal_set_solution(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  solution_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Status::set_solution(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  solution_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Status.solution)
}
inline void Status::set_solution(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  solution_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Status.solution)
}
inline void Status::set_solution(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  solution_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Status.solution)
}
inline std::string* Status::_internal_mutable_solution() {
  _has_bits_[0] |= 0x00000008u;
  return solution_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Status::release_solution() {
  // @@protoc_insertion_point(field_release:grpc_cli.Status.solution)
  if (!_internal_has_solution()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return solution_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Status::set_allocated_solution(std::string* solution) {
  if (solution != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  solution_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), solution,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Status.solution)
}

// string message = 6;
inline bool Status::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Status::has_message() const {
  return _internal_has_message();
}
inline void Status::clear_message() {
  message_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Status::message() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Status.message)
  return _internal_message();
}
inline void Status::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Status.message)
}
inline std::string* Status::mutable_message() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Status.message)
  return _internal_mutable_message();
}
inline const std::string& Status::_internal_message() const {
  return message_.Get();
}
inline void Status::_internal_set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Status::set_message(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Status.message)
}
inline void Status::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Status.message)
}
inline void Status::set_message(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Status.message)
}
inline std::string* Status::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000010u;
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Status::release_message() {
  // @@protoc_insertion_point(field_release:grpc_cli.Status.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Status::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Status.message)
}

// -------------------------------------------------------------------

// PosInfo

// string version = 1;
inline void PosInfo::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& PosInfo::version() const {
  // @@protoc_insertion_point(field_get:grpc_cli.PosInfo.version)
  return _internal_version();
}
inline void PosInfo::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:grpc_cli.PosInfo.version)
}
inline std::string* PosInfo::mutable_version() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.PosInfo.version)
  return _internal_mutable_version();
}
inline const std::string& PosInfo::_internal_version() const {
  return version_.Get();
}
inline void PosInfo::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PosInfo::set_version(std::string&& value) {
  
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.PosInfo.version)
}
inline void PosInfo::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.PosInfo.version)
}
inline void PosInfo::set_version(const char* value,
    size_t size) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.PosInfo.version)
}
inline std::string* PosInfo::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PosInfo::release_version() {
  // @@protoc_insertion_point(field_release:grpc_cli.PosInfo.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PosInfo::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.PosInfo.version)
}

// -------------------------------------------------------------------

// StartSystemRequest

// string command = 1;
inline void StartSystemRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& StartSystemRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StartSystemRequest.command)
  return _internal_command();
}
inline void StartSystemRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StartSystemRequest.command)
}
inline std::string* StartSystemRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StartSystemRequest.command)
  return _internal_mutable_command();
}
inline const std::string& StartSystemRequest::_internal_command() const {
  return command_.Get();
}
inline void StartSystemRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StartSystemRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StartSystemRequest.command)
}
inline void StartSystemRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StartSystemRequest.command)
}
inline void StartSystemRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StartSystemRequest.command)
}
inline std::string* StartSystemRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StartSystemRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.StartSystemRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartSystemRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StartSystemRequest.command)
}

// string rid = 2;
inline void StartSystemRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& StartSystemRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StartSystemRequest.rid)
  return _internal_rid();
}
inline void StartSystemRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StartSystemRequest.rid)
}
inline std::string* StartSystemRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StartSystemRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& StartSystemRequest::_internal_rid() const {
  return rid_.Get();
}
inline void StartSystemRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StartSystemRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StartSystemRequest.rid)
}
inline void StartSystemRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StartSystemRequest.rid)
}
inline void StartSystemRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StartSystemRequest.rid)
}
inline std::string* StartSystemRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StartSystemRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.StartSystemRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartSystemRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StartSystemRequest.rid)
}

// string requestor = 3;
inline void StartSystemRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& StartSystemRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StartSystemRequest.requestor)
  return _internal_requestor();
}
inline void StartSystemRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StartSystemRequest.requestor)
}
inline std::string* StartSystemRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StartSystemRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& StartSystemRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void StartSystemRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StartSystemRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StartSystemRequest.requestor)
}
inline void StartSystemRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StartSystemRequest.requestor)
}
inline void StartSystemRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StartSystemRequest.requestor)
}
inline std::string* StartSystemRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StartSystemRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.StartSystemRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartSystemRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StartSystemRequest.requestor)
}

// -------------------------------------------------------------------

// SystemInfoRequest

// string command = 1;
inline void SystemInfoRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& SystemInfoRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemInfoRequest.command)
  return _internal_command();
}
inline void SystemInfoRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SystemInfoRequest.command)
}
inline std::string* SystemInfoRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemInfoRequest.command)
  return _internal_mutable_command();
}
inline const std::string& SystemInfoRequest::_internal_command() const {
  return command_.Get();
}
inline void SystemInfoRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SystemInfoRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SystemInfoRequest.command)
}
inline void SystemInfoRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SystemInfoRequest.command)
}
inline void SystemInfoRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SystemInfoRequest.command)
}
inline std::string* SystemInfoRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SystemInfoRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemInfoRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SystemInfoRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemInfoRequest.command)
}

// string rid = 2;
inline void SystemInfoRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& SystemInfoRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemInfoRequest.rid)
  return _internal_rid();
}
inline void SystemInfoRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SystemInfoRequest.rid)
}
inline std::string* SystemInfoRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemInfoRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& SystemInfoRequest::_internal_rid() const {
  return rid_.Get();
}
inline void SystemInfoRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SystemInfoRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SystemInfoRequest.rid)
}
inline void SystemInfoRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SystemInfoRequest.rid)
}
inline void SystemInfoRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SystemInfoRequest.rid)
}
inline std::string* SystemInfoRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SystemInfoRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemInfoRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SystemInfoRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemInfoRequest.rid)
}

// string requestor = 3;
inline void SystemInfoRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& SystemInfoRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemInfoRequest.requestor)
  return _internal_requestor();
}
inline void SystemInfoRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SystemInfoRequest.requestor)
}
inline std::string* SystemInfoRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemInfoRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& SystemInfoRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void SystemInfoRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SystemInfoRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SystemInfoRequest.requestor)
}
inline void SystemInfoRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SystemInfoRequest.requestor)
}
inline void SystemInfoRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SystemInfoRequest.requestor)
}
inline std::string* SystemInfoRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SystemInfoRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemInfoRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SystemInfoRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemInfoRequest.requestor)
}

// -------------------------------------------------------------------

// SystemInfoResponse_Result_Data

// string version = 1;
inline void SystemInfoResponse_Result_Data::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& SystemInfoResponse_Result_Data::version() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemInfoResponse.Result.Data.version)
  return _internal_version();
}
inline void SystemInfoResponse_Result_Data::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SystemInfoResponse.Result.Data.version)
}
inline std::string* SystemInfoResponse_Result_Data::mutable_version() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemInfoResponse.Result.Data.version)
  return _internal_mutable_version();
}
inline const std::string& SystemInfoResponse_Result_Data::_internal_version() const {
  return version_.Get();
}
inline void SystemInfoResponse_Result_Data::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SystemInfoResponse_Result_Data::set_version(std::string&& value) {
  
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SystemInfoResponse.Result.Data.version)
}
inline void SystemInfoResponse_Result_Data::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SystemInfoResponse.Result.Data.version)
}
inline void SystemInfoResponse_Result_Data::set_version(const char* value,
    size_t size) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SystemInfoResponse.Result.Data.version)
}
inline std::string* SystemInfoResponse_Result_Data::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SystemInfoResponse_Result_Data::release_version() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemInfoResponse.Result.Data.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SystemInfoResponse_Result_Data::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemInfoResponse.Result.Data.version)
}

// string biosVersion = 2;
inline void SystemInfoResponse_Result_Data::clear_biosversion() {
  biosversion_.ClearToEmpty();
}
inline const std::string& SystemInfoResponse_Result_Data::biosversion() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemInfoResponse.Result.Data.biosVersion)
  return _internal_biosversion();
}
inline void SystemInfoResponse_Result_Data::set_biosversion(const std::string& value) {
  _internal_set_biosversion(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SystemInfoResponse.Result.Data.biosVersion)
}
inline std::string* SystemInfoResponse_Result_Data::mutable_biosversion() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemInfoResponse.Result.Data.biosVersion)
  return _internal_mutable_biosversion();
}
inline const std::string& SystemInfoResponse_Result_Data::_internal_biosversion() const {
  return biosversion_.Get();
}
inline void SystemInfoResponse_Result_Data::_internal_set_biosversion(const std::string& value) {
  
  biosversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SystemInfoResponse_Result_Data::set_biosversion(std::string&& value) {
  
  biosversion_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SystemInfoResponse.Result.Data.biosVersion)
}
inline void SystemInfoResponse_Result_Data::set_biosversion(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  biosversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SystemInfoResponse.Result.Data.biosVersion)
}
inline void SystemInfoResponse_Result_Data::set_biosversion(const char* value,
    size_t size) {
  
  biosversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SystemInfoResponse.Result.Data.biosVersion)
}
inline std::string* SystemInfoResponse_Result_Data::_internal_mutable_biosversion() {
  
  return biosversion_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SystemInfoResponse_Result_Data::release_biosversion() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemInfoResponse.Result.Data.biosVersion)
  return biosversion_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SystemInfoResponse_Result_Data::set_allocated_biosversion(std::string* biosversion) {
  if (biosversion != nullptr) {
    
  } else {
    
  }
  biosversion_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), biosversion,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemInfoResponse.Result.Data.biosVersion)
}

// string biosVendor = 3;
inline void SystemInfoResponse_Result_Data::clear_biosvendor() {
  biosvendor_.ClearToEmpty();
}
inline const std::string& SystemInfoResponse_Result_Data::biosvendor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemInfoResponse.Result.Data.biosVendor)
  return _internal_biosvendor();
}
inline void SystemInfoResponse_Result_Data::set_biosvendor(const std::string& value) {
  _internal_set_biosvendor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SystemInfoResponse.Result.Data.biosVendor)
}
inline std::string* SystemInfoResponse_Result_Data::mutable_biosvendor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemInfoResponse.Result.Data.biosVendor)
  return _internal_mutable_biosvendor();
}
inline const std::string& SystemInfoResponse_Result_Data::_internal_biosvendor() const {
  return biosvendor_.Get();
}
inline void SystemInfoResponse_Result_Data::_internal_set_biosvendor(const std::string& value) {
  
  biosvendor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SystemInfoResponse_Result_Data::set_biosvendor(std::string&& value) {
  
  biosvendor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SystemInfoResponse.Result.Data.biosVendor)
}
inline void SystemInfoResponse_Result_Data::set_biosvendor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  biosvendor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SystemInfoResponse.Result.Data.biosVendor)
}
inline void SystemInfoResponse_Result_Data::set_biosvendor(const char* value,
    size_t size) {
  
  biosvendor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SystemInfoResponse.Result.Data.biosVendor)
}
inline std::string* SystemInfoResponse_Result_Data::_internal_mutable_biosvendor() {
  
  return biosvendor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SystemInfoResponse_Result_Data::release_biosvendor() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemInfoResponse.Result.Data.biosVendor)
  return biosvendor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SystemInfoResponse_Result_Data::set_allocated_biosvendor(std::string* biosvendor) {
  if (biosvendor != nullptr) {
    
  } else {
    
  }
  biosvendor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), biosvendor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemInfoResponse.Result.Data.biosVendor)
}

// string biosReleaseDate = 4;
inline void SystemInfoResponse_Result_Data::clear_biosreleasedate() {
  biosreleasedate_.ClearToEmpty();
}
inline const std::string& SystemInfoResponse_Result_Data::biosreleasedate() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemInfoResponse.Result.Data.biosReleaseDate)
  return _internal_biosreleasedate();
}
inline void SystemInfoResponse_Result_Data::set_biosreleasedate(const std::string& value) {
  _internal_set_biosreleasedate(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SystemInfoResponse.Result.Data.biosReleaseDate)
}
inline std::string* SystemInfoResponse_Result_Data::mutable_biosreleasedate() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemInfoResponse.Result.Data.biosReleaseDate)
  return _internal_mutable_biosreleasedate();
}
inline const std::string& SystemInfoResponse_Result_Data::_internal_biosreleasedate() const {
  return biosreleasedate_.Get();
}
inline void SystemInfoResponse_Result_Data::_internal_set_biosreleasedate(const std::string& value) {
  
  biosreleasedate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SystemInfoResponse_Result_Data::set_biosreleasedate(std::string&& value) {
  
  biosreleasedate_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SystemInfoResponse.Result.Data.biosReleaseDate)
}
inline void SystemInfoResponse_Result_Data::set_biosreleasedate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  biosreleasedate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SystemInfoResponse.Result.Data.biosReleaseDate)
}
inline void SystemInfoResponse_Result_Data::set_biosreleasedate(const char* value,
    size_t size) {
  
  biosreleasedate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SystemInfoResponse.Result.Data.biosReleaseDate)
}
inline std::string* SystemInfoResponse_Result_Data::_internal_mutable_biosreleasedate() {
  
  return biosreleasedate_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SystemInfoResponse_Result_Data::release_biosreleasedate() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemInfoResponse.Result.Data.biosReleaseDate)
  return biosreleasedate_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SystemInfoResponse_Result_Data::set_allocated_biosreleasedate(std::string* biosreleasedate) {
  if (biosreleasedate != nullptr) {
    
  } else {
    
  }
  biosreleasedate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), biosreleasedate,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemInfoResponse.Result.Data.biosReleaseDate)
}

// string systemManufacturer = 5;
inline void SystemInfoResponse_Result_Data::clear_systemmanufacturer() {
  systemmanufacturer_.ClearToEmpty();
}
inline const std::string& SystemInfoResponse_Result_Data::systemmanufacturer() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemInfoResponse.Result.Data.systemManufacturer)
  return _internal_systemmanufacturer();
}
inline void SystemInfoResponse_Result_Data::set_systemmanufacturer(const std::string& value) {
  _internal_set_systemmanufacturer(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SystemInfoResponse.Result.Data.systemManufacturer)
}
inline std::string* SystemInfoResponse_Result_Data::mutable_systemmanufacturer() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemInfoResponse.Result.Data.systemManufacturer)
  return _internal_mutable_systemmanufacturer();
}
inline const std::string& SystemInfoResponse_Result_Data::_internal_systemmanufacturer() const {
  return systemmanufacturer_.Get();
}
inline void SystemInfoResponse_Result_Data::_internal_set_systemmanufacturer(const std::string& value) {
  
  systemmanufacturer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SystemInfoResponse_Result_Data::set_systemmanufacturer(std::string&& value) {
  
  systemmanufacturer_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SystemInfoResponse.Result.Data.systemManufacturer)
}
inline void SystemInfoResponse_Result_Data::set_systemmanufacturer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  systemmanufacturer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SystemInfoResponse.Result.Data.systemManufacturer)
}
inline void SystemInfoResponse_Result_Data::set_systemmanufacturer(const char* value,
    size_t size) {
  
  systemmanufacturer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SystemInfoResponse.Result.Data.systemManufacturer)
}
inline std::string* SystemInfoResponse_Result_Data::_internal_mutable_systemmanufacturer() {
  
  return systemmanufacturer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SystemInfoResponse_Result_Data::release_systemmanufacturer() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemInfoResponse.Result.Data.systemManufacturer)
  return systemmanufacturer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SystemInfoResponse_Result_Data::set_allocated_systemmanufacturer(std::string* systemmanufacturer) {
  if (systemmanufacturer != nullptr) {
    
  } else {
    
  }
  systemmanufacturer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), systemmanufacturer,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemInfoResponse.Result.Data.systemManufacturer)
}

// string systemProductName = 6;
inline void SystemInfoResponse_Result_Data::clear_systemproductname() {
  systemproductname_.ClearToEmpty();
}
inline const std::string& SystemInfoResponse_Result_Data::systemproductname() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemInfoResponse.Result.Data.systemProductName)
  return _internal_systemproductname();
}
inline void SystemInfoResponse_Result_Data::set_systemproductname(const std::string& value) {
  _internal_set_systemproductname(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SystemInfoResponse.Result.Data.systemProductName)
}
inline std::string* SystemInfoResponse_Result_Data::mutable_systemproductname() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemInfoResponse.Result.Data.systemProductName)
  return _internal_mutable_systemproductname();
}
inline const std::string& SystemInfoResponse_Result_Data::_internal_systemproductname() const {
  return systemproductname_.Get();
}
inline void SystemInfoResponse_Result_Data::_internal_set_systemproductname(const std::string& value) {
  
  systemproductname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SystemInfoResponse_Result_Data::set_systemproductname(std::string&& value) {
  
  systemproductname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SystemInfoResponse.Result.Data.systemProductName)
}
inline void SystemInfoResponse_Result_Data::set_systemproductname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  systemproductname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SystemInfoResponse.Result.Data.systemProductName)
}
inline void SystemInfoResponse_Result_Data::set_systemproductname(const char* value,
    size_t size) {
  
  systemproductname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SystemInfoResponse.Result.Data.systemProductName)
}
inline std::string* SystemInfoResponse_Result_Data::_internal_mutable_systemproductname() {
  
  return systemproductname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SystemInfoResponse_Result_Data::release_systemproductname() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemInfoResponse.Result.Data.systemProductName)
  return systemproductname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SystemInfoResponse_Result_Data::set_allocated_systemproductname(std::string* systemproductname) {
  if (systemproductname != nullptr) {
    
  } else {
    
  }
  systemproductname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), systemproductname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemInfoResponse.Result.Data.systemProductName)
}

// string systemSerialNumber = 7;
inline void SystemInfoResponse_Result_Data::clear_systemserialnumber() {
  systemserialnumber_.ClearToEmpty();
}
inline const std::string& SystemInfoResponse_Result_Data::systemserialnumber() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemInfoResponse.Result.Data.systemSerialNumber)
  return _internal_systemserialnumber();
}
inline void SystemInfoResponse_Result_Data::set_systemserialnumber(const std::string& value) {
  _internal_set_systemserialnumber(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SystemInfoResponse.Result.Data.systemSerialNumber)
}
inline std::string* SystemInfoResponse_Result_Data::mutable_systemserialnumber() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemInfoResponse.Result.Data.systemSerialNumber)
  return _internal_mutable_systemserialnumber();
}
inline const std::string& SystemInfoResponse_Result_Data::_internal_systemserialnumber() const {
  return systemserialnumber_.Get();
}
inline void SystemInfoResponse_Result_Data::_internal_set_systemserialnumber(const std::string& value) {
  
  systemserialnumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SystemInfoResponse_Result_Data::set_systemserialnumber(std::string&& value) {
  
  systemserialnumber_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SystemInfoResponse.Result.Data.systemSerialNumber)
}
inline void SystemInfoResponse_Result_Data::set_systemserialnumber(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  systemserialnumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SystemInfoResponse.Result.Data.systemSerialNumber)
}
inline void SystemInfoResponse_Result_Data::set_systemserialnumber(const char* value,
    size_t size) {
  
  systemserialnumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SystemInfoResponse.Result.Data.systemSerialNumber)
}
inline std::string* SystemInfoResponse_Result_Data::_internal_mutable_systemserialnumber() {
  
  return systemserialnumber_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SystemInfoResponse_Result_Data::release_systemserialnumber() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemInfoResponse.Result.Data.systemSerialNumber)
  return systemserialnumber_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SystemInfoResponse_Result_Data::set_allocated_systemserialnumber(std::string* systemserialnumber) {
  if (systemserialnumber != nullptr) {
    
  } else {
    
  }
  systemserialnumber_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), systemserialnumber,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemInfoResponse.Result.Data.systemSerialNumber)
}

// string systemUuid = 8;
inline void SystemInfoResponse_Result_Data::clear_systemuuid() {
  systemuuid_.ClearToEmpty();
}
inline const std::string& SystemInfoResponse_Result_Data::systemuuid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemInfoResponse.Result.Data.systemUuid)
  return _internal_systemuuid();
}
inline void SystemInfoResponse_Result_Data::set_systemuuid(const std::string& value) {
  _internal_set_systemuuid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SystemInfoResponse.Result.Data.systemUuid)
}
inline std::string* SystemInfoResponse_Result_Data::mutable_systemuuid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemInfoResponse.Result.Data.systemUuid)
  return _internal_mutable_systemuuid();
}
inline const std::string& SystemInfoResponse_Result_Data::_internal_systemuuid() const {
  return systemuuid_.Get();
}
inline void SystemInfoResponse_Result_Data::_internal_set_systemuuid(const std::string& value) {
  
  systemuuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SystemInfoResponse_Result_Data::set_systemuuid(std::string&& value) {
  
  systemuuid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SystemInfoResponse.Result.Data.systemUuid)
}
inline void SystemInfoResponse_Result_Data::set_systemuuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  systemuuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SystemInfoResponse.Result.Data.systemUuid)
}
inline void SystemInfoResponse_Result_Data::set_systemuuid(const char* value,
    size_t size) {
  
  systemuuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SystemInfoResponse.Result.Data.systemUuid)
}
inline std::string* SystemInfoResponse_Result_Data::_internal_mutable_systemuuid() {
  
  return systemuuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SystemInfoResponse_Result_Data::release_systemuuid() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemInfoResponse.Result.Data.systemUuid)
  return systemuuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SystemInfoResponse_Result_Data::set_allocated_systemuuid(std::string* systemuuid) {
  if (systemuuid != nullptr) {
    
  } else {
    
  }
  systemuuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), systemuuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemInfoResponse.Result.Data.systemUuid)
}

// string baseboardManufacturer = 9;
inline void SystemInfoResponse_Result_Data::clear_baseboardmanufacturer() {
  baseboardmanufacturer_.ClearToEmpty();
}
inline const std::string& SystemInfoResponse_Result_Data::baseboardmanufacturer() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemInfoResponse.Result.Data.baseboardManufacturer)
  return _internal_baseboardmanufacturer();
}
inline void SystemInfoResponse_Result_Data::set_baseboardmanufacturer(const std::string& value) {
  _internal_set_baseboardmanufacturer(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SystemInfoResponse.Result.Data.baseboardManufacturer)
}
inline std::string* SystemInfoResponse_Result_Data::mutable_baseboardmanufacturer() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemInfoResponse.Result.Data.baseboardManufacturer)
  return _internal_mutable_baseboardmanufacturer();
}
inline const std::string& SystemInfoResponse_Result_Data::_internal_baseboardmanufacturer() const {
  return baseboardmanufacturer_.Get();
}
inline void SystemInfoResponse_Result_Data::_internal_set_baseboardmanufacturer(const std::string& value) {
  
  baseboardmanufacturer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SystemInfoResponse_Result_Data::set_baseboardmanufacturer(std::string&& value) {
  
  baseboardmanufacturer_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SystemInfoResponse.Result.Data.baseboardManufacturer)
}
inline void SystemInfoResponse_Result_Data::set_baseboardmanufacturer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  baseboardmanufacturer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SystemInfoResponse.Result.Data.baseboardManufacturer)
}
inline void SystemInfoResponse_Result_Data::set_baseboardmanufacturer(const char* value,
    size_t size) {
  
  baseboardmanufacturer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SystemInfoResponse.Result.Data.baseboardManufacturer)
}
inline std::string* SystemInfoResponse_Result_Data::_internal_mutable_baseboardmanufacturer() {
  
  return baseboardmanufacturer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SystemInfoResponse_Result_Data::release_baseboardmanufacturer() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemInfoResponse.Result.Data.baseboardManufacturer)
  return baseboardmanufacturer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SystemInfoResponse_Result_Data::set_allocated_baseboardmanufacturer(std::string* baseboardmanufacturer) {
  if (baseboardmanufacturer != nullptr) {
    
  } else {
    
  }
  baseboardmanufacturer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), baseboardmanufacturer,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemInfoResponse.Result.Data.baseboardManufacturer)
}

// string baseboardProductName = 10;
inline void SystemInfoResponse_Result_Data::clear_baseboardproductname() {
  baseboardproductname_.ClearToEmpty();
}
inline const std::string& SystemInfoResponse_Result_Data::baseboardproductname() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemInfoResponse.Result.Data.baseboardProductName)
  return _internal_baseboardproductname();
}
inline void SystemInfoResponse_Result_Data::set_baseboardproductname(const std::string& value) {
  _internal_set_baseboardproductname(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SystemInfoResponse.Result.Data.baseboardProductName)
}
inline std::string* SystemInfoResponse_Result_Data::mutable_baseboardproductname() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemInfoResponse.Result.Data.baseboardProductName)
  return _internal_mutable_baseboardproductname();
}
inline const std::string& SystemInfoResponse_Result_Data::_internal_baseboardproductname() const {
  return baseboardproductname_.Get();
}
inline void SystemInfoResponse_Result_Data::_internal_set_baseboardproductname(const std::string& value) {
  
  baseboardproductname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SystemInfoResponse_Result_Data::set_baseboardproductname(std::string&& value) {
  
  baseboardproductname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SystemInfoResponse.Result.Data.baseboardProductName)
}
inline void SystemInfoResponse_Result_Data::set_baseboardproductname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  baseboardproductname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SystemInfoResponse.Result.Data.baseboardProductName)
}
inline void SystemInfoResponse_Result_Data::set_baseboardproductname(const char* value,
    size_t size) {
  
  baseboardproductname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SystemInfoResponse.Result.Data.baseboardProductName)
}
inline std::string* SystemInfoResponse_Result_Data::_internal_mutable_baseboardproductname() {
  
  return baseboardproductname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SystemInfoResponse_Result_Data::release_baseboardproductname() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemInfoResponse.Result.Data.baseboardProductName)
  return baseboardproductname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SystemInfoResponse_Result_Data::set_allocated_baseboardproductname(std::string* baseboardproductname) {
  if (baseboardproductname != nullptr) {
    
  } else {
    
  }
  baseboardproductname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), baseboardproductname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemInfoResponse.Result.Data.baseboardProductName)
}

// string baseboardSerialNumber = 11;
inline void SystemInfoResponse_Result_Data::clear_baseboardserialnumber() {
  baseboardserialnumber_.ClearToEmpty();
}
inline const std::string& SystemInfoResponse_Result_Data::baseboardserialnumber() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemInfoResponse.Result.Data.baseboardSerialNumber)
  return _internal_baseboardserialnumber();
}
inline void SystemInfoResponse_Result_Data::set_baseboardserialnumber(const std::string& value) {
  _internal_set_baseboardserialnumber(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SystemInfoResponse.Result.Data.baseboardSerialNumber)
}
inline std::string* SystemInfoResponse_Result_Data::mutable_baseboardserialnumber() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemInfoResponse.Result.Data.baseboardSerialNumber)
  return _internal_mutable_baseboardserialnumber();
}
inline const std::string& SystemInfoResponse_Result_Data::_internal_baseboardserialnumber() const {
  return baseboardserialnumber_.Get();
}
inline void SystemInfoResponse_Result_Data::_internal_set_baseboardserialnumber(const std::string& value) {
  
  baseboardserialnumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SystemInfoResponse_Result_Data::set_baseboardserialnumber(std::string&& value) {
  
  baseboardserialnumber_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SystemInfoResponse.Result.Data.baseboardSerialNumber)
}
inline void SystemInfoResponse_Result_Data::set_baseboardserialnumber(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  baseboardserialnumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SystemInfoResponse.Result.Data.baseboardSerialNumber)
}
inline void SystemInfoResponse_Result_Data::set_baseboardserialnumber(const char* value,
    size_t size) {
  
  baseboardserialnumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SystemInfoResponse.Result.Data.baseboardSerialNumber)
}
inline std::string* SystemInfoResponse_Result_Data::_internal_mutable_baseboardserialnumber() {
  
  return baseboardserialnumber_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SystemInfoResponse_Result_Data::release_baseboardserialnumber() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemInfoResponse.Result.Data.baseboardSerialNumber)
  return baseboardserialnumber_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SystemInfoResponse_Result_Data::set_allocated_baseboardserialnumber(std::string* baseboardserialnumber) {
  if (baseboardserialnumber != nullptr) {
    
  } else {
    
  }
  baseboardserialnumber_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), baseboardserialnumber,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemInfoResponse.Result.Data.baseboardSerialNumber)
}

// string baseboardVersion = 12;
inline void SystemInfoResponse_Result_Data::clear_baseboardversion() {
  baseboardversion_.ClearToEmpty();
}
inline const std::string& SystemInfoResponse_Result_Data::baseboardversion() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemInfoResponse.Result.Data.baseboardVersion)
  return _internal_baseboardversion();
}
inline void SystemInfoResponse_Result_Data::set_baseboardversion(const std::string& value) {
  _internal_set_baseboardversion(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SystemInfoResponse.Result.Data.baseboardVersion)
}
inline std::string* SystemInfoResponse_Result_Data::mutable_baseboardversion() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemInfoResponse.Result.Data.baseboardVersion)
  return _internal_mutable_baseboardversion();
}
inline const std::string& SystemInfoResponse_Result_Data::_internal_baseboardversion() const {
  return baseboardversion_.Get();
}
inline void SystemInfoResponse_Result_Data::_internal_set_baseboardversion(const std::string& value) {
  
  baseboardversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SystemInfoResponse_Result_Data::set_baseboardversion(std::string&& value) {
  
  baseboardversion_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SystemInfoResponse.Result.Data.baseboardVersion)
}
inline void SystemInfoResponse_Result_Data::set_baseboardversion(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  baseboardversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SystemInfoResponse.Result.Data.baseboardVersion)
}
inline void SystemInfoResponse_Result_Data::set_baseboardversion(const char* value,
    size_t size) {
  
  baseboardversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SystemInfoResponse.Result.Data.baseboardVersion)
}
inline std::string* SystemInfoResponse_Result_Data::_internal_mutable_baseboardversion() {
  
  return baseboardversion_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SystemInfoResponse_Result_Data::release_baseboardversion() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemInfoResponse.Result.Data.baseboardVersion)
  return baseboardversion_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SystemInfoResponse_Result_Data::set_allocated_baseboardversion(std::string* baseboardversion) {
  if (baseboardversion != nullptr) {
    
  } else {
    
  }
  baseboardversion_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), baseboardversion,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemInfoResponse.Result.Data.baseboardVersion)
}

// string processorManufacturer = 13;
inline void SystemInfoResponse_Result_Data::clear_processormanufacturer() {
  processormanufacturer_.ClearToEmpty();
}
inline const std::string& SystemInfoResponse_Result_Data::processormanufacturer() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemInfoResponse.Result.Data.processorManufacturer)
  return _internal_processormanufacturer();
}
inline void SystemInfoResponse_Result_Data::set_processormanufacturer(const std::string& value) {
  _internal_set_processormanufacturer(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SystemInfoResponse.Result.Data.processorManufacturer)
}
inline std::string* SystemInfoResponse_Result_Data::mutable_processormanufacturer() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemInfoResponse.Result.Data.processorManufacturer)
  return _internal_mutable_processormanufacturer();
}
inline const std::string& SystemInfoResponse_Result_Data::_internal_processormanufacturer() const {
  return processormanufacturer_.Get();
}
inline void SystemInfoResponse_Result_Data::_internal_set_processormanufacturer(const std::string& value) {
  
  processormanufacturer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SystemInfoResponse_Result_Data::set_processormanufacturer(std::string&& value) {
  
  processormanufacturer_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SystemInfoResponse.Result.Data.processorManufacturer)
}
inline void SystemInfoResponse_Result_Data::set_processormanufacturer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  processormanufacturer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SystemInfoResponse.Result.Data.processorManufacturer)
}
inline void SystemInfoResponse_Result_Data::set_processormanufacturer(const char* value,
    size_t size) {
  
  processormanufacturer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SystemInfoResponse.Result.Data.processorManufacturer)
}
inline std::string* SystemInfoResponse_Result_Data::_internal_mutable_processormanufacturer() {
  
  return processormanufacturer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SystemInfoResponse_Result_Data::release_processormanufacturer() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemInfoResponse.Result.Data.processorManufacturer)
  return processormanufacturer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SystemInfoResponse_Result_Data::set_allocated_processormanufacturer(std::string* processormanufacturer) {
  if (processormanufacturer != nullptr) {
    
  } else {
    
  }
  processormanufacturer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), processormanufacturer,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemInfoResponse.Result.Data.processorManufacturer)
}

// string processorVersion = 14;
inline void SystemInfoResponse_Result_Data::clear_processorversion() {
  processorversion_.ClearToEmpty();
}
inline const std::string& SystemInfoResponse_Result_Data::processorversion() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemInfoResponse.Result.Data.processorVersion)
  return _internal_processorversion();
}
inline void SystemInfoResponse_Result_Data::set_processorversion(const std::string& value) {
  _internal_set_processorversion(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SystemInfoResponse.Result.Data.processorVersion)
}
inline std::string* SystemInfoResponse_Result_Data::mutable_processorversion() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemInfoResponse.Result.Data.processorVersion)
  return _internal_mutable_processorversion();
}
inline const std::string& SystemInfoResponse_Result_Data::_internal_processorversion() const {
  return processorversion_.Get();
}
inline void SystemInfoResponse_Result_Data::_internal_set_processorversion(const std::string& value) {
  
  processorversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SystemInfoResponse_Result_Data::set_processorversion(std::string&& value) {
  
  processorversion_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SystemInfoResponse.Result.Data.processorVersion)
}
inline void SystemInfoResponse_Result_Data::set_processorversion(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  processorversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SystemInfoResponse.Result.Data.processorVersion)
}
inline void SystemInfoResponse_Result_Data::set_processorversion(const char* value,
    size_t size) {
  
  processorversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SystemInfoResponse.Result.Data.processorVersion)
}
inline std::string* SystemInfoResponse_Result_Data::_internal_mutable_processorversion() {
  
  return processorversion_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SystemInfoResponse_Result_Data::release_processorversion() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemInfoResponse.Result.Data.processorVersion)
  return processorversion_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SystemInfoResponse_Result_Data::set_allocated_processorversion(std::string* processorversion) {
  if (processorversion != nullptr) {
    
  } else {
    
  }
  processorversion_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), processorversion,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemInfoResponse.Result.Data.processorVersion)
}

// string processorFrequency = 15;
inline void SystemInfoResponse_Result_Data::clear_processorfrequency() {
  processorfrequency_.ClearToEmpty();
}
inline const std::string& SystemInfoResponse_Result_Data::processorfrequency() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemInfoResponse.Result.Data.processorFrequency)
  return _internal_processorfrequency();
}
inline void SystemInfoResponse_Result_Data::set_processorfrequency(const std::string& value) {
  _internal_set_processorfrequency(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SystemInfoResponse.Result.Data.processorFrequency)
}
inline std::string* SystemInfoResponse_Result_Data::mutable_processorfrequency() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemInfoResponse.Result.Data.processorFrequency)
  return _internal_mutable_processorfrequency();
}
inline const std::string& SystemInfoResponse_Result_Data::_internal_processorfrequency() const {
  return processorfrequency_.Get();
}
inline void SystemInfoResponse_Result_Data::_internal_set_processorfrequency(const std::string& value) {
  
  processorfrequency_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SystemInfoResponse_Result_Data::set_processorfrequency(std::string&& value) {
  
  processorfrequency_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SystemInfoResponse.Result.Data.processorFrequency)
}
inline void SystemInfoResponse_Result_Data::set_processorfrequency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  processorfrequency_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SystemInfoResponse.Result.Data.processorFrequency)
}
inline void SystemInfoResponse_Result_Data::set_processorfrequency(const char* value,
    size_t size) {
  
  processorfrequency_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SystemInfoResponse.Result.Data.processorFrequency)
}
inline std::string* SystemInfoResponse_Result_Data::_internal_mutable_processorfrequency() {
  
  return processorfrequency_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SystemInfoResponse_Result_Data::release_processorfrequency() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemInfoResponse.Result.Data.processorFrequency)
  return processorfrequency_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SystemInfoResponse_Result_Data::set_allocated_processorfrequency(std::string* processorfrequency) {
  if (processorfrequency != nullptr) {
    
  } else {
    
  }
  processorfrequency_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), processorfrequency,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemInfoResponse.Result.Data.processorFrequency)
}

// -------------------------------------------------------------------

// SystemInfoResponse_Result

// .grpc_cli.Status status = 1;
inline bool SystemInfoResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SystemInfoResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void SystemInfoResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& SystemInfoResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& SystemInfoResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemInfoResponse.Result.status)
  return _internal_status();
}
inline void SystemInfoResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.SystemInfoResponse.Result.status)
}
inline ::grpc_cli::Status* SystemInfoResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* SystemInfoResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemInfoResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* SystemInfoResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* SystemInfoResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemInfoResponse.Result.status)
  return _internal_mutable_status();
}
inline void SystemInfoResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemInfoResponse.Result.status)
}

// .grpc_cli.SystemInfoResponse.Result.Data data = 2;
inline bool SystemInfoResponse_Result::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool SystemInfoResponse_Result::has_data() const {
  return _internal_has_data();
}
inline void SystemInfoResponse_Result::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::grpc_cli::SystemInfoResponse_Result_Data& SystemInfoResponse_Result::_internal_data() const {
  const ::grpc_cli::SystemInfoResponse_Result_Data* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::SystemInfoResponse_Result_Data&>(
      ::grpc_cli::_SystemInfoResponse_Result_Data_default_instance_);
}
inline const ::grpc_cli::SystemInfoResponse_Result_Data& SystemInfoResponse_Result::data() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemInfoResponse.Result.data)
  return _internal_data();
}
inline void SystemInfoResponse_Result::unsafe_arena_set_allocated_data(
    ::grpc_cli::SystemInfoResponse_Result_Data* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.SystemInfoResponse.Result.data)
}
inline ::grpc_cli::SystemInfoResponse_Result_Data* SystemInfoResponse_Result::release_data() {
  
  ::grpc_cli::SystemInfoResponse_Result_Data* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::SystemInfoResponse_Result_Data* SystemInfoResponse_Result::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemInfoResponse.Result.data)
  
  ::grpc_cli::SystemInfoResponse_Result_Data* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::grpc_cli::SystemInfoResponse_Result_Data* SystemInfoResponse_Result::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::SystemInfoResponse_Result_Data>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::grpc_cli::SystemInfoResponse_Result_Data* SystemInfoResponse_Result::mutable_data() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemInfoResponse.Result.data)
  return _internal_mutable_data();
}
inline void SystemInfoResponse_Result::set_allocated_data(::grpc_cli::SystemInfoResponse_Result_Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemInfoResponse.Result.data)
}

// -------------------------------------------------------------------

// SystemInfoResponse

// string command = 1;
inline void SystemInfoResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& SystemInfoResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemInfoResponse.command)
  return _internal_command();
}
inline void SystemInfoResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SystemInfoResponse.command)
}
inline std::string* SystemInfoResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemInfoResponse.command)
  return _internal_mutable_command();
}
inline const std::string& SystemInfoResponse::_internal_command() const {
  return command_.Get();
}
inline void SystemInfoResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SystemInfoResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SystemInfoResponse.command)
}
inline void SystemInfoResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SystemInfoResponse.command)
}
inline void SystemInfoResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SystemInfoResponse.command)
}
inline std::string* SystemInfoResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SystemInfoResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemInfoResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SystemInfoResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemInfoResponse.command)
}

// string rid = 2;
inline void SystemInfoResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& SystemInfoResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemInfoResponse.rid)
  return _internal_rid();
}
inline void SystemInfoResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SystemInfoResponse.rid)
}
inline std::string* SystemInfoResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemInfoResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& SystemInfoResponse::_internal_rid() const {
  return rid_.Get();
}
inline void SystemInfoResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SystemInfoResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SystemInfoResponse.rid)
}
inline void SystemInfoResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SystemInfoResponse.rid)
}
inline void SystemInfoResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SystemInfoResponse.rid)
}
inline std::string* SystemInfoResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SystemInfoResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemInfoResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SystemInfoResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemInfoResponse.rid)
}

// .grpc_cli.SystemInfoResponse.Result result = 3;
inline bool SystemInfoResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool SystemInfoResponse::has_result() const {
  return _internal_has_result();
}
inline void SystemInfoResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::SystemInfoResponse_Result& SystemInfoResponse::_internal_result() const {
  const ::grpc_cli::SystemInfoResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::SystemInfoResponse_Result&>(
      ::grpc_cli::_SystemInfoResponse_Result_default_instance_);
}
inline const ::grpc_cli::SystemInfoResponse_Result& SystemInfoResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemInfoResponse.result)
  return _internal_result();
}
inline void SystemInfoResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::SystemInfoResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.SystemInfoResponse.result)
}
inline ::grpc_cli::SystemInfoResponse_Result* SystemInfoResponse::release_result() {
  
  ::grpc_cli::SystemInfoResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::SystemInfoResponse_Result* SystemInfoResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemInfoResponse.result)
  
  ::grpc_cli::SystemInfoResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::SystemInfoResponse_Result* SystemInfoResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::SystemInfoResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::SystemInfoResponse_Result* SystemInfoResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemInfoResponse.result)
  return _internal_mutable_result();
}
inline void SystemInfoResponse::set_allocated_result(::grpc_cli::SystemInfoResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemInfoResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool SystemInfoResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool SystemInfoResponse::has_info() const {
  return _internal_has_info();
}
inline void SystemInfoResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& SystemInfoResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& SystemInfoResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemInfoResponse.info)
  return _internal_info();
}
inline void SystemInfoResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.SystemInfoResponse.info)
}
inline ::grpc_cli::PosInfo* SystemInfoResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* SystemInfoResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemInfoResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* SystemInfoResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* SystemInfoResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemInfoResponse.info)
  return _internal_mutable_info();
}
inline void SystemInfoResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemInfoResponse.info)
}

// -------------------------------------------------------------------

// StopSystemRequest

// string command = 1;
inline void StopSystemRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& StopSystemRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StopSystemRequest.command)
  return _internal_command();
}
inline void StopSystemRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StopSystemRequest.command)
}
inline std::string* StopSystemRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StopSystemRequest.command)
  return _internal_mutable_command();
}
inline const std::string& StopSystemRequest::_internal_command() const {
  return command_.Get();
}
inline void StopSystemRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StopSystemRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StopSystemRequest.command)
}
inline void StopSystemRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StopSystemRequest.command)
}
inline void StopSystemRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StopSystemRequest.command)
}
inline std::string* StopSystemRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StopSystemRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.StopSystemRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopSystemRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StopSystemRequest.command)
}

// string rid = 2;
inline void StopSystemRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& StopSystemRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StopSystemRequest.rid)
  return _internal_rid();
}
inline void StopSystemRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StopSystemRequest.rid)
}
inline std::string* StopSystemRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StopSystemRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& StopSystemRequest::_internal_rid() const {
  return rid_.Get();
}
inline void StopSystemRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StopSystemRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StopSystemRequest.rid)
}
inline void StopSystemRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StopSystemRequest.rid)
}
inline void StopSystemRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StopSystemRequest.rid)
}
inline std::string* StopSystemRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StopSystemRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.StopSystemRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopSystemRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StopSystemRequest.rid)
}

// string requestor = 3;
inline void StopSystemRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& StopSystemRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StopSystemRequest.requestor)
  return _internal_requestor();
}
inline void StopSystemRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StopSystemRequest.requestor)
}
inline std::string* StopSystemRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StopSystemRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& StopSystemRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void StopSystemRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StopSystemRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StopSystemRequest.requestor)
}
inline void StopSystemRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StopSystemRequest.requestor)
}
inline void StopSystemRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StopSystemRequest.requestor)
}
inline std::string* StopSystemRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StopSystemRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.StopSystemRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopSystemRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StopSystemRequest.requestor)
}

// -------------------------------------------------------------------

// StopSystemResponse_Result

// .grpc_cli.Status status = 1;
inline bool StopSystemResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool StopSystemResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void StopSystemResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& StopSystemResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& StopSystemResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StopSystemResponse.Result.status)
  return _internal_status();
}
inline void StopSystemResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.StopSystemResponse.Result.status)
}
inline ::grpc_cli::Status* StopSystemResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* StopSystemResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.StopSystemResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* StopSystemResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* StopSystemResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StopSystemResponse.Result.status)
  return _internal_mutable_status();
}
inline void StopSystemResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StopSystemResponse.Result.status)
}

// -------------------------------------------------------------------

// StopSystemResponse

// string command = 1;
inline void StopSystemResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& StopSystemResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StopSystemResponse.command)
  return _internal_command();
}
inline void StopSystemResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StopSystemResponse.command)
}
inline std::string* StopSystemResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StopSystemResponse.command)
  return _internal_mutable_command();
}
inline const std::string& StopSystemResponse::_internal_command() const {
  return command_.Get();
}
inline void StopSystemResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StopSystemResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StopSystemResponse.command)
}
inline void StopSystemResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StopSystemResponse.command)
}
inline void StopSystemResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StopSystemResponse.command)
}
inline std::string* StopSystemResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StopSystemResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.StopSystemResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopSystemResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StopSystemResponse.command)
}

// string rid = 2;
inline void StopSystemResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& StopSystemResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StopSystemResponse.rid)
  return _internal_rid();
}
inline void StopSystemResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StopSystemResponse.rid)
}
inline std::string* StopSystemResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StopSystemResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& StopSystemResponse::_internal_rid() const {
  return rid_.Get();
}
inline void StopSystemResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StopSystemResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StopSystemResponse.rid)
}
inline void StopSystemResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StopSystemResponse.rid)
}
inline void StopSystemResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StopSystemResponse.rid)
}
inline std::string* StopSystemResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StopSystemResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.StopSystemResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopSystemResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StopSystemResponse.rid)
}

// .grpc_cli.StopSystemResponse.Result result = 3;
inline bool StopSystemResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool StopSystemResponse::has_result() const {
  return _internal_has_result();
}
inline void StopSystemResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::StopSystemResponse_Result& StopSystemResponse::_internal_result() const {
  const ::grpc_cli::StopSystemResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::StopSystemResponse_Result&>(
      ::grpc_cli::_StopSystemResponse_Result_default_instance_);
}
inline const ::grpc_cli::StopSystemResponse_Result& StopSystemResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StopSystemResponse.result)
  return _internal_result();
}
inline void StopSystemResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::StopSystemResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.StopSystemResponse.result)
}
inline ::grpc_cli::StopSystemResponse_Result* StopSystemResponse::release_result() {
  
  ::grpc_cli::StopSystemResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::StopSystemResponse_Result* StopSystemResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.StopSystemResponse.result)
  
  ::grpc_cli::StopSystemResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::StopSystemResponse_Result* StopSystemResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::StopSystemResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::StopSystemResponse_Result* StopSystemResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StopSystemResponse.result)
  return _internal_mutable_result();
}
inline void StopSystemResponse::set_allocated_result(::grpc_cli::StopSystemResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StopSystemResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool StopSystemResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool StopSystemResponse::has_info() const {
  return _internal_has_info();
}
inline void StopSystemResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& StopSystemResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& StopSystemResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StopSystemResponse.info)
  return _internal_info();
}
inline void StopSystemResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.StopSystemResponse.info)
}
inline ::grpc_cli::PosInfo* StopSystemResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* StopSystemResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.StopSystemResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* StopSystemResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* StopSystemResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StopSystemResponse.info)
  return _internal_mutable_info();
}
inline void StopSystemResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StopSystemResponse.info)
}

// -------------------------------------------------------------------

// GetSystemPropertyRequest

// string command = 1;
inline void GetSystemPropertyRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& GetSystemPropertyRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetSystemPropertyRequest.command)
  return _internal_command();
}
inline void GetSystemPropertyRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.GetSystemPropertyRequest.command)
}
inline std::string* GetSystemPropertyRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetSystemPropertyRequest.command)
  return _internal_mutable_command();
}
inline const std::string& GetSystemPropertyRequest::_internal_command() const {
  return command_.Get();
}
inline void GetSystemPropertyRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetSystemPropertyRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.GetSystemPropertyRequest.command)
}
inline void GetSystemPropertyRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.GetSystemPropertyRequest.command)
}
inline void GetSystemPropertyRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.GetSystemPropertyRequest.command)
}
inline std::string* GetSystemPropertyRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetSystemPropertyRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetSystemPropertyRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSystemPropertyRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetSystemPropertyRequest.command)
}

// string rid = 2;
inline void GetSystemPropertyRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& GetSystemPropertyRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetSystemPropertyRequest.rid)
  return _internal_rid();
}
inline void GetSystemPropertyRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.GetSystemPropertyRequest.rid)
}
inline std::string* GetSystemPropertyRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetSystemPropertyRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& GetSystemPropertyRequest::_internal_rid() const {
  return rid_.Get();
}
inline void GetSystemPropertyRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetSystemPropertyRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.GetSystemPropertyRequest.rid)
}
inline void GetSystemPropertyRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.GetSystemPropertyRequest.rid)
}
inline void GetSystemPropertyRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.GetSystemPropertyRequest.rid)
}
inline std::string* GetSystemPropertyRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetSystemPropertyRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetSystemPropertyRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSystemPropertyRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetSystemPropertyRequest.rid)
}

// string requestor = 3;
inline void GetSystemPropertyRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& GetSystemPropertyRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetSystemPropertyRequest.requestor)
  return _internal_requestor();
}
inline void GetSystemPropertyRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.GetSystemPropertyRequest.requestor)
}
inline std::string* GetSystemPropertyRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetSystemPropertyRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& GetSystemPropertyRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void GetSystemPropertyRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetSystemPropertyRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.GetSystemPropertyRequest.requestor)
}
inline void GetSystemPropertyRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.GetSystemPropertyRequest.requestor)
}
inline void GetSystemPropertyRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.GetSystemPropertyRequest.requestor)
}
inline std::string* GetSystemPropertyRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetSystemPropertyRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetSystemPropertyRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSystemPropertyRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetSystemPropertyRequest.requestor)
}

// -------------------------------------------------------------------

// GetSystemPropertyResponse_Result_Data

// string rebuild_policy = 1;
inline void GetSystemPropertyResponse_Result_Data::clear_rebuild_policy() {
  rebuild_policy_.ClearToEmpty();
}
inline const std::string& GetSystemPropertyResponse_Result_Data::rebuild_policy() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetSystemPropertyResponse.Result.Data.rebuild_policy)
  return _internal_rebuild_policy();
}
inline void GetSystemPropertyResponse_Result_Data::set_rebuild_policy(const std::string& value) {
  _internal_set_rebuild_policy(value);
  // @@protoc_insertion_point(field_set:grpc_cli.GetSystemPropertyResponse.Result.Data.rebuild_policy)
}
inline std::string* GetSystemPropertyResponse_Result_Data::mutable_rebuild_policy() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetSystemPropertyResponse.Result.Data.rebuild_policy)
  return _internal_mutable_rebuild_policy();
}
inline const std::string& GetSystemPropertyResponse_Result_Data::_internal_rebuild_policy() const {
  return rebuild_policy_.Get();
}
inline void GetSystemPropertyResponse_Result_Data::_internal_set_rebuild_policy(const std::string& value) {
  
  rebuild_policy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetSystemPropertyResponse_Result_Data::set_rebuild_policy(std::string&& value) {
  
  rebuild_policy_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.GetSystemPropertyResponse.Result.Data.rebuild_policy)
}
inline void GetSystemPropertyResponse_Result_Data::set_rebuild_policy(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rebuild_policy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.GetSystemPropertyResponse.Result.Data.rebuild_policy)
}
inline void GetSystemPropertyResponse_Result_Data::set_rebuild_policy(const char* value,
    size_t size) {
  
  rebuild_policy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.GetSystemPropertyResponse.Result.Data.rebuild_policy)
}
inline std::string* GetSystemPropertyResponse_Result_Data::_internal_mutable_rebuild_policy() {
  
  return rebuild_policy_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetSystemPropertyResponse_Result_Data::release_rebuild_policy() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetSystemPropertyResponse.Result.Data.rebuild_policy)
  return rebuild_policy_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSystemPropertyResponse_Result_Data::set_allocated_rebuild_policy(std::string* rebuild_policy) {
  if (rebuild_policy != nullptr) {
    
  } else {
    
  }
  rebuild_policy_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rebuild_policy,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetSystemPropertyResponse.Result.Data.rebuild_policy)
}

// -------------------------------------------------------------------

// GetSystemPropertyResponse_Result

// .grpc_cli.Status status = 1;
inline bool GetSystemPropertyResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool GetSystemPropertyResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void GetSystemPropertyResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& GetSystemPropertyResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& GetSystemPropertyResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetSystemPropertyResponse.Result.status)
  return _internal_status();
}
inline void GetSystemPropertyResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.GetSystemPropertyResponse.Result.status)
}
inline ::grpc_cli::Status* GetSystemPropertyResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* GetSystemPropertyResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetSystemPropertyResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* GetSystemPropertyResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* GetSystemPropertyResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetSystemPropertyResponse.Result.status)
  return _internal_mutable_status();
}
inline void GetSystemPropertyResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetSystemPropertyResponse.Result.status)
}

// .grpc_cli.GetSystemPropertyResponse.Result.Data data = 2;
inline bool GetSystemPropertyResponse_Result::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool GetSystemPropertyResponse_Result::has_data() const {
  return _internal_has_data();
}
inline void GetSystemPropertyResponse_Result::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::grpc_cli::GetSystemPropertyResponse_Result_Data& GetSystemPropertyResponse_Result::_internal_data() const {
  const ::grpc_cli::GetSystemPropertyResponse_Result_Data* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::GetSystemPropertyResponse_Result_Data&>(
      ::grpc_cli::_GetSystemPropertyResponse_Result_Data_default_instance_);
}
inline const ::grpc_cli::GetSystemPropertyResponse_Result_Data& GetSystemPropertyResponse_Result::data() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetSystemPropertyResponse.Result.data)
  return _internal_data();
}
inline void GetSystemPropertyResponse_Result::unsafe_arena_set_allocated_data(
    ::grpc_cli::GetSystemPropertyResponse_Result_Data* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.GetSystemPropertyResponse.Result.data)
}
inline ::grpc_cli::GetSystemPropertyResponse_Result_Data* GetSystemPropertyResponse_Result::release_data() {
  
  ::grpc_cli::GetSystemPropertyResponse_Result_Data* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::GetSystemPropertyResponse_Result_Data* GetSystemPropertyResponse_Result::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetSystemPropertyResponse.Result.data)
  
  ::grpc_cli::GetSystemPropertyResponse_Result_Data* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::grpc_cli::GetSystemPropertyResponse_Result_Data* GetSystemPropertyResponse_Result::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::GetSystemPropertyResponse_Result_Data>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::grpc_cli::GetSystemPropertyResponse_Result_Data* GetSystemPropertyResponse_Result::mutable_data() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetSystemPropertyResponse.Result.data)
  return _internal_mutable_data();
}
inline void GetSystemPropertyResponse_Result::set_allocated_data(::grpc_cli::GetSystemPropertyResponse_Result_Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetSystemPropertyResponse.Result.data)
}

// -------------------------------------------------------------------

// GetSystemPropertyResponse

// string command = 1;
inline void GetSystemPropertyResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& GetSystemPropertyResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetSystemPropertyResponse.command)
  return _internal_command();
}
inline void GetSystemPropertyResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.GetSystemPropertyResponse.command)
}
inline std::string* GetSystemPropertyResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetSystemPropertyResponse.command)
  return _internal_mutable_command();
}
inline const std::string& GetSystemPropertyResponse::_internal_command() const {
  return command_.Get();
}
inline void GetSystemPropertyResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetSystemPropertyResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.GetSystemPropertyResponse.command)
}
inline void GetSystemPropertyResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.GetSystemPropertyResponse.command)
}
inline void GetSystemPropertyResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.GetSystemPropertyResponse.command)
}
inline std::string* GetSystemPropertyResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetSystemPropertyResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetSystemPropertyResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSystemPropertyResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetSystemPropertyResponse.command)
}

// string rid = 2;
inline void GetSystemPropertyResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& GetSystemPropertyResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetSystemPropertyResponse.rid)
  return _internal_rid();
}
inline void GetSystemPropertyResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.GetSystemPropertyResponse.rid)
}
inline std::string* GetSystemPropertyResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetSystemPropertyResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& GetSystemPropertyResponse::_internal_rid() const {
  return rid_.Get();
}
inline void GetSystemPropertyResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetSystemPropertyResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.GetSystemPropertyResponse.rid)
}
inline void GetSystemPropertyResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.GetSystemPropertyResponse.rid)
}
inline void GetSystemPropertyResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.GetSystemPropertyResponse.rid)
}
inline std::string* GetSystemPropertyResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetSystemPropertyResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetSystemPropertyResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSystemPropertyResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetSystemPropertyResponse.rid)
}

// .grpc_cli.GetSystemPropertyResponse.Result result = 3;
inline bool GetSystemPropertyResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool GetSystemPropertyResponse::has_result() const {
  return _internal_has_result();
}
inline void GetSystemPropertyResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::GetSystemPropertyResponse_Result& GetSystemPropertyResponse::_internal_result() const {
  const ::grpc_cli::GetSystemPropertyResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::GetSystemPropertyResponse_Result&>(
      ::grpc_cli::_GetSystemPropertyResponse_Result_default_instance_);
}
inline const ::grpc_cli::GetSystemPropertyResponse_Result& GetSystemPropertyResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetSystemPropertyResponse.result)
  return _internal_result();
}
inline void GetSystemPropertyResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::GetSystemPropertyResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.GetSystemPropertyResponse.result)
}
inline ::grpc_cli::GetSystemPropertyResponse_Result* GetSystemPropertyResponse::release_result() {
  
  ::grpc_cli::GetSystemPropertyResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::GetSystemPropertyResponse_Result* GetSystemPropertyResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetSystemPropertyResponse.result)
  
  ::grpc_cli::GetSystemPropertyResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::GetSystemPropertyResponse_Result* GetSystemPropertyResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::GetSystemPropertyResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::GetSystemPropertyResponse_Result* GetSystemPropertyResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetSystemPropertyResponse.result)
  return _internal_mutable_result();
}
inline void GetSystemPropertyResponse::set_allocated_result(::grpc_cli::GetSystemPropertyResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetSystemPropertyResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool GetSystemPropertyResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool GetSystemPropertyResponse::has_info() const {
  return _internal_has_info();
}
inline void GetSystemPropertyResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& GetSystemPropertyResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& GetSystemPropertyResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetSystemPropertyResponse.info)
  return _internal_info();
}
inline void GetSystemPropertyResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.GetSystemPropertyResponse.info)
}
inline ::grpc_cli::PosInfo* GetSystemPropertyResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* GetSystemPropertyResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetSystemPropertyResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* GetSystemPropertyResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* GetSystemPropertyResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetSystemPropertyResponse.info)
  return _internal_mutable_info();
}
inline void GetSystemPropertyResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetSystemPropertyResponse.info)
}

// -------------------------------------------------------------------

// SetSystemPropertyRequest_Param

// string level = 1;
inline void SetSystemPropertyRequest_Param::clear_level() {
  level_.ClearToEmpty();
}
inline const std::string& SetSystemPropertyRequest_Param::level() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetSystemPropertyRequest.Param.level)
  return _internal_level();
}
inline void SetSystemPropertyRequest_Param::set_level(const std::string& value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SetSystemPropertyRequest.Param.level)
}
inline std::string* SetSystemPropertyRequest_Param::mutable_level() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetSystemPropertyRequest.Param.level)
  return _internal_mutable_level();
}
inline const std::string& SetSystemPropertyRequest_Param::_internal_level() const {
  return level_.Get();
}
inline void SetSystemPropertyRequest_Param::_internal_set_level(const std::string& value) {
  
  level_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetSystemPropertyRequest_Param::set_level(std::string&& value) {
  
  level_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SetSystemPropertyRequest.Param.level)
}
inline void SetSystemPropertyRequest_Param::set_level(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  level_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SetSystemPropertyRequest.Param.level)
}
inline void SetSystemPropertyRequest_Param::set_level(const char* value,
    size_t size) {
  
  level_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SetSystemPropertyRequest.Param.level)
}
inline std::string* SetSystemPropertyRequest_Param::_internal_mutable_level() {
  
  return level_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetSystemPropertyRequest_Param::release_level() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetSystemPropertyRequest.Param.level)
  return level_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetSystemPropertyRequest_Param::set_allocated_level(std::string* level) {
  if (level != nullptr) {
    
  } else {
    
  }
  level_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), level,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetSystemPropertyRequest.Param.level)
}

// -------------------------------------------------------------------

// SetSystemPropertyRequest

// string command = 1;
inline void SetSystemPropertyRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& SetSystemPropertyRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetSystemPropertyRequest.command)
  return _internal_command();
}
inline void SetSystemPropertyRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SetSystemPropertyRequest.command)
}
inline std::string* SetSystemPropertyRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetSystemPropertyRequest.command)
  return _internal_mutable_command();
}
inline const std::string& SetSystemPropertyRequest::_internal_command() const {
  return command_.Get();
}
inline void SetSystemPropertyRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetSystemPropertyRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SetSystemPropertyRequest.command)
}
inline void SetSystemPropertyRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SetSystemPropertyRequest.command)
}
inline void SetSystemPropertyRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SetSystemPropertyRequest.command)
}
inline std::string* SetSystemPropertyRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetSystemPropertyRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetSystemPropertyRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetSystemPropertyRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetSystemPropertyRequest.command)
}

// string rid = 2;
inline void SetSystemPropertyRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& SetSystemPropertyRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetSystemPropertyRequest.rid)
  return _internal_rid();
}
inline void SetSystemPropertyRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SetSystemPropertyRequest.rid)
}
inline std::string* SetSystemPropertyRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetSystemPropertyRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& SetSystemPropertyRequest::_internal_rid() const {
  return rid_.Get();
}
inline void SetSystemPropertyRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetSystemPropertyRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SetSystemPropertyRequest.rid)
}
inline void SetSystemPropertyRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SetSystemPropertyRequest.rid)
}
inline void SetSystemPropertyRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SetSystemPropertyRequest.rid)
}
inline std::string* SetSystemPropertyRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetSystemPropertyRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetSystemPropertyRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetSystemPropertyRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetSystemPropertyRequest.rid)
}

// string requestor = 3;
inline void SetSystemPropertyRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& SetSystemPropertyRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetSystemPropertyRequest.requestor)
  return _internal_requestor();
}
inline void SetSystemPropertyRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SetSystemPropertyRequest.requestor)
}
inline std::string* SetSystemPropertyRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetSystemPropertyRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& SetSystemPropertyRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void SetSystemPropertyRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetSystemPropertyRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SetSystemPropertyRequest.requestor)
}
inline void SetSystemPropertyRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SetSystemPropertyRequest.requestor)
}
inline void SetSystemPropertyRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SetSystemPropertyRequest.requestor)
}
inline std::string* SetSystemPropertyRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetSystemPropertyRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetSystemPropertyRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetSystemPropertyRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetSystemPropertyRequest.requestor)
}

// .grpc_cli.SetSystemPropertyRequest.Param param = 4;
inline bool SetSystemPropertyRequest::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool SetSystemPropertyRequest::has_param() const {
  return _internal_has_param();
}
inline void SetSystemPropertyRequest::clear_param() {
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::grpc_cli::SetSystemPropertyRequest_Param& SetSystemPropertyRequest::_internal_param() const {
  const ::grpc_cli::SetSystemPropertyRequest_Param* p = param_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::SetSystemPropertyRequest_Param&>(
      ::grpc_cli::_SetSystemPropertyRequest_Param_default_instance_);
}
inline const ::grpc_cli::SetSystemPropertyRequest_Param& SetSystemPropertyRequest::param() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetSystemPropertyRequest.param)
  return _internal_param();
}
inline void SetSystemPropertyRequest::unsafe_arena_set_allocated_param(
    ::grpc_cli::SetSystemPropertyRequest_Param* param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.SetSystemPropertyRequest.param)
}
inline ::grpc_cli::SetSystemPropertyRequest_Param* SetSystemPropertyRequest::release_param() {
  
  ::grpc_cli::SetSystemPropertyRequest_Param* temp = param_;
  param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::SetSystemPropertyRequest_Param* SetSystemPropertyRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetSystemPropertyRequest.param)
  
  ::grpc_cli::SetSystemPropertyRequest_Param* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::grpc_cli::SetSystemPropertyRequest_Param* SetSystemPropertyRequest::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::SetSystemPropertyRequest_Param>(GetArena());
    param_ = p;
  }
  return param_;
}
inline ::grpc_cli::SetSystemPropertyRequest_Param* SetSystemPropertyRequest::mutable_param() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetSystemPropertyRequest.param)
  return _internal_mutable_param();
}
inline void SetSystemPropertyRequest::set_allocated_param(::grpc_cli::SetSystemPropertyRequest_Param* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetSystemPropertyRequest.param)
}

// -------------------------------------------------------------------

// SetSystemPropertyResponse_Result

// .grpc_cli.Status status = 1;
inline bool SetSystemPropertyResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SetSystemPropertyResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void SetSystemPropertyResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& SetSystemPropertyResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& SetSystemPropertyResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetSystemPropertyResponse.Result.status)
  return _internal_status();
}
inline void SetSystemPropertyResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.SetSystemPropertyResponse.Result.status)
}
inline ::grpc_cli::Status* SetSystemPropertyResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* SetSystemPropertyResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetSystemPropertyResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* SetSystemPropertyResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* SetSystemPropertyResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetSystemPropertyResponse.Result.status)
  return _internal_mutable_status();
}
inline void SetSystemPropertyResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetSystemPropertyResponse.Result.status)
}

// -------------------------------------------------------------------

// SetSystemPropertyResponse

// string command = 1;
inline void SetSystemPropertyResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& SetSystemPropertyResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetSystemPropertyResponse.command)
  return _internal_command();
}
inline void SetSystemPropertyResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SetSystemPropertyResponse.command)
}
inline std::string* SetSystemPropertyResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetSystemPropertyResponse.command)
  return _internal_mutable_command();
}
inline const std::string& SetSystemPropertyResponse::_internal_command() const {
  return command_.Get();
}
inline void SetSystemPropertyResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetSystemPropertyResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SetSystemPropertyResponse.command)
}
inline void SetSystemPropertyResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SetSystemPropertyResponse.command)
}
inline void SetSystemPropertyResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SetSystemPropertyResponse.command)
}
inline std::string* SetSystemPropertyResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetSystemPropertyResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetSystemPropertyResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetSystemPropertyResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetSystemPropertyResponse.command)
}

// string rid = 2;
inline void SetSystemPropertyResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& SetSystemPropertyResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetSystemPropertyResponse.rid)
  return _internal_rid();
}
inline void SetSystemPropertyResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SetSystemPropertyResponse.rid)
}
inline std::string* SetSystemPropertyResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetSystemPropertyResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& SetSystemPropertyResponse::_internal_rid() const {
  return rid_.Get();
}
inline void SetSystemPropertyResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetSystemPropertyResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SetSystemPropertyResponse.rid)
}
inline void SetSystemPropertyResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SetSystemPropertyResponse.rid)
}
inline void SetSystemPropertyResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SetSystemPropertyResponse.rid)
}
inline std::string* SetSystemPropertyResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetSystemPropertyResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetSystemPropertyResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetSystemPropertyResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetSystemPropertyResponse.rid)
}

// .grpc_cli.SetSystemPropertyResponse.Result result = 3;
inline bool SetSystemPropertyResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool SetSystemPropertyResponse::has_result() const {
  return _internal_has_result();
}
inline void SetSystemPropertyResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::SetSystemPropertyResponse_Result& SetSystemPropertyResponse::_internal_result() const {
  const ::grpc_cli::SetSystemPropertyResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::SetSystemPropertyResponse_Result&>(
      ::grpc_cli::_SetSystemPropertyResponse_Result_default_instance_);
}
inline const ::grpc_cli::SetSystemPropertyResponse_Result& SetSystemPropertyResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetSystemPropertyResponse.result)
  return _internal_result();
}
inline void SetSystemPropertyResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::SetSystemPropertyResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.SetSystemPropertyResponse.result)
}
inline ::grpc_cli::SetSystemPropertyResponse_Result* SetSystemPropertyResponse::release_result() {
  
  ::grpc_cli::SetSystemPropertyResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::SetSystemPropertyResponse_Result* SetSystemPropertyResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetSystemPropertyResponse.result)
  
  ::grpc_cli::SetSystemPropertyResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::SetSystemPropertyResponse_Result* SetSystemPropertyResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::SetSystemPropertyResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::SetSystemPropertyResponse_Result* SetSystemPropertyResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetSystemPropertyResponse.result)
  return _internal_mutable_result();
}
inline void SetSystemPropertyResponse::set_allocated_result(::grpc_cli::SetSystemPropertyResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetSystemPropertyResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool SetSystemPropertyResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool SetSystemPropertyResponse::has_info() const {
  return _internal_has_info();
}
inline void SetSystemPropertyResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& SetSystemPropertyResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& SetSystemPropertyResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetSystemPropertyResponse.info)
  return _internal_info();
}
inline void SetSystemPropertyResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.SetSystemPropertyResponse.info)
}
inline ::grpc_cli::PosInfo* SetSystemPropertyResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* SetSystemPropertyResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetSystemPropertyResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* SetSystemPropertyResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* SetSystemPropertyResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetSystemPropertyResponse.info)
  return _internal_mutable_info();
}
inline void SetSystemPropertyResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetSystemPropertyResponse.info)
}

// -------------------------------------------------------------------

// StartTelemetryRequest

// string command = 1;
inline void StartTelemetryRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& StartTelemetryRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StartTelemetryRequest.command)
  return _internal_command();
}
inline void StartTelemetryRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StartTelemetryRequest.command)
}
inline std::string* StartTelemetryRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StartTelemetryRequest.command)
  return _internal_mutable_command();
}
inline const std::string& StartTelemetryRequest::_internal_command() const {
  return command_.Get();
}
inline void StartTelemetryRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StartTelemetryRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StartTelemetryRequest.command)
}
inline void StartTelemetryRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StartTelemetryRequest.command)
}
inline void StartTelemetryRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StartTelemetryRequest.command)
}
inline std::string* StartTelemetryRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StartTelemetryRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.StartTelemetryRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartTelemetryRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StartTelemetryRequest.command)
}

// string rid = 2;
inline void StartTelemetryRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& StartTelemetryRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StartTelemetryRequest.rid)
  return _internal_rid();
}
inline void StartTelemetryRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StartTelemetryRequest.rid)
}
inline std::string* StartTelemetryRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StartTelemetryRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& StartTelemetryRequest::_internal_rid() const {
  return rid_.Get();
}
inline void StartTelemetryRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StartTelemetryRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StartTelemetryRequest.rid)
}
inline void StartTelemetryRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StartTelemetryRequest.rid)
}
inline void StartTelemetryRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StartTelemetryRequest.rid)
}
inline std::string* StartTelemetryRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StartTelemetryRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.StartTelemetryRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartTelemetryRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StartTelemetryRequest.rid)
}

// string requestor = 3;
inline void StartTelemetryRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& StartTelemetryRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StartTelemetryRequest.requestor)
  return _internal_requestor();
}
inline void StartTelemetryRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StartTelemetryRequest.requestor)
}
inline std::string* StartTelemetryRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StartTelemetryRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& StartTelemetryRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void StartTelemetryRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StartTelemetryRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StartTelemetryRequest.requestor)
}
inline void StartTelemetryRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StartTelemetryRequest.requestor)
}
inline void StartTelemetryRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StartTelemetryRequest.requestor)
}
inline std::string* StartTelemetryRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StartTelemetryRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.StartTelemetryRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartTelemetryRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StartTelemetryRequest.requestor)
}

// -------------------------------------------------------------------

// StartTelemetryResponse_Result

// .grpc_cli.Status status = 1;
inline bool StartTelemetryResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool StartTelemetryResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void StartTelemetryResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& StartTelemetryResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& StartTelemetryResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StartTelemetryResponse.Result.status)
  return _internal_status();
}
inline void StartTelemetryResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.StartTelemetryResponse.Result.status)
}
inline ::grpc_cli::Status* StartTelemetryResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* StartTelemetryResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.StartTelemetryResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* StartTelemetryResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* StartTelemetryResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StartTelemetryResponse.Result.status)
  return _internal_mutable_status();
}
inline void StartTelemetryResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StartTelemetryResponse.Result.status)
}

// -------------------------------------------------------------------

// StartTelemetryResponse

// string command = 1;
inline void StartTelemetryResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& StartTelemetryResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StartTelemetryResponse.command)
  return _internal_command();
}
inline void StartTelemetryResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StartTelemetryResponse.command)
}
inline std::string* StartTelemetryResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StartTelemetryResponse.command)
  return _internal_mutable_command();
}
inline const std::string& StartTelemetryResponse::_internal_command() const {
  return command_.Get();
}
inline void StartTelemetryResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StartTelemetryResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StartTelemetryResponse.command)
}
inline void StartTelemetryResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StartTelemetryResponse.command)
}
inline void StartTelemetryResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StartTelemetryResponse.command)
}
inline std::string* StartTelemetryResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StartTelemetryResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.StartTelemetryResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartTelemetryResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StartTelemetryResponse.command)
}

// string rid = 2;
inline void StartTelemetryResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& StartTelemetryResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StartTelemetryResponse.rid)
  return _internal_rid();
}
inline void StartTelemetryResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StartTelemetryResponse.rid)
}
inline std::string* StartTelemetryResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StartTelemetryResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& StartTelemetryResponse::_internal_rid() const {
  return rid_.Get();
}
inline void StartTelemetryResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StartTelemetryResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StartTelemetryResponse.rid)
}
inline void StartTelemetryResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StartTelemetryResponse.rid)
}
inline void StartTelemetryResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StartTelemetryResponse.rid)
}
inline std::string* StartTelemetryResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StartTelemetryResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.StartTelemetryResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartTelemetryResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StartTelemetryResponse.rid)
}

// .grpc_cli.StartTelemetryResponse.Result result = 3;
inline bool StartTelemetryResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool StartTelemetryResponse::has_result() const {
  return _internal_has_result();
}
inline void StartTelemetryResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::StartTelemetryResponse_Result& StartTelemetryResponse::_internal_result() const {
  const ::grpc_cli::StartTelemetryResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::StartTelemetryResponse_Result&>(
      ::grpc_cli::_StartTelemetryResponse_Result_default_instance_);
}
inline const ::grpc_cli::StartTelemetryResponse_Result& StartTelemetryResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StartTelemetryResponse.result)
  return _internal_result();
}
inline void StartTelemetryResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::StartTelemetryResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.StartTelemetryResponse.result)
}
inline ::grpc_cli::StartTelemetryResponse_Result* StartTelemetryResponse::release_result() {
  
  ::grpc_cli::StartTelemetryResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::StartTelemetryResponse_Result* StartTelemetryResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.StartTelemetryResponse.result)
  
  ::grpc_cli::StartTelemetryResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::StartTelemetryResponse_Result* StartTelemetryResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::StartTelemetryResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::StartTelemetryResponse_Result* StartTelemetryResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StartTelemetryResponse.result)
  return _internal_mutable_result();
}
inline void StartTelemetryResponse::set_allocated_result(::grpc_cli::StartTelemetryResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StartTelemetryResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool StartTelemetryResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool StartTelemetryResponse::has_info() const {
  return _internal_has_info();
}
inline void StartTelemetryResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& StartTelemetryResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& StartTelemetryResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StartTelemetryResponse.info)
  return _internal_info();
}
inline void StartTelemetryResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.StartTelemetryResponse.info)
}
inline ::grpc_cli::PosInfo* StartTelemetryResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* StartTelemetryResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.StartTelemetryResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* StartTelemetryResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* StartTelemetryResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StartTelemetryResponse.info)
  return _internal_mutable_info();
}
inline void StartTelemetryResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StartTelemetryResponse.info)
}

// -------------------------------------------------------------------

// StopTelemetryRequest

// string command = 1;
inline void StopTelemetryRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& StopTelemetryRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StopTelemetryRequest.command)
  return _internal_command();
}
inline void StopTelemetryRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StopTelemetryRequest.command)
}
inline std::string* StopTelemetryRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StopTelemetryRequest.command)
  return _internal_mutable_command();
}
inline const std::string& StopTelemetryRequest::_internal_command() const {
  return command_.Get();
}
inline void StopTelemetryRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StopTelemetryRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StopTelemetryRequest.command)
}
inline void StopTelemetryRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StopTelemetryRequest.command)
}
inline void StopTelemetryRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StopTelemetryRequest.command)
}
inline std::string* StopTelemetryRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StopTelemetryRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.StopTelemetryRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopTelemetryRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StopTelemetryRequest.command)
}

// string rid = 2;
inline void StopTelemetryRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& StopTelemetryRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StopTelemetryRequest.rid)
  return _internal_rid();
}
inline void StopTelemetryRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StopTelemetryRequest.rid)
}
inline std::string* StopTelemetryRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StopTelemetryRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& StopTelemetryRequest::_internal_rid() const {
  return rid_.Get();
}
inline void StopTelemetryRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StopTelemetryRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StopTelemetryRequest.rid)
}
inline void StopTelemetryRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StopTelemetryRequest.rid)
}
inline void StopTelemetryRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StopTelemetryRequest.rid)
}
inline std::string* StopTelemetryRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StopTelemetryRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.StopTelemetryRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopTelemetryRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StopTelemetryRequest.rid)
}

// string requestor = 3;
inline void StopTelemetryRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& StopTelemetryRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StopTelemetryRequest.requestor)
  return _internal_requestor();
}
inline void StopTelemetryRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StopTelemetryRequest.requestor)
}
inline std::string* StopTelemetryRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StopTelemetryRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& StopTelemetryRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void StopTelemetryRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StopTelemetryRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StopTelemetryRequest.requestor)
}
inline void StopTelemetryRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StopTelemetryRequest.requestor)
}
inline void StopTelemetryRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StopTelemetryRequest.requestor)
}
inline std::string* StopTelemetryRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StopTelemetryRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.StopTelemetryRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopTelemetryRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StopTelemetryRequest.requestor)
}

// -------------------------------------------------------------------

// StopTelemetryResponse_Result

// .grpc_cli.Status status = 1;
inline bool StopTelemetryResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool StopTelemetryResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void StopTelemetryResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& StopTelemetryResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& StopTelemetryResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StopTelemetryResponse.Result.status)
  return _internal_status();
}
inline void StopTelemetryResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.StopTelemetryResponse.Result.status)
}
inline ::grpc_cli::Status* StopTelemetryResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* StopTelemetryResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.StopTelemetryResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* StopTelemetryResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* StopTelemetryResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StopTelemetryResponse.Result.status)
  return _internal_mutable_status();
}
inline void StopTelemetryResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StopTelemetryResponse.Result.status)
}

// -------------------------------------------------------------------

// StopTelemetryResponse

// string command = 1;
inline void StopTelemetryResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& StopTelemetryResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StopTelemetryResponse.command)
  return _internal_command();
}
inline void StopTelemetryResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StopTelemetryResponse.command)
}
inline std::string* StopTelemetryResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StopTelemetryResponse.command)
  return _internal_mutable_command();
}
inline const std::string& StopTelemetryResponse::_internal_command() const {
  return command_.Get();
}
inline void StopTelemetryResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StopTelemetryResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StopTelemetryResponse.command)
}
inline void StopTelemetryResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StopTelemetryResponse.command)
}
inline void StopTelemetryResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StopTelemetryResponse.command)
}
inline std::string* StopTelemetryResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StopTelemetryResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.StopTelemetryResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopTelemetryResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StopTelemetryResponse.command)
}

// string rid = 2;
inline void StopTelemetryResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& StopTelemetryResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StopTelemetryResponse.rid)
  return _internal_rid();
}
inline void StopTelemetryResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StopTelemetryResponse.rid)
}
inline std::string* StopTelemetryResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StopTelemetryResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& StopTelemetryResponse::_internal_rid() const {
  return rid_.Get();
}
inline void StopTelemetryResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StopTelemetryResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StopTelemetryResponse.rid)
}
inline void StopTelemetryResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StopTelemetryResponse.rid)
}
inline void StopTelemetryResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StopTelemetryResponse.rid)
}
inline std::string* StopTelemetryResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StopTelemetryResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.StopTelemetryResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopTelemetryResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StopTelemetryResponse.rid)
}

// .grpc_cli.StopTelemetryResponse.Result result = 3;
inline bool StopTelemetryResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool StopTelemetryResponse::has_result() const {
  return _internal_has_result();
}
inline void StopTelemetryResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::StopTelemetryResponse_Result& StopTelemetryResponse::_internal_result() const {
  const ::grpc_cli::StopTelemetryResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::StopTelemetryResponse_Result&>(
      ::grpc_cli::_StopTelemetryResponse_Result_default_instance_);
}
inline const ::grpc_cli::StopTelemetryResponse_Result& StopTelemetryResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StopTelemetryResponse.result)
  return _internal_result();
}
inline void StopTelemetryResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::StopTelemetryResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.StopTelemetryResponse.result)
}
inline ::grpc_cli::StopTelemetryResponse_Result* StopTelemetryResponse::release_result() {
  
  ::grpc_cli::StopTelemetryResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::StopTelemetryResponse_Result* StopTelemetryResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.StopTelemetryResponse.result)
  
  ::grpc_cli::StopTelemetryResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::StopTelemetryResponse_Result* StopTelemetryResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::StopTelemetryResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::StopTelemetryResponse_Result* StopTelemetryResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StopTelemetryResponse.result)
  return _internal_mutable_result();
}
inline void StopTelemetryResponse::set_allocated_result(::grpc_cli::StopTelemetryResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StopTelemetryResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool StopTelemetryResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool StopTelemetryResponse::has_info() const {
  return _internal_has_info();
}
inline void StopTelemetryResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& StopTelemetryResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& StopTelemetryResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StopTelemetryResponse.info)
  return _internal_info();
}
inline void StopTelemetryResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.StopTelemetryResponse.info)
}
inline ::grpc_cli::PosInfo* StopTelemetryResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* StopTelemetryResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.StopTelemetryResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* StopTelemetryResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* StopTelemetryResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StopTelemetryResponse.info)
  return _internal_mutable_info();
}
inline void StopTelemetryResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StopTelemetryResponse.info)
}

// -------------------------------------------------------------------

// SetTelemetryPropertyRequest_Param

// string publicationListPath = 1;
inline void SetTelemetryPropertyRequest_Param::clear_publicationlistpath() {
  publicationlistpath_.ClearToEmpty();
}
inline const std::string& SetTelemetryPropertyRequest_Param::publicationlistpath() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetTelemetryPropertyRequest.Param.publicationListPath)
  return _internal_publicationlistpath();
}
inline void SetTelemetryPropertyRequest_Param::set_publicationlistpath(const std::string& value) {
  _internal_set_publicationlistpath(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SetTelemetryPropertyRequest.Param.publicationListPath)
}
inline std::string* SetTelemetryPropertyRequest_Param::mutable_publicationlistpath() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetTelemetryPropertyRequest.Param.publicationListPath)
  return _internal_mutable_publicationlistpath();
}
inline const std::string& SetTelemetryPropertyRequest_Param::_internal_publicationlistpath() const {
  return publicationlistpath_.Get();
}
inline void SetTelemetryPropertyRequest_Param::_internal_set_publicationlistpath(const std::string& value) {
  
  publicationlistpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetTelemetryPropertyRequest_Param::set_publicationlistpath(std::string&& value) {
  
  publicationlistpath_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SetTelemetryPropertyRequest.Param.publicationListPath)
}
inline void SetTelemetryPropertyRequest_Param::set_publicationlistpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  publicationlistpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SetTelemetryPropertyRequest.Param.publicationListPath)
}
inline void SetTelemetryPropertyRequest_Param::set_publicationlistpath(const char* value,
    size_t size) {
  
  publicationlistpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SetTelemetryPropertyRequest.Param.publicationListPath)
}
inline std::string* SetTelemetryPropertyRequest_Param::_internal_mutable_publicationlistpath() {
  
  return publicationlistpath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetTelemetryPropertyRequest_Param::release_publicationlistpath() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetTelemetryPropertyRequest.Param.publicationListPath)
  return publicationlistpath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetTelemetryPropertyRequest_Param::set_allocated_publicationlistpath(std::string* publicationlistpath) {
  if (publicationlistpath != nullptr) {
    
  } else {
    
  }
  publicationlistpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), publicationlistpath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetTelemetryPropertyRequest.Param.publicationListPath)
}

// -------------------------------------------------------------------

// SetTelemetryPropertyRequest

// string command = 1;
inline void SetTelemetryPropertyRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& SetTelemetryPropertyRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetTelemetryPropertyRequest.command)
  return _internal_command();
}
inline void SetTelemetryPropertyRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SetTelemetryPropertyRequest.command)
}
inline std::string* SetTelemetryPropertyRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetTelemetryPropertyRequest.command)
  return _internal_mutable_command();
}
inline const std::string& SetTelemetryPropertyRequest::_internal_command() const {
  return command_.Get();
}
inline void SetTelemetryPropertyRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetTelemetryPropertyRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SetTelemetryPropertyRequest.command)
}
inline void SetTelemetryPropertyRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SetTelemetryPropertyRequest.command)
}
inline void SetTelemetryPropertyRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SetTelemetryPropertyRequest.command)
}
inline std::string* SetTelemetryPropertyRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetTelemetryPropertyRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetTelemetryPropertyRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetTelemetryPropertyRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetTelemetryPropertyRequest.command)
}

// string rid = 2;
inline void SetTelemetryPropertyRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& SetTelemetryPropertyRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetTelemetryPropertyRequest.rid)
  return _internal_rid();
}
inline void SetTelemetryPropertyRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SetTelemetryPropertyRequest.rid)
}
inline std::string* SetTelemetryPropertyRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetTelemetryPropertyRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& SetTelemetryPropertyRequest::_internal_rid() const {
  return rid_.Get();
}
inline void SetTelemetryPropertyRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetTelemetryPropertyRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SetTelemetryPropertyRequest.rid)
}
inline void SetTelemetryPropertyRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SetTelemetryPropertyRequest.rid)
}
inline void SetTelemetryPropertyRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SetTelemetryPropertyRequest.rid)
}
inline std::string* SetTelemetryPropertyRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetTelemetryPropertyRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetTelemetryPropertyRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetTelemetryPropertyRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetTelemetryPropertyRequest.rid)
}

// string requestor = 3;
inline void SetTelemetryPropertyRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& SetTelemetryPropertyRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetTelemetryPropertyRequest.requestor)
  return _internal_requestor();
}
inline void SetTelemetryPropertyRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SetTelemetryPropertyRequest.requestor)
}
inline std::string* SetTelemetryPropertyRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetTelemetryPropertyRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& SetTelemetryPropertyRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void SetTelemetryPropertyRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetTelemetryPropertyRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SetTelemetryPropertyRequest.requestor)
}
inline void SetTelemetryPropertyRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SetTelemetryPropertyRequest.requestor)
}
inline void SetTelemetryPropertyRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SetTelemetryPropertyRequest.requestor)
}
inline std::string* SetTelemetryPropertyRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetTelemetryPropertyRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetTelemetryPropertyRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetTelemetryPropertyRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetTelemetryPropertyRequest.requestor)
}

// .grpc_cli.SetTelemetryPropertyRequest.Param param = 4;
inline bool SetTelemetryPropertyRequest::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool SetTelemetryPropertyRequest::has_param() const {
  return _internal_has_param();
}
inline void SetTelemetryPropertyRequest::clear_param() {
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::grpc_cli::SetTelemetryPropertyRequest_Param& SetTelemetryPropertyRequest::_internal_param() const {
  const ::grpc_cli::SetTelemetryPropertyRequest_Param* p = param_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::SetTelemetryPropertyRequest_Param&>(
      ::grpc_cli::_SetTelemetryPropertyRequest_Param_default_instance_);
}
inline const ::grpc_cli::SetTelemetryPropertyRequest_Param& SetTelemetryPropertyRequest::param() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetTelemetryPropertyRequest.param)
  return _internal_param();
}
inline void SetTelemetryPropertyRequest::unsafe_arena_set_allocated_param(
    ::grpc_cli::SetTelemetryPropertyRequest_Param* param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.SetTelemetryPropertyRequest.param)
}
inline ::grpc_cli::SetTelemetryPropertyRequest_Param* SetTelemetryPropertyRequest::release_param() {
  
  ::grpc_cli::SetTelemetryPropertyRequest_Param* temp = param_;
  param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::SetTelemetryPropertyRequest_Param* SetTelemetryPropertyRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetTelemetryPropertyRequest.param)
  
  ::grpc_cli::SetTelemetryPropertyRequest_Param* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::grpc_cli::SetTelemetryPropertyRequest_Param* SetTelemetryPropertyRequest::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::SetTelemetryPropertyRequest_Param>(GetArena());
    param_ = p;
  }
  return param_;
}
inline ::grpc_cli::SetTelemetryPropertyRequest_Param* SetTelemetryPropertyRequest::mutable_param() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetTelemetryPropertyRequest.param)
  return _internal_mutable_param();
}
inline void SetTelemetryPropertyRequest::set_allocated_param(::grpc_cli::SetTelemetryPropertyRequest_Param* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetTelemetryPropertyRequest.param)
}

// -------------------------------------------------------------------

// SetTelemetryPropertyResponse_Result

// .grpc_cli.Status status = 1;
inline bool SetTelemetryPropertyResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SetTelemetryPropertyResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void SetTelemetryPropertyResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& SetTelemetryPropertyResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& SetTelemetryPropertyResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetTelemetryPropertyResponse.Result.status)
  return _internal_status();
}
inline void SetTelemetryPropertyResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.SetTelemetryPropertyResponse.Result.status)
}
inline ::grpc_cli::Status* SetTelemetryPropertyResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* SetTelemetryPropertyResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetTelemetryPropertyResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* SetTelemetryPropertyResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* SetTelemetryPropertyResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetTelemetryPropertyResponse.Result.status)
  return _internal_mutable_status();
}
inline void SetTelemetryPropertyResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetTelemetryPropertyResponse.Result.status)
}

// -------------------------------------------------------------------

// SetTelemetryPropertyResponse

// string command = 1;
inline void SetTelemetryPropertyResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& SetTelemetryPropertyResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetTelemetryPropertyResponse.command)
  return _internal_command();
}
inline void SetTelemetryPropertyResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SetTelemetryPropertyResponse.command)
}
inline std::string* SetTelemetryPropertyResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetTelemetryPropertyResponse.command)
  return _internal_mutable_command();
}
inline const std::string& SetTelemetryPropertyResponse::_internal_command() const {
  return command_.Get();
}
inline void SetTelemetryPropertyResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetTelemetryPropertyResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SetTelemetryPropertyResponse.command)
}
inline void SetTelemetryPropertyResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SetTelemetryPropertyResponse.command)
}
inline void SetTelemetryPropertyResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SetTelemetryPropertyResponse.command)
}
inline std::string* SetTelemetryPropertyResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetTelemetryPropertyResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetTelemetryPropertyResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetTelemetryPropertyResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetTelemetryPropertyResponse.command)
}

// string rid = 2;
inline void SetTelemetryPropertyResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& SetTelemetryPropertyResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetTelemetryPropertyResponse.rid)
  return _internal_rid();
}
inline void SetTelemetryPropertyResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SetTelemetryPropertyResponse.rid)
}
inline std::string* SetTelemetryPropertyResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetTelemetryPropertyResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& SetTelemetryPropertyResponse::_internal_rid() const {
  return rid_.Get();
}
inline void SetTelemetryPropertyResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetTelemetryPropertyResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SetTelemetryPropertyResponse.rid)
}
inline void SetTelemetryPropertyResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SetTelemetryPropertyResponse.rid)
}
inline void SetTelemetryPropertyResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SetTelemetryPropertyResponse.rid)
}
inline std::string* SetTelemetryPropertyResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetTelemetryPropertyResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetTelemetryPropertyResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetTelemetryPropertyResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetTelemetryPropertyResponse.rid)
}

// .grpc_cli.SetTelemetryPropertyResponse.Result result = 3;
inline bool SetTelemetryPropertyResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool SetTelemetryPropertyResponse::has_result() const {
  return _internal_has_result();
}
inline void SetTelemetryPropertyResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::SetTelemetryPropertyResponse_Result& SetTelemetryPropertyResponse::_internal_result() const {
  const ::grpc_cli::SetTelemetryPropertyResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::SetTelemetryPropertyResponse_Result&>(
      ::grpc_cli::_SetTelemetryPropertyResponse_Result_default_instance_);
}
inline const ::grpc_cli::SetTelemetryPropertyResponse_Result& SetTelemetryPropertyResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetTelemetryPropertyResponse.result)
  return _internal_result();
}
inline void SetTelemetryPropertyResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::SetTelemetryPropertyResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.SetTelemetryPropertyResponse.result)
}
inline ::grpc_cli::SetTelemetryPropertyResponse_Result* SetTelemetryPropertyResponse::release_result() {
  
  ::grpc_cli::SetTelemetryPropertyResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::SetTelemetryPropertyResponse_Result* SetTelemetryPropertyResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetTelemetryPropertyResponse.result)
  
  ::grpc_cli::SetTelemetryPropertyResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::SetTelemetryPropertyResponse_Result* SetTelemetryPropertyResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::SetTelemetryPropertyResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::SetTelemetryPropertyResponse_Result* SetTelemetryPropertyResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetTelemetryPropertyResponse.result)
  return _internal_mutable_result();
}
inline void SetTelemetryPropertyResponse::set_allocated_result(::grpc_cli::SetTelemetryPropertyResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetTelemetryPropertyResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool SetTelemetryPropertyResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool SetTelemetryPropertyResponse::has_info() const {
  return _internal_has_info();
}
inline void SetTelemetryPropertyResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& SetTelemetryPropertyResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& SetTelemetryPropertyResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetTelemetryPropertyResponse.info)
  return _internal_info();
}
inline void SetTelemetryPropertyResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.SetTelemetryPropertyResponse.info)
}
inline ::grpc_cli::PosInfo* SetTelemetryPropertyResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* SetTelemetryPropertyResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetTelemetryPropertyResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* SetTelemetryPropertyResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* SetTelemetryPropertyResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetTelemetryPropertyResponse.info)
  return _internal_mutable_info();
}
inline void SetTelemetryPropertyResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetTelemetryPropertyResponse.info)
}

// -------------------------------------------------------------------

// GetTelemetryPropertyRequest

// string command = 1;
inline void GetTelemetryPropertyRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& GetTelemetryPropertyRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetTelemetryPropertyRequest.command)
  return _internal_command();
}
inline void GetTelemetryPropertyRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.GetTelemetryPropertyRequest.command)
}
inline std::string* GetTelemetryPropertyRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetTelemetryPropertyRequest.command)
  return _internal_mutable_command();
}
inline const std::string& GetTelemetryPropertyRequest::_internal_command() const {
  return command_.Get();
}
inline void GetTelemetryPropertyRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetTelemetryPropertyRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.GetTelemetryPropertyRequest.command)
}
inline void GetTelemetryPropertyRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.GetTelemetryPropertyRequest.command)
}
inline void GetTelemetryPropertyRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.GetTelemetryPropertyRequest.command)
}
inline std::string* GetTelemetryPropertyRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetTelemetryPropertyRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetTelemetryPropertyRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetTelemetryPropertyRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetTelemetryPropertyRequest.command)
}

// string rid = 2;
inline void GetTelemetryPropertyRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& GetTelemetryPropertyRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetTelemetryPropertyRequest.rid)
  return _internal_rid();
}
inline void GetTelemetryPropertyRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.GetTelemetryPropertyRequest.rid)
}
inline std::string* GetTelemetryPropertyRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetTelemetryPropertyRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& GetTelemetryPropertyRequest::_internal_rid() const {
  return rid_.Get();
}
inline void GetTelemetryPropertyRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetTelemetryPropertyRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.GetTelemetryPropertyRequest.rid)
}
inline void GetTelemetryPropertyRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.GetTelemetryPropertyRequest.rid)
}
inline void GetTelemetryPropertyRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.GetTelemetryPropertyRequest.rid)
}
inline std::string* GetTelemetryPropertyRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetTelemetryPropertyRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetTelemetryPropertyRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetTelemetryPropertyRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetTelemetryPropertyRequest.rid)
}

// string requestor = 3;
inline void GetTelemetryPropertyRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& GetTelemetryPropertyRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetTelemetryPropertyRequest.requestor)
  return _internal_requestor();
}
inline void GetTelemetryPropertyRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.GetTelemetryPropertyRequest.requestor)
}
inline std::string* GetTelemetryPropertyRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetTelemetryPropertyRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& GetTelemetryPropertyRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void GetTelemetryPropertyRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetTelemetryPropertyRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.GetTelemetryPropertyRequest.requestor)
}
inline void GetTelemetryPropertyRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.GetTelemetryPropertyRequest.requestor)
}
inline void GetTelemetryPropertyRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.GetTelemetryPropertyRequest.requestor)
}
inline std::string* GetTelemetryPropertyRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetTelemetryPropertyRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetTelemetryPropertyRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetTelemetryPropertyRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetTelemetryPropertyRequest.requestor)
}

// -------------------------------------------------------------------

// GetTelemetryPropertyResponse_Result_TelemetryProperty

// bool status = 1;
inline void GetTelemetryPropertyResponse_Result_TelemetryProperty::clear_status() {
  status_ = false;
}
inline bool GetTelemetryPropertyResponse_Result_TelemetryProperty::_internal_status() const {
  return status_;
}
inline bool GetTelemetryPropertyResponse_Result_TelemetryProperty::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetTelemetryPropertyResponse.Result.TelemetryProperty.status)
  return _internal_status();
}
inline void GetTelemetryPropertyResponse_Result_TelemetryProperty::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void GetTelemetryPropertyResponse_Result_TelemetryProperty::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:grpc_cli.GetTelemetryPropertyResponse.Result.TelemetryProperty.status)
}

// string publicationListPath = 2;
inline void GetTelemetryPropertyResponse_Result_TelemetryProperty::clear_publicationlistpath() {
  publicationlistpath_.ClearToEmpty();
}
inline const std::string& GetTelemetryPropertyResponse_Result_TelemetryProperty::publicationlistpath() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetTelemetryPropertyResponse.Result.TelemetryProperty.publicationListPath)
  return _internal_publicationlistpath();
}
inline void GetTelemetryPropertyResponse_Result_TelemetryProperty::set_publicationlistpath(const std::string& value) {
  _internal_set_publicationlistpath(value);
  // @@protoc_insertion_point(field_set:grpc_cli.GetTelemetryPropertyResponse.Result.TelemetryProperty.publicationListPath)
}
inline std::string* GetTelemetryPropertyResponse_Result_TelemetryProperty::mutable_publicationlistpath() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetTelemetryPropertyResponse.Result.TelemetryProperty.publicationListPath)
  return _internal_mutable_publicationlistpath();
}
inline const std::string& GetTelemetryPropertyResponse_Result_TelemetryProperty::_internal_publicationlistpath() const {
  return publicationlistpath_.Get();
}
inline void GetTelemetryPropertyResponse_Result_TelemetryProperty::_internal_set_publicationlistpath(const std::string& value) {
  
  publicationlistpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetTelemetryPropertyResponse_Result_TelemetryProperty::set_publicationlistpath(std::string&& value) {
  
  publicationlistpath_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.GetTelemetryPropertyResponse.Result.TelemetryProperty.publicationListPath)
}
inline void GetTelemetryPropertyResponse_Result_TelemetryProperty::set_publicationlistpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  publicationlistpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.GetTelemetryPropertyResponse.Result.TelemetryProperty.publicationListPath)
}
inline void GetTelemetryPropertyResponse_Result_TelemetryProperty::set_publicationlistpath(const char* value,
    size_t size) {
  
  publicationlistpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.GetTelemetryPropertyResponse.Result.TelemetryProperty.publicationListPath)
}
inline std::string* GetTelemetryPropertyResponse_Result_TelemetryProperty::_internal_mutable_publicationlistpath() {
  
  return publicationlistpath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetTelemetryPropertyResponse_Result_TelemetryProperty::release_publicationlistpath() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetTelemetryPropertyResponse.Result.TelemetryProperty.publicationListPath)
  return publicationlistpath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetTelemetryPropertyResponse_Result_TelemetryProperty::set_allocated_publicationlistpath(std::string* publicationlistpath) {
  if (publicationlistpath != nullptr) {
    
  } else {
    
  }
  publicationlistpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), publicationlistpath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetTelemetryPropertyResponse.Result.TelemetryProperty.publicationListPath)
}

// -------------------------------------------------------------------

// GetTelemetryPropertyResponse_Result

// .grpc_cli.Status status = 1;
inline bool GetTelemetryPropertyResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool GetTelemetryPropertyResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void GetTelemetryPropertyResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& GetTelemetryPropertyResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& GetTelemetryPropertyResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetTelemetryPropertyResponse.Result.status)
  return _internal_status();
}
inline void GetTelemetryPropertyResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.GetTelemetryPropertyResponse.Result.status)
}
inline ::grpc_cli::Status* GetTelemetryPropertyResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* GetTelemetryPropertyResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetTelemetryPropertyResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* GetTelemetryPropertyResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* GetTelemetryPropertyResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetTelemetryPropertyResponse.Result.status)
  return _internal_mutable_status();
}
inline void GetTelemetryPropertyResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetTelemetryPropertyResponse.Result.status)
}

// .grpc_cli.GetTelemetryPropertyResponse.Result.TelemetryProperty data = 2;
inline bool GetTelemetryPropertyResponse_Result::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool GetTelemetryPropertyResponse_Result::has_data() const {
  return _internal_has_data();
}
inline void GetTelemetryPropertyResponse_Result::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::grpc_cli::GetTelemetryPropertyResponse_Result_TelemetryProperty& GetTelemetryPropertyResponse_Result::_internal_data() const {
  const ::grpc_cli::GetTelemetryPropertyResponse_Result_TelemetryProperty* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::GetTelemetryPropertyResponse_Result_TelemetryProperty&>(
      ::grpc_cli::_GetTelemetryPropertyResponse_Result_TelemetryProperty_default_instance_);
}
inline const ::grpc_cli::GetTelemetryPropertyResponse_Result_TelemetryProperty& GetTelemetryPropertyResponse_Result::data() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetTelemetryPropertyResponse.Result.data)
  return _internal_data();
}
inline void GetTelemetryPropertyResponse_Result::unsafe_arena_set_allocated_data(
    ::grpc_cli::GetTelemetryPropertyResponse_Result_TelemetryProperty* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.GetTelemetryPropertyResponse.Result.data)
}
inline ::grpc_cli::GetTelemetryPropertyResponse_Result_TelemetryProperty* GetTelemetryPropertyResponse_Result::release_data() {
  
  ::grpc_cli::GetTelemetryPropertyResponse_Result_TelemetryProperty* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::GetTelemetryPropertyResponse_Result_TelemetryProperty* GetTelemetryPropertyResponse_Result::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetTelemetryPropertyResponse.Result.data)
  
  ::grpc_cli::GetTelemetryPropertyResponse_Result_TelemetryProperty* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::grpc_cli::GetTelemetryPropertyResponse_Result_TelemetryProperty* GetTelemetryPropertyResponse_Result::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::GetTelemetryPropertyResponse_Result_TelemetryProperty>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::grpc_cli::GetTelemetryPropertyResponse_Result_TelemetryProperty* GetTelemetryPropertyResponse_Result::mutable_data() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetTelemetryPropertyResponse.Result.data)
  return _internal_mutable_data();
}
inline void GetTelemetryPropertyResponse_Result::set_allocated_data(::grpc_cli::GetTelemetryPropertyResponse_Result_TelemetryProperty* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetTelemetryPropertyResponse.Result.data)
}

// -------------------------------------------------------------------

// GetTelemetryPropertyResponse

// string command = 1;
inline void GetTelemetryPropertyResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& GetTelemetryPropertyResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetTelemetryPropertyResponse.command)
  return _internal_command();
}
inline void GetTelemetryPropertyResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.GetTelemetryPropertyResponse.command)
}
inline std::string* GetTelemetryPropertyResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetTelemetryPropertyResponse.command)
  return _internal_mutable_command();
}
inline const std::string& GetTelemetryPropertyResponse::_internal_command() const {
  return command_.Get();
}
inline void GetTelemetryPropertyResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetTelemetryPropertyResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.GetTelemetryPropertyResponse.command)
}
inline void GetTelemetryPropertyResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.GetTelemetryPropertyResponse.command)
}
inline void GetTelemetryPropertyResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.GetTelemetryPropertyResponse.command)
}
inline std::string* GetTelemetryPropertyResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetTelemetryPropertyResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetTelemetryPropertyResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetTelemetryPropertyResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetTelemetryPropertyResponse.command)
}

// string rid = 2;
inline void GetTelemetryPropertyResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& GetTelemetryPropertyResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetTelemetryPropertyResponse.rid)
  return _internal_rid();
}
inline void GetTelemetryPropertyResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.GetTelemetryPropertyResponse.rid)
}
inline std::string* GetTelemetryPropertyResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetTelemetryPropertyResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& GetTelemetryPropertyResponse::_internal_rid() const {
  return rid_.Get();
}
inline void GetTelemetryPropertyResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetTelemetryPropertyResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.GetTelemetryPropertyResponse.rid)
}
inline void GetTelemetryPropertyResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.GetTelemetryPropertyResponse.rid)
}
inline void GetTelemetryPropertyResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.GetTelemetryPropertyResponse.rid)
}
inline std::string* GetTelemetryPropertyResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetTelemetryPropertyResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetTelemetryPropertyResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetTelemetryPropertyResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetTelemetryPropertyResponse.rid)
}

// .grpc_cli.GetTelemetryPropertyResponse.Result result = 3;
inline bool GetTelemetryPropertyResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool GetTelemetryPropertyResponse::has_result() const {
  return _internal_has_result();
}
inline void GetTelemetryPropertyResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::GetTelemetryPropertyResponse_Result& GetTelemetryPropertyResponse::_internal_result() const {
  const ::grpc_cli::GetTelemetryPropertyResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::GetTelemetryPropertyResponse_Result&>(
      ::grpc_cli::_GetTelemetryPropertyResponse_Result_default_instance_);
}
inline const ::grpc_cli::GetTelemetryPropertyResponse_Result& GetTelemetryPropertyResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetTelemetryPropertyResponse.result)
  return _internal_result();
}
inline void GetTelemetryPropertyResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::GetTelemetryPropertyResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.GetTelemetryPropertyResponse.result)
}
inline ::grpc_cli::GetTelemetryPropertyResponse_Result* GetTelemetryPropertyResponse::release_result() {
  
  ::grpc_cli::GetTelemetryPropertyResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::GetTelemetryPropertyResponse_Result* GetTelemetryPropertyResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetTelemetryPropertyResponse.result)
  
  ::grpc_cli::GetTelemetryPropertyResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::GetTelemetryPropertyResponse_Result* GetTelemetryPropertyResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::GetTelemetryPropertyResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::GetTelemetryPropertyResponse_Result* GetTelemetryPropertyResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetTelemetryPropertyResponse.result)
  return _internal_mutable_result();
}
inline void GetTelemetryPropertyResponse::set_allocated_result(::grpc_cli::GetTelemetryPropertyResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetTelemetryPropertyResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool GetTelemetryPropertyResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool GetTelemetryPropertyResponse::has_info() const {
  return _internal_has_info();
}
inline void GetTelemetryPropertyResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& GetTelemetryPropertyResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& GetTelemetryPropertyResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetTelemetryPropertyResponse.info)
  return _internal_info();
}
inline void GetTelemetryPropertyResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.GetTelemetryPropertyResponse.info)
}
inline ::grpc_cli::PosInfo* GetTelemetryPropertyResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* GetTelemetryPropertyResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetTelemetryPropertyResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* GetTelemetryPropertyResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* GetTelemetryPropertyResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetTelemetryPropertyResponse.info)
  return _internal_mutable_info();
}
inline void GetTelemetryPropertyResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetTelemetryPropertyResponse.info)
}

// -------------------------------------------------------------------

// ResetEventWrrRequest

// string command = 1;
inline void ResetEventWrrRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& ResetEventWrrRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ResetEventWrrRequest.command)
  return _internal_command();
}
inline void ResetEventWrrRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ResetEventWrrRequest.command)
}
inline std::string* ResetEventWrrRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ResetEventWrrRequest.command)
  return _internal_mutable_command();
}
inline const std::string& ResetEventWrrRequest::_internal_command() const {
  return command_.Get();
}
inline void ResetEventWrrRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResetEventWrrRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ResetEventWrrRequest.command)
}
inline void ResetEventWrrRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ResetEventWrrRequest.command)
}
inline void ResetEventWrrRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ResetEventWrrRequest.command)
}
inline std::string* ResetEventWrrRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResetEventWrrRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.ResetEventWrrRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResetEventWrrRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ResetEventWrrRequest.command)
}

// string rid = 2;
inline void ResetEventWrrRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& ResetEventWrrRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ResetEventWrrRequest.rid)
  return _internal_rid();
}
inline void ResetEventWrrRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ResetEventWrrRequest.rid)
}
inline std::string* ResetEventWrrRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ResetEventWrrRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& ResetEventWrrRequest::_internal_rid() const {
  return rid_.Get();
}
inline void ResetEventWrrRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResetEventWrrRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ResetEventWrrRequest.rid)
}
inline void ResetEventWrrRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ResetEventWrrRequest.rid)
}
inline void ResetEventWrrRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ResetEventWrrRequest.rid)
}
inline std::string* ResetEventWrrRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResetEventWrrRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.ResetEventWrrRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResetEventWrrRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ResetEventWrrRequest.rid)
}

// string requestor = 3;
inline void ResetEventWrrRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& ResetEventWrrRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ResetEventWrrRequest.requestor)
  return _internal_requestor();
}
inline void ResetEventWrrRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ResetEventWrrRequest.requestor)
}
inline std::string* ResetEventWrrRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ResetEventWrrRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& ResetEventWrrRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void ResetEventWrrRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResetEventWrrRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ResetEventWrrRequest.requestor)
}
inline void ResetEventWrrRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ResetEventWrrRequest.requestor)
}
inline void ResetEventWrrRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ResetEventWrrRequest.requestor)
}
inline std::string* ResetEventWrrRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResetEventWrrRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.ResetEventWrrRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResetEventWrrRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ResetEventWrrRequest.requestor)
}

// -------------------------------------------------------------------

// ResetEventWrrResponse_Result

// .grpc_cli.Status status = 1;
inline bool ResetEventWrrResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool ResetEventWrrResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void ResetEventWrrResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& ResetEventWrrResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& ResetEventWrrResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ResetEventWrrResponse.Result.status)
  return _internal_status();
}
inline void ResetEventWrrResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ResetEventWrrResponse.Result.status)
}
inline ::grpc_cli::Status* ResetEventWrrResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* ResetEventWrrResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.ResetEventWrrResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* ResetEventWrrResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* ResetEventWrrResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ResetEventWrrResponse.Result.status)
  return _internal_mutable_status();
}
inline void ResetEventWrrResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ResetEventWrrResponse.Result.status)
}

// -------------------------------------------------------------------

// ResetEventWrrResponse

// string command = 1;
inline void ResetEventWrrResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& ResetEventWrrResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ResetEventWrrResponse.command)
  return _internal_command();
}
inline void ResetEventWrrResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ResetEventWrrResponse.command)
}
inline std::string* ResetEventWrrResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ResetEventWrrResponse.command)
  return _internal_mutable_command();
}
inline const std::string& ResetEventWrrResponse::_internal_command() const {
  return command_.Get();
}
inline void ResetEventWrrResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResetEventWrrResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ResetEventWrrResponse.command)
}
inline void ResetEventWrrResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ResetEventWrrResponse.command)
}
inline void ResetEventWrrResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ResetEventWrrResponse.command)
}
inline std::string* ResetEventWrrResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResetEventWrrResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.ResetEventWrrResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResetEventWrrResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ResetEventWrrResponse.command)
}

// string rid = 2;
inline void ResetEventWrrResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& ResetEventWrrResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ResetEventWrrResponse.rid)
  return _internal_rid();
}
inline void ResetEventWrrResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ResetEventWrrResponse.rid)
}
inline std::string* ResetEventWrrResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ResetEventWrrResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& ResetEventWrrResponse::_internal_rid() const {
  return rid_.Get();
}
inline void ResetEventWrrResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResetEventWrrResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ResetEventWrrResponse.rid)
}
inline void ResetEventWrrResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ResetEventWrrResponse.rid)
}
inline void ResetEventWrrResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ResetEventWrrResponse.rid)
}
inline std::string* ResetEventWrrResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResetEventWrrResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.ResetEventWrrResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResetEventWrrResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ResetEventWrrResponse.rid)
}

// .grpc_cli.ResetEventWrrResponse.Result result = 3;
inline bool ResetEventWrrResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool ResetEventWrrResponse::has_result() const {
  return _internal_has_result();
}
inline void ResetEventWrrResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::ResetEventWrrResponse_Result& ResetEventWrrResponse::_internal_result() const {
  const ::grpc_cli::ResetEventWrrResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::ResetEventWrrResponse_Result&>(
      ::grpc_cli::_ResetEventWrrResponse_Result_default_instance_);
}
inline const ::grpc_cli::ResetEventWrrResponse_Result& ResetEventWrrResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ResetEventWrrResponse.result)
  return _internal_result();
}
inline void ResetEventWrrResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::ResetEventWrrResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ResetEventWrrResponse.result)
}
inline ::grpc_cli::ResetEventWrrResponse_Result* ResetEventWrrResponse::release_result() {
  
  ::grpc_cli::ResetEventWrrResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::ResetEventWrrResponse_Result* ResetEventWrrResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.ResetEventWrrResponse.result)
  
  ::grpc_cli::ResetEventWrrResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::ResetEventWrrResponse_Result* ResetEventWrrResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::ResetEventWrrResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::ResetEventWrrResponse_Result* ResetEventWrrResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ResetEventWrrResponse.result)
  return _internal_mutable_result();
}
inline void ResetEventWrrResponse::set_allocated_result(::grpc_cli::ResetEventWrrResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ResetEventWrrResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool ResetEventWrrResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool ResetEventWrrResponse::has_info() const {
  return _internal_has_info();
}
inline void ResetEventWrrResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& ResetEventWrrResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& ResetEventWrrResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ResetEventWrrResponse.info)
  return _internal_info();
}
inline void ResetEventWrrResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ResetEventWrrResponse.info)
}
inline ::grpc_cli::PosInfo* ResetEventWrrResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* ResetEventWrrResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.ResetEventWrrResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* ResetEventWrrResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* ResetEventWrrResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ResetEventWrrResponse.info)
  return _internal_mutable_info();
}
inline void ResetEventWrrResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ResetEventWrrResponse.info)
}

// -------------------------------------------------------------------

// ResetMbrRequest

// string command = 1;
inline void ResetMbrRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& ResetMbrRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ResetMbrRequest.command)
  return _internal_command();
}
inline void ResetMbrRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ResetMbrRequest.command)
}
inline std::string* ResetMbrRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ResetMbrRequest.command)
  return _internal_mutable_command();
}
inline const std::string& ResetMbrRequest::_internal_command() const {
  return command_.Get();
}
inline void ResetMbrRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResetMbrRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ResetMbrRequest.command)
}
inline void ResetMbrRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ResetMbrRequest.command)
}
inline void ResetMbrRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ResetMbrRequest.command)
}
inline std::string* ResetMbrRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResetMbrRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.ResetMbrRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResetMbrRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ResetMbrRequest.command)
}

// string rid = 2;
inline void ResetMbrRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& ResetMbrRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ResetMbrRequest.rid)
  return _internal_rid();
}
inline void ResetMbrRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ResetMbrRequest.rid)
}
inline std::string* ResetMbrRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ResetMbrRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& ResetMbrRequest::_internal_rid() const {
  return rid_.Get();
}
inline void ResetMbrRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResetMbrRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ResetMbrRequest.rid)
}
inline void ResetMbrRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ResetMbrRequest.rid)
}
inline void ResetMbrRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ResetMbrRequest.rid)
}
inline std::string* ResetMbrRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResetMbrRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.ResetMbrRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResetMbrRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ResetMbrRequest.rid)
}

// string requestor = 3;
inline void ResetMbrRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& ResetMbrRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ResetMbrRequest.requestor)
  return _internal_requestor();
}
inline void ResetMbrRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ResetMbrRequest.requestor)
}
inline std::string* ResetMbrRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ResetMbrRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& ResetMbrRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void ResetMbrRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResetMbrRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ResetMbrRequest.requestor)
}
inline void ResetMbrRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ResetMbrRequest.requestor)
}
inline void ResetMbrRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ResetMbrRequest.requestor)
}
inline std::string* ResetMbrRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResetMbrRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.ResetMbrRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResetMbrRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ResetMbrRequest.requestor)
}

// -------------------------------------------------------------------

// ResetMbrResponse_Result

// .grpc_cli.Status status = 1;
inline bool ResetMbrResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool ResetMbrResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void ResetMbrResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& ResetMbrResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& ResetMbrResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ResetMbrResponse.Result.status)
  return _internal_status();
}
inline void ResetMbrResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ResetMbrResponse.Result.status)
}
inline ::grpc_cli::Status* ResetMbrResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* ResetMbrResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.ResetMbrResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* ResetMbrResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* ResetMbrResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ResetMbrResponse.Result.status)
  return _internal_mutable_status();
}
inline void ResetMbrResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ResetMbrResponse.Result.status)
}

// -------------------------------------------------------------------

// ResetMbrResponse

// string command = 1;
inline void ResetMbrResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& ResetMbrResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ResetMbrResponse.command)
  return _internal_command();
}
inline void ResetMbrResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ResetMbrResponse.command)
}
inline std::string* ResetMbrResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ResetMbrResponse.command)
  return _internal_mutable_command();
}
inline const std::string& ResetMbrResponse::_internal_command() const {
  return command_.Get();
}
inline void ResetMbrResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResetMbrResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ResetMbrResponse.command)
}
inline void ResetMbrResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ResetMbrResponse.command)
}
inline void ResetMbrResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ResetMbrResponse.command)
}
inline std::string* ResetMbrResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResetMbrResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.ResetMbrResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResetMbrResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ResetMbrResponse.command)
}

// string rid = 2;
inline void ResetMbrResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& ResetMbrResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ResetMbrResponse.rid)
  return _internal_rid();
}
inline void ResetMbrResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ResetMbrResponse.rid)
}
inline std::string* ResetMbrResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ResetMbrResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& ResetMbrResponse::_internal_rid() const {
  return rid_.Get();
}
inline void ResetMbrResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResetMbrResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ResetMbrResponse.rid)
}
inline void ResetMbrResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ResetMbrResponse.rid)
}
inline void ResetMbrResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ResetMbrResponse.rid)
}
inline std::string* ResetMbrResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResetMbrResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.ResetMbrResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResetMbrResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ResetMbrResponse.rid)
}

// .grpc_cli.ResetMbrResponse.Result result = 3;
inline bool ResetMbrResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool ResetMbrResponse::has_result() const {
  return _internal_has_result();
}
inline void ResetMbrResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::ResetMbrResponse_Result& ResetMbrResponse::_internal_result() const {
  const ::grpc_cli::ResetMbrResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::ResetMbrResponse_Result&>(
      ::grpc_cli::_ResetMbrResponse_Result_default_instance_);
}
inline const ::grpc_cli::ResetMbrResponse_Result& ResetMbrResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ResetMbrResponse.result)
  return _internal_result();
}
inline void ResetMbrResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::ResetMbrResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ResetMbrResponse.result)
}
inline ::grpc_cli::ResetMbrResponse_Result* ResetMbrResponse::release_result() {
  
  ::grpc_cli::ResetMbrResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::ResetMbrResponse_Result* ResetMbrResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.ResetMbrResponse.result)
  
  ::grpc_cli::ResetMbrResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::ResetMbrResponse_Result* ResetMbrResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::ResetMbrResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::ResetMbrResponse_Result* ResetMbrResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ResetMbrResponse.result)
  return _internal_mutable_result();
}
inline void ResetMbrResponse::set_allocated_result(::grpc_cli::ResetMbrResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ResetMbrResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool ResetMbrResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool ResetMbrResponse::has_info() const {
  return _internal_has_info();
}
inline void ResetMbrResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& ResetMbrResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& ResetMbrResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ResetMbrResponse.info)
  return _internal_info();
}
inline void ResetMbrResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ResetMbrResponse.info)
}
inline ::grpc_cli::PosInfo* ResetMbrResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* ResetMbrResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.ResetMbrResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* ResetMbrResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* ResetMbrResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ResetMbrResponse.info)
  return _internal_mutable_info();
}
inline void ResetMbrResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ResetMbrResponse.info)
}

// -------------------------------------------------------------------

// DumpMemorySnapshotRequest_Param

// string path = 1;
inline void DumpMemorySnapshotRequest_Param::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& DumpMemorySnapshotRequest_Param::path() const {
  // @@protoc_insertion_point(field_get:grpc_cli.DumpMemorySnapshotRequest.Param.path)
  return _internal_path();
}
inline void DumpMemorySnapshotRequest_Param::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:grpc_cli.DumpMemorySnapshotRequest.Param.path)
}
inline std::string* DumpMemorySnapshotRequest_Param::mutable_path() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.DumpMemorySnapshotRequest.Param.path)
  return _internal_mutable_path();
}
inline const std::string& DumpMemorySnapshotRequest_Param::_internal_path() const {
  return path_.Get();
}
inline void DumpMemorySnapshotRequest_Param::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DumpMemorySnapshotRequest_Param::set_path(std::string&& value) {
  
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.DumpMemorySnapshotRequest.Param.path)
}
inline void DumpMemorySnapshotRequest_Param::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.DumpMemorySnapshotRequest.Param.path)
}
inline void DumpMemorySnapshotRequest_Param::set_path(const char* value,
    size_t size) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.DumpMemorySnapshotRequest.Param.path)
}
inline std::string* DumpMemorySnapshotRequest_Param::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DumpMemorySnapshotRequest_Param::release_path() {
  // @@protoc_insertion_point(field_release:grpc_cli.DumpMemorySnapshotRequest.Param.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DumpMemorySnapshotRequest_Param::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.DumpMemorySnapshotRequest.Param.path)
}

// -------------------------------------------------------------------

// DumpMemorySnapshotRequest

// string command = 1;
inline void DumpMemorySnapshotRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& DumpMemorySnapshotRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.DumpMemorySnapshotRequest.command)
  return _internal_command();
}
inline void DumpMemorySnapshotRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.DumpMemorySnapshotRequest.command)
}
inline std::string* DumpMemorySnapshotRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.DumpMemorySnapshotRequest.command)
  return _internal_mutable_command();
}
inline const std::string& DumpMemorySnapshotRequest::_internal_command() const {
  return command_.Get();
}
inline void DumpMemorySnapshotRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DumpMemorySnapshotRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.DumpMemorySnapshotRequest.command)
}
inline void DumpMemorySnapshotRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.DumpMemorySnapshotRequest.command)
}
inline void DumpMemorySnapshotRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.DumpMemorySnapshotRequest.command)
}
inline std::string* DumpMemorySnapshotRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DumpMemorySnapshotRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.DumpMemorySnapshotRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DumpMemorySnapshotRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.DumpMemorySnapshotRequest.command)
}

// string rid = 2;
inline void DumpMemorySnapshotRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& DumpMemorySnapshotRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.DumpMemorySnapshotRequest.rid)
  return _internal_rid();
}
inline void DumpMemorySnapshotRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.DumpMemorySnapshotRequest.rid)
}
inline std::string* DumpMemorySnapshotRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.DumpMemorySnapshotRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& DumpMemorySnapshotRequest::_internal_rid() const {
  return rid_.Get();
}
inline void DumpMemorySnapshotRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DumpMemorySnapshotRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.DumpMemorySnapshotRequest.rid)
}
inline void DumpMemorySnapshotRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.DumpMemorySnapshotRequest.rid)
}
inline void DumpMemorySnapshotRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.DumpMemorySnapshotRequest.rid)
}
inline std::string* DumpMemorySnapshotRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DumpMemorySnapshotRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.DumpMemorySnapshotRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DumpMemorySnapshotRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.DumpMemorySnapshotRequest.rid)
}

// string requestor = 3;
inline void DumpMemorySnapshotRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& DumpMemorySnapshotRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.DumpMemorySnapshotRequest.requestor)
  return _internal_requestor();
}
inline void DumpMemorySnapshotRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.DumpMemorySnapshotRequest.requestor)
}
inline std::string* DumpMemorySnapshotRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.DumpMemorySnapshotRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& DumpMemorySnapshotRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void DumpMemorySnapshotRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DumpMemorySnapshotRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.DumpMemorySnapshotRequest.requestor)
}
inline void DumpMemorySnapshotRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.DumpMemorySnapshotRequest.requestor)
}
inline void DumpMemorySnapshotRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.DumpMemorySnapshotRequest.requestor)
}
inline std::string* DumpMemorySnapshotRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DumpMemorySnapshotRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.DumpMemorySnapshotRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DumpMemorySnapshotRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.DumpMemorySnapshotRequest.requestor)
}

// .grpc_cli.DumpMemorySnapshotRequest.Param param = 4;
inline bool DumpMemorySnapshotRequest::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool DumpMemorySnapshotRequest::has_param() const {
  return _internal_has_param();
}
inline void DumpMemorySnapshotRequest::clear_param() {
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::grpc_cli::DumpMemorySnapshotRequest_Param& DumpMemorySnapshotRequest::_internal_param() const {
  const ::grpc_cli::DumpMemorySnapshotRequest_Param* p = param_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::DumpMemorySnapshotRequest_Param&>(
      ::grpc_cli::_DumpMemorySnapshotRequest_Param_default_instance_);
}
inline const ::grpc_cli::DumpMemorySnapshotRequest_Param& DumpMemorySnapshotRequest::param() const {
  // @@protoc_insertion_point(field_get:grpc_cli.DumpMemorySnapshotRequest.param)
  return _internal_param();
}
inline void DumpMemorySnapshotRequest::unsafe_arena_set_allocated_param(
    ::grpc_cli::DumpMemorySnapshotRequest_Param* param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.DumpMemorySnapshotRequest.param)
}
inline ::grpc_cli::DumpMemorySnapshotRequest_Param* DumpMemorySnapshotRequest::release_param() {
  
  ::grpc_cli::DumpMemorySnapshotRequest_Param* temp = param_;
  param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::DumpMemorySnapshotRequest_Param* DumpMemorySnapshotRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:grpc_cli.DumpMemorySnapshotRequest.param)
  
  ::grpc_cli::DumpMemorySnapshotRequest_Param* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::grpc_cli::DumpMemorySnapshotRequest_Param* DumpMemorySnapshotRequest::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::DumpMemorySnapshotRequest_Param>(GetArena());
    param_ = p;
  }
  return param_;
}
inline ::grpc_cli::DumpMemorySnapshotRequest_Param* DumpMemorySnapshotRequest::mutable_param() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.DumpMemorySnapshotRequest.param)
  return _internal_mutable_param();
}
inline void DumpMemorySnapshotRequest::set_allocated_param(::grpc_cli::DumpMemorySnapshotRequest_Param* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.DumpMemorySnapshotRequest.param)
}

// -------------------------------------------------------------------

// DumpMemorySnapshotResponse_Result

// .grpc_cli.Status status = 1;
inline bool DumpMemorySnapshotResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool DumpMemorySnapshotResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void DumpMemorySnapshotResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& DumpMemorySnapshotResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& DumpMemorySnapshotResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.DumpMemorySnapshotResponse.Result.status)
  return _internal_status();
}
inline void DumpMemorySnapshotResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.DumpMemorySnapshotResponse.Result.status)
}
inline ::grpc_cli::Status* DumpMemorySnapshotResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* DumpMemorySnapshotResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.DumpMemorySnapshotResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* DumpMemorySnapshotResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* DumpMemorySnapshotResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.DumpMemorySnapshotResponse.Result.status)
  return _internal_mutable_status();
}
inline void DumpMemorySnapshotResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.DumpMemorySnapshotResponse.Result.status)
}

// -------------------------------------------------------------------

// DumpMemorySnapshotResponse

// string command = 1;
inline void DumpMemorySnapshotResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& DumpMemorySnapshotResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.DumpMemorySnapshotResponse.command)
  return _internal_command();
}
inline void DumpMemorySnapshotResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.DumpMemorySnapshotResponse.command)
}
inline std::string* DumpMemorySnapshotResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.DumpMemorySnapshotResponse.command)
  return _internal_mutable_command();
}
inline const std::string& DumpMemorySnapshotResponse::_internal_command() const {
  return command_.Get();
}
inline void DumpMemorySnapshotResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DumpMemorySnapshotResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.DumpMemorySnapshotResponse.command)
}
inline void DumpMemorySnapshotResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.DumpMemorySnapshotResponse.command)
}
inline void DumpMemorySnapshotResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.DumpMemorySnapshotResponse.command)
}
inline std::string* DumpMemorySnapshotResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DumpMemorySnapshotResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.DumpMemorySnapshotResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DumpMemorySnapshotResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.DumpMemorySnapshotResponse.command)
}

// string rid = 2;
inline void DumpMemorySnapshotResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& DumpMemorySnapshotResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.DumpMemorySnapshotResponse.rid)
  return _internal_rid();
}
inline void DumpMemorySnapshotResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.DumpMemorySnapshotResponse.rid)
}
inline std::string* DumpMemorySnapshotResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.DumpMemorySnapshotResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& DumpMemorySnapshotResponse::_internal_rid() const {
  return rid_.Get();
}
inline void DumpMemorySnapshotResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DumpMemorySnapshotResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.DumpMemorySnapshotResponse.rid)
}
inline void DumpMemorySnapshotResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.DumpMemorySnapshotResponse.rid)
}
inline void DumpMemorySnapshotResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.DumpMemorySnapshotResponse.rid)
}
inline std::string* DumpMemorySnapshotResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DumpMemorySnapshotResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.DumpMemorySnapshotResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DumpMemorySnapshotResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.DumpMemorySnapshotResponse.rid)
}

// .grpc_cli.DumpMemorySnapshotResponse.Result result = 3;
inline bool DumpMemorySnapshotResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool DumpMemorySnapshotResponse::has_result() const {
  return _internal_has_result();
}
inline void DumpMemorySnapshotResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::DumpMemorySnapshotResponse_Result& DumpMemorySnapshotResponse::_internal_result() const {
  const ::grpc_cli::DumpMemorySnapshotResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::DumpMemorySnapshotResponse_Result&>(
      ::grpc_cli::_DumpMemorySnapshotResponse_Result_default_instance_);
}
inline const ::grpc_cli::DumpMemorySnapshotResponse_Result& DumpMemorySnapshotResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.DumpMemorySnapshotResponse.result)
  return _internal_result();
}
inline void DumpMemorySnapshotResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::DumpMemorySnapshotResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.DumpMemorySnapshotResponse.result)
}
inline ::grpc_cli::DumpMemorySnapshotResponse_Result* DumpMemorySnapshotResponse::release_result() {
  
  ::grpc_cli::DumpMemorySnapshotResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::DumpMemorySnapshotResponse_Result* DumpMemorySnapshotResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.DumpMemorySnapshotResponse.result)
  
  ::grpc_cli::DumpMemorySnapshotResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::DumpMemorySnapshotResponse_Result* DumpMemorySnapshotResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::DumpMemorySnapshotResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::DumpMemorySnapshotResponse_Result* DumpMemorySnapshotResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.DumpMemorySnapshotResponse.result)
  return _internal_mutable_result();
}
inline void DumpMemorySnapshotResponse::set_allocated_result(::grpc_cli::DumpMemorySnapshotResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.DumpMemorySnapshotResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool DumpMemorySnapshotResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool DumpMemorySnapshotResponse::has_info() const {
  return _internal_has_info();
}
inline void DumpMemorySnapshotResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& DumpMemorySnapshotResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& DumpMemorySnapshotResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.DumpMemorySnapshotResponse.info)
  return _internal_info();
}
inline void DumpMemorySnapshotResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.DumpMemorySnapshotResponse.info)
}
inline ::grpc_cli::PosInfo* DumpMemorySnapshotResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* DumpMemorySnapshotResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.DumpMemorySnapshotResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* DumpMemorySnapshotResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* DumpMemorySnapshotResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.DumpMemorySnapshotResponse.info)
  return _internal_mutable_info();
}
inline void DumpMemorySnapshotResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.DumpMemorySnapshotResponse.info)
}

// -------------------------------------------------------------------

// StopRebuildingRequest_Param

// string name = 1;
inline void StopRebuildingRequest_Param::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& StopRebuildingRequest_Param::name() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StopRebuildingRequest.Param.name)
  return _internal_name();
}
inline void StopRebuildingRequest_Param::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StopRebuildingRequest.Param.name)
}
inline std::string* StopRebuildingRequest_Param::mutable_name() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StopRebuildingRequest.Param.name)
  return _internal_mutable_name();
}
inline const std::string& StopRebuildingRequest_Param::_internal_name() const {
  return name_.Get();
}
inline void StopRebuildingRequest_Param::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StopRebuildingRequest_Param::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StopRebuildingRequest.Param.name)
}
inline void StopRebuildingRequest_Param::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StopRebuildingRequest.Param.name)
}
inline void StopRebuildingRequest_Param::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StopRebuildingRequest.Param.name)
}
inline std::string* StopRebuildingRequest_Param::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StopRebuildingRequest_Param::release_name() {
  // @@protoc_insertion_point(field_release:grpc_cli.StopRebuildingRequest.Param.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopRebuildingRequest_Param::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StopRebuildingRequest.Param.name)
}

// -------------------------------------------------------------------

// StopRebuildingRequest

// string command = 1;
inline void StopRebuildingRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& StopRebuildingRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StopRebuildingRequest.command)
  return _internal_command();
}
inline void StopRebuildingRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StopRebuildingRequest.command)
}
inline std::string* StopRebuildingRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StopRebuildingRequest.command)
  return _internal_mutable_command();
}
inline const std::string& StopRebuildingRequest::_internal_command() const {
  return command_.Get();
}
inline void StopRebuildingRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StopRebuildingRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StopRebuildingRequest.command)
}
inline void StopRebuildingRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StopRebuildingRequest.command)
}
inline void StopRebuildingRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StopRebuildingRequest.command)
}
inline std::string* StopRebuildingRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StopRebuildingRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.StopRebuildingRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopRebuildingRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StopRebuildingRequest.command)
}

// string rid = 2;
inline void StopRebuildingRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& StopRebuildingRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StopRebuildingRequest.rid)
  return _internal_rid();
}
inline void StopRebuildingRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StopRebuildingRequest.rid)
}
inline std::string* StopRebuildingRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StopRebuildingRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& StopRebuildingRequest::_internal_rid() const {
  return rid_.Get();
}
inline void StopRebuildingRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StopRebuildingRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StopRebuildingRequest.rid)
}
inline void StopRebuildingRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StopRebuildingRequest.rid)
}
inline void StopRebuildingRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StopRebuildingRequest.rid)
}
inline std::string* StopRebuildingRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StopRebuildingRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.StopRebuildingRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopRebuildingRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StopRebuildingRequest.rid)
}

// string requestor = 3;
inline void StopRebuildingRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& StopRebuildingRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StopRebuildingRequest.requestor)
  return _internal_requestor();
}
inline void StopRebuildingRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StopRebuildingRequest.requestor)
}
inline std::string* StopRebuildingRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StopRebuildingRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& StopRebuildingRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void StopRebuildingRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StopRebuildingRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StopRebuildingRequest.requestor)
}
inline void StopRebuildingRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StopRebuildingRequest.requestor)
}
inline void StopRebuildingRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StopRebuildingRequest.requestor)
}
inline std::string* StopRebuildingRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StopRebuildingRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.StopRebuildingRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopRebuildingRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StopRebuildingRequest.requestor)
}

// .grpc_cli.StopRebuildingRequest.Param param = 4;
inline bool StopRebuildingRequest::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool StopRebuildingRequest::has_param() const {
  return _internal_has_param();
}
inline void StopRebuildingRequest::clear_param() {
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::grpc_cli::StopRebuildingRequest_Param& StopRebuildingRequest::_internal_param() const {
  const ::grpc_cli::StopRebuildingRequest_Param* p = param_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::StopRebuildingRequest_Param&>(
      ::grpc_cli::_StopRebuildingRequest_Param_default_instance_);
}
inline const ::grpc_cli::StopRebuildingRequest_Param& StopRebuildingRequest::param() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StopRebuildingRequest.param)
  return _internal_param();
}
inline void StopRebuildingRequest::unsafe_arena_set_allocated_param(
    ::grpc_cli::StopRebuildingRequest_Param* param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.StopRebuildingRequest.param)
}
inline ::grpc_cli::StopRebuildingRequest_Param* StopRebuildingRequest::release_param() {
  
  ::grpc_cli::StopRebuildingRequest_Param* temp = param_;
  param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::StopRebuildingRequest_Param* StopRebuildingRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:grpc_cli.StopRebuildingRequest.param)
  
  ::grpc_cli::StopRebuildingRequest_Param* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::grpc_cli::StopRebuildingRequest_Param* StopRebuildingRequest::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::StopRebuildingRequest_Param>(GetArena());
    param_ = p;
  }
  return param_;
}
inline ::grpc_cli::StopRebuildingRequest_Param* StopRebuildingRequest::mutable_param() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StopRebuildingRequest.param)
  return _internal_mutable_param();
}
inline void StopRebuildingRequest::set_allocated_param(::grpc_cli::StopRebuildingRequest_Param* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StopRebuildingRequest.param)
}

// -------------------------------------------------------------------

// StopRebuildingResponse_Result

// .grpc_cli.Status status = 1;
inline bool StopRebuildingResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool StopRebuildingResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void StopRebuildingResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& StopRebuildingResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& StopRebuildingResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StopRebuildingResponse.Result.status)
  return _internal_status();
}
inline void StopRebuildingResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.StopRebuildingResponse.Result.status)
}
inline ::grpc_cli::Status* StopRebuildingResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* StopRebuildingResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.StopRebuildingResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* StopRebuildingResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* StopRebuildingResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StopRebuildingResponse.Result.status)
  return _internal_mutable_status();
}
inline void StopRebuildingResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StopRebuildingResponse.Result.status)
}

// -------------------------------------------------------------------

// StopRebuildingResponse

// string command = 1;
inline void StopRebuildingResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& StopRebuildingResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StopRebuildingResponse.command)
  return _internal_command();
}
inline void StopRebuildingResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StopRebuildingResponse.command)
}
inline std::string* StopRebuildingResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StopRebuildingResponse.command)
  return _internal_mutable_command();
}
inline const std::string& StopRebuildingResponse::_internal_command() const {
  return command_.Get();
}
inline void StopRebuildingResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StopRebuildingResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StopRebuildingResponse.command)
}
inline void StopRebuildingResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StopRebuildingResponse.command)
}
inline void StopRebuildingResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StopRebuildingResponse.command)
}
inline std::string* StopRebuildingResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StopRebuildingResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.StopRebuildingResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopRebuildingResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StopRebuildingResponse.command)
}

// string rid = 2;
inline void StopRebuildingResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& StopRebuildingResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StopRebuildingResponse.rid)
  return _internal_rid();
}
inline void StopRebuildingResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StopRebuildingResponse.rid)
}
inline std::string* StopRebuildingResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StopRebuildingResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& StopRebuildingResponse::_internal_rid() const {
  return rid_.Get();
}
inline void StopRebuildingResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StopRebuildingResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StopRebuildingResponse.rid)
}
inline void StopRebuildingResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StopRebuildingResponse.rid)
}
inline void StopRebuildingResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StopRebuildingResponse.rid)
}
inline std::string* StopRebuildingResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StopRebuildingResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.StopRebuildingResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopRebuildingResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StopRebuildingResponse.rid)
}

// .grpc_cli.StopRebuildingResponse.Result result = 3;
inline bool StopRebuildingResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool StopRebuildingResponse::has_result() const {
  return _internal_has_result();
}
inline void StopRebuildingResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::StopRebuildingResponse_Result& StopRebuildingResponse::_internal_result() const {
  const ::grpc_cli::StopRebuildingResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::StopRebuildingResponse_Result&>(
      ::grpc_cli::_StopRebuildingResponse_Result_default_instance_);
}
inline const ::grpc_cli::StopRebuildingResponse_Result& StopRebuildingResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StopRebuildingResponse.result)
  return _internal_result();
}
inline void StopRebuildingResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::StopRebuildingResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.StopRebuildingResponse.result)
}
inline ::grpc_cli::StopRebuildingResponse_Result* StopRebuildingResponse::release_result() {
  
  ::grpc_cli::StopRebuildingResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::StopRebuildingResponse_Result* StopRebuildingResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.StopRebuildingResponse.result)
  
  ::grpc_cli::StopRebuildingResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::StopRebuildingResponse_Result* StopRebuildingResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::StopRebuildingResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::StopRebuildingResponse_Result* StopRebuildingResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StopRebuildingResponse.result)
  return _internal_mutable_result();
}
inline void StopRebuildingResponse::set_allocated_result(::grpc_cli::StopRebuildingResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StopRebuildingResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool StopRebuildingResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool StopRebuildingResponse::has_info() const {
  return _internal_has_info();
}
inline void StopRebuildingResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& StopRebuildingResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& StopRebuildingResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StopRebuildingResponse.info)
  return _internal_info();
}
inline void StopRebuildingResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.StopRebuildingResponse.info)
}
inline ::grpc_cli::PosInfo* StopRebuildingResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* StopRebuildingResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.StopRebuildingResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* StopRebuildingResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* StopRebuildingResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StopRebuildingResponse.info)
  return _internal_mutable_info();
}
inline void StopRebuildingResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StopRebuildingResponse.info)
}

// -------------------------------------------------------------------

// UpdateEventWrrRequest_Param

// string name = 1;
inline void UpdateEventWrrRequest_Param::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& UpdateEventWrrRequest_Param::name() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UpdateEventWrrRequest.Param.name)
  return _internal_name();
}
inline void UpdateEventWrrRequest_Param::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:grpc_cli.UpdateEventWrrRequest.Param.name)
}
inline std::string* UpdateEventWrrRequest_Param::mutable_name() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UpdateEventWrrRequest.Param.name)
  return _internal_mutable_name();
}
inline const std::string& UpdateEventWrrRequest_Param::_internal_name() const {
  return name_.Get();
}
inline void UpdateEventWrrRequest_Param::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateEventWrrRequest_Param::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.UpdateEventWrrRequest.Param.name)
}
inline void UpdateEventWrrRequest_Param::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.UpdateEventWrrRequest.Param.name)
}
inline void UpdateEventWrrRequest_Param::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.UpdateEventWrrRequest.Param.name)
}
inline std::string* UpdateEventWrrRequest_Param::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateEventWrrRequest_Param::release_name() {
  // @@protoc_insertion_point(field_release:grpc_cli.UpdateEventWrrRequest.Param.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateEventWrrRequest_Param::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UpdateEventWrrRequest.Param.name)
}

// int64 weight = 2;
inline void UpdateEventWrrRequest_Param::clear_weight() {
  weight_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateEventWrrRequest_Param::_internal_weight() const {
  return weight_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateEventWrrRequest_Param::weight() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UpdateEventWrrRequest.Param.weight)
  return _internal_weight();
}
inline void UpdateEventWrrRequest_Param::_internal_set_weight(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  weight_ = value;
}
inline void UpdateEventWrrRequest_Param::set_weight(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:grpc_cli.UpdateEventWrrRequest.Param.weight)
}

// -------------------------------------------------------------------

// UpdateEventWrrRequest

// string command = 1;
inline void UpdateEventWrrRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& UpdateEventWrrRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UpdateEventWrrRequest.command)
  return _internal_command();
}
inline void UpdateEventWrrRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.UpdateEventWrrRequest.command)
}
inline std::string* UpdateEventWrrRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UpdateEventWrrRequest.command)
  return _internal_mutable_command();
}
inline const std::string& UpdateEventWrrRequest::_internal_command() const {
  return command_.Get();
}
inline void UpdateEventWrrRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateEventWrrRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.UpdateEventWrrRequest.command)
}
inline void UpdateEventWrrRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.UpdateEventWrrRequest.command)
}
inline void UpdateEventWrrRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.UpdateEventWrrRequest.command)
}
inline std::string* UpdateEventWrrRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateEventWrrRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.UpdateEventWrrRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateEventWrrRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UpdateEventWrrRequest.command)
}

// string rid = 2;
inline void UpdateEventWrrRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& UpdateEventWrrRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UpdateEventWrrRequest.rid)
  return _internal_rid();
}
inline void UpdateEventWrrRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.UpdateEventWrrRequest.rid)
}
inline std::string* UpdateEventWrrRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UpdateEventWrrRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& UpdateEventWrrRequest::_internal_rid() const {
  return rid_.Get();
}
inline void UpdateEventWrrRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateEventWrrRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.UpdateEventWrrRequest.rid)
}
inline void UpdateEventWrrRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.UpdateEventWrrRequest.rid)
}
inline void UpdateEventWrrRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.UpdateEventWrrRequest.rid)
}
inline std::string* UpdateEventWrrRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateEventWrrRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.UpdateEventWrrRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateEventWrrRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UpdateEventWrrRequest.rid)
}

// string requestor = 3;
inline void UpdateEventWrrRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& UpdateEventWrrRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UpdateEventWrrRequest.requestor)
  return _internal_requestor();
}
inline void UpdateEventWrrRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.UpdateEventWrrRequest.requestor)
}
inline std::string* UpdateEventWrrRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UpdateEventWrrRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& UpdateEventWrrRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void UpdateEventWrrRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateEventWrrRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.UpdateEventWrrRequest.requestor)
}
inline void UpdateEventWrrRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.UpdateEventWrrRequest.requestor)
}
inline void UpdateEventWrrRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.UpdateEventWrrRequest.requestor)
}
inline std::string* UpdateEventWrrRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateEventWrrRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.UpdateEventWrrRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateEventWrrRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UpdateEventWrrRequest.requestor)
}

// .grpc_cli.UpdateEventWrrRequest.Param param = 4;
inline bool UpdateEventWrrRequest::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool UpdateEventWrrRequest::has_param() const {
  return _internal_has_param();
}
inline void UpdateEventWrrRequest::clear_param() {
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::grpc_cli::UpdateEventWrrRequest_Param& UpdateEventWrrRequest::_internal_param() const {
  const ::grpc_cli::UpdateEventWrrRequest_Param* p = param_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::UpdateEventWrrRequest_Param&>(
      ::grpc_cli::_UpdateEventWrrRequest_Param_default_instance_);
}
inline const ::grpc_cli::UpdateEventWrrRequest_Param& UpdateEventWrrRequest::param() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UpdateEventWrrRequest.param)
  return _internal_param();
}
inline void UpdateEventWrrRequest::unsafe_arena_set_allocated_param(
    ::grpc_cli::UpdateEventWrrRequest_Param* param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.UpdateEventWrrRequest.param)
}
inline ::grpc_cli::UpdateEventWrrRequest_Param* UpdateEventWrrRequest::release_param() {
  
  ::grpc_cli::UpdateEventWrrRequest_Param* temp = param_;
  param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::UpdateEventWrrRequest_Param* UpdateEventWrrRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:grpc_cli.UpdateEventWrrRequest.param)
  
  ::grpc_cli::UpdateEventWrrRequest_Param* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::grpc_cli::UpdateEventWrrRequest_Param* UpdateEventWrrRequest::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::UpdateEventWrrRequest_Param>(GetArena());
    param_ = p;
  }
  return param_;
}
inline ::grpc_cli::UpdateEventWrrRequest_Param* UpdateEventWrrRequest::mutable_param() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UpdateEventWrrRequest.param)
  return _internal_mutable_param();
}
inline void UpdateEventWrrRequest::set_allocated_param(::grpc_cli::UpdateEventWrrRequest_Param* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UpdateEventWrrRequest.param)
}

// -------------------------------------------------------------------

// UpdateEventWrrResponse_Result

// .grpc_cli.Status status = 1;
inline bool UpdateEventWrrResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool UpdateEventWrrResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void UpdateEventWrrResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& UpdateEventWrrResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& UpdateEventWrrResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UpdateEventWrrResponse.Result.status)
  return _internal_status();
}
inline void UpdateEventWrrResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.UpdateEventWrrResponse.Result.status)
}
inline ::grpc_cli::Status* UpdateEventWrrResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* UpdateEventWrrResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.UpdateEventWrrResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* UpdateEventWrrResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* UpdateEventWrrResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UpdateEventWrrResponse.Result.status)
  return _internal_mutable_status();
}
inline void UpdateEventWrrResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UpdateEventWrrResponse.Result.status)
}

// -------------------------------------------------------------------

// UpdateEventWrrResponse

// string command = 1;
inline void UpdateEventWrrResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& UpdateEventWrrResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UpdateEventWrrResponse.command)
  return _internal_command();
}
inline void UpdateEventWrrResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.UpdateEventWrrResponse.command)
}
inline std::string* UpdateEventWrrResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UpdateEventWrrResponse.command)
  return _internal_mutable_command();
}
inline const std::string& UpdateEventWrrResponse::_internal_command() const {
  return command_.Get();
}
inline void UpdateEventWrrResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateEventWrrResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.UpdateEventWrrResponse.command)
}
inline void UpdateEventWrrResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.UpdateEventWrrResponse.command)
}
inline void UpdateEventWrrResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.UpdateEventWrrResponse.command)
}
inline std::string* UpdateEventWrrResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateEventWrrResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.UpdateEventWrrResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateEventWrrResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UpdateEventWrrResponse.command)
}

// string rid = 2;
inline void UpdateEventWrrResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& UpdateEventWrrResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UpdateEventWrrResponse.rid)
  return _internal_rid();
}
inline void UpdateEventWrrResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.UpdateEventWrrResponse.rid)
}
inline std::string* UpdateEventWrrResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UpdateEventWrrResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& UpdateEventWrrResponse::_internal_rid() const {
  return rid_.Get();
}
inline void UpdateEventWrrResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateEventWrrResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.UpdateEventWrrResponse.rid)
}
inline void UpdateEventWrrResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.UpdateEventWrrResponse.rid)
}
inline void UpdateEventWrrResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.UpdateEventWrrResponse.rid)
}
inline std::string* UpdateEventWrrResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateEventWrrResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.UpdateEventWrrResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateEventWrrResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UpdateEventWrrResponse.rid)
}

// .grpc_cli.UpdateEventWrrResponse.Result result = 3;
inline bool UpdateEventWrrResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool UpdateEventWrrResponse::has_result() const {
  return _internal_has_result();
}
inline void UpdateEventWrrResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::UpdateEventWrrResponse_Result& UpdateEventWrrResponse::_internal_result() const {
  const ::grpc_cli::UpdateEventWrrResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::UpdateEventWrrResponse_Result&>(
      ::grpc_cli::_UpdateEventWrrResponse_Result_default_instance_);
}
inline const ::grpc_cli::UpdateEventWrrResponse_Result& UpdateEventWrrResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UpdateEventWrrResponse.result)
  return _internal_result();
}
inline void UpdateEventWrrResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::UpdateEventWrrResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.UpdateEventWrrResponse.result)
}
inline ::grpc_cli::UpdateEventWrrResponse_Result* UpdateEventWrrResponse::release_result() {
  
  ::grpc_cli::UpdateEventWrrResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::UpdateEventWrrResponse_Result* UpdateEventWrrResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.UpdateEventWrrResponse.result)
  
  ::grpc_cli::UpdateEventWrrResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::UpdateEventWrrResponse_Result* UpdateEventWrrResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::UpdateEventWrrResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::UpdateEventWrrResponse_Result* UpdateEventWrrResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UpdateEventWrrResponse.result)
  return _internal_mutable_result();
}
inline void UpdateEventWrrResponse::set_allocated_result(::grpc_cli::UpdateEventWrrResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UpdateEventWrrResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool UpdateEventWrrResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool UpdateEventWrrResponse::has_info() const {
  return _internal_has_info();
}
inline void UpdateEventWrrResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& UpdateEventWrrResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& UpdateEventWrrResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UpdateEventWrrResponse.info)
  return _internal_info();
}
inline void UpdateEventWrrResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.UpdateEventWrrResponse.info)
}
inline ::grpc_cli::PosInfo* UpdateEventWrrResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* UpdateEventWrrResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.UpdateEventWrrResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* UpdateEventWrrResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* UpdateEventWrrResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UpdateEventWrrResponse.info)
  return _internal_mutable_info();
}
inline void UpdateEventWrrResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UpdateEventWrrResponse.info)
}

// -------------------------------------------------------------------

// AddSpareRequest_SpareDeviceName

// string deviceName = 1;
inline void AddSpareRequest_SpareDeviceName::clear_devicename() {
  devicename_.ClearToEmpty();
}
inline const std::string& AddSpareRequest_SpareDeviceName::devicename() const {
  // @@protoc_insertion_point(field_get:grpc_cli.AddSpareRequest.SpareDeviceName.deviceName)
  return _internal_devicename();
}
inline void AddSpareRequest_SpareDeviceName::set_devicename(const std::string& value) {
  _internal_set_devicename(value);
  // @@protoc_insertion_point(field_set:grpc_cli.AddSpareRequest.SpareDeviceName.deviceName)
}
inline std::string* AddSpareRequest_SpareDeviceName::mutable_devicename() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.AddSpareRequest.SpareDeviceName.deviceName)
  return _internal_mutable_devicename();
}
inline const std::string& AddSpareRequest_SpareDeviceName::_internal_devicename() const {
  return devicename_.Get();
}
inline void AddSpareRequest_SpareDeviceName::_internal_set_devicename(const std::string& value) {
  
  devicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddSpareRequest_SpareDeviceName::set_devicename(std::string&& value) {
  
  devicename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.AddSpareRequest.SpareDeviceName.deviceName)
}
inline void AddSpareRequest_SpareDeviceName::set_devicename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  devicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.AddSpareRequest.SpareDeviceName.deviceName)
}
inline void AddSpareRequest_SpareDeviceName::set_devicename(const char* value,
    size_t size) {
  
  devicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.AddSpareRequest.SpareDeviceName.deviceName)
}
inline std::string* AddSpareRequest_SpareDeviceName::_internal_mutable_devicename() {
  
  return devicename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddSpareRequest_SpareDeviceName::release_devicename() {
  // @@protoc_insertion_point(field_release:grpc_cli.AddSpareRequest.SpareDeviceName.deviceName)
  return devicename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddSpareRequest_SpareDeviceName::set_allocated_devicename(std::string* devicename) {
  if (devicename != nullptr) {
    
  } else {
    
  }
  devicename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), devicename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.AddSpareRequest.SpareDeviceName.deviceName)
}

// -------------------------------------------------------------------

// AddSpareRequest_Param

// string array = 1;
inline void AddSpareRequest_Param::clear_array() {
  array_.ClearToEmpty();
}
inline const std::string& AddSpareRequest_Param::array() const {
  // @@protoc_insertion_point(field_get:grpc_cli.AddSpareRequest.Param.array)
  return _internal_array();
}
inline void AddSpareRequest_Param::set_array(const std::string& value) {
  _internal_set_array(value);
  // @@protoc_insertion_point(field_set:grpc_cli.AddSpareRequest.Param.array)
}
inline std::string* AddSpareRequest_Param::mutable_array() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.AddSpareRequest.Param.array)
  return _internal_mutable_array();
}
inline const std::string& AddSpareRequest_Param::_internal_array() const {
  return array_.Get();
}
inline void AddSpareRequest_Param::_internal_set_array(const std::string& value) {
  
  array_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddSpareRequest_Param::set_array(std::string&& value) {
  
  array_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.AddSpareRequest.Param.array)
}
inline void AddSpareRequest_Param::set_array(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  array_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.AddSpareRequest.Param.array)
}
inline void AddSpareRequest_Param::set_array(const char* value,
    size_t size) {
  
  array_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.AddSpareRequest.Param.array)
}
inline std::string* AddSpareRequest_Param::_internal_mutable_array() {
  
  return array_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddSpareRequest_Param::release_array() {
  // @@protoc_insertion_point(field_release:grpc_cli.AddSpareRequest.Param.array)
  return array_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddSpareRequest_Param::set_allocated_array(std::string* array) {
  if (array != nullptr) {
    
  } else {
    
  }
  array_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), array,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.AddSpareRequest.Param.array)
}

// repeated .grpc_cli.AddSpareRequest.SpareDeviceName spare = 3;
inline int AddSpareRequest_Param::_internal_spare_size() const {
  return spare_.size();
}
inline int AddSpareRequest_Param::spare_size() const {
  return _internal_spare_size();
}
inline void AddSpareRequest_Param::clear_spare() {
  spare_.Clear();
}
inline ::grpc_cli::AddSpareRequest_SpareDeviceName* AddSpareRequest_Param::mutable_spare(int index) {
  // @@protoc_insertion_point(field_mutable:grpc_cli.AddSpareRequest.Param.spare)
  return spare_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::AddSpareRequest_SpareDeviceName >*
AddSpareRequest_Param::mutable_spare() {
  // @@protoc_insertion_point(field_mutable_list:grpc_cli.AddSpareRequest.Param.spare)
  return &spare_;
}
inline const ::grpc_cli::AddSpareRequest_SpareDeviceName& AddSpareRequest_Param::_internal_spare(int index) const {
  return spare_.Get(index);
}
inline const ::grpc_cli::AddSpareRequest_SpareDeviceName& AddSpareRequest_Param::spare(int index) const {
  // @@protoc_insertion_point(field_get:grpc_cli.AddSpareRequest.Param.spare)
  return _internal_spare(index);
}
inline ::grpc_cli::AddSpareRequest_SpareDeviceName* AddSpareRequest_Param::_internal_add_spare() {
  return spare_.Add();
}
inline ::grpc_cli::AddSpareRequest_SpareDeviceName* AddSpareRequest_Param::add_spare() {
  // @@protoc_insertion_point(field_add:grpc_cli.AddSpareRequest.Param.spare)
  return _internal_add_spare();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::AddSpareRequest_SpareDeviceName >&
AddSpareRequest_Param::spare() const {
  // @@protoc_insertion_point(field_list:grpc_cli.AddSpareRequest.Param.spare)
  return spare_;
}

// -------------------------------------------------------------------

// AddSpareRequest

// string command = 1;
inline void AddSpareRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& AddSpareRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.AddSpareRequest.command)
  return _internal_command();
}
inline void AddSpareRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.AddSpareRequest.command)
}
inline std::string* AddSpareRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.AddSpareRequest.command)
  return _internal_mutable_command();
}
inline const std::string& AddSpareRequest::_internal_command() const {
  return command_.Get();
}
inline void AddSpareRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddSpareRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.AddSpareRequest.command)
}
inline void AddSpareRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.AddSpareRequest.command)
}
inline void AddSpareRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.AddSpareRequest.command)
}
inline std::string* AddSpareRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddSpareRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.AddSpareRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddSpareRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.AddSpareRequest.command)
}

// string rid = 2;
inline void AddSpareRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& AddSpareRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.AddSpareRequest.rid)
  return _internal_rid();
}
inline void AddSpareRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.AddSpareRequest.rid)
}
inline std::string* AddSpareRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.AddSpareRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& AddSpareRequest::_internal_rid() const {
  return rid_.Get();
}
inline void AddSpareRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddSpareRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.AddSpareRequest.rid)
}
inline void AddSpareRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.AddSpareRequest.rid)
}
inline void AddSpareRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.AddSpareRequest.rid)
}
inline std::string* AddSpareRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddSpareRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.AddSpareRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddSpareRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.AddSpareRequest.rid)
}

// string requestor = 3;
inline void AddSpareRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& AddSpareRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.AddSpareRequest.requestor)
  return _internal_requestor();
}
inline void AddSpareRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.AddSpareRequest.requestor)
}
inline std::string* AddSpareRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.AddSpareRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& AddSpareRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void AddSpareRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddSpareRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.AddSpareRequest.requestor)
}
inline void AddSpareRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.AddSpareRequest.requestor)
}
inline void AddSpareRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.AddSpareRequest.requestor)
}
inline std::string* AddSpareRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddSpareRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.AddSpareRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddSpareRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.AddSpareRequest.requestor)
}

// .grpc_cli.AddSpareRequest.Param param = 4;
inline bool AddSpareRequest::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool AddSpareRequest::has_param() const {
  return _internal_has_param();
}
inline void AddSpareRequest::clear_param() {
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::grpc_cli::AddSpareRequest_Param& AddSpareRequest::_internal_param() const {
  const ::grpc_cli::AddSpareRequest_Param* p = param_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::AddSpareRequest_Param&>(
      ::grpc_cli::_AddSpareRequest_Param_default_instance_);
}
inline const ::grpc_cli::AddSpareRequest_Param& AddSpareRequest::param() const {
  // @@protoc_insertion_point(field_get:grpc_cli.AddSpareRequest.param)
  return _internal_param();
}
inline void AddSpareRequest::unsafe_arena_set_allocated_param(
    ::grpc_cli::AddSpareRequest_Param* param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.AddSpareRequest.param)
}
inline ::grpc_cli::AddSpareRequest_Param* AddSpareRequest::release_param() {
  
  ::grpc_cli::AddSpareRequest_Param* temp = param_;
  param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::AddSpareRequest_Param* AddSpareRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:grpc_cli.AddSpareRequest.param)
  
  ::grpc_cli::AddSpareRequest_Param* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::grpc_cli::AddSpareRequest_Param* AddSpareRequest::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::AddSpareRequest_Param>(GetArena());
    param_ = p;
  }
  return param_;
}
inline ::grpc_cli::AddSpareRequest_Param* AddSpareRequest::mutable_param() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.AddSpareRequest.param)
  return _internal_mutable_param();
}
inline void AddSpareRequest::set_allocated_param(::grpc_cli::AddSpareRequest_Param* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.AddSpareRequest.param)
}

// -------------------------------------------------------------------

// AddSpareResponse_Result

// .grpc_cli.Status status = 1;
inline bool AddSpareResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool AddSpareResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void AddSpareResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& AddSpareResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& AddSpareResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.AddSpareResponse.Result.status)
  return _internal_status();
}
inline void AddSpareResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.AddSpareResponse.Result.status)
}
inline ::grpc_cli::Status* AddSpareResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* AddSpareResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.AddSpareResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* AddSpareResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* AddSpareResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.AddSpareResponse.Result.status)
  return _internal_mutable_status();
}
inline void AddSpareResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.AddSpareResponse.Result.status)
}

// -------------------------------------------------------------------

// AddSpareResponse

// string command = 1;
inline void AddSpareResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& AddSpareResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.AddSpareResponse.command)
  return _internal_command();
}
inline void AddSpareResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.AddSpareResponse.command)
}
inline std::string* AddSpareResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.AddSpareResponse.command)
  return _internal_mutable_command();
}
inline const std::string& AddSpareResponse::_internal_command() const {
  return command_.Get();
}
inline void AddSpareResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddSpareResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.AddSpareResponse.command)
}
inline void AddSpareResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.AddSpareResponse.command)
}
inline void AddSpareResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.AddSpareResponse.command)
}
inline std::string* AddSpareResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddSpareResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.AddSpareResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddSpareResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.AddSpareResponse.command)
}

// string rid = 2;
inline void AddSpareResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& AddSpareResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.AddSpareResponse.rid)
  return _internal_rid();
}
inline void AddSpareResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.AddSpareResponse.rid)
}
inline std::string* AddSpareResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.AddSpareResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& AddSpareResponse::_internal_rid() const {
  return rid_.Get();
}
inline void AddSpareResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddSpareResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.AddSpareResponse.rid)
}
inline void AddSpareResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.AddSpareResponse.rid)
}
inline void AddSpareResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.AddSpareResponse.rid)
}
inline std::string* AddSpareResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddSpareResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.AddSpareResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddSpareResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.AddSpareResponse.rid)
}

// .grpc_cli.AddSpareResponse.Result result = 3;
inline bool AddSpareResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool AddSpareResponse::has_result() const {
  return _internal_has_result();
}
inline void AddSpareResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::AddSpareResponse_Result& AddSpareResponse::_internal_result() const {
  const ::grpc_cli::AddSpareResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::AddSpareResponse_Result&>(
      ::grpc_cli::_AddSpareResponse_Result_default_instance_);
}
inline const ::grpc_cli::AddSpareResponse_Result& AddSpareResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.AddSpareResponse.result)
  return _internal_result();
}
inline void AddSpareResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::AddSpareResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.AddSpareResponse.result)
}
inline ::grpc_cli::AddSpareResponse_Result* AddSpareResponse::release_result() {
  
  ::grpc_cli::AddSpareResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::AddSpareResponse_Result* AddSpareResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.AddSpareResponse.result)
  
  ::grpc_cli::AddSpareResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::AddSpareResponse_Result* AddSpareResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::AddSpareResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::AddSpareResponse_Result* AddSpareResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.AddSpareResponse.result)
  return _internal_mutable_result();
}
inline void AddSpareResponse::set_allocated_result(::grpc_cli::AddSpareResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.AddSpareResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool AddSpareResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool AddSpareResponse::has_info() const {
  return _internal_has_info();
}
inline void AddSpareResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& AddSpareResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& AddSpareResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.AddSpareResponse.info)
  return _internal_info();
}
inline void AddSpareResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.AddSpareResponse.info)
}
inline ::grpc_cli::PosInfo* AddSpareResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* AddSpareResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.AddSpareResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* AddSpareResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* AddSpareResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.AddSpareResponse.info)
  return _internal_mutable_info();
}
inline void AddSpareResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.AddSpareResponse.info)
}

// -------------------------------------------------------------------

// DeviceNameList

// string deviceName = 1;
inline void DeviceNameList::clear_devicename() {
  devicename_.ClearToEmpty();
}
inline const std::string& DeviceNameList::devicename() const {
  // @@protoc_insertion_point(field_get:grpc_cli.DeviceNameList.deviceName)
  return _internal_devicename();
}
inline void DeviceNameList::set_devicename(const std::string& value) {
  _internal_set_devicename(value);
  // @@protoc_insertion_point(field_set:grpc_cli.DeviceNameList.deviceName)
}
inline std::string* DeviceNameList::mutable_devicename() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.DeviceNameList.deviceName)
  return _internal_mutable_devicename();
}
inline const std::string& DeviceNameList::_internal_devicename() const {
  return devicename_.Get();
}
inline void DeviceNameList::_internal_set_devicename(const std::string& value) {
  
  devicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeviceNameList::set_devicename(std::string&& value) {
  
  devicename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.DeviceNameList.deviceName)
}
inline void DeviceNameList::set_devicename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  devicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.DeviceNameList.deviceName)
}
inline void DeviceNameList::set_devicename(const char* value,
    size_t size) {
  
  devicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.DeviceNameList.deviceName)
}
inline std::string* DeviceNameList::_internal_mutable_devicename() {
  
  return devicename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeviceNameList::release_devicename() {
  // @@protoc_insertion_point(field_release:grpc_cli.DeviceNameList.deviceName)
  return devicename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceNameList::set_allocated_devicename(std::string* devicename) {
  if (devicename != nullptr) {
    
  } else {
    
  }
  devicename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), devicename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.DeviceNameList.deviceName)
}

// -------------------------------------------------------------------

// RemoveSpareRequest_SpareDeviceName

// string deviceName = 1;
inline void RemoveSpareRequest_SpareDeviceName::clear_devicename() {
  devicename_.ClearToEmpty();
}
inline const std::string& RemoveSpareRequest_SpareDeviceName::devicename() const {
  // @@protoc_insertion_point(field_get:grpc_cli.RemoveSpareRequest.SpareDeviceName.deviceName)
  return _internal_devicename();
}
inline void RemoveSpareRequest_SpareDeviceName::set_devicename(const std::string& value) {
  _internal_set_devicename(value);
  // @@protoc_insertion_point(field_set:grpc_cli.RemoveSpareRequest.SpareDeviceName.deviceName)
}
inline std::string* RemoveSpareRequest_SpareDeviceName::mutable_devicename() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.RemoveSpareRequest.SpareDeviceName.deviceName)
  return _internal_mutable_devicename();
}
inline const std::string& RemoveSpareRequest_SpareDeviceName::_internal_devicename() const {
  return devicename_.Get();
}
inline void RemoveSpareRequest_SpareDeviceName::_internal_set_devicename(const std::string& value) {
  
  devicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RemoveSpareRequest_SpareDeviceName::set_devicename(std::string&& value) {
  
  devicename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.RemoveSpareRequest.SpareDeviceName.deviceName)
}
inline void RemoveSpareRequest_SpareDeviceName::set_devicename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  devicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.RemoveSpareRequest.SpareDeviceName.deviceName)
}
inline void RemoveSpareRequest_SpareDeviceName::set_devicename(const char* value,
    size_t size) {
  
  devicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.RemoveSpareRequest.SpareDeviceName.deviceName)
}
inline std::string* RemoveSpareRequest_SpareDeviceName::_internal_mutable_devicename() {
  
  return devicename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RemoveSpareRequest_SpareDeviceName::release_devicename() {
  // @@protoc_insertion_point(field_release:grpc_cli.RemoveSpareRequest.SpareDeviceName.deviceName)
  return devicename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoveSpareRequest_SpareDeviceName::set_allocated_devicename(std::string* devicename) {
  if (devicename != nullptr) {
    
  } else {
    
  }
  devicename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), devicename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.RemoveSpareRequest.SpareDeviceName.deviceName)
}

// -------------------------------------------------------------------

// RemoveSpareRequest_Param

// string array = 1;
inline void RemoveSpareRequest_Param::clear_array() {
  array_.ClearToEmpty();
}
inline const std::string& RemoveSpareRequest_Param::array() const {
  // @@protoc_insertion_point(field_get:grpc_cli.RemoveSpareRequest.Param.array)
  return _internal_array();
}
inline void RemoveSpareRequest_Param::set_array(const std::string& value) {
  _internal_set_array(value);
  // @@protoc_insertion_point(field_set:grpc_cli.RemoveSpareRequest.Param.array)
}
inline std::string* RemoveSpareRequest_Param::mutable_array() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.RemoveSpareRequest.Param.array)
  return _internal_mutable_array();
}
inline const std::string& RemoveSpareRequest_Param::_internal_array() const {
  return array_.Get();
}
inline void RemoveSpareRequest_Param::_internal_set_array(const std::string& value) {
  
  array_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RemoveSpareRequest_Param::set_array(std::string&& value) {
  
  array_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.RemoveSpareRequest.Param.array)
}
inline void RemoveSpareRequest_Param::set_array(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  array_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.RemoveSpareRequest.Param.array)
}
inline void RemoveSpareRequest_Param::set_array(const char* value,
    size_t size) {
  
  array_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.RemoveSpareRequest.Param.array)
}
inline std::string* RemoveSpareRequest_Param::_internal_mutable_array() {
  
  return array_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RemoveSpareRequest_Param::release_array() {
  // @@protoc_insertion_point(field_release:grpc_cli.RemoveSpareRequest.Param.array)
  return array_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoveSpareRequest_Param::set_allocated_array(std::string* array) {
  if (array != nullptr) {
    
  } else {
    
  }
  array_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), array,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.RemoveSpareRequest.Param.array)
}

// repeated .grpc_cli.RemoveSpareRequest.SpareDeviceName spare = 2;
inline int RemoveSpareRequest_Param::_internal_spare_size() const {
  return spare_.size();
}
inline int RemoveSpareRequest_Param::spare_size() const {
  return _internal_spare_size();
}
inline void RemoveSpareRequest_Param::clear_spare() {
  spare_.Clear();
}
inline ::grpc_cli::RemoveSpareRequest_SpareDeviceName* RemoveSpareRequest_Param::mutable_spare(int index) {
  // @@protoc_insertion_point(field_mutable:grpc_cli.RemoveSpareRequest.Param.spare)
  return spare_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::RemoveSpareRequest_SpareDeviceName >*
RemoveSpareRequest_Param::mutable_spare() {
  // @@protoc_insertion_point(field_mutable_list:grpc_cli.RemoveSpareRequest.Param.spare)
  return &spare_;
}
inline const ::grpc_cli::RemoveSpareRequest_SpareDeviceName& RemoveSpareRequest_Param::_internal_spare(int index) const {
  return spare_.Get(index);
}
inline const ::grpc_cli::RemoveSpareRequest_SpareDeviceName& RemoveSpareRequest_Param::spare(int index) const {
  // @@protoc_insertion_point(field_get:grpc_cli.RemoveSpareRequest.Param.spare)
  return _internal_spare(index);
}
inline ::grpc_cli::RemoveSpareRequest_SpareDeviceName* RemoveSpareRequest_Param::_internal_add_spare() {
  return spare_.Add();
}
inline ::grpc_cli::RemoveSpareRequest_SpareDeviceName* RemoveSpareRequest_Param::add_spare() {
  // @@protoc_insertion_point(field_add:grpc_cli.RemoveSpareRequest.Param.spare)
  return _internal_add_spare();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::RemoveSpareRequest_SpareDeviceName >&
RemoveSpareRequest_Param::spare() const {
  // @@protoc_insertion_point(field_list:grpc_cli.RemoveSpareRequest.Param.spare)
  return spare_;
}

// -------------------------------------------------------------------

// RemoveSpareRequest

// string command = 1;
inline void RemoveSpareRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& RemoveSpareRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.RemoveSpareRequest.command)
  return _internal_command();
}
inline void RemoveSpareRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.RemoveSpareRequest.command)
}
inline std::string* RemoveSpareRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.RemoveSpareRequest.command)
  return _internal_mutable_command();
}
inline const std::string& RemoveSpareRequest::_internal_command() const {
  return command_.Get();
}
inline void RemoveSpareRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RemoveSpareRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.RemoveSpareRequest.command)
}
inline void RemoveSpareRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.RemoveSpareRequest.command)
}
inline void RemoveSpareRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.RemoveSpareRequest.command)
}
inline std::string* RemoveSpareRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RemoveSpareRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.RemoveSpareRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoveSpareRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.RemoveSpareRequest.command)
}

// string rid = 2;
inline void RemoveSpareRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& RemoveSpareRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.RemoveSpareRequest.rid)
  return _internal_rid();
}
inline void RemoveSpareRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.RemoveSpareRequest.rid)
}
inline std::string* RemoveSpareRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.RemoveSpareRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& RemoveSpareRequest::_internal_rid() const {
  return rid_.Get();
}
inline void RemoveSpareRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RemoveSpareRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.RemoveSpareRequest.rid)
}
inline void RemoveSpareRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.RemoveSpareRequest.rid)
}
inline void RemoveSpareRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.RemoveSpareRequest.rid)
}
inline std::string* RemoveSpareRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RemoveSpareRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.RemoveSpareRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoveSpareRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.RemoveSpareRequest.rid)
}

// string requestor = 3;
inline void RemoveSpareRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& RemoveSpareRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.RemoveSpareRequest.requestor)
  return _internal_requestor();
}
inline void RemoveSpareRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.RemoveSpareRequest.requestor)
}
inline std::string* RemoveSpareRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.RemoveSpareRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& RemoveSpareRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void RemoveSpareRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RemoveSpareRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.RemoveSpareRequest.requestor)
}
inline void RemoveSpareRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.RemoveSpareRequest.requestor)
}
inline void RemoveSpareRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.RemoveSpareRequest.requestor)
}
inline std::string* RemoveSpareRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RemoveSpareRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.RemoveSpareRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoveSpareRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.RemoveSpareRequest.requestor)
}

// .grpc_cli.RemoveSpareRequest.Param param = 4;
inline bool RemoveSpareRequest::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool RemoveSpareRequest::has_param() const {
  return _internal_has_param();
}
inline void RemoveSpareRequest::clear_param() {
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::grpc_cli::RemoveSpareRequest_Param& RemoveSpareRequest::_internal_param() const {
  const ::grpc_cli::RemoveSpareRequest_Param* p = param_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::RemoveSpareRequest_Param&>(
      ::grpc_cli::_RemoveSpareRequest_Param_default_instance_);
}
inline const ::grpc_cli::RemoveSpareRequest_Param& RemoveSpareRequest::param() const {
  // @@protoc_insertion_point(field_get:grpc_cli.RemoveSpareRequest.param)
  return _internal_param();
}
inline void RemoveSpareRequest::unsafe_arena_set_allocated_param(
    ::grpc_cli::RemoveSpareRequest_Param* param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.RemoveSpareRequest.param)
}
inline ::grpc_cli::RemoveSpareRequest_Param* RemoveSpareRequest::release_param() {
  
  ::grpc_cli::RemoveSpareRequest_Param* temp = param_;
  param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::RemoveSpareRequest_Param* RemoveSpareRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:grpc_cli.RemoveSpareRequest.param)
  
  ::grpc_cli::RemoveSpareRequest_Param* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::grpc_cli::RemoveSpareRequest_Param* RemoveSpareRequest::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::RemoveSpareRequest_Param>(GetArena());
    param_ = p;
  }
  return param_;
}
inline ::grpc_cli::RemoveSpareRequest_Param* RemoveSpareRequest::mutable_param() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.RemoveSpareRequest.param)
  return _internal_mutable_param();
}
inline void RemoveSpareRequest::set_allocated_param(::grpc_cli::RemoveSpareRequest_Param* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.RemoveSpareRequest.param)
}

// -------------------------------------------------------------------

// RemoveSpareResponse_Result

// .grpc_cli.Status status = 1;
inline bool RemoveSpareResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool RemoveSpareResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void RemoveSpareResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& RemoveSpareResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& RemoveSpareResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.RemoveSpareResponse.Result.status)
  return _internal_status();
}
inline void RemoveSpareResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.RemoveSpareResponse.Result.status)
}
inline ::grpc_cli::Status* RemoveSpareResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* RemoveSpareResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.RemoveSpareResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* RemoveSpareResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* RemoveSpareResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.RemoveSpareResponse.Result.status)
  return _internal_mutable_status();
}
inline void RemoveSpareResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.RemoveSpareResponse.Result.status)
}

// -------------------------------------------------------------------

// RemoveSpareResponse

// string command = 1;
inline void RemoveSpareResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& RemoveSpareResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.RemoveSpareResponse.command)
  return _internal_command();
}
inline void RemoveSpareResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.RemoveSpareResponse.command)
}
inline std::string* RemoveSpareResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.RemoveSpareResponse.command)
  return _internal_mutable_command();
}
inline const std::string& RemoveSpareResponse::_internal_command() const {
  return command_.Get();
}
inline void RemoveSpareResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RemoveSpareResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.RemoveSpareResponse.command)
}
inline void RemoveSpareResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.RemoveSpareResponse.command)
}
inline void RemoveSpareResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.RemoveSpareResponse.command)
}
inline std::string* RemoveSpareResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RemoveSpareResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.RemoveSpareResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoveSpareResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.RemoveSpareResponse.command)
}

// string rid = 2;
inline void RemoveSpareResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& RemoveSpareResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.RemoveSpareResponse.rid)
  return _internal_rid();
}
inline void RemoveSpareResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.RemoveSpareResponse.rid)
}
inline std::string* RemoveSpareResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.RemoveSpareResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& RemoveSpareResponse::_internal_rid() const {
  return rid_.Get();
}
inline void RemoveSpareResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RemoveSpareResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.RemoveSpareResponse.rid)
}
inline void RemoveSpareResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.RemoveSpareResponse.rid)
}
inline void RemoveSpareResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.RemoveSpareResponse.rid)
}
inline std::string* RemoveSpareResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RemoveSpareResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.RemoveSpareResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoveSpareResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.RemoveSpareResponse.rid)
}

// .grpc_cli.RemoveSpareResponse.Result result = 3;
inline bool RemoveSpareResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool RemoveSpareResponse::has_result() const {
  return _internal_has_result();
}
inline void RemoveSpareResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::RemoveSpareResponse_Result& RemoveSpareResponse::_internal_result() const {
  const ::grpc_cli::RemoveSpareResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::RemoveSpareResponse_Result&>(
      ::grpc_cli::_RemoveSpareResponse_Result_default_instance_);
}
inline const ::grpc_cli::RemoveSpareResponse_Result& RemoveSpareResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.RemoveSpareResponse.result)
  return _internal_result();
}
inline void RemoveSpareResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::RemoveSpareResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.RemoveSpareResponse.result)
}
inline ::grpc_cli::RemoveSpareResponse_Result* RemoveSpareResponse::release_result() {
  
  ::grpc_cli::RemoveSpareResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::RemoveSpareResponse_Result* RemoveSpareResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.RemoveSpareResponse.result)
  
  ::grpc_cli::RemoveSpareResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::RemoveSpareResponse_Result* RemoveSpareResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::RemoveSpareResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::RemoveSpareResponse_Result* RemoveSpareResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.RemoveSpareResponse.result)
  return _internal_mutable_result();
}
inline void RemoveSpareResponse::set_allocated_result(::grpc_cli::RemoveSpareResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.RemoveSpareResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool RemoveSpareResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool RemoveSpareResponse::has_info() const {
  return _internal_has_info();
}
inline void RemoveSpareResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& RemoveSpareResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& RemoveSpareResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.RemoveSpareResponse.info)
  return _internal_info();
}
inline void RemoveSpareResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.RemoveSpareResponse.info)
}
inline ::grpc_cli::PosInfo* RemoveSpareResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* RemoveSpareResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.RemoveSpareResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* RemoveSpareResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* RemoveSpareResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.RemoveSpareResponse.info)
  return _internal_mutable_info();
}
inline void RemoveSpareResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.RemoveSpareResponse.info)
}

// -------------------------------------------------------------------

// ReplaceArrayDeviceRequest_Param

// string array = 1;
inline void ReplaceArrayDeviceRequest_Param::clear_array() {
  array_.ClearToEmpty();
}
inline const std::string& ReplaceArrayDeviceRequest_Param::array() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ReplaceArrayDeviceRequest.Param.array)
  return _internal_array();
}
inline void ReplaceArrayDeviceRequest_Param::set_array(const std::string& value) {
  _internal_set_array(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ReplaceArrayDeviceRequest.Param.array)
}
inline std::string* ReplaceArrayDeviceRequest_Param::mutable_array() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ReplaceArrayDeviceRequest.Param.array)
  return _internal_mutable_array();
}
inline const std::string& ReplaceArrayDeviceRequest_Param::_internal_array() const {
  return array_.Get();
}
inline void ReplaceArrayDeviceRequest_Param::_internal_set_array(const std::string& value) {
  
  array_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReplaceArrayDeviceRequest_Param::set_array(std::string&& value) {
  
  array_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ReplaceArrayDeviceRequest.Param.array)
}
inline void ReplaceArrayDeviceRequest_Param::set_array(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  array_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ReplaceArrayDeviceRequest.Param.array)
}
inline void ReplaceArrayDeviceRequest_Param::set_array(const char* value,
    size_t size) {
  
  array_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ReplaceArrayDeviceRequest.Param.array)
}
inline std::string* ReplaceArrayDeviceRequest_Param::_internal_mutable_array() {
  
  return array_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReplaceArrayDeviceRequest_Param::release_array() {
  // @@protoc_insertion_point(field_release:grpc_cli.ReplaceArrayDeviceRequest.Param.array)
  return array_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReplaceArrayDeviceRequest_Param::set_allocated_array(std::string* array) {
  if (array != nullptr) {
    
  } else {
    
  }
  array_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), array,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ReplaceArrayDeviceRequest.Param.array)
}

// string device = 2;
inline void ReplaceArrayDeviceRequest_Param::clear_device() {
  device_.ClearToEmpty();
}
inline const std::string& ReplaceArrayDeviceRequest_Param::device() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ReplaceArrayDeviceRequest.Param.device)
  return _internal_device();
}
inline void ReplaceArrayDeviceRequest_Param::set_device(const std::string& value) {
  _internal_set_device(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ReplaceArrayDeviceRequest.Param.device)
}
inline std::string* ReplaceArrayDeviceRequest_Param::mutable_device() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ReplaceArrayDeviceRequest.Param.device)
  return _internal_mutable_device();
}
inline const std::string& ReplaceArrayDeviceRequest_Param::_internal_device() const {
  return device_.Get();
}
inline void ReplaceArrayDeviceRequest_Param::_internal_set_device(const std::string& value) {
  
  device_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReplaceArrayDeviceRequest_Param::set_device(std::string&& value) {
  
  device_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ReplaceArrayDeviceRequest.Param.device)
}
inline void ReplaceArrayDeviceRequest_Param::set_device(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ReplaceArrayDeviceRequest.Param.device)
}
inline void ReplaceArrayDeviceRequest_Param::set_device(const char* value,
    size_t size) {
  
  device_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ReplaceArrayDeviceRequest.Param.device)
}
inline std::string* ReplaceArrayDeviceRequest_Param::_internal_mutable_device() {
  
  return device_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReplaceArrayDeviceRequest_Param::release_device() {
  // @@protoc_insertion_point(field_release:grpc_cli.ReplaceArrayDeviceRequest.Param.device)
  return device_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReplaceArrayDeviceRequest_Param::set_allocated_device(std::string* device) {
  if (device != nullptr) {
    
  } else {
    
  }
  device_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ReplaceArrayDeviceRequest.Param.device)
}

// -------------------------------------------------------------------

// ReplaceArrayDeviceRequest

// string command = 1;
inline void ReplaceArrayDeviceRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& ReplaceArrayDeviceRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ReplaceArrayDeviceRequest.command)
  return _internal_command();
}
inline void ReplaceArrayDeviceRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ReplaceArrayDeviceRequest.command)
}
inline std::string* ReplaceArrayDeviceRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ReplaceArrayDeviceRequest.command)
  return _internal_mutable_command();
}
inline const std::string& ReplaceArrayDeviceRequest::_internal_command() const {
  return command_.Get();
}
inline void ReplaceArrayDeviceRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReplaceArrayDeviceRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ReplaceArrayDeviceRequest.command)
}
inline void ReplaceArrayDeviceRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ReplaceArrayDeviceRequest.command)
}
inline void ReplaceArrayDeviceRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ReplaceArrayDeviceRequest.command)
}
inline std::string* ReplaceArrayDeviceRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReplaceArrayDeviceRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.ReplaceArrayDeviceRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReplaceArrayDeviceRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ReplaceArrayDeviceRequest.command)
}

// string rid = 2;
inline void ReplaceArrayDeviceRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& ReplaceArrayDeviceRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ReplaceArrayDeviceRequest.rid)
  return _internal_rid();
}
inline void ReplaceArrayDeviceRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ReplaceArrayDeviceRequest.rid)
}
inline std::string* ReplaceArrayDeviceRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ReplaceArrayDeviceRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& ReplaceArrayDeviceRequest::_internal_rid() const {
  return rid_.Get();
}
inline void ReplaceArrayDeviceRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReplaceArrayDeviceRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ReplaceArrayDeviceRequest.rid)
}
inline void ReplaceArrayDeviceRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ReplaceArrayDeviceRequest.rid)
}
inline void ReplaceArrayDeviceRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ReplaceArrayDeviceRequest.rid)
}
inline std::string* ReplaceArrayDeviceRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReplaceArrayDeviceRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.ReplaceArrayDeviceRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReplaceArrayDeviceRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ReplaceArrayDeviceRequest.rid)
}

// string requestor = 3;
inline void ReplaceArrayDeviceRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& ReplaceArrayDeviceRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ReplaceArrayDeviceRequest.requestor)
  return _internal_requestor();
}
inline void ReplaceArrayDeviceRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ReplaceArrayDeviceRequest.requestor)
}
inline std::string* ReplaceArrayDeviceRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ReplaceArrayDeviceRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& ReplaceArrayDeviceRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void ReplaceArrayDeviceRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReplaceArrayDeviceRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ReplaceArrayDeviceRequest.requestor)
}
inline void ReplaceArrayDeviceRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ReplaceArrayDeviceRequest.requestor)
}
inline void ReplaceArrayDeviceRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ReplaceArrayDeviceRequest.requestor)
}
inline std::string* ReplaceArrayDeviceRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReplaceArrayDeviceRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.ReplaceArrayDeviceRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReplaceArrayDeviceRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ReplaceArrayDeviceRequest.requestor)
}

// .grpc_cli.ReplaceArrayDeviceRequest.Param param = 4;
inline bool ReplaceArrayDeviceRequest::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool ReplaceArrayDeviceRequest::has_param() const {
  return _internal_has_param();
}
inline void ReplaceArrayDeviceRequest::clear_param() {
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::grpc_cli::ReplaceArrayDeviceRequest_Param& ReplaceArrayDeviceRequest::_internal_param() const {
  const ::grpc_cli::ReplaceArrayDeviceRequest_Param* p = param_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::ReplaceArrayDeviceRequest_Param&>(
      ::grpc_cli::_ReplaceArrayDeviceRequest_Param_default_instance_);
}
inline const ::grpc_cli::ReplaceArrayDeviceRequest_Param& ReplaceArrayDeviceRequest::param() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ReplaceArrayDeviceRequest.param)
  return _internal_param();
}
inline void ReplaceArrayDeviceRequest::unsafe_arena_set_allocated_param(
    ::grpc_cli::ReplaceArrayDeviceRequest_Param* param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ReplaceArrayDeviceRequest.param)
}
inline ::grpc_cli::ReplaceArrayDeviceRequest_Param* ReplaceArrayDeviceRequest::release_param() {
  
  ::grpc_cli::ReplaceArrayDeviceRequest_Param* temp = param_;
  param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::ReplaceArrayDeviceRequest_Param* ReplaceArrayDeviceRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:grpc_cli.ReplaceArrayDeviceRequest.param)
  
  ::grpc_cli::ReplaceArrayDeviceRequest_Param* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::grpc_cli::ReplaceArrayDeviceRequest_Param* ReplaceArrayDeviceRequest::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::ReplaceArrayDeviceRequest_Param>(GetArena());
    param_ = p;
  }
  return param_;
}
inline ::grpc_cli::ReplaceArrayDeviceRequest_Param* ReplaceArrayDeviceRequest::mutable_param() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ReplaceArrayDeviceRequest.param)
  return _internal_mutable_param();
}
inline void ReplaceArrayDeviceRequest::set_allocated_param(::grpc_cli::ReplaceArrayDeviceRequest_Param* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ReplaceArrayDeviceRequest.param)
}

// -------------------------------------------------------------------

// ReplaceArrayDeviceResponse_Result

// .grpc_cli.Status status = 1;
inline bool ReplaceArrayDeviceResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool ReplaceArrayDeviceResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void ReplaceArrayDeviceResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& ReplaceArrayDeviceResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& ReplaceArrayDeviceResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ReplaceArrayDeviceResponse.Result.status)
  return _internal_status();
}
inline void ReplaceArrayDeviceResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ReplaceArrayDeviceResponse.Result.status)
}
inline ::grpc_cli::Status* ReplaceArrayDeviceResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* ReplaceArrayDeviceResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.ReplaceArrayDeviceResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* ReplaceArrayDeviceResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* ReplaceArrayDeviceResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ReplaceArrayDeviceResponse.Result.status)
  return _internal_mutable_status();
}
inline void ReplaceArrayDeviceResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ReplaceArrayDeviceResponse.Result.status)
}

// -------------------------------------------------------------------

// ReplaceArrayDeviceResponse

// string command = 1;
inline void ReplaceArrayDeviceResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& ReplaceArrayDeviceResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ReplaceArrayDeviceResponse.command)
  return _internal_command();
}
inline void ReplaceArrayDeviceResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ReplaceArrayDeviceResponse.command)
}
inline std::string* ReplaceArrayDeviceResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ReplaceArrayDeviceResponse.command)
  return _internal_mutable_command();
}
inline const std::string& ReplaceArrayDeviceResponse::_internal_command() const {
  return command_.Get();
}
inline void ReplaceArrayDeviceResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReplaceArrayDeviceResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ReplaceArrayDeviceResponse.command)
}
inline void ReplaceArrayDeviceResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ReplaceArrayDeviceResponse.command)
}
inline void ReplaceArrayDeviceResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ReplaceArrayDeviceResponse.command)
}
inline std::string* ReplaceArrayDeviceResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReplaceArrayDeviceResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.ReplaceArrayDeviceResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReplaceArrayDeviceResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ReplaceArrayDeviceResponse.command)
}

// string rid = 2;
inline void ReplaceArrayDeviceResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& ReplaceArrayDeviceResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ReplaceArrayDeviceResponse.rid)
  return _internal_rid();
}
inline void ReplaceArrayDeviceResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ReplaceArrayDeviceResponse.rid)
}
inline std::string* ReplaceArrayDeviceResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ReplaceArrayDeviceResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& ReplaceArrayDeviceResponse::_internal_rid() const {
  return rid_.Get();
}
inline void ReplaceArrayDeviceResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReplaceArrayDeviceResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ReplaceArrayDeviceResponse.rid)
}
inline void ReplaceArrayDeviceResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ReplaceArrayDeviceResponse.rid)
}
inline void ReplaceArrayDeviceResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ReplaceArrayDeviceResponse.rid)
}
inline std::string* ReplaceArrayDeviceResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReplaceArrayDeviceResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.ReplaceArrayDeviceResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReplaceArrayDeviceResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ReplaceArrayDeviceResponse.rid)
}

// .grpc_cli.ReplaceArrayDeviceResponse.Result result = 3;
inline bool ReplaceArrayDeviceResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool ReplaceArrayDeviceResponse::has_result() const {
  return _internal_has_result();
}
inline void ReplaceArrayDeviceResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::ReplaceArrayDeviceResponse_Result& ReplaceArrayDeviceResponse::_internal_result() const {
  const ::grpc_cli::ReplaceArrayDeviceResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::ReplaceArrayDeviceResponse_Result&>(
      ::grpc_cli::_ReplaceArrayDeviceResponse_Result_default_instance_);
}
inline const ::grpc_cli::ReplaceArrayDeviceResponse_Result& ReplaceArrayDeviceResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ReplaceArrayDeviceResponse.result)
  return _internal_result();
}
inline void ReplaceArrayDeviceResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::ReplaceArrayDeviceResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ReplaceArrayDeviceResponse.result)
}
inline ::grpc_cli::ReplaceArrayDeviceResponse_Result* ReplaceArrayDeviceResponse::release_result() {
  
  ::grpc_cli::ReplaceArrayDeviceResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::ReplaceArrayDeviceResponse_Result* ReplaceArrayDeviceResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.ReplaceArrayDeviceResponse.result)
  
  ::grpc_cli::ReplaceArrayDeviceResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::ReplaceArrayDeviceResponse_Result* ReplaceArrayDeviceResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::ReplaceArrayDeviceResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::ReplaceArrayDeviceResponse_Result* ReplaceArrayDeviceResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ReplaceArrayDeviceResponse.result)
  return _internal_mutable_result();
}
inline void ReplaceArrayDeviceResponse::set_allocated_result(::grpc_cli::ReplaceArrayDeviceResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ReplaceArrayDeviceResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool ReplaceArrayDeviceResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool ReplaceArrayDeviceResponse::has_info() const {
  return _internal_has_info();
}
inline void ReplaceArrayDeviceResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& ReplaceArrayDeviceResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& ReplaceArrayDeviceResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ReplaceArrayDeviceResponse.info)
  return _internal_info();
}
inline void ReplaceArrayDeviceResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ReplaceArrayDeviceResponse.info)
}
inline ::grpc_cli::PosInfo* ReplaceArrayDeviceResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* ReplaceArrayDeviceResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.ReplaceArrayDeviceResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* ReplaceArrayDeviceResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* ReplaceArrayDeviceResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ReplaceArrayDeviceResponse.info)
  return _internal_mutable_info();
}
inline void ReplaceArrayDeviceResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ReplaceArrayDeviceResponse.info)
}

// -------------------------------------------------------------------

// CreateArrayRequest_Param

// string name = 1;
inline void CreateArrayRequest_Param::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CreateArrayRequest_Param::name() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateArrayRequest.Param.name)
  return _internal_name();
}
inline void CreateArrayRequest_Param::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:grpc_cli.CreateArrayRequest.Param.name)
}
inline std::string* CreateArrayRequest_Param::mutable_name() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateArrayRequest.Param.name)
  return _internal_mutable_name();
}
inline const std::string& CreateArrayRequest_Param::_internal_name() const {
  return name_.Get();
}
inline void CreateArrayRequest_Param::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateArrayRequest_Param::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.CreateArrayRequest.Param.name)
}
inline void CreateArrayRequest_Param::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.CreateArrayRequest.Param.name)
}
inline void CreateArrayRequest_Param::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.CreateArrayRequest.Param.name)
}
inline std::string* CreateArrayRequest_Param::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateArrayRequest_Param::release_name() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateArrayRequest.Param.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateArrayRequest_Param::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateArrayRequest.Param.name)
}

// repeated .grpc_cli.DeviceNameList buffer = 2;
inline int CreateArrayRequest_Param::_internal_buffer_size() const {
  return buffer_.size();
}
inline int CreateArrayRequest_Param::buffer_size() const {
  return _internal_buffer_size();
}
inline void CreateArrayRequest_Param::clear_buffer() {
  buffer_.Clear();
}
inline ::grpc_cli::DeviceNameList* CreateArrayRequest_Param::mutable_buffer(int index) {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateArrayRequest.Param.buffer)
  return buffer_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::DeviceNameList >*
CreateArrayRequest_Param::mutable_buffer() {
  // @@protoc_insertion_point(field_mutable_list:grpc_cli.CreateArrayRequest.Param.buffer)
  return &buffer_;
}
inline const ::grpc_cli::DeviceNameList& CreateArrayRequest_Param::_internal_buffer(int index) const {
  return buffer_.Get(index);
}
inline const ::grpc_cli::DeviceNameList& CreateArrayRequest_Param::buffer(int index) const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateArrayRequest.Param.buffer)
  return _internal_buffer(index);
}
inline ::grpc_cli::DeviceNameList* CreateArrayRequest_Param::_internal_add_buffer() {
  return buffer_.Add();
}
inline ::grpc_cli::DeviceNameList* CreateArrayRequest_Param::add_buffer() {
  // @@protoc_insertion_point(field_add:grpc_cli.CreateArrayRequest.Param.buffer)
  return _internal_add_buffer();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::DeviceNameList >&
CreateArrayRequest_Param::buffer() const {
  // @@protoc_insertion_point(field_list:grpc_cli.CreateArrayRequest.Param.buffer)
  return buffer_;
}

// repeated .grpc_cli.DeviceNameList data = 3;
inline int CreateArrayRequest_Param::_internal_data_size() const {
  return data_.size();
}
inline int CreateArrayRequest_Param::data_size() const {
  return _internal_data_size();
}
inline void CreateArrayRequest_Param::clear_data() {
  data_.Clear();
}
inline ::grpc_cli::DeviceNameList* CreateArrayRequest_Param::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateArrayRequest.Param.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::DeviceNameList >*
CreateArrayRequest_Param::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:grpc_cli.CreateArrayRequest.Param.data)
  return &data_;
}
inline const ::grpc_cli::DeviceNameList& CreateArrayRequest_Param::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::grpc_cli::DeviceNameList& CreateArrayRequest_Param::data(int index) const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateArrayRequest.Param.data)
  return _internal_data(index);
}
inline ::grpc_cli::DeviceNameList* CreateArrayRequest_Param::_internal_add_data() {
  return data_.Add();
}
inline ::grpc_cli::DeviceNameList* CreateArrayRequest_Param::add_data() {
  // @@protoc_insertion_point(field_add:grpc_cli.CreateArrayRequest.Param.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::DeviceNameList >&
CreateArrayRequest_Param::data() const {
  // @@protoc_insertion_point(field_list:grpc_cli.CreateArrayRequest.Param.data)
  return data_;
}

// repeated .grpc_cli.DeviceNameList spare = 4;
inline int CreateArrayRequest_Param::_internal_spare_size() const {
  return spare_.size();
}
inline int CreateArrayRequest_Param::spare_size() const {
  return _internal_spare_size();
}
inline void CreateArrayRequest_Param::clear_spare() {
  spare_.Clear();
}
inline ::grpc_cli::DeviceNameList* CreateArrayRequest_Param::mutable_spare(int index) {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateArrayRequest.Param.spare)
  return spare_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::DeviceNameList >*
CreateArrayRequest_Param::mutable_spare() {
  // @@protoc_insertion_point(field_mutable_list:grpc_cli.CreateArrayRequest.Param.spare)
  return &spare_;
}
inline const ::grpc_cli::DeviceNameList& CreateArrayRequest_Param::_internal_spare(int index) const {
  return spare_.Get(index);
}
inline const ::grpc_cli::DeviceNameList& CreateArrayRequest_Param::spare(int index) const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateArrayRequest.Param.spare)
  return _internal_spare(index);
}
inline ::grpc_cli::DeviceNameList* CreateArrayRequest_Param::_internal_add_spare() {
  return spare_.Add();
}
inline ::grpc_cli::DeviceNameList* CreateArrayRequest_Param::add_spare() {
  // @@protoc_insertion_point(field_add:grpc_cli.CreateArrayRequest.Param.spare)
  return _internal_add_spare();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::DeviceNameList >&
CreateArrayRequest_Param::spare() const {
  // @@protoc_insertion_point(field_list:grpc_cli.CreateArrayRequest.Param.spare)
  return spare_;
}

// string raidtype = 5;
inline void CreateArrayRequest_Param::clear_raidtype() {
  raidtype_.ClearToEmpty();
}
inline const std::string& CreateArrayRequest_Param::raidtype() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateArrayRequest.Param.raidtype)
  return _internal_raidtype();
}
inline void CreateArrayRequest_Param::set_raidtype(const std::string& value) {
  _internal_set_raidtype(value);
  // @@protoc_insertion_point(field_set:grpc_cli.CreateArrayRequest.Param.raidtype)
}
inline std::string* CreateArrayRequest_Param::mutable_raidtype() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateArrayRequest.Param.raidtype)
  return _internal_mutable_raidtype();
}
inline const std::string& CreateArrayRequest_Param::_internal_raidtype() const {
  return raidtype_.Get();
}
inline void CreateArrayRequest_Param::_internal_set_raidtype(const std::string& value) {
  
  raidtype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateArrayRequest_Param::set_raidtype(std::string&& value) {
  
  raidtype_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.CreateArrayRequest.Param.raidtype)
}
inline void CreateArrayRequest_Param::set_raidtype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  raidtype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.CreateArrayRequest.Param.raidtype)
}
inline void CreateArrayRequest_Param::set_raidtype(const char* value,
    size_t size) {
  
  raidtype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.CreateArrayRequest.Param.raidtype)
}
inline std::string* CreateArrayRequest_Param::_internal_mutable_raidtype() {
  
  return raidtype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateArrayRequest_Param::release_raidtype() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateArrayRequest.Param.raidtype)
  return raidtype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateArrayRequest_Param::set_allocated_raidtype(std::string* raidtype) {
  if (raidtype != nullptr) {
    
  } else {
    
  }
  raidtype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), raidtype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateArrayRequest.Param.raidtype)
}

// -------------------------------------------------------------------

// CreateArrayRequest

// string command = 1;
inline void CreateArrayRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& CreateArrayRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateArrayRequest.command)
  return _internal_command();
}
inline void CreateArrayRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.CreateArrayRequest.command)
}
inline std::string* CreateArrayRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateArrayRequest.command)
  return _internal_mutable_command();
}
inline const std::string& CreateArrayRequest::_internal_command() const {
  return command_.Get();
}
inline void CreateArrayRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateArrayRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.CreateArrayRequest.command)
}
inline void CreateArrayRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.CreateArrayRequest.command)
}
inline void CreateArrayRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.CreateArrayRequest.command)
}
inline std::string* CreateArrayRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateArrayRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateArrayRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateArrayRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateArrayRequest.command)
}

// string rid = 2;
inline void CreateArrayRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& CreateArrayRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateArrayRequest.rid)
  return _internal_rid();
}
inline void CreateArrayRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.CreateArrayRequest.rid)
}
inline std::string* CreateArrayRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateArrayRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& CreateArrayRequest::_internal_rid() const {
  return rid_.Get();
}
inline void CreateArrayRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateArrayRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.CreateArrayRequest.rid)
}
inline void CreateArrayRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.CreateArrayRequest.rid)
}
inline void CreateArrayRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.CreateArrayRequest.rid)
}
inline std::string* CreateArrayRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateArrayRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateArrayRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateArrayRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateArrayRequest.rid)
}

// string requestor = 3;
inline void CreateArrayRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& CreateArrayRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateArrayRequest.requestor)
  return _internal_requestor();
}
inline void CreateArrayRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.CreateArrayRequest.requestor)
}
inline std::string* CreateArrayRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateArrayRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& CreateArrayRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void CreateArrayRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateArrayRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.CreateArrayRequest.requestor)
}
inline void CreateArrayRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.CreateArrayRequest.requestor)
}
inline void CreateArrayRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.CreateArrayRequest.requestor)
}
inline std::string* CreateArrayRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateArrayRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateArrayRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateArrayRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateArrayRequest.requestor)
}

// .grpc_cli.CreateArrayRequest.Param param = 4;
inline bool CreateArrayRequest::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool CreateArrayRequest::has_param() const {
  return _internal_has_param();
}
inline void CreateArrayRequest::clear_param() {
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::grpc_cli::CreateArrayRequest_Param& CreateArrayRequest::_internal_param() const {
  const ::grpc_cli::CreateArrayRequest_Param* p = param_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::CreateArrayRequest_Param&>(
      ::grpc_cli::_CreateArrayRequest_Param_default_instance_);
}
inline const ::grpc_cli::CreateArrayRequest_Param& CreateArrayRequest::param() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateArrayRequest.param)
  return _internal_param();
}
inline void CreateArrayRequest::unsafe_arena_set_allocated_param(
    ::grpc_cli::CreateArrayRequest_Param* param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.CreateArrayRequest.param)
}
inline ::grpc_cli::CreateArrayRequest_Param* CreateArrayRequest::release_param() {
  
  ::grpc_cli::CreateArrayRequest_Param* temp = param_;
  param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::CreateArrayRequest_Param* CreateArrayRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateArrayRequest.param)
  
  ::grpc_cli::CreateArrayRequest_Param* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::grpc_cli::CreateArrayRequest_Param* CreateArrayRequest::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::CreateArrayRequest_Param>(GetArena());
    param_ = p;
  }
  return param_;
}
inline ::grpc_cli::CreateArrayRequest_Param* CreateArrayRequest::mutable_param() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateArrayRequest.param)
  return _internal_mutable_param();
}
inline void CreateArrayRequest::set_allocated_param(::grpc_cli::CreateArrayRequest_Param* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateArrayRequest.param)
}

// -------------------------------------------------------------------

// CreateArrayResponse_Result

// .grpc_cli.Status status = 1;
inline bool CreateArrayResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool CreateArrayResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void CreateArrayResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& CreateArrayResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& CreateArrayResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateArrayResponse.Result.status)
  return _internal_status();
}
inline void CreateArrayResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.CreateArrayResponse.Result.status)
}
inline ::grpc_cli::Status* CreateArrayResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* CreateArrayResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateArrayResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* CreateArrayResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* CreateArrayResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateArrayResponse.Result.status)
  return _internal_mutable_status();
}
inline void CreateArrayResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateArrayResponse.Result.status)
}

// -------------------------------------------------------------------

// CreateArrayResponse

// string command = 1;
inline void CreateArrayResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& CreateArrayResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateArrayResponse.command)
  return _internal_command();
}
inline void CreateArrayResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.CreateArrayResponse.command)
}
inline std::string* CreateArrayResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateArrayResponse.command)
  return _internal_mutable_command();
}
inline const std::string& CreateArrayResponse::_internal_command() const {
  return command_.Get();
}
inline void CreateArrayResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateArrayResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.CreateArrayResponse.command)
}
inline void CreateArrayResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.CreateArrayResponse.command)
}
inline void CreateArrayResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.CreateArrayResponse.command)
}
inline std::string* CreateArrayResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateArrayResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateArrayResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateArrayResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateArrayResponse.command)
}

// string rid = 2;
inline void CreateArrayResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& CreateArrayResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateArrayResponse.rid)
  return _internal_rid();
}
inline void CreateArrayResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.CreateArrayResponse.rid)
}
inline std::string* CreateArrayResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateArrayResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& CreateArrayResponse::_internal_rid() const {
  return rid_.Get();
}
inline void CreateArrayResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateArrayResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.CreateArrayResponse.rid)
}
inline void CreateArrayResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.CreateArrayResponse.rid)
}
inline void CreateArrayResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.CreateArrayResponse.rid)
}
inline std::string* CreateArrayResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateArrayResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateArrayResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateArrayResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateArrayResponse.rid)
}

// .grpc_cli.CreateArrayResponse.Result result = 3;
inline bool CreateArrayResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool CreateArrayResponse::has_result() const {
  return _internal_has_result();
}
inline void CreateArrayResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::CreateArrayResponse_Result& CreateArrayResponse::_internal_result() const {
  const ::grpc_cli::CreateArrayResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::CreateArrayResponse_Result&>(
      ::grpc_cli::_CreateArrayResponse_Result_default_instance_);
}
inline const ::grpc_cli::CreateArrayResponse_Result& CreateArrayResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateArrayResponse.result)
  return _internal_result();
}
inline void CreateArrayResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::CreateArrayResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.CreateArrayResponse.result)
}
inline ::grpc_cli::CreateArrayResponse_Result* CreateArrayResponse::release_result() {
  
  ::grpc_cli::CreateArrayResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::CreateArrayResponse_Result* CreateArrayResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateArrayResponse.result)
  
  ::grpc_cli::CreateArrayResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::CreateArrayResponse_Result* CreateArrayResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::CreateArrayResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::CreateArrayResponse_Result* CreateArrayResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateArrayResponse.result)
  return _internal_mutable_result();
}
inline void CreateArrayResponse::set_allocated_result(::grpc_cli::CreateArrayResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateArrayResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool CreateArrayResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool CreateArrayResponse::has_info() const {
  return _internal_has_info();
}
inline void CreateArrayResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& CreateArrayResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& CreateArrayResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateArrayResponse.info)
  return _internal_info();
}
inline void CreateArrayResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.CreateArrayResponse.info)
}
inline ::grpc_cli::PosInfo* CreateArrayResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* CreateArrayResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateArrayResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* CreateArrayResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* CreateArrayResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateArrayResponse.info)
  return _internal_mutable_info();
}
inline void CreateArrayResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateArrayResponse.info)
}

// -------------------------------------------------------------------

// AutocreateArrayRequest_Param

// string name = 1;
inline void AutocreateArrayRequest_Param::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& AutocreateArrayRequest_Param::name() const {
  // @@protoc_insertion_point(field_get:grpc_cli.AutocreateArrayRequest.Param.name)
  return _internal_name();
}
inline void AutocreateArrayRequest_Param::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:grpc_cli.AutocreateArrayRequest.Param.name)
}
inline std::string* AutocreateArrayRequest_Param::mutable_name() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.AutocreateArrayRequest.Param.name)
  return _internal_mutable_name();
}
inline const std::string& AutocreateArrayRequest_Param::_internal_name() const {
  return name_.Get();
}
inline void AutocreateArrayRequest_Param::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AutocreateArrayRequest_Param::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.AutocreateArrayRequest.Param.name)
}
inline void AutocreateArrayRequest_Param::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.AutocreateArrayRequest.Param.name)
}
inline void AutocreateArrayRequest_Param::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.AutocreateArrayRequest.Param.name)
}
inline std::string* AutocreateArrayRequest_Param::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AutocreateArrayRequest_Param::release_name() {
  // @@protoc_insertion_point(field_release:grpc_cli.AutocreateArrayRequest.Param.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AutocreateArrayRequest_Param::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.AutocreateArrayRequest.Param.name)
}

// repeated .grpc_cli.DeviceNameList buffer = 2;
inline int AutocreateArrayRequest_Param::_internal_buffer_size() const {
  return buffer_.size();
}
inline int AutocreateArrayRequest_Param::buffer_size() const {
  return _internal_buffer_size();
}
inline void AutocreateArrayRequest_Param::clear_buffer() {
  buffer_.Clear();
}
inline ::grpc_cli::DeviceNameList* AutocreateArrayRequest_Param::mutable_buffer(int index) {
  // @@protoc_insertion_point(field_mutable:grpc_cli.AutocreateArrayRequest.Param.buffer)
  return buffer_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::DeviceNameList >*
AutocreateArrayRequest_Param::mutable_buffer() {
  // @@protoc_insertion_point(field_mutable_list:grpc_cli.AutocreateArrayRequest.Param.buffer)
  return &buffer_;
}
inline const ::grpc_cli::DeviceNameList& AutocreateArrayRequest_Param::_internal_buffer(int index) const {
  return buffer_.Get(index);
}
inline const ::grpc_cli::DeviceNameList& AutocreateArrayRequest_Param::buffer(int index) const {
  // @@protoc_insertion_point(field_get:grpc_cli.AutocreateArrayRequest.Param.buffer)
  return _internal_buffer(index);
}
inline ::grpc_cli::DeviceNameList* AutocreateArrayRequest_Param::_internal_add_buffer() {
  return buffer_.Add();
}
inline ::grpc_cli::DeviceNameList* AutocreateArrayRequest_Param::add_buffer() {
  // @@protoc_insertion_point(field_add:grpc_cli.AutocreateArrayRequest.Param.buffer)
  return _internal_add_buffer();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::DeviceNameList >&
AutocreateArrayRequest_Param::buffer() const {
  // @@protoc_insertion_point(field_list:grpc_cli.AutocreateArrayRequest.Param.buffer)
  return buffer_;
}

// int32 numData = 3;
inline void AutocreateArrayRequest_Param::clear_numdata() {
  numdata_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AutocreateArrayRequest_Param::_internal_numdata() const {
  return numdata_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AutocreateArrayRequest_Param::numdata() const {
  // @@protoc_insertion_point(field_get:grpc_cli.AutocreateArrayRequest.Param.numData)
  return _internal_numdata();
}
inline void AutocreateArrayRequest_Param::_internal_set_numdata(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  numdata_ = value;
}
inline void AutocreateArrayRequest_Param::set_numdata(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_numdata(value);
  // @@protoc_insertion_point(field_set:grpc_cli.AutocreateArrayRequest.Param.numData)
}

// int32 numSpare = 4;
inline void AutocreateArrayRequest_Param::clear_numspare() {
  numspare_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AutocreateArrayRequest_Param::_internal_numspare() const {
  return numspare_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AutocreateArrayRequest_Param::numspare() const {
  // @@protoc_insertion_point(field_get:grpc_cli.AutocreateArrayRequest.Param.numSpare)
  return _internal_numspare();
}
inline void AutocreateArrayRequest_Param::_internal_set_numspare(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  numspare_ = value;
}
inline void AutocreateArrayRequest_Param::set_numspare(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_numspare(value);
  // @@protoc_insertion_point(field_set:grpc_cli.AutocreateArrayRequest.Param.numSpare)
}

// string raidtype = 5;
inline void AutocreateArrayRequest_Param::clear_raidtype() {
  raidtype_.ClearToEmpty();
}
inline const std::string& AutocreateArrayRequest_Param::raidtype() const {
  // @@protoc_insertion_point(field_get:grpc_cli.AutocreateArrayRequest.Param.raidtype)
  return _internal_raidtype();
}
inline void AutocreateArrayRequest_Param::set_raidtype(const std::string& value) {
  _internal_set_raidtype(value);
  // @@protoc_insertion_point(field_set:grpc_cli.AutocreateArrayRequest.Param.raidtype)
}
inline std::string* AutocreateArrayRequest_Param::mutable_raidtype() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.AutocreateArrayRequest.Param.raidtype)
  return _internal_mutable_raidtype();
}
inline const std::string& AutocreateArrayRequest_Param::_internal_raidtype() const {
  return raidtype_.Get();
}
inline void AutocreateArrayRequest_Param::_internal_set_raidtype(const std::string& value) {
  
  raidtype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AutocreateArrayRequest_Param::set_raidtype(std::string&& value) {
  
  raidtype_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.AutocreateArrayRequest.Param.raidtype)
}
inline void AutocreateArrayRequest_Param::set_raidtype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  raidtype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.AutocreateArrayRequest.Param.raidtype)
}
inline void AutocreateArrayRequest_Param::set_raidtype(const char* value,
    size_t size) {
  
  raidtype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.AutocreateArrayRequest.Param.raidtype)
}
inline std::string* AutocreateArrayRequest_Param::_internal_mutable_raidtype() {
  
  return raidtype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AutocreateArrayRequest_Param::release_raidtype() {
  // @@protoc_insertion_point(field_release:grpc_cli.AutocreateArrayRequest.Param.raidtype)
  return raidtype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AutocreateArrayRequest_Param::set_allocated_raidtype(std::string* raidtype) {
  if (raidtype != nullptr) {
    
  } else {
    
  }
  raidtype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), raidtype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.AutocreateArrayRequest.Param.raidtype)
}

// -------------------------------------------------------------------

// AutocreateArrayRequest

// string command = 1;
inline void AutocreateArrayRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& AutocreateArrayRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.AutocreateArrayRequest.command)
  return _internal_command();
}
inline void AutocreateArrayRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.AutocreateArrayRequest.command)
}
inline std::string* AutocreateArrayRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.AutocreateArrayRequest.command)
  return _internal_mutable_command();
}
inline const std::string& AutocreateArrayRequest::_internal_command() const {
  return command_.Get();
}
inline void AutocreateArrayRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AutocreateArrayRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.AutocreateArrayRequest.command)
}
inline void AutocreateArrayRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.AutocreateArrayRequest.command)
}
inline void AutocreateArrayRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.AutocreateArrayRequest.command)
}
inline std::string* AutocreateArrayRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AutocreateArrayRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.AutocreateArrayRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AutocreateArrayRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.AutocreateArrayRequest.command)
}

// string rid = 2;
inline void AutocreateArrayRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& AutocreateArrayRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.AutocreateArrayRequest.rid)
  return _internal_rid();
}
inline void AutocreateArrayRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.AutocreateArrayRequest.rid)
}
inline std::string* AutocreateArrayRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.AutocreateArrayRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& AutocreateArrayRequest::_internal_rid() const {
  return rid_.Get();
}
inline void AutocreateArrayRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AutocreateArrayRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.AutocreateArrayRequest.rid)
}
inline void AutocreateArrayRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.AutocreateArrayRequest.rid)
}
inline void AutocreateArrayRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.AutocreateArrayRequest.rid)
}
inline std::string* AutocreateArrayRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AutocreateArrayRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.AutocreateArrayRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AutocreateArrayRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.AutocreateArrayRequest.rid)
}

// string requestor = 3;
inline void AutocreateArrayRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& AutocreateArrayRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.AutocreateArrayRequest.requestor)
  return _internal_requestor();
}
inline void AutocreateArrayRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.AutocreateArrayRequest.requestor)
}
inline std::string* AutocreateArrayRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.AutocreateArrayRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& AutocreateArrayRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void AutocreateArrayRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AutocreateArrayRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.AutocreateArrayRequest.requestor)
}
inline void AutocreateArrayRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.AutocreateArrayRequest.requestor)
}
inline void AutocreateArrayRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.AutocreateArrayRequest.requestor)
}
inline std::string* AutocreateArrayRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AutocreateArrayRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.AutocreateArrayRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AutocreateArrayRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.AutocreateArrayRequest.requestor)
}

// .grpc_cli.AutocreateArrayRequest.Param param = 4;
inline bool AutocreateArrayRequest::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool AutocreateArrayRequest::has_param() const {
  return _internal_has_param();
}
inline void AutocreateArrayRequest::clear_param() {
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::grpc_cli::AutocreateArrayRequest_Param& AutocreateArrayRequest::_internal_param() const {
  const ::grpc_cli::AutocreateArrayRequest_Param* p = param_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::AutocreateArrayRequest_Param&>(
      ::grpc_cli::_AutocreateArrayRequest_Param_default_instance_);
}
inline const ::grpc_cli::AutocreateArrayRequest_Param& AutocreateArrayRequest::param() const {
  // @@protoc_insertion_point(field_get:grpc_cli.AutocreateArrayRequest.param)
  return _internal_param();
}
inline void AutocreateArrayRequest::unsafe_arena_set_allocated_param(
    ::grpc_cli::AutocreateArrayRequest_Param* param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.AutocreateArrayRequest.param)
}
inline ::grpc_cli::AutocreateArrayRequest_Param* AutocreateArrayRequest::release_param() {
  
  ::grpc_cli::AutocreateArrayRequest_Param* temp = param_;
  param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::AutocreateArrayRequest_Param* AutocreateArrayRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:grpc_cli.AutocreateArrayRequest.param)
  
  ::grpc_cli::AutocreateArrayRequest_Param* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::grpc_cli::AutocreateArrayRequest_Param* AutocreateArrayRequest::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::AutocreateArrayRequest_Param>(GetArena());
    param_ = p;
  }
  return param_;
}
inline ::grpc_cli::AutocreateArrayRequest_Param* AutocreateArrayRequest::mutable_param() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.AutocreateArrayRequest.param)
  return _internal_mutable_param();
}
inline void AutocreateArrayRequest::set_allocated_param(::grpc_cli::AutocreateArrayRequest_Param* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.AutocreateArrayRequest.param)
}

// -------------------------------------------------------------------

// AutocreateArrayResponse_Result

// .grpc_cli.Status status = 1;
inline bool AutocreateArrayResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool AutocreateArrayResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void AutocreateArrayResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& AutocreateArrayResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& AutocreateArrayResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.AutocreateArrayResponse.Result.status)
  return _internal_status();
}
inline void AutocreateArrayResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.AutocreateArrayResponse.Result.status)
}
inline ::grpc_cli::Status* AutocreateArrayResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* AutocreateArrayResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.AutocreateArrayResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* AutocreateArrayResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* AutocreateArrayResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.AutocreateArrayResponse.Result.status)
  return _internal_mutable_status();
}
inline void AutocreateArrayResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.AutocreateArrayResponse.Result.status)
}

// -------------------------------------------------------------------

// AutocreateArrayResponse

// string command = 1;
inline void AutocreateArrayResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& AutocreateArrayResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.AutocreateArrayResponse.command)
  return _internal_command();
}
inline void AutocreateArrayResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.AutocreateArrayResponse.command)
}
inline std::string* AutocreateArrayResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.AutocreateArrayResponse.command)
  return _internal_mutable_command();
}
inline const std::string& AutocreateArrayResponse::_internal_command() const {
  return command_.Get();
}
inline void AutocreateArrayResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AutocreateArrayResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.AutocreateArrayResponse.command)
}
inline void AutocreateArrayResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.AutocreateArrayResponse.command)
}
inline void AutocreateArrayResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.AutocreateArrayResponse.command)
}
inline std::string* AutocreateArrayResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AutocreateArrayResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.AutocreateArrayResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AutocreateArrayResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.AutocreateArrayResponse.command)
}

// string rid = 2;
inline void AutocreateArrayResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& AutocreateArrayResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.AutocreateArrayResponse.rid)
  return _internal_rid();
}
inline void AutocreateArrayResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.AutocreateArrayResponse.rid)
}
inline std::string* AutocreateArrayResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.AutocreateArrayResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& AutocreateArrayResponse::_internal_rid() const {
  return rid_.Get();
}
inline void AutocreateArrayResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AutocreateArrayResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.AutocreateArrayResponse.rid)
}
inline void AutocreateArrayResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.AutocreateArrayResponse.rid)
}
inline void AutocreateArrayResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.AutocreateArrayResponse.rid)
}
inline std::string* AutocreateArrayResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AutocreateArrayResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.AutocreateArrayResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AutocreateArrayResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.AutocreateArrayResponse.rid)
}

// .grpc_cli.AutocreateArrayResponse.Result result = 3;
inline bool AutocreateArrayResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool AutocreateArrayResponse::has_result() const {
  return _internal_has_result();
}
inline void AutocreateArrayResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::AutocreateArrayResponse_Result& AutocreateArrayResponse::_internal_result() const {
  const ::grpc_cli::AutocreateArrayResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::AutocreateArrayResponse_Result&>(
      ::grpc_cli::_AutocreateArrayResponse_Result_default_instance_);
}
inline const ::grpc_cli::AutocreateArrayResponse_Result& AutocreateArrayResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.AutocreateArrayResponse.result)
  return _internal_result();
}
inline void AutocreateArrayResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::AutocreateArrayResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.AutocreateArrayResponse.result)
}
inline ::grpc_cli::AutocreateArrayResponse_Result* AutocreateArrayResponse::release_result() {
  
  ::grpc_cli::AutocreateArrayResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::AutocreateArrayResponse_Result* AutocreateArrayResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.AutocreateArrayResponse.result)
  
  ::grpc_cli::AutocreateArrayResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::AutocreateArrayResponse_Result* AutocreateArrayResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::AutocreateArrayResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::AutocreateArrayResponse_Result* AutocreateArrayResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.AutocreateArrayResponse.result)
  return _internal_mutable_result();
}
inline void AutocreateArrayResponse::set_allocated_result(::grpc_cli::AutocreateArrayResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.AutocreateArrayResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool AutocreateArrayResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool AutocreateArrayResponse::has_info() const {
  return _internal_has_info();
}
inline void AutocreateArrayResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& AutocreateArrayResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& AutocreateArrayResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.AutocreateArrayResponse.info)
  return _internal_info();
}
inline void AutocreateArrayResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.AutocreateArrayResponse.info)
}
inline ::grpc_cli::PosInfo* AutocreateArrayResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* AutocreateArrayResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.AutocreateArrayResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* AutocreateArrayResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* AutocreateArrayResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.AutocreateArrayResponse.info)
  return _internal_mutable_info();
}
inline void AutocreateArrayResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.AutocreateArrayResponse.info)
}

// -------------------------------------------------------------------

// DeleteArrayRequest_Param

// string name = 1;
inline void DeleteArrayRequest_Param::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& DeleteArrayRequest_Param::name() const {
  // @@protoc_insertion_point(field_get:grpc_cli.DeleteArrayRequest.Param.name)
  return _internal_name();
}
inline void DeleteArrayRequest_Param::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:grpc_cli.DeleteArrayRequest.Param.name)
}
inline std::string* DeleteArrayRequest_Param::mutable_name() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.DeleteArrayRequest.Param.name)
  return _internal_mutable_name();
}
inline const std::string& DeleteArrayRequest_Param::_internal_name() const {
  return name_.Get();
}
inline void DeleteArrayRequest_Param::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteArrayRequest_Param::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.DeleteArrayRequest.Param.name)
}
inline void DeleteArrayRequest_Param::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.DeleteArrayRequest.Param.name)
}
inline void DeleteArrayRequest_Param::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.DeleteArrayRequest.Param.name)
}
inline std::string* DeleteArrayRequest_Param::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteArrayRequest_Param::release_name() {
  // @@protoc_insertion_point(field_release:grpc_cli.DeleteArrayRequest.Param.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteArrayRequest_Param::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.DeleteArrayRequest.Param.name)
}

// -------------------------------------------------------------------

// DeleteArrayRequest

// string command = 1;
inline void DeleteArrayRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& DeleteArrayRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.DeleteArrayRequest.command)
  return _internal_command();
}
inline void DeleteArrayRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.DeleteArrayRequest.command)
}
inline std::string* DeleteArrayRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.DeleteArrayRequest.command)
  return _internal_mutable_command();
}
inline const std::string& DeleteArrayRequest::_internal_command() const {
  return command_.Get();
}
inline void DeleteArrayRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteArrayRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.DeleteArrayRequest.command)
}
inline void DeleteArrayRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.DeleteArrayRequest.command)
}
inline void DeleteArrayRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.DeleteArrayRequest.command)
}
inline std::string* DeleteArrayRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteArrayRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.DeleteArrayRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteArrayRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.DeleteArrayRequest.command)
}

// string rid = 2;
inline void DeleteArrayRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& DeleteArrayRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.DeleteArrayRequest.rid)
  return _internal_rid();
}
inline void DeleteArrayRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.DeleteArrayRequest.rid)
}
inline std::string* DeleteArrayRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.DeleteArrayRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& DeleteArrayRequest::_internal_rid() const {
  return rid_.Get();
}
inline void DeleteArrayRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteArrayRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.DeleteArrayRequest.rid)
}
inline void DeleteArrayRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.DeleteArrayRequest.rid)
}
inline void DeleteArrayRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.DeleteArrayRequest.rid)
}
inline std::string* DeleteArrayRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteArrayRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.DeleteArrayRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteArrayRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.DeleteArrayRequest.rid)
}

// string requestor = 3;
inline void DeleteArrayRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& DeleteArrayRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.DeleteArrayRequest.requestor)
  return _internal_requestor();
}
inline void DeleteArrayRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.DeleteArrayRequest.requestor)
}
inline std::string* DeleteArrayRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.DeleteArrayRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& DeleteArrayRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void DeleteArrayRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteArrayRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.DeleteArrayRequest.requestor)
}
inline void DeleteArrayRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.DeleteArrayRequest.requestor)
}
inline void DeleteArrayRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.DeleteArrayRequest.requestor)
}
inline std::string* DeleteArrayRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteArrayRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.DeleteArrayRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteArrayRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.DeleteArrayRequest.requestor)
}

// .grpc_cli.DeleteArrayRequest.Param param = 4;
inline bool DeleteArrayRequest::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool DeleteArrayRequest::has_param() const {
  return _internal_has_param();
}
inline void DeleteArrayRequest::clear_param() {
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::grpc_cli::DeleteArrayRequest_Param& DeleteArrayRequest::_internal_param() const {
  const ::grpc_cli::DeleteArrayRequest_Param* p = param_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::DeleteArrayRequest_Param&>(
      ::grpc_cli::_DeleteArrayRequest_Param_default_instance_);
}
inline const ::grpc_cli::DeleteArrayRequest_Param& DeleteArrayRequest::param() const {
  // @@protoc_insertion_point(field_get:grpc_cli.DeleteArrayRequest.param)
  return _internal_param();
}
inline void DeleteArrayRequest::unsafe_arena_set_allocated_param(
    ::grpc_cli::DeleteArrayRequest_Param* param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.DeleteArrayRequest.param)
}
inline ::grpc_cli::DeleteArrayRequest_Param* DeleteArrayRequest::release_param() {
  
  ::grpc_cli::DeleteArrayRequest_Param* temp = param_;
  param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::DeleteArrayRequest_Param* DeleteArrayRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:grpc_cli.DeleteArrayRequest.param)
  
  ::grpc_cli::DeleteArrayRequest_Param* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::grpc_cli::DeleteArrayRequest_Param* DeleteArrayRequest::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::DeleteArrayRequest_Param>(GetArena());
    param_ = p;
  }
  return param_;
}
inline ::grpc_cli::DeleteArrayRequest_Param* DeleteArrayRequest::mutable_param() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.DeleteArrayRequest.param)
  return _internal_mutable_param();
}
inline void DeleteArrayRequest::set_allocated_param(::grpc_cli::DeleteArrayRequest_Param* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.DeleteArrayRequest.param)
}

// -------------------------------------------------------------------

// DeleteArrayResponse_Result

// .grpc_cli.Status status = 1;
inline bool DeleteArrayResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool DeleteArrayResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void DeleteArrayResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& DeleteArrayResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& DeleteArrayResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.DeleteArrayResponse.Result.status)
  return _internal_status();
}
inline void DeleteArrayResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.DeleteArrayResponse.Result.status)
}
inline ::grpc_cli::Status* DeleteArrayResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* DeleteArrayResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.DeleteArrayResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* DeleteArrayResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* DeleteArrayResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.DeleteArrayResponse.Result.status)
  return _internal_mutable_status();
}
inline void DeleteArrayResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.DeleteArrayResponse.Result.status)
}

// -------------------------------------------------------------------

// DeleteArrayResponse

// string command = 1;
inline void DeleteArrayResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& DeleteArrayResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.DeleteArrayResponse.command)
  return _internal_command();
}
inline void DeleteArrayResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.DeleteArrayResponse.command)
}
inline std::string* DeleteArrayResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.DeleteArrayResponse.command)
  return _internal_mutable_command();
}
inline const std::string& DeleteArrayResponse::_internal_command() const {
  return command_.Get();
}
inline void DeleteArrayResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteArrayResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.DeleteArrayResponse.command)
}
inline void DeleteArrayResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.DeleteArrayResponse.command)
}
inline void DeleteArrayResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.DeleteArrayResponse.command)
}
inline std::string* DeleteArrayResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteArrayResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.DeleteArrayResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteArrayResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.DeleteArrayResponse.command)
}

// string rid = 2;
inline void DeleteArrayResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& DeleteArrayResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.DeleteArrayResponse.rid)
  return _internal_rid();
}
inline void DeleteArrayResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.DeleteArrayResponse.rid)
}
inline std::string* DeleteArrayResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.DeleteArrayResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& DeleteArrayResponse::_internal_rid() const {
  return rid_.Get();
}
inline void DeleteArrayResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteArrayResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.DeleteArrayResponse.rid)
}
inline void DeleteArrayResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.DeleteArrayResponse.rid)
}
inline void DeleteArrayResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.DeleteArrayResponse.rid)
}
inline std::string* DeleteArrayResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteArrayResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.DeleteArrayResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteArrayResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.DeleteArrayResponse.rid)
}

// .grpc_cli.DeleteArrayResponse.Result result = 3;
inline bool DeleteArrayResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool DeleteArrayResponse::has_result() const {
  return _internal_has_result();
}
inline void DeleteArrayResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::DeleteArrayResponse_Result& DeleteArrayResponse::_internal_result() const {
  const ::grpc_cli::DeleteArrayResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::DeleteArrayResponse_Result&>(
      ::grpc_cli::_DeleteArrayResponse_Result_default_instance_);
}
inline const ::grpc_cli::DeleteArrayResponse_Result& DeleteArrayResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.DeleteArrayResponse.result)
  return _internal_result();
}
inline void DeleteArrayResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::DeleteArrayResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.DeleteArrayResponse.result)
}
inline ::grpc_cli::DeleteArrayResponse_Result* DeleteArrayResponse::release_result() {
  
  ::grpc_cli::DeleteArrayResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::DeleteArrayResponse_Result* DeleteArrayResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.DeleteArrayResponse.result)
  
  ::grpc_cli::DeleteArrayResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::DeleteArrayResponse_Result* DeleteArrayResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::DeleteArrayResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::DeleteArrayResponse_Result* DeleteArrayResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.DeleteArrayResponse.result)
  return _internal_mutable_result();
}
inline void DeleteArrayResponse::set_allocated_result(::grpc_cli::DeleteArrayResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.DeleteArrayResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool DeleteArrayResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool DeleteArrayResponse::has_info() const {
  return _internal_has_info();
}
inline void DeleteArrayResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& DeleteArrayResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& DeleteArrayResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.DeleteArrayResponse.info)
  return _internal_info();
}
inline void DeleteArrayResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.DeleteArrayResponse.info)
}
inline ::grpc_cli::PosInfo* DeleteArrayResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* DeleteArrayResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.DeleteArrayResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* DeleteArrayResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* DeleteArrayResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.DeleteArrayResponse.info)
  return _internal_mutable_info();
}
inline void DeleteArrayResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.DeleteArrayResponse.info)
}

// -------------------------------------------------------------------

// MountArrayRequest_Param

// string name = 1;
inline void MountArrayRequest_Param::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& MountArrayRequest_Param::name() const {
  // @@protoc_insertion_point(field_get:grpc_cli.MountArrayRequest.Param.name)
  return _internal_name();
}
inline void MountArrayRequest_Param::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:grpc_cli.MountArrayRequest.Param.name)
}
inline std::string* MountArrayRequest_Param::mutable_name() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.MountArrayRequest.Param.name)
  return _internal_mutable_name();
}
inline const std::string& MountArrayRequest_Param::_internal_name() const {
  return name_.Get();
}
inline void MountArrayRequest_Param::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MountArrayRequest_Param::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.MountArrayRequest.Param.name)
}
inline void MountArrayRequest_Param::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.MountArrayRequest.Param.name)
}
inline void MountArrayRequest_Param::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.MountArrayRequest.Param.name)
}
inline std::string* MountArrayRequest_Param::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MountArrayRequest_Param::release_name() {
  // @@protoc_insertion_point(field_release:grpc_cli.MountArrayRequest.Param.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MountArrayRequest_Param::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.MountArrayRequest.Param.name)
}

// bool enableWriteThrough = 2;
inline bool MountArrayRequest_Param::_internal_has_enablewritethrough() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MountArrayRequest_Param::has_enablewritethrough() const {
  return _internal_has_enablewritethrough();
}
inline void MountArrayRequest_Param::clear_enablewritethrough() {
  enablewritethrough_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool MountArrayRequest_Param::_internal_enablewritethrough() const {
  return enablewritethrough_;
}
inline bool MountArrayRequest_Param::enablewritethrough() const {
  // @@protoc_insertion_point(field_get:grpc_cli.MountArrayRequest.Param.enableWriteThrough)
  return _internal_enablewritethrough();
}
inline void MountArrayRequest_Param::_internal_set_enablewritethrough(bool value) {
  _has_bits_[0] |= 0x00000002u;
  enablewritethrough_ = value;
}
inline void MountArrayRequest_Param::set_enablewritethrough(bool value) {
  _internal_set_enablewritethrough(value);
  // @@protoc_insertion_point(field_set:grpc_cli.MountArrayRequest.Param.enableWriteThrough)
}

// string targetAddress = 3;
inline bool MountArrayRequest_Param::_internal_has_targetaddress() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MountArrayRequest_Param::has_targetaddress() const {
  return _internal_has_targetaddress();
}
inline void MountArrayRequest_Param::clear_targetaddress() {
  targetaddress_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MountArrayRequest_Param::targetaddress() const {
  // @@protoc_insertion_point(field_get:grpc_cli.MountArrayRequest.Param.targetAddress)
  return _internal_targetaddress();
}
inline void MountArrayRequest_Param::set_targetaddress(const std::string& value) {
  _internal_set_targetaddress(value);
  // @@protoc_insertion_point(field_set:grpc_cli.MountArrayRequest.Param.targetAddress)
}
inline std::string* MountArrayRequest_Param::mutable_targetaddress() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.MountArrayRequest.Param.targetAddress)
  return _internal_mutable_targetaddress();
}
inline const std::string& MountArrayRequest_Param::_internal_targetaddress() const {
  return targetaddress_.Get();
}
inline void MountArrayRequest_Param::_internal_set_targetaddress(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  targetaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MountArrayRequest_Param::set_targetaddress(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  targetaddress_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.MountArrayRequest.Param.targetAddress)
}
inline void MountArrayRequest_Param::set_targetaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  targetaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.MountArrayRequest.Param.targetAddress)
}
inline void MountArrayRequest_Param::set_targetaddress(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  targetaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.MountArrayRequest.Param.targetAddress)
}
inline std::string* MountArrayRequest_Param::_internal_mutable_targetaddress() {
  _has_bits_[0] |= 0x00000001u;
  return targetaddress_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MountArrayRequest_Param::release_targetaddress() {
  // @@protoc_insertion_point(field_release:grpc_cli.MountArrayRequest.Param.targetAddress)
  if (!_internal_has_targetaddress()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return targetaddress_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MountArrayRequest_Param::set_allocated_targetaddress(std::string* targetaddress) {
  if (targetaddress != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  targetaddress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), targetaddress,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.MountArrayRequest.Param.targetAddress)
}

// -------------------------------------------------------------------

// MountArrayRequest

// string command = 1;
inline void MountArrayRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& MountArrayRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.MountArrayRequest.command)
  return _internal_command();
}
inline void MountArrayRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.MountArrayRequest.command)
}
inline std::string* MountArrayRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.MountArrayRequest.command)
  return _internal_mutable_command();
}
inline const std::string& MountArrayRequest::_internal_command() const {
  return command_.Get();
}
inline void MountArrayRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MountArrayRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.MountArrayRequest.command)
}
inline void MountArrayRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.MountArrayRequest.command)
}
inline void MountArrayRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.MountArrayRequest.command)
}
inline std::string* MountArrayRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MountArrayRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.MountArrayRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MountArrayRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.MountArrayRequest.command)
}

// string rid = 2;
inline void MountArrayRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& MountArrayRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.MountArrayRequest.rid)
  return _internal_rid();
}
inline void MountArrayRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.MountArrayRequest.rid)
}
inline std::string* MountArrayRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.MountArrayRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& MountArrayRequest::_internal_rid() const {
  return rid_.Get();
}
inline void MountArrayRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MountArrayRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.MountArrayRequest.rid)
}
inline void MountArrayRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.MountArrayRequest.rid)
}
inline void MountArrayRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.MountArrayRequest.rid)
}
inline std::string* MountArrayRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MountArrayRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.MountArrayRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MountArrayRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.MountArrayRequest.rid)
}

// string requestor = 3;
inline void MountArrayRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& MountArrayRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.MountArrayRequest.requestor)
  return _internal_requestor();
}
inline void MountArrayRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.MountArrayRequest.requestor)
}
inline std::string* MountArrayRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.MountArrayRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& MountArrayRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void MountArrayRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MountArrayRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.MountArrayRequest.requestor)
}
inline void MountArrayRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.MountArrayRequest.requestor)
}
inline void MountArrayRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.MountArrayRequest.requestor)
}
inline std::string* MountArrayRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MountArrayRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.MountArrayRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MountArrayRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.MountArrayRequest.requestor)
}

// .grpc_cli.MountArrayRequest.Param param = 4;
inline bool MountArrayRequest::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool MountArrayRequest::has_param() const {
  return _internal_has_param();
}
inline void MountArrayRequest::clear_param() {
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::grpc_cli::MountArrayRequest_Param& MountArrayRequest::_internal_param() const {
  const ::grpc_cli::MountArrayRequest_Param* p = param_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::MountArrayRequest_Param&>(
      ::grpc_cli::_MountArrayRequest_Param_default_instance_);
}
inline const ::grpc_cli::MountArrayRequest_Param& MountArrayRequest::param() const {
  // @@protoc_insertion_point(field_get:grpc_cli.MountArrayRequest.param)
  return _internal_param();
}
inline void MountArrayRequest::unsafe_arena_set_allocated_param(
    ::grpc_cli::MountArrayRequest_Param* param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.MountArrayRequest.param)
}
inline ::grpc_cli::MountArrayRequest_Param* MountArrayRequest::release_param() {
  
  ::grpc_cli::MountArrayRequest_Param* temp = param_;
  param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::MountArrayRequest_Param* MountArrayRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:grpc_cli.MountArrayRequest.param)
  
  ::grpc_cli::MountArrayRequest_Param* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::grpc_cli::MountArrayRequest_Param* MountArrayRequest::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::MountArrayRequest_Param>(GetArena());
    param_ = p;
  }
  return param_;
}
inline ::grpc_cli::MountArrayRequest_Param* MountArrayRequest::mutable_param() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.MountArrayRequest.param)
  return _internal_mutable_param();
}
inline void MountArrayRequest::set_allocated_param(::grpc_cli::MountArrayRequest_Param* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.MountArrayRequest.param)
}

// -------------------------------------------------------------------

// MountArrayResponse_Result

// .grpc_cli.Status status = 1;
inline bool MountArrayResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MountArrayResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void MountArrayResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& MountArrayResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& MountArrayResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.MountArrayResponse.Result.status)
  return _internal_status();
}
inline void MountArrayResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.MountArrayResponse.Result.status)
}
inline ::grpc_cli::Status* MountArrayResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* MountArrayResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.MountArrayResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* MountArrayResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* MountArrayResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.MountArrayResponse.Result.status)
  return _internal_mutable_status();
}
inline void MountArrayResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.MountArrayResponse.Result.status)
}

// -------------------------------------------------------------------

// MountArrayResponse

// string command = 1;
inline void MountArrayResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& MountArrayResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.MountArrayResponse.command)
  return _internal_command();
}
inline void MountArrayResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.MountArrayResponse.command)
}
inline std::string* MountArrayResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.MountArrayResponse.command)
  return _internal_mutable_command();
}
inline const std::string& MountArrayResponse::_internal_command() const {
  return command_.Get();
}
inline void MountArrayResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MountArrayResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.MountArrayResponse.command)
}
inline void MountArrayResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.MountArrayResponse.command)
}
inline void MountArrayResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.MountArrayResponse.command)
}
inline std::string* MountArrayResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MountArrayResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.MountArrayResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MountArrayResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.MountArrayResponse.command)
}

// string rid = 2;
inline void MountArrayResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& MountArrayResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.MountArrayResponse.rid)
  return _internal_rid();
}
inline void MountArrayResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.MountArrayResponse.rid)
}
inline std::string* MountArrayResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.MountArrayResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& MountArrayResponse::_internal_rid() const {
  return rid_.Get();
}
inline void MountArrayResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MountArrayResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.MountArrayResponse.rid)
}
inline void MountArrayResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.MountArrayResponse.rid)
}
inline void MountArrayResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.MountArrayResponse.rid)
}
inline std::string* MountArrayResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MountArrayResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.MountArrayResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MountArrayResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.MountArrayResponse.rid)
}

// .grpc_cli.MountArrayResponse.Result result = 3;
inline bool MountArrayResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool MountArrayResponse::has_result() const {
  return _internal_has_result();
}
inline void MountArrayResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::MountArrayResponse_Result& MountArrayResponse::_internal_result() const {
  const ::grpc_cli::MountArrayResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::MountArrayResponse_Result&>(
      ::grpc_cli::_MountArrayResponse_Result_default_instance_);
}
inline const ::grpc_cli::MountArrayResponse_Result& MountArrayResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.MountArrayResponse.result)
  return _internal_result();
}
inline void MountArrayResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::MountArrayResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.MountArrayResponse.result)
}
inline ::grpc_cli::MountArrayResponse_Result* MountArrayResponse::release_result() {
  
  ::grpc_cli::MountArrayResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::MountArrayResponse_Result* MountArrayResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.MountArrayResponse.result)
  
  ::grpc_cli::MountArrayResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::MountArrayResponse_Result* MountArrayResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::MountArrayResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::MountArrayResponse_Result* MountArrayResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.MountArrayResponse.result)
  return _internal_mutable_result();
}
inline void MountArrayResponse::set_allocated_result(::grpc_cli::MountArrayResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.MountArrayResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool MountArrayResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool MountArrayResponse::has_info() const {
  return _internal_has_info();
}
inline void MountArrayResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& MountArrayResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& MountArrayResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.MountArrayResponse.info)
  return _internal_info();
}
inline void MountArrayResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.MountArrayResponse.info)
}
inline ::grpc_cli::PosInfo* MountArrayResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* MountArrayResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.MountArrayResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* MountArrayResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* MountArrayResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.MountArrayResponse.info)
  return _internal_mutable_info();
}
inline void MountArrayResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.MountArrayResponse.info)
}

// -------------------------------------------------------------------

// UnmountArrayRequest_Param

// string name = 1;
inline void UnmountArrayRequest_Param::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& UnmountArrayRequest_Param::name() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UnmountArrayRequest.Param.name)
  return _internal_name();
}
inline void UnmountArrayRequest_Param::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:grpc_cli.UnmountArrayRequest.Param.name)
}
inline std::string* UnmountArrayRequest_Param::mutable_name() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UnmountArrayRequest.Param.name)
  return _internal_mutable_name();
}
inline const std::string& UnmountArrayRequest_Param::_internal_name() const {
  return name_.Get();
}
inline void UnmountArrayRequest_Param::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UnmountArrayRequest_Param::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.UnmountArrayRequest.Param.name)
}
inline void UnmountArrayRequest_Param::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.UnmountArrayRequest.Param.name)
}
inline void UnmountArrayRequest_Param::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.UnmountArrayRequest.Param.name)
}
inline std::string* UnmountArrayRequest_Param::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UnmountArrayRequest_Param::release_name() {
  // @@protoc_insertion_point(field_release:grpc_cli.UnmountArrayRequest.Param.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnmountArrayRequest_Param::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UnmountArrayRequest.Param.name)
}

// -------------------------------------------------------------------

// UnmountArrayRequest

// string command = 1;
inline void UnmountArrayRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& UnmountArrayRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UnmountArrayRequest.command)
  return _internal_command();
}
inline void UnmountArrayRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.UnmountArrayRequest.command)
}
inline std::string* UnmountArrayRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UnmountArrayRequest.command)
  return _internal_mutable_command();
}
inline const std::string& UnmountArrayRequest::_internal_command() const {
  return command_.Get();
}
inline void UnmountArrayRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UnmountArrayRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.UnmountArrayRequest.command)
}
inline void UnmountArrayRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.UnmountArrayRequest.command)
}
inline void UnmountArrayRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.UnmountArrayRequest.command)
}
inline std::string* UnmountArrayRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UnmountArrayRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.UnmountArrayRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnmountArrayRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UnmountArrayRequest.command)
}

// string rid = 2;
inline void UnmountArrayRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& UnmountArrayRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UnmountArrayRequest.rid)
  return _internal_rid();
}
inline void UnmountArrayRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.UnmountArrayRequest.rid)
}
inline std::string* UnmountArrayRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UnmountArrayRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& UnmountArrayRequest::_internal_rid() const {
  return rid_.Get();
}
inline void UnmountArrayRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UnmountArrayRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.UnmountArrayRequest.rid)
}
inline void UnmountArrayRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.UnmountArrayRequest.rid)
}
inline void UnmountArrayRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.UnmountArrayRequest.rid)
}
inline std::string* UnmountArrayRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UnmountArrayRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.UnmountArrayRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnmountArrayRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UnmountArrayRequest.rid)
}

// string requestor = 3;
inline void UnmountArrayRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& UnmountArrayRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UnmountArrayRequest.requestor)
  return _internal_requestor();
}
inline void UnmountArrayRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.UnmountArrayRequest.requestor)
}
inline std::string* UnmountArrayRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UnmountArrayRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& UnmountArrayRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void UnmountArrayRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UnmountArrayRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.UnmountArrayRequest.requestor)
}
inline void UnmountArrayRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.UnmountArrayRequest.requestor)
}
inline void UnmountArrayRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.UnmountArrayRequest.requestor)
}
inline std::string* UnmountArrayRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UnmountArrayRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.UnmountArrayRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnmountArrayRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UnmountArrayRequest.requestor)
}

// .grpc_cli.UnmountArrayRequest.Param param = 4;
inline bool UnmountArrayRequest::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool UnmountArrayRequest::has_param() const {
  return _internal_has_param();
}
inline void UnmountArrayRequest::clear_param() {
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::grpc_cli::UnmountArrayRequest_Param& UnmountArrayRequest::_internal_param() const {
  const ::grpc_cli::UnmountArrayRequest_Param* p = param_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::UnmountArrayRequest_Param&>(
      ::grpc_cli::_UnmountArrayRequest_Param_default_instance_);
}
inline const ::grpc_cli::UnmountArrayRequest_Param& UnmountArrayRequest::param() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UnmountArrayRequest.param)
  return _internal_param();
}
inline void UnmountArrayRequest::unsafe_arena_set_allocated_param(
    ::grpc_cli::UnmountArrayRequest_Param* param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.UnmountArrayRequest.param)
}
inline ::grpc_cli::UnmountArrayRequest_Param* UnmountArrayRequest::release_param() {
  
  ::grpc_cli::UnmountArrayRequest_Param* temp = param_;
  param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::UnmountArrayRequest_Param* UnmountArrayRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:grpc_cli.UnmountArrayRequest.param)
  
  ::grpc_cli::UnmountArrayRequest_Param* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::grpc_cli::UnmountArrayRequest_Param* UnmountArrayRequest::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::UnmountArrayRequest_Param>(GetArena());
    param_ = p;
  }
  return param_;
}
inline ::grpc_cli::UnmountArrayRequest_Param* UnmountArrayRequest::mutable_param() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UnmountArrayRequest.param)
  return _internal_mutable_param();
}
inline void UnmountArrayRequest::set_allocated_param(::grpc_cli::UnmountArrayRequest_Param* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UnmountArrayRequest.param)
}

// -------------------------------------------------------------------

// UnmountArrayResponse_Result

// .grpc_cli.Status status = 1;
inline bool UnmountArrayResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool UnmountArrayResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void UnmountArrayResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& UnmountArrayResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& UnmountArrayResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UnmountArrayResponse.Result.status)
  return _internal_status();
}
inline void UnmountArrayResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.UnmountArrayResponse.Result.status)
}
inline ::grpc_cli::Status* UnmountArrayResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* UnmountArrayResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.UnmountArrayResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* UnmountArrayResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* UnmountArrayResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UnmountArrayResponse.Result.status)
  return _internal_mutable_status();
}
inline void UnmountArrayResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UnmountArrayResponse.Result.status)
}

// -------------------------------------------------------------------

// UnmountArrayResponse

// string command = 1;
inline void UnmountArrayResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& UnmountArrayResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UnmountArrayResponse.command)
  return _internal_command();
}
inline void UnmountArrayResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.UnmountArrayResponse.command)
}
inline std::string* UnmountArrayResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UnmountArrayResponse.command)
  return _internal_mutable_command();
}
inline const std::string& UnmountArrayResponse::_internal_command() const {
  return command_.Get();
}
inline void UnmountArrayResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UnmountArrayResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.UnmountArrayResponse.command)
}
inline void UnmountArrayResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.UnmountArrayResponse.command)
}
inline void UnmountArrayResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.UnmountArrayResponse.command)
}
inline std::string* UnmountArrayResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UnmountArrayResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.UnmountArrayResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnmountArrayResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UnmountArrayResponse.command)
}

// string rid = 2;
inline void UnmountArrayResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& UnmountArrayResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UnmountArrayResponse.rid)
  return _internal_rid();
}
inline void UnmountArrayResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.UnmountArrayResponse.rid)
}
inline std::string* UnmountArrayResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UnmountArrayResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& UnmountArrayResponse::_internal_rid() const {
  return rid_.Get();
}
inline void UnmountArrayResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UnmountArrayResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.UnmountArrayResponse.rid)
}
inline void UnmountArrayResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.UnmountArrayResponse.rid)
}
inline void UnmountArrayResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.UnmountArrayResponse.rid)
}
inline std::string* UnmountArrayResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UnmountArrayResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.UnmountArrayResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnmountArrayResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UnmountArrayResponse.rid)
}

// .grpc_cli.UnmountArrayResponse.Result result = 3;
inline bool UnmountArrayResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool UnmountArrayResponse::has_result() const {
  return _internal_has_result();
}
inline void UnmountArrayResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::UnmountArrayResponse_Result& UnmountArrayResponse::_internal_result() const {
  const ::grpc_cli::UnmountArrayResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::UnmountArrayResponse_Result&>(
      ::grpc_cli::_UnmountArrayResponse_Result_default_instance_);
}
inline const ::grpc_cli::UnmountArrayResponse_Result& UnmountArrayResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UnmountArrayResponse.result)
  return _internal_result();
}
inline void UnmountArrayResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::UnmountArrayResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.UnmountArrayResponse.result)
}
inline ::grpc_cli::UnmountArrayResponse_Result* UnmountArrayResponse::release_result() {
  
  ::grpc_cli::UnmountArrayResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::UnmountArrayResponse_Result* UnmountArrayResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.UnmountArrayResponse.result)
  
  ::grpc_cli::UnmountArrayResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::UnmountArrayResponse_Result* UnmountArrayResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::UnmountArrayResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::UnmountArrayResponse_Result* UnmountArrayResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UnmountArrayResponse.result)
  return _internal_mutable_result();
}
inline void UnmountArrayResponse::set_allocated_result(::grpc_cli::UnmountArrayResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UnmountArrayResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool UnmountArrayResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool UnmountArrayResponse::has_info() const {
  return _internal_has_info();
}
inline void UnmountArrayResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& UnmountArrayResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& UnmountArrayResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UnmountArrayResponse.info)
  return _internal_info();
}
inline void UnmountArrayResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.UnmountArrayResponse.info)
}
inline ::grpc_cli::PosInfo* UnmountArrayResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* UnmountArrayResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.UnmountArrayResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* UnmountArrayResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* UnmountArrayResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UnmountArrayResponse.info)
  return _internal_mutable_info();
}
inline void UnmountArrayResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UnmountArrayResponse.info)
}

// -------------------------------------------------------------------

// Array

// int32 index = 1;
inline void Array::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Array::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Array::index() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Array.index)
  return _internal_index();
}
inline void Array::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
}
inline void Array::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Array.index)
}

// int32 uniqueId = 2;
inline void Array::clear_uniqueid() {
  uniqueid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Array::_internal_uniqueid() const {
  return uniqueid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Array::uniqueid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Array.uniqueId)
  return _internal_uniqueid();
}
inline void Array::_internal_set_uniqueid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uniqueid_ = value;
}
inline void Array::set_uniqueid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uniqueid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Array.uniqueId)
}

// string name = 3;
inline void Array::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Array::name() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Array.name)
  return _internal_name();
}
inline void Array::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Array.name)
}
inline std::string* Array::mutable_name() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Array.name)
  return _internal_mutable_name();
}
inline const std::string& Array::_internal_name() const {
  return name_.Get();
}
inline void Array::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Array::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Array.name)
}
inline void Array::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Array.name)
}
inline void Array::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Array.name)
}
inline std::string* Array::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Array::release_name() {
  // @@protoc_insertion_point(field_release:grpc_cli.Array.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Array::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Array.name)
}

// string status = 4;
inline void Array::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& Array::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Array.status)
  return _internal_status();
}
inline void Array::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Array.status)
}
inline std::string* Array::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Array.status)
  return _internal_mutable_status();
}
inline const std::string& Array::_internal_status() const {
  return status_.Get();
}
inline void Array::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Array::set_status(std::string&& value) {
  
  status_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Array.status)
}
inline void Array::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Array.status)
}
inline void Array::set_status(const char* value,
    size_t size) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Array.status)
}
inline std::string* Array::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Array::release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.Array.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Array::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Array.status)
}

// string state = 5;
inline void Array::clear_state() {
  state_.ClearToEmpty();
}
inline const std::string& Array::state() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Array.state)
  return _internal_state();
}
inline void Array::set_state(const std::string& value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Array.state)
}
inline std::string* Array::mutable_state() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Array.state)
  return _internal_mutable_state();
}
inline const std::string& Array::_internal_state() const {
  return state_.Get();
}
inline void Array::_internal_set_state(const std::string& value) {
  
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Array::set_state(std::string&& value) {
  
  state_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Array.state)
}
inline void Array::set_state(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Array.state)
}
inline void Array::set_state(const char* value,
    size_t size) {
  
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Array.state)
}
inline std::string* Array::_internal_mutable_state() {
  
  return state_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Array::release_state() {
  // @@protoc_insertion_point(field_release:grpc_cli.Array.state)
  return state_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Array::set_allocated_state(std::string* state) {
  if (state != nullptr) {
    
  } else {
    
  }
  state_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Array.state)
}

// string situation = 6;
inline void Array::clear_situation() {
  situation_.ClearToEmpty();
}
inline const std::string& Array::situation() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Array.situation)
  return _internal_situation();
}
inline void Array::set_situation(const std::string& value) {
  _internal_set_situation(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Array.situation)
}
inline std::string* Array::mutable_situation() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Array.situation)
  return _internal_mutable_situation();
}
inline const std::string& Array::_internal_situation() const {
  return situation_.Get();
}
inline void Array::_internal_set_situation(const std::string& value) {
  
  situation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Array::set_situation(std::string&& value) {
  
  situation_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Array.situation)
}
inline void Array::set_situation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  situation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Array.situation)
}
inline void Array::set_situation(const char* value,
    size_t size) {
  
  situation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Array.situation)
}
inline std::string* Array::_internal_mutable_situation() {
  
  return situation_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Array::release_situation() {
  // @@protoc_insertion_point(field_release:grpc_cli.Array.situation)
  return situation_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Array::set_allocated_situation(std::string* situation) {
  if (situation != nullptr) {
    
  } else {
    
  }
  situation_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), situation,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Array.situation)
}

// string createDatetime = 7;
inline void Array::clear_createdatetime() {
  createdatetime_.ClearToEmpty();
}
inline const std::string& Array::createdatetime() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Array.createDatetime)
  return _internal_createdatetime();
}
inline void Array::set_createdatetime(const std::string& value) {
  _internal_set_createdatetime(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Array.createDatetime)
}
inline std::string* Array::mutable_createdatetime() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Array.createDatetime)
  return _internal_mutable_createdatetime();
}
inline const std::string& Array::_internal_createdatetime() const {
  return createdatetime_.Get();
}
inline void Array::_internal_set_createdatetime(const std::string& value) {
  
  createdatetime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Array::set_createdatetime(std::string&& value) {
  
  createdatetime_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Array.createDatetime)
}
inline void Array::set_createdatetime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  createdatetime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Array.createDatetime)
}
inline void Array::set_createdatetime(const char* value,
    size_t size) {
  
  createdatetime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Array.createDatetime)
}
inline std::string* Array::_internal_mutable_createdatetime() {
  
  return createdatetime_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Array::release_createdatetime() {
  // @@protoc_insertion_point(field_release:grpc_cli.Array.createDatetime)
  return createdatetime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Array::set_allocated_createdatetime(std::string* createdatetime) {
  if (createdatetime != nullptr) {
    
  } else {
    
  }
  createdatetime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), createdatetime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Array.createDatetime)
}

// string updateDatetime = 8;
inline void Array::clear_updatedatetime() {
  updatedatetime_.ClearToEmpty();
}
inline const std::string& Array::updatedatetime() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Array.updateDatetime)
  return _internal_updatedatetime();
}
inline void Array::set_updatedatetime(const std::string& value) {
  _internal_set_updatedatetime(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Array.updateDatetime)
}
inline std::string* Array::mutable_updatedatetime() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Array.updateDatetime)
  return _internal_mutable_updatedatetime();
}
inline const std::string& Array::_internal_updatedatetime() const {
  return updatedatetime_.Get();
}
inline void Array::_internal_set_updatedatetime(const std::string& value) {
  
  updatedatetime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Array::set_updatedatetime(std::string&& value) {
  
  updatedatetime_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Array.updateDatetime)
}
inline void Array::set_updatedatetime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  updatedatetime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Array.updateDatetime)
}
inline void Array::set_updatedatetime(const char* value,
    size_t size) {
  
  updatedatetime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Array.updateDatetime)
}
inline std::string* Array::_internal_mutable_updatedatetime() {
  
  return updatedatetime_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Array::release_updatedatetime() {
  // @@protoc_insertion_point(field_release:grpc_cli.Array.updateDatetime)
  return updatedatetime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Array::set_allocated_updatedatetime(std::string* updatedatetime) {
  if (updatedatetime != nullptr) {
    
  } else {
    
  }
  updatedatetime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), updatedatetime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Array.updateDatetime)
}

// string rebuildingProgress = 9;
inline void Array::clear_rebuildingprogress() {
  rebuildingprogress_.ClearToEmpty();
}
inline const std::string& Array::rebuildingprogress() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Array.rebuildingProgress)
  return _internal_rebuildingprogress();
}
inline void Array::set_rebuildingprogress(const std::string& value) {
  _internal_set_rebuildingprogress(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Array.rebuildingProgress)
}
inline std::string* Array::mutable_rebuildingprogress() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Array.rebuildingProgress)
  return _internal_mutable_rebuildingprogress();
}
inline const std::string& Array::_internal_rebuildingprogress() const {
  return rebuildingprogress_.Get();
}
inline void Array::_internal_set_rebuildingprogress(const std::string& value) {
  
  rebuildingprogress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Array::set_rebuildingprogress(std::string&& value) {
  
  rebuildingprogress_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Array.rebuildingProgress)
}
inline void Array::set_rebuildingprogress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rebuildingprogress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Array.rebuildingProgress)
}
inline void Array::set_rebuildingprogress(const char* value,
    size_t size) {
  
  rebuildingprogress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Array.rebuildingProgress)
}
inline std::string* Array::_internal_mutable_rebuildingprogress() {
  
  return rebuildingprogress_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Array::release_rebuildingprogress() {
  // @@protoc_insertion_point(field_release:grpc_cli.Array.rebuildingProgress)
  return rebuildingprogress_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Array::set_allocated_rebuildingprogress(std::string* rebuildingprogress) {
  if (rebuildingprogress != nullptr) {
    
  } else {
    
  }
  rebuildingprogress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rebuildingprogress,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Array.rebuildingProgress)
}

// uint64 capacity = 10;
inline void Array::clear_capacity() {
  capacity_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Array::_internal_capacity() const {
  return capacity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Array::capacity() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Array.capacity)
  return _internal_capacity();
}
inline void Array::_internal_set_capacity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  capacity_ = value;
}
inline void Array::set_capacity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_capacity(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Array.capacity)
}

// uint64 used = 11;
inline void Array::clear_used() {
  used_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Array::_internal_used() const {
  return used_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Array::used() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Array.used)
  return _internal_used();
}
inline void Array::_internal_set_used(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  used_ = value;
}
inline void Array::set_used(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_used(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Array.used)
}

// string gcMode = 12;
inline void Array::clear_gcmode() {
  gcmode_.ClearToEmpty();
}
inline const std::string& Array::gcmode() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Array.gcMode)
  return _internal_gcmode();
}
inline void Array::set_gcmode(const std::string& value) {
  _internal_set_gcmode(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Array.gcMode)
}
inline std::string* Array::mutable_gcmode() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Array.gcMode)
  return _internal_mutable_gcmode();
}
inline const std::string& Array::_internal_gcmode() const {
  return gcmode_.Get();
}
inline void Array::_internal_set_gcmode(const std::string& value) {
  
  gcmode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Array::set_gcmode(std::string&& value) {
  
  gcmode_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Array.gcMode)
}
inline void Array::set_gcmode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gcmode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Array.gcMode)
}
inline void Array::set_gcmode(const char* value,
    size_t size) {
  
  gcmode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Array.gcMode)
}
inline std::string* Array::_internal_mutable_gcmode() {
  
  return gcmode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Array::release_gcmode() {
  // @@protoc_insertion_point(field_release:grpc_cli.Array.gcMode)
  return gcmode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Array::set_allocated_gcmode(std::string* gcmode) {
  if (gcmode != nullptr) {
    
  } else {
    
  }
  gcmode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gcmode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Array.gcMode)
}

// string metaRaid = 13;
inline void Array::clear_metaraid() {
  metaraid_.ClearToEmpty();
}
inline const std::string& Array::metaraid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Array.metaRaid)
  return _internal_metaraid();
}
inline void Array::set_metaraid(const std::string& value) {
  _internal_set_metaraid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Array.metaRaid)
}
inline std::string* Array::mutable_metaraid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Array.metaRaid)
  return _internal_mutable_metaraid();
}
inline const std::string& Array::_internal_metaraid() const {
  return metaraid_.Get();
}
inline void Array::_internal_set_metaraid(const std::string& value) {
  
  metaraid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Array::set_metaraid(std::string&& value) {
  
  metaraid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Array.metaRaid)
}
inline void Array::set_metaraid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  metaraid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Array.metaRaid)
}
inline void Array::set_metaraid(const char* value,
    size_t size) {
  
  metaraid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Array.metaRaid)
}
inline std::string* Array::_internal_mutable_metaraid() {
  
  return metaraid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Array::release_metaraid() {
  // @@protoc_insertion_point(field_release:grpc_cli.Array.metaRaid)
  return metaraid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Array::set_allocated_metaraid(std::string* metaraid) {
  if (metaraid != nullptr) {
    
  } else {
    
  }
  metaraid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metaraid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Array.metaRaid)
}

// string dataRaid = 14;
inline void Array::clear_dataraid() {
  dataraid_.ClearToEmpty();
}
inline const std::string& Array::dataraid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Array.dataRaid)
  return _internal_dataraid();
}
inline void Array::set_dataraid(const std::string& value) {
  _internal_set_dataraid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Array.dataRaid)
}
inline std::string* Array::mutable_dataraid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Array.dataRaid)
  return _internal_mutable_dataraid();
}
inline const std::string& Array::_internal_dataraid() const {
  return dataraid_.Get();
}
inline void Array::_internal_set_dataraid(const std::string& value) {
  
  dataraid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Array::set_dataraid(std::string&& value) {
  
  dataraid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Array.dataRaid)
}
inline void Array::set_dataraid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dataraid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Array.dataRaid)
}
inline void Array::set_dataraid(const char* value,
    size_t size) {
  
  dataraid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Array.dataRaid)
}
inline std::string* Array::_internal_mutable_dataraid() {
  
  return dataraid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Array::release_dataraid() {
  // @@protoc_insertion_point(field_release:grpc_cli.Array.dataRaid)
  return dataraid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Array::set_allocated_dataraid(std::string* dataraid) {
  if (dataraid != nullptr) {
    
  } else {
    
  }
  dataraid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dataraid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Array.dataRaid)
}

// bool writeThroughEnabled = 15;
inline void Array::clear_writethroughenabled() {
  writethroughenabled_ = false;
}
inline bool Array::_internal_writethroughenabled() const {
  return writethroughenabled_;
}
inline bool Array::writethroughenabled() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Array.writeThroughEnabled)
  return _internal_writethroughenabled();
}
inline void Array::_internal_set_writethroughenabled(bool value) {
  
  writethroughenabled_ = value;
}
inline void Array::set_writethroughenabled(bool value) {
  _internal_set_writethroughenabled(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Array.writeThroughEnabled)
}

// repeated .grpc_cli.Device devicelist = 16;
inline int Array::_internal_devicelist_size() const {
  return devicelist_.size();
}
inline int Array::devicelist_size() const {
  return _internal_devicelist_size();
}
inline void Array::clear_devicelist() {
  devicelist_.Clear();
}
inline ::grpc_cli::Device* Array::mutable_devicelist(int index) {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Array.devicelist)
  return devicelist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::Device >*
Array::mutable_devicelist() {
  // @@protoc_insertion_point(field_mutable_list:grpc_cli.Array.devicelist)
  return &devicelist_;
}
inline const ::grpc_cli::Device& Array::_internal_devicelist(int index) const {
  return devicelist_.Get(index);
}
inline const ::grpc_cli::Device& Array::devicelist(int index) const {
  // @@protoc_insertion_point(field_get:grpc_cli.Array.devicelist)
  return _internal_devicelist(index);
}
inline ::grpc_cli::Device* Array::_internal_add_devicelist() {
  return devicelist_.Add();
}
inline ::grpc_cli::Device* Array::add_devicelist() {
  // @@protoc_insertion_point(field_add:grpc_cli.Array.devicelist)
  return _internal_add_devicelist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::Device >&
Array::devicelist() const {
  // @@protoc_insertion_point(field_list:grpc_cli.Array.devicelist)
  return devicelist_;
}

// -------------------------------------------------------------------

// ListArrayRequest

// string command = 1;
inline void ListArrayRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& ListArrayRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListArrayRequest.command)
  return _internal_command();
}
inline void ListArrayRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListArrayRequest.command)
}
inline std::string* ListArrayRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListArrayRequest.command)
  return _internal_mutable_command();
}
inline const std::string& ListArrayRequest::_internal_command() const {
  return command_.Get();
}
inline void ListArrayRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListArrayRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListArrayRequest.command)
}
inline void ListArrayRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListArrayRequest.command)
}
inline void ListArrayRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListArrayRequest.command)
}
inline std::string* ListArrayRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListArrayRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListArrayRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListArrayRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListArrayRequest.command)
}

// string rid = 2;
inline void ListArrayRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& ListArrayRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListArrayRequest.rid)
  return _internal_rid();
}
inline void ListArrayRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListArrayRequest.rid)
}
inline std::string* ListArrayRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListArrayRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& ListArrayRequest::_internal_rid() const {
  return rid_.Get();
}
inline void ListArrayRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListArrayRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListArrayRequest.rid)
}
inline void ListArrayRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListArrayRequest.rid)
}
inline void ListArrayRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListArrayRequest.rid)
}
inline std::string* ListArrayRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListArrayRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListArrayRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListArrayRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListArrayRequest.rid)
}

// string requestor = 3;
inline void ListArrayRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& ListArrayRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListArrayRequest.requestor)
  return _internal_requestor();
}
inline void ListArrayRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListArrayRequest.requestor)
}
inline std::string* ListArrayRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListArrayRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& ListArrayRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void ListArrayRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListArrayRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListArrayRequest.requestor)
}
inline void ListArrayRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListArrayRequest.requestor)
}
inline void ListArrayRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListArrayRequest.requestor)
}
inline std::string* ListArrayRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListArrayRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListArrayRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListArrayRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListArrayRequest.requestor)
}

// -------------------------------------------------------------------

// ListArrayResponse_Result_ArrayList

// repeated .grpc_cli.Array arrayList = 1;
inline int ListArrayResponse_Result_ArrayList::_internal_arraylist_size() const {
  return arraylist_.size();
}
inline int ListArrayResponse_Result_ArrayList::arraylist_size() const {
  return _internal_arraylist_size();
}
inline void ListArrayResponse_Result_ArrayList::clear_arraylist() {
  arraylist_.Clear();
}
inline ::grpc_cli::Array* ListArrayResponse_Result_ArrayList::mutable_arraylist(int index) {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListArrayResponse.Result.ArrayList.arrayList)
  return arraylist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::Array >*
ListArrayResponse_Result_ArrayList::mutable_arraylist() {
  // @@protoc_insertion_point(field_mutable_list:grpc_cli.ListArrayResponse.Result.ArrayList.arrayList)
  return &arraylist_;
}
inline const ::grpc_cli::Array& ListArrayResponse_Result_ArrayList::_internal_arraylist(int index) const {
  return arraylist_.Get(index);
}
inline const ::grpc_cli::Array& ListArrayResponse_Result_ArrayList::arraylist(int index) const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListArrayResponse.Result.ArrayList.arrayList)
  return _internal_arraylist(index);
}
inline ::grpc_cli::Array* ListArrayResponse_Result_ArrayList::_internal_add_arraylist() {
  return arraylist_.Add();
}
inline ::grpc_cli::Array* ListArrayResponse_Result_ArrayList::add_arraylist() {
  // @@protoc_insertion_point(field_add:grpc_cli.ListArrayResponse.Result.ArrayList.arrayList)
  return _internal_add_arraylist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::Array >&
ListArrayResponse_Result_ArrayList::arraylist() const {
  // @@protoc_insertion_point(field_list:grpc_cli.ListArrayResponse.Result.ArrayList.arrayList)
  return arraylist_;
}

// -------------------------------------------------------------------

// ListArrayResponse_Result

// .grpc_cli.Status status = 1;
inline bool ListArrayResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool ListArrayResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void ListArrayResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& ListArrayResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& ListArrayResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListArrayResponse.Result.status)
  return _internal_status();
}
inline void ListArrayResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ListArrayResponse.Result.status)
}
inline ::grpc_cli::Status* ListArrayResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* ListArrayResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListArrayResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* ListArrayResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* ListArrayResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListArrayResponse.Result.status)
  return _internal_mutable_status();
}
inline void ListArrayResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListArrayResponse.Result.status)
}

// .grpc_cli.ListArrayResponse.Result.ArrayList data = 2;
inline bool ListArrayResponse_Result::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool ListArrayResponse_Result::has_data() const {
  return _internal_has_data();
}
inline void ListArrayResponse_Result::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::grpc_cli::ListArrayResponse_Result_ArrayList& ListArrayResponse_Result::_internal_data() const {
  const ::grpc_cli::ListArrayResponse_Result_ArrayList* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::ListArrayResponse_Result_ArrayList&>(
      ::grpc_cli::_ListArrayResponse_Result_ArrayList_default_instance_);
}
inline const ::grpc_cli::ListArrayResponse_Result_ArrayList& ListArrayResponse_Result::data() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListArrayResponse.Result.data)
  return _internal_data();
}
inline void ListArrayResponse_Result::unsafe_arena_set_allocated_data(
    ::grpc_cli::ListArrayResponse_Result_ArrayList* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ListArrayResponse.Result.data)
}
inline ::grpc_cli::ListArrayResponse_Result_ArrayList* ListArrayResponse_Result::release_data() {
  
  ::grpc_cli::ListArrayResponse_Result_ArrayList* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::ListArrayResponse_Result_ArrayList* ListArrayResponse_Result::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListArrayResponse.Result.data)
  
  ::grpc_cli::ListArrayResponse_Result_ArrayList* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::grpc_cli::ListArrayResponse_Result_ArrayList* ListArrayResponse_Result::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::ListArrayResponse_Result_ArrayList>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::grpc_cli::ListArrayResponse_Result_ArrayList* ListArrayResponse_Result::mutable_data() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListArrayResponse.Result.data)
  return _internal_mutable_data();
}
inline void ListArrayResponse_Result::set_allocated_data(::grpc_cli::ListArrayResponse_Result_ArrayList* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListArrayResponse.Result.data)
}

// -------------------------------------------------------------------

// ListArrayResponse

// string command = 1;
inline void ListArrayResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& ListArrayResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListArrayResponse.command)
  return _internal_command();
}
inline void ListArrayResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListArrayResponse.command)
}
inline std::string* ListArrayResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListArrayResponse.command)
  return _internal_mutable_command();
}
inline const std::string& ListArrayResponse::_internal_command() const {
  return command_.Get();
}
inline void ListArrayResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListArrayResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListArrayResponse.command)
}
inline void ListArrayResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListArrayResponse.command)
}
inline void ListArrayResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListArrayResponse.command)
}
inline std::string* ListArrayResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListArrayResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListArrayResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListArrayResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListArrayResponse.command)
}

// string rid = 2;
inline void ListArrayResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& ListArrayResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListArrayResponse.rid)
  return _internal_rid();
}
inline void ListArrayResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListArrayResponse.rid)
}
inline std::string* ListArrayResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListArrayResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& ListArrayResponse::_internal_rid() const {
  return rid_.Get();
}
inline void ListArrayResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListArrayResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListArrayResponse.rid)
}
inline void ListArrayResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListArrayResponse.rid)
}
inline void ListArrayResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListArrayResponse.rid)
}
inline std::string* ListArrayResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListArrayResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListArrayResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListArrayResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListArrayResponse.rid)
}

// .grpc_cli.ListArrayResponse.Result result = 3;
inline bool ListArrayResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool ListArrayResponse::has_result() const {
  return _internal_has_result();
}
inline void ListArrayResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::ListArrayResponse_Result& ListArrayResponse::_internal_result() const {
  const ::grpc_cli::ListArrayResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::ListArrayResponse_Result&>(
      ::grpc_cli::_ListArrayResponse_Result_default_instance_);
}
inline const ::grpc_cli::ListArrayResponse_Result& ListArrayResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListArrayResponse.result)
  return _internal_result();
}
inline void ListArrayResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::ListArrayResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ListArrayResponse.result)
}
inline ::grpc_cli::ListArrayResponse_Result* ListArrayResponse::release_result() {
  
  ::grpc_cli::ListArrayResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::ListArrayResponse_Result* ListArrayResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListArrayResponse.result)
  
  ::grpc_cli::ListArrayResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::ListArrayResponse_Result* ListArrayResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::ListArrayResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::ListArrayResponse_Result* ListArrayResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListArrayResponse.result)
  return _internal_mutable_result();
}
inline void ListArrayResponse::set_allocated_result(::grpc_cli::ListArrayResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListArrayResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool ListArrayResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool ListArrayResponse::has_info() const {
  return _internal_has_info();
}
inline void ListArrayResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& ListArrayResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& ListArrayResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListArrayResponse.info)
  return _internal_info();
}
inline void ListArrayResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ListArrayResponse.info)
}
inline ::grpc_cli::PosInfo* ListArrayResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* ListArrayResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListArrayResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* ListArrayResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* ListArrayResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListArrayResponse.info)
  return _internal_mutable_info();
}
inline void ListArrayResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListArrayResponse.info)
}

// -------------------------------------------------------------------

// ArrayInfoRequest_Param

// string name = 1;
inline void ArrayInfoRequest_Param::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ArrayInfoRequest_Param::name() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ArrayInfoRequest.Param.name)
  return _internal_name();
}
inline void ArrayInfoRequest_Param::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ArrayInfoRequest.Param.name)
}
inline std::string* ArrayInfoRequest_Param::mutable_name() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ArrayInfoRequest.Param.name)
  return _internal_mutable_name();
}
inline const std::string& ArrayInfoRequest_Param::_internal_name() const {
  return name_.Get();
}
inline void ArrayInfoRequest_Param::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ArrayInfoRequest_Param::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ArrayInfoRequest.Param.name)
}
inline void ArrayInfoRequest_Param::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ArrayInfoRequest.Param.name)
}
inline void ArrayInfoRequest_Param::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ArrayInfoRequest.Param.name)
}
inline std::string* ArrayInfoRequest_Param::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ArrayInfoRequest_Param::release_name() {
  // @@protoc_insertion_point(field_release:grpc_cli.ArrayInfoRequest.Param.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ArrayInfoRequest_Param::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ArrayInfoRequest.Param.name)
}

// -------------------------------------------------------------------

// ArrayInfoRequest

// string command = 1;
inline void ArrayInfoRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& ArrayInfoRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ArrayInfoRequest.command)
  return _internal_command();
}
inline void ArrayInfoRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ArrayInfoRequest.command)
}
inline std::string* ArrayInfoRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ArrayInfoRequest.command)
  return _internal_mutable_command();
}
inline const std::string& ArrayInfoRequest::_internal_command() const {
  return command_.Get();
}
inline void ArrayInfoRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ArrayInfoRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ArrayInfoRequest.command)
}
inline void ArrayInfoRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ArrayInfoRequest.command)
}
inline void ArrayInfoRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ArrayInfoRequest.command)
}
inline std::string* ArrayInfoRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ArrayInfoRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.ArrayInfoRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ArrayInfoRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ArrayInfoRequest.command)
}

// string rid = 2;
inline void ArrayInfoRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& ArrayInfoRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ArrayInfoRequest.rid)
  return _internal_rid();
}
inline void ArrayInfoRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ArrayInfoRequest.rid)
}
inline std::string* ArrayInfoRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ArrayInfoRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& ArrayInfoRequest::_internal_rid() const {
  return rid_.Get();
}
inline void ArrayInfoRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ArrayInfoRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ArrayInfoRequest.rid)
}
inline void ArrayInfoRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ArrayInfoRequest.rid)
}
inline void ArrayInfoRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ArrayInfoRequest.rid)
}
inline std::string* ArrayInfoRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ArrayInfoRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.ArrayInfoRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ArrayInfoRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ArrayInfoRequest.rid)
}

// string requestor = 3;
inline void ArrayInfoRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& ArrayInfoRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ArrayInfoRequest.requestor)
  return _internal_requestor();
}
inline void ArrayInfoRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ArrayInfoRequest.requestor)
}
inline std::string* ArrayInfoRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ArrayInfoRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& ArrayInfoRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void ArrayInfoRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ArrayInfoRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ArrayInfoRequest.requestor)
}
inline void ArrayInfoRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ArrayInfoRequest.requestor)
}
inline void ArrayInfoRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ArrayInfoRequest.requestor)
}
inline std::string* ArrayInfoRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ArrayInfoRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.ArrayInfoRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ArrayInfoRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ArrayInfoRequest.requestor)
}

// .grpc_cli.ArrayInfoRequest.Param param = 4;
inline bool ArrayInfoRequest::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool ArrayInfoRequest::has_param() const {
  return _internal_has_param();
}
inline void ArrayInfoRequest::clear_param() {
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::grpc_cli::ArrayInfoRequest_Param& ArrayInfoRequest::_internal_param() const {
  const ::grpc_cli::ArrayInfoRequest_Param* p = param_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::ArrayInfoRequest_Param&>(
      ::grpc_cli::_ArrayInfoRequest_Param_default_instance_);
}
inline const ::grpc_cli::ArrayInfoRequest_Param& ArrayInfoRequest::param() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ArrayInfoRequest.param)
  return _internal_param();
}
inline void ArrayInfoRequest::unsafe_arena_set_allocated_param(
    ::grpc_cli::ArrayInfoRequest_Param* param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ArrayInfoRequest.param)
}
inline ::grpc_cli::ArrayInfoRequest_Param* ArrayInfoRequest::release_param() {
  
  ::grpc_cli::ArrayInfoRequest_Param* temp = param_;
  param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::ArrayInfoRequest_Param* ArrayInfoRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:grpc_cli.ArrayInfoRequest.param)
  
  ::grpc_cli::ArrayInfoRequest_Param* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::grpc_cli::ArrayInfoRequest_Param* ArrayInfoRequest::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::ArrayInfoRequest_Param>(GetArena());
    param_ = p;
  }
  return param_;
}
inline ::grpc_cli::ArrayInfoRequest_Param* ArrayInfoRequest::mutable_param() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ArrayInfoRequest.param)
  return _internal_mutable_param();
}
inline void ArrayInfoRequest::set_allocated_param(::grpc_cli::ArrayInfoRequest_Param* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ArrayInfoRequest.param)
}

// -------------------------------------------------------------------

// ArrayInfoResponse_Result

// .grpc_cli.Status status = 1;
inline bool ArrayInfoResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool ArrayInfoResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void ArrayInfoResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& ArrayInfoResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& ArrayInfoResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ArrayInfoResponse.Result.status)
  return _internal_status();
}
inline void ArrayInfoResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ArrayInfoResponse.Result.status)
}
inline ::grpc_cli::Status* ArrayInfoResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* ArrayInfoResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.ArrayInfoResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* ArrayInfoResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* ArrayInfoResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ArrayInfoResponse.Result.status)
  return _internal_mutable_status();
}
inline void ArrayInfoResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ArrayInfoResponse.Result.status)
}

// .grpc_cli.Array data = 2;
inline bool ArrayInfoResponse_Result::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool ArrayInfoResponse_Result::has_data() const {
  return _internal_has_data();
}
inline void ArrayInfoResponse_Result::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::grpc_cli::Array& ArrayInfoResponse_Result::_internal_data() const {
  const ::grpc_cli::Array* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Array&>(
      ::grpc_cli::_Array_default_instance_);
}
inline const ::grpc_cli::Array& ArrayInfoResponse_Result::data() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ArrayInfoResponse.Result.data)
  return _internal_data();
}
inline void ArrayInfoResponse_Result::unsafe_arena_set_allocated_data(
    ::grpc_cli::Array* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ArrayInfoResponse.Result.data)
}
inline ::grpc_cli::Array* ArrayInfoResponse_Result::release_data() {
  
  ::grpc_cli::Array* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Array* ArrayInfoResponse_Result::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:grpc_cli.ArrayInfoResponse.Result.data)
  
  ::grpc_cli::Array* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::grpc_cli::Array* ArrayInfoResponse_Result::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Array>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::grpc_cli::Array* ArrayInfoResponse_Result::mutable_data() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ArrayInfoResponse.Result.data)
  return _internal_mutable_data();
}
inline void ArrayInfoResponse_Result::set_allocated_data(::grpc_cli::Array* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ArrayInfoResponse.Result.data)
}

// -------------------------------------------------------------------

// ArrayInfoResponse

// string command = 1;
inline void ArrayInfoResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& ArrayInfoResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ArrayInfoResponse.command)
  return _internal_command();
}
inline void ArrayInfoResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ArrayInfoResponse.command)
}
inline std::string* ArrayInfoResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ArrayInfoResponse.command)
  return _internal_mutable_command();
}
inline const std::string& ArrayInfoResponse::_internal_command() const {
  return command_.Get();
}
inline void ArrayInfoResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ArrayInfoResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ArrayInfoResponse.command)
}
inline void ArrayInfoResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ArrayInfoResponse.command)
}
inline void ArrayInfoResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ArrayInfoResponse.command)
}
inline std::string* ArrayInfoResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ArrayInfoResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.ArrayInfoResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ArrayInfoResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ArrayInfoResponse.command)
}

// string rid = 2;
inline void ArrayInfoResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& ArrayInfoResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ArrayInfoResponse.rid)
  return _internal_rid();
}
inline void ArrayInfoResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ArrayInfoResponse.rid)
}
inline std::string* ArrayInfoResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ArrayInfoResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& ArrayInfoResponse::_internal_rid() const {
  return rid_.Get();
}
inline void ArrayInfoResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ArrayInfoResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ArrayInfoResponse.rid)
}
inline void ArrayInfoResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ArrayInfoResponse.rid)
}
inline void ArrayInfoResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ArrayInfoResponse.rid)
}
inline std::string* ArrayInfoResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ArrayInfoResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.ArrayInfoResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ArrayInfoResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ArrayInfoResponse.rid)
}

// .grpc_cli.ArrayInfoResponse.Result result = 3;
inline bool ArrayInfoResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool ArrayInfoResponse::has_result() const {
  return _internal_has_result();
}
inline void ArrayInfoResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::ArrayInfoResponse_Result& ArrayInfoResponse::_internal_result() const {
  const ::grpc_cli::ArrayInfoResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::ArrayInfoResponse_Result&>(
      ::grpc_cli::_ArrayInfoResponse_Result_default_instance_);
}
inline const ::grpc_cli::ArrayInfoResponse_Result& ArrayInfoResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ArrayInfoResponse.result)
  return _internal_result();
}
inline void ArrayInfoResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::ArrayInfoResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ArrayInfoResponse.result)
}
inline ::grpc_cli::ArrayInfoResponse_Result* ArrayInfoResponse::release_result() {
  
  ::grpc_cli::ArrayInfoResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::ArrayInfoResponse_Result* ArrayInfoResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.ArrayInfoResponse.result)
  
  ::grpc_cli::ArrayInfoResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::ArrayInfoResponse_Result* ArrayInfoResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::ArrayInfoResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::ArrayInfoResponse_Result* ArrayInfoResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ArrayInfoResponse.result)
  return _internal_mutable_result();
}
inline void ArrayInfoResponse::set_allocated_result(::grpc_cli::ArrayInfoResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ArrayInfoResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool ArrayInfoResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool ArrayInfoResponse::has_info() const {
  return _internal_has_info();
}
inline void ArrayInfoResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& ArrayInfoResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& ArrayInfoResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ArrayInfoResponse.info)
  return _internal_info();
}
inline void ArrayInfoResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ArrayInfoResponse.info)
}
inline ::grpc_cli::PosInfo* ArrayInfoResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* ArrayInfoResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.ArrayInfoResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* ArrayInfoResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* ArrayInfoResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ArrayInfoResponse.info)
  return _internal_mutable_info();
}
inline void ArrayInfoResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ArrayInfoResponse.info)
}

// -------------------------------------------------------------------

// RebuildArrayRequest_Param

// string name = 1;
inline void RebuildArrayRequest_Param::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& RebuildArrayRequest_Param::name() const {
  // @@protoc_insertion_point(field_get:grpc_cli.RebuildArrayRequest.Param.name)
  return _internal_name();
}
inline void RebuildArrayRequest_Param::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:grpc_cli.RebuildArrayRequest.Param.name)
}
inline std::string* RebuildArrayRequest_Param::mutable_name() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.RebuildArrayRequest.Param.name)
  return _internal_mutable_name();
}
inline const std::string& RebuildArrayRequest_Param::_internal_name() const {
  return name_.Get();
}
inline void RebuildArrayRequest_Param::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RebuildArrayRequest_Param::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.RebuildArrayRequest.Param.name)
}
inline void RebuildArrayRequest_Param::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.RebuildArrayRequest.Param.name)
}
inline void RebuildArrayRequest_Param::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.RebuildArrayRequest.Param.name)
}
inline std::string* RebuildArrayRequest_Param::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RebuildArrayRequest_Param::release_name() {
  // @@protoc_insertion_point(field_release:grpc_cli.RebuildArrayRequest.Param.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RebuildArrayRequest_Param::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.RebuildArrayRequest.Param.name)
}

// -------------------------------------------------------------------

// RebuildArrayRequest

// string command = 1;
inline void RebuildArrayRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& RebuildArrayRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.RebuildArrayRequest.command)
  return _internal_command();
}
inline void RebuildArrayRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.RebuildArrayRequest.command)
}
inline std::string* RebuildArrayRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.RebuildArrayRequest.command)
  return _internal_mutable_command();
}
inline const std::string& RebuildArrayRequest::_internal_command() const {
  return command_.Get();
}
inline void RebuildArrayRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RebuildArrayRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.RebuildArrayRequest.command)
}
inline void RebuildArrayRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.RebuildArrayRequest.command)
}
inline void RebuildArrayRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.RebuildArrayRequest.command)
}
inline std::string* RebuildArrayRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RebuildArrayRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.RebuildArrayRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RebuildArrayRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.RebuildArrayRequest.command)
}

// string rid = 2;
inline void RebuildArrayRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& RebuildArrayRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.RebuildArrayRequest.rid)
  return _internal_rid();
}
inline void RebuildArrayRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.RebuildArrayRequest.rid)
}
inline std::string* RebuildArrayRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.RebuildArrayRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& RebuildArrayRequest::_internal_rid() const {
  return rid_.Get();
}
inline void RebuildArrayRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RebuildArrayRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.RebuildArrayRequest.rid)
}
inline void RebuildArrayRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.RebuildArrayRequest.rid)
}
inline void RebuildArrayRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.RebuildArrayRequest.rid)
}
inline std::string* RebuildArrayRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RebuildArrayRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.RebuildArrayRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RebuildArrayRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.RebuildArrayRequest.rid)
}

// string requestor = 3;
inline void RebuildArrayRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& RebuildArrayRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.RebuildArrayRequest.requestor)
  return _internal_requestor();
}
inline void RebuildArrayRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.RebuildArrayRequest.requestor)
}
inline std::string* RebuildArrayRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.RebuildArrayRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& RebuildArrayRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void RebuildArrayRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RebuildArrayRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.RebuildArrayRequest.requestor)
}
inline void RebuildArrayRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.RebuildArrayRequest.requestor)
}
inline void RebuildArrayRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.RebuildArrayRequest.requestor)
}
inline std::string* RebuildArrayRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RebuildArrayRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.RebuildArrayRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RebuildArrayRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.RebuildArrayRequest.requestor)
}

// .grpc_cli.RebuildArrayRequest.Param param = 4;
inline bool RebuildArrayRequest::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool RebuildArrayRequest::has_param() const {
  return _internal_has_param();
}
inline void RebuildArrayRequest::clear_param() {
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::grpc_cli::RebuildArrayRequest_Param& RebuildArrayRequest::_internal_param() const {
  const ::grpc_cli::RebuildArrayRequest_Param* p = param_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::RebuildArrayRequest_Param&>(
      ::grpc_cli::_RebuildArrayRequest_Param_default_instance_);
}
inline const ::grpc_cli::RebuildArrayRequest_Param& RebuildArrayRequest::param() const {
  // @@protoc_insertion_point(field_get:grpc_cli.RebuildArrayRequest.param)
  return _internal_param();
}
inline void RebuildArrayRequest::unsafe_arena_set_allocated_param(
    ::grpc_cli::RebuildArrayRequest_Param* param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.RebuildArrayRequest.param)
}
inline ::grpc_cli::RebuildArrayRequest_Param* RebuildArrayRequest::release_param() {
  
  ::grpc_cli::RebuildArrayRequest_Param* temp = param_;
  param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::RebuildArrayRequest_Param* RebuildArrayRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:grpc_cli.RebuildArrayRequest.param)
  
  ::grpc_cli::RebuildArrayRequest_Param* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::grpc_cli::RebuildArrayRequest_Param* RebuildArrayRequest::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::RebuildArrayRequest_Param>(GetArena());
    param_ = p;
  }
  return param_;
}
inline ::grpc_cli::RebuildArrayRequest_Param* RebuildArrayRequest::mutable_param() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.RebuildArrayRequest.param)
  return _internal_mutable_param();
}
inline void RebuildArrayRequest::set_allocated_param(::grpc_cli::RebuildArrayRequest_Param* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.RebuildArrayRequest.param)
}

// -------------------------------------------------------------------

// RebuildArrayResponse_Result

// .grpc_cli.Status status = 1;
inline bool RebuildArrayResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool RebuildArrayResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void RebuildArrayResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& RebuildArrayResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& RebuildArrayResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.RebuildArrayResponse.Result.status)
  return _internal_status();
}
inline void RebuildArrayResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.RebuildArrayResponse.Result.status)
}
inline ::grpc_cli::Status* RebuildArrayResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* RebuildArrayResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.RebuildArrayResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* RebuildArrayResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* RebuildArrayResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.RebuildArrayResponse.Result.status)
  return _internal_mutable_status();
}
inline void RebuildArrayResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.RebuildArrayResponse.Result.status)
}

// -------------------------------------------------------------------

// RebuildArrayResponse

// string command = 1;
inline void RebuildArrayResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& RebuildArrayResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.RebuildArrayResponse.command)
  return _internal_command();
}
inline void RebuildArrayResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.RebuildArrayResponse.command)
}
inline std::string* RebuildArrayResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.RebuildArrayResponse.command)
  return _internal_mutable_command();
}
inline const std::string& RebuildArrayResponse::_internal_command() const {
  return command_.Get();
}
inline void RebuildArrayResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RebuildArrayResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.RebuildArrayResponse.command)
}
inline void RebuildArrayResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.RebuildArrayResponse.command)
}
inline void RebuildArrayResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.RebuildArrayResponse.command)
}
inline std::string* RebuildArrayResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RebuildArrayResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.RebuildArrayResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RebuildArrayResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.RebuildArrayResponse.command)
}

// string rid = 2;
inline void RebuildArrayResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& RebuildArrayResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.RebuildArrayResponse.rid)
  return _internal_rid();
}
inline void RebuildArrayResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.RebuildArrayResponse.rid)
}
inline std::string* RebuildArrayResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.RebuildArrayResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& RebuildArrayResponse::_internal_rid() const {
  return rid_.Get();
}
inline void RebuildArrayResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RebuildArrayResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.RebuildArrayResponse.rid)
}
inline void RebuildArrayResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.RebuildArrayResponse.rid)
}
inline void RebuildArrayResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.RebuildArrayResponse.rid)
}
inline std::string* RebuildArrayResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RebuildArrayResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.RebuildArrayResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RebuildArrayResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.RebuildArrayResponse.rid)
}

// .grpc_cli.RebuildArrayResponse.Result result = 3;
inline bool RebuildArrayResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool RebuildArrayResponse::has_result() const {
  return _internal_has_result();
}
inline void RebuildArrayResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::RebuildArrayResponse_Result& RebuildArrayResponse::_internal_result() const {
  const ::grpc_cli::RebuildArrayResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::RebuildArrayResponse_Result&>(
      ::grpc_cli::_RebuildArrayResponse_Result_default_instance_);
}
inline const ::grpc_cli::RebuildArrayResponse_Result& RebuildArrayResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.RebuildArrayResponse.result)
  return _internal_result();
}
inline void RebuildArrayResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::RebuildArrayResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.RebuildArrayResponse.result)
}
inline ::grpc_cli::RebuildArrayResponse_Result* RebuildArrayResponse::release_result() {
  
  ::grpc_cli::RebuildArrayResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::RebuildArrayResponse_Result* RebuildArrayResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.RebuildArrayResponse.result)
  
  ::grpc_cli::RebuildArrayResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::RebuildArrayResponse_Result* RebuildArrayResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::RebuildArrayResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::RebuildArrayResponse_Result* RebuildArrayResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.RebuildArrayResponse.result)
  return _internal_mutable_result();
}
inline void RebuildArrayResponse::set_allocated_result(::grpc_cli::RebuildArrayResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.RebuildArrayResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool RebuildArrayResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool RebuildArrayResponse::has_info() const {
  return _internal_has_info();
}
inline void RebuildArrayResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& RebuildArrayResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& RebuildArrayResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.RebuildArrayResponse.info)
  return _internal_info();
}
inline void RebuildArrayResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.RebuildArrayResponse.info)
}
inline ::grpc_cli::PosInfo* RebuildArrayResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* RebuildArrayResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.RebuildArrayResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* RebuildArrayResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* RebuildArrayResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.RebuildArrayResponse.info)
  return _internal_mutable_info();
}
inline void RebuildArrayResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.RebuildArrayResponse.info)
}

// -------------------------------------------------------------------

// ListNodeRequest

// string command = 1;
inline void ListNodeRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& ListNodeRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListNodeRequest.command)
  return _internal_command();
}
inline void ListNodeRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListNodeRequest.command)
}
inline std::string* ListNodeRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListNodeRequest.command)
  return _internal_mutable_command();
}
inline const std::string& ListNodeRequest::_internal_command() const {
  return command_.Get();
}
inline void ListNodeRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListNodeRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListNodeRequest.command)
}
inline void ListNodeRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListNodeRequest.command)
}
inline void ListNodeRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListNodeRequest.command)
}
inline std::string* ListNodeRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListNodeRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListNodeRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListNodeRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListNodeRequest.command)
}

// string rid = 2;
inline void ListNodeRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& ListNodeRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListNodeRequest.rid)
  return _internal_rid();
}
inline void ListNodeRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListNodeRequest.rid)
}
inline std::string* ListNodeRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListNodeRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& ListNodeRequest::_internal_rid() const {
  return rid_.Get();
}
inline void ListNodeRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListNodeRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListNodeRequest.rid)
}
inline void ListNodeRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListNodeRequest.rid)
}
inline void ListNodeRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListNodeRequest.rid)
}
inline std::string* ListNodeRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListNodeRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListNodeRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListNodeRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListNodeRequest.rid)
}

// string requestor = 3;
inline void ListNodeRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& ListNodeRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListNodeRequest.requestor)
  return _internal_requestor();
}
inline void ListNodeRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListNodeRequest.requestor)
}
inline std::string* ListNodeRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListNodeRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& ListNodeRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void ListNodeRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListNodeRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListNodeRequest.requestor)
}
inline void ListNodeRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListNodeRequest.requestor)
}
inline void ListNodeRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListNodeRequest.requestor)
}
inline std::string* ListNodeRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListNodeRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListNodeRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListNodeRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListNodeRequest.requestor)
}

// -------------------------------------------------------------------

// ListNodeResponse_Result_Node

// string name = 1;
inline void ListNodeResponse_Result_Node::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ListNodeResponse_Result_Node::name() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListNodeResponse.Result.Node.name)
  return _internal_name();
}
inline void ListNodeResponse_Result_Node::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListNodeResponse.Result.Node.name)
}
inline std::string* ListNodeResponse_Result_Node::mutable_name() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListNodeResponse.Result.Node.name)
  return _internal_mutable_name();
}
inline const std::string& ListNodeResponse_Result_Node::_internal_name() const {
  return name_.Get();
}
inline void ListNodeResponse_Result_Node::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListNodeResponse_Result_Node::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListNodeResponse.Result.Node.name)
}
inline void ListNodeResponse_Result_Node::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListNodeResponse.Result.Node.name)
}
inline void ListNodeResponse_Result_Node::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListNodeResponse.Result.Node.name)
}
inline std::string* ListNodeResponse_Result_Node::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListNodeResponse_Result_Node::release_name() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListNodeResponse.Result.Node.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListNodeResponse_Result_Node::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListNodeResponse.Result.Node.name)
}

// string ip = 2;
inline void ListNodeResponse_Result_Node::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& ListNodeResponse_Result_Node::ip() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListNodeResponse.Result.Node.ip)
  return _internal_ip();
}
inline void ListNodeResponse_Result_Node::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListNodeResponse.Result.Node.ip)
}
inline std::string* ListNodeResponse_Result_Node::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListNodeResponse.Result.Node.ip)
  return _internal_mutable_ip();
}
inline const std::string& ListNodeResponse_Result_Node::_internal_ip() const {
  return ip_.Get();
}
inline void ListNodeResponse_Result_Node::_internal_set_ip(const std::string& value) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListNodeResponse_Result_Node::set_ip(std::string&& value) {
  
  ip_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListNodeResponse.Result.Node.ip)
}
inline void ListNodeResponse_Result_Node::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListNodeResponse.Result.Node.ip)
}
inline void ListNodeResponse_Result_Node::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListNodeResponse.Result.Node.ip)
}
inline std::string* ListNodeResponse_Result_Node::_internal_mutable_ip() {
  
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListNodeResponse_Result_Node::release_ip() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListNodeResponse.Result.Node.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListNodeResponse_Result_Node::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListNodeResponse.Result.Node.ip)
}

// string lastseen = 3;
inline void ListNodeResponse_Result_Node::clear_lastseen() {
  lastseen_.ClearToEmpty();
}
inline const std::string& ListNodeResponse_Result_Node::lastseen() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListNodeResponse.Result.Node.lastseen)
  return _internal_lastseen();
}
inline void ListNodeResponse_Result_Node::set_lastseen(const std::string& value) {
  _internal_set_lastseen(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListNodeResponse.Result.Node.lastseen)
}
inline std::string* ListNodeResponse_Result_Node::mutable_lastseen() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListNodeResponse.Result.Node.lastseen)
  return _internal_mutable_lastseen();
}
inline const std::string& ListNodeResponse_Result_Node::_internal_lastseen() const {
  return lastseen_.Get();
}
inline void ListNodeResponse_Result_Node::_internal_set_lastseen(const std::string& value) {
  
  lastseen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListNodeResponse_Result_Node::set_lastseen(std::string&& value) {
  
  lastseen_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListNodeResponse.Result.Node.lastseen)
}
inline void ListNodeResponse_Result_Node::set_lastseen(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lastseen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListNodeResponse.Result.Node.lastseen)
}
inline void ListNodeResponse_Result_Node::set_lastseen(const char* value,
    size_t size) {
  
  lastseen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListNodeResponse.Result.Node.lastseen)
}
inline std::string* ListNodeResponse_Result_Node::_internal_mutable_lastseen() {
  
  return lastseen_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListNodeResponse_Result_Node::release_lastseen() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListNodeResponse.Result.Node.lastseen)
  return lastseen_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListNodeResponse_Result_Node::set_allocated_lastseen(std::string* lastseen) {
  if (lastseen != nullptr) {
    
  } else {
    
  }
  lastseen_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lastseen,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListNodeResponse.Result.Node.lastseen)
}

// -------------------------------------------------------------------

// ListNodeResponse_Result

// .grpc_cli.Status status = 1;
inline bool ListNodeResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool ListNodeResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void ListNodeResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& ListNodeResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& ListNodeResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListNodeResponse.Result.status)
  return _internal_status();
}
inline void ListNodeResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ListNodeResponse.Result.status)
}
inline ::grpc_cli::Status* ListNodeResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* ListNodeResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListNodeResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* ListNodeResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* ListNodeResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListNodeResponse.Result.status)
  return _internal_mutable_status();
}
inline void ListNodeResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListNodeResponse.Result.status)
}

// repeated .grpc_cli.ListNodeResponse.Result.Node data = 2;
inline int ListNodeResponse_Result::_internal_data_size() const {
  return data_.size();
}
inline int ListNodeResponse_Result::data_size() const {
  return _internal_data_size();
}
inline void ListNodeResponse_Result::clear_data() {
  data_.Clear();
}
inline ::grpc_cli::ListNodeResponse_Result_Node* ListNodeResponse_Result::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListNodeResponse.Result.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::ListNodeResponse_Result_Node >*
ListNodeResponse_Result::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:grpc_cli.ListNodeResponse.Result.data)
  return &data_;
}
inline const ::grpc_cli::ListNodeResponse_Result_Node& ListNodeResponse_Result::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::grpc_cli::ListNodeResponse_Result_Node& ListNodeResponse_Result::data(int index) const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListNodeResponse.Result.data)
  return _internal_data(index);
}
inline ::grpc_cli::ListNodeResponse_Result_Node* ListNodeResponse_Result::_internal_add_data() {
  return data_.Add();
}
inline ::grpc_cli::ListNodeResponse_Result_Node* ListNodeResponse_Result::add_data() {
  // @@protoc_insertion_point(field_add:grpc_cli.ListNodeResponse.Result.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::ListNodeResponse_Result_Node >&
ListNodeResponse_Result::data() const {
  // @@protoc_insertion_point(field_list:grpc_cli.ListNodeResponse.Result.data)
  return data_;
}

// -------------------------------------------------------------------

// ListNodeResponse

// string command = 1;
inline void ListNodeResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& ListNodeResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListNodeResponse.command)
  return _internal_command();
}
inline void ListNodeResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListNodeResponse.command)
}
inline std::string* ListNodeResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListNodeResponse.command)
  return _internal_mutable_command();
}
inline const std::string& ListNodeResponse::_internal_command() const {
  return command_.Get();
}
inline void ListNodeResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListNodeResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListNodeResponse.command)
}
inline void ListNodeResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListNodeResponse.command)
}
inline void ListNodeResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListNodeResponse.command)
}
inline std::string* ListNodeResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListNodeResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListNodeResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListNodeResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListNodeResponse.command)
}

// string rid = 2;
inline void ListNodeResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& ListNodeResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListNodeResponse.rid)
  return _internal_rid();
}
inline void ListNodeResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListNodeResponse.rid)
}
inline std::string* ListNodeResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListNodeResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& ListNodeResponse::_internal_rid() const {
  return rid_.Get();
}
inline void ListNodeResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListNodeResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListNodeResponse.rid)
}
inline void ListNodeResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListNodeResponse.rid)
}
inline void ListNodeResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListNodeResponse.rid)
}
inline std::string* ListNodeResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListNodeResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListNodeResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListNodeResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListNodeResponse.rid)
}

// .grpc_cli.ListNodeResponse.Result result = 3;
inline bool ListNodeResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool ListNodeResponse::has_result() const {
  return _internal_has_result();
}
inline void ListNodeResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::ListNodeResponse_Result& ListNodeResponse::_internal_result() const {
  const ::grpc_cli::ListNodeResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::ListNodeResponse_Result&>(
      ::grpc_cli::_ListNodeResponse_Result_default_instance_);
}
inline const ::grpc_cli::ListNodeResponse_Result& ListNodeResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListNodeResponse.result)
  return _internal_result();
}
inline void ListNodeResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::ListNodeResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ListNodeResponse.result)
}
inline ::grpc_cli::ListNodeResponse_Result* ListNodeResponse::release_result() {
  
  ::grpc_cli::ListNodeResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::ListNodeResponse_Result* ListNodeResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListNodeResponse.result)
  
  ::grpc_cli::ListNodeResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::ListNodeResponse_Result* ListNodeResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::ListNodeResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::ListNodeResponse_Result* ListNodeResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListNodeResponse.result)
  return _internal_mutable_result();
}
inline void ListNodeResponse::set_allocated_result(::grpc_cli::ListNodeResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListNodeResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool ListNodeResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool ListNodeResponse::has_info() const {
  return _internal_has_info();
}
inline void ListNodeResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& ListNodeResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& ListNodeResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListNodeResponse.info)
  return _internal_info();
}
inline void ListNodeResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ListNodeResponse.info)
}
inline ::grpc_cli::PosInfo* ListNodeResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* ListNodeResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListNodeResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* ListNodeResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* ListNodeResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListNodeResponse.info)
  return _internal_mutable_info();
}
inline void ListNodeResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListNodeResponse.info)
}

// -------------------------------------------------------------------

// ListHaVolumeRequest

// string command = 1;
inline void ListHaVolumeRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& ListHaVolumeRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListHaVolumeRequest.command)
  return _internal_command();
}
inline void ListHaVolumeRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListHaVolumeRequest.command)
}
inline std::string* ListHaVolumeRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListHaVolumeRequest.command)
  return _internal_mutable_command();
}
inline const std::string& ListHaVolumeRequest::_internal_command() const {
  return command_.Get();
}
inline void ListHaVolumeRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListHaVolumeRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListHaVolumeRequest.command)
}
inline void ListHaVolumeRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListHaVolumeRequest.command)
}
inline void ListHaVolumeRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListHaVolumeRequest.command)
}
inline std::string* ListHaVolumeRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListHaVolumeRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListHaVolumeRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListHaVolumeRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListHaVolumeRequest.command)
}

// string rid = 2;
inline void ListHaVolumeRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& ListHaVolumeRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListHaVolumeRequest.rid)
  return _internal_rid();
}
inline void ListHaVolumeRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListHaVolumeRequest.rid)
}
inline std::string* ListHaVolumeRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListHaVolumeRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& ListHaVolumeRequest::_internal_rid() const {
  return rid_.Get();
}
inline void ListHaVolumeRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListHaVolumeRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListHaVolumeRequest.rid)
}
inline void ListHaVolumeRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListHaVolumeRequest.rid)
}
inline void ListHaVolumeRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListHaVolumeRequest.rid)
}
inline std::string* ListHaVolumeRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListHaVolumeRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListHaVolumeRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListHaVolumeRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListHaVolumeRequest.rid)
}

// string requestor = 3;
inline void ListHaVolumeRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& ListHaVolumeRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListHaVolumeRequest.requestor)
  return _internal_requestor();
}
inline void ListHaVolumeRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListHaVolumeRequest.requestor)
}
inline std::string* ListHaVolumeRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListHaVolumeRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& ListHaVolumeRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void ListHaVolumeRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListHaVolumeRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListHaVolumeRequest.requestor)
}
inline void ListHaVolumeRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListHaVolumeRequest.requestor)
}
inline void ListHaVolumeRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListHaVolumeRequest.requestor)
}
inline std::string* ListHaVolumeRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListHaVolumeRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListHaVolumeRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListHaVolumeRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListHaVolumeRequest.requestor)
}

// -------------------------------------------------------------------

// ListHaVolumeResponse_Result_Volume

// int32 id = 1;
inline void ListHaVolumeResponse_Result_Volume::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListHaVolumeResponse_Result_Volume::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListHaVolumeResponse_Result_Volume::id() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListHaVolumeResponse.Result.Volume.id)
  return _internal_id();
}
inline void ListHaVolumeResponse_Result_Volume::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void ListHaVolumeResponse_Result_Volume::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListHaVolumeResponse.Result.Volume.id)
}

// string name = 2;
inline void ListHaVolumeResponse_Result_Volume::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ListHaVolumeResponse_Result_Volume::name() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListHaVolumeResponse.Result.Volume.name)
  return _internal_name();
}
inline void ListHaVolumeResponse_Result_Volume::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListHaVolumeResponse.Result.Volume.name)
}
inline std::string* ListHaVolumeResponse_Result_Volume::mutable_name() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListHaVolumeResponse.Result.Volume.name)
  return _internal_mutable_name();
}
inline const std::string& ListHaVolumeResponse_Result_Volume::_internal_name() const {
  return name_.Get();
}
inline void ListHaVolumeResponse_Result_Volume::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListHaVolumeResponse_Result_Volume::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListHaVolumeResponse.Result.Volume.name)
}
inline void ListHaVolumeResponse_Result_Volume::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListHaVolumeResponse.Result.Volume.name)
}
inline void ListHaVolumeResponse_Result_Volume::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListHaVolumeResponse.Result.Volume.name)
}
inline std::string* ListHaVolumeResponse_Result_Volume::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListHaVolumeResponse_Result_Volume::release_name() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListHaVolumeResponse.Result.Volume.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListHaVolumeResponse_Result_Volume::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListHaVolumeResponse.Result.Volume.name)
}

// string nodeName = 3;
inline void ListHaVolumeResponse_Result_Volume::clear_nodename() {
  nodename_.ClearToEmpty();
}
inline const std::string& ListHaVolumeResponse_Result_Volume::nodename() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListHaVolumeResponse.Result.Volume.nodeName)
  return _internal_nodename();
}
inline void ListHaVolumeResponse_Result_Volume::set_nodename(const std::string& value) {
  _internal_set_nodename(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListHaVolumeResponse.Result.Volume.nodeName)
}
inline std::string* ListHaVolumeResponse_Result_Volume::mutable_nodename() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListHaVolumeResponse.Result.Volume.nodeName)
  return _internal_mutable_nodename();
}
inline const std::string& ListHaVolumeResponse_Result_Volume::_internal_nodename() const {
  return nodename_.Get();
}
inline void ListHaVolumeResponse_Result_Volume::_internal_set_nodename(const std::string& value) {
  
  nodename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListHaVolumeResponse_Result_Volume::set_nodename(std::string&& value) {
  
  nodename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListHaVolumeResponse.Result.Volume.nodeName)
}
inline void ListHaVolumeResponse_Result_Volume::set_nodename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nodename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListHaVolumeResponse.Result.Volume.nodeName)
}
inline void ListHaVolumeResponse_Result_Volume::set_nodename(const char* value,
    size_t size) {
  
  nodename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListHaVolumeResponse.Result.Volume.nodeName)
}
inline std::string* ListHaVolumeResponse_Result_Volume::_internal_mutable_nodename() {
  
  return nodename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListHaVolumeResponse_Result_Volume::release_nodename() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListHaVolumeResponse.Result.Volume.nodeName)
  return nodename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListHaVolumeResponse_Result_Volume::set_allocated_nodename(std::string* nodename) {
  if (nodename != nullptr) {
    
  } else {
    
  }
  nodename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nodename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListHaVolumeResponse.Result.Volume.nodeName)
}

// string arrayName = 4;
inline void ListHaVolumeResponse_Result_Volume::clear_arrayname() {
  arrayname_.ClearToEmpty();
}
inline const std::string& ListHaVolumeResponse_Result_Volume::arrayname() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListHaVolumeResponse.Result.Volume.arrayName)
  return _internal_arrayname();
}
inline void ListHaVolumeResponse_Result_Volume::set_arrayname(const std::string& value) {
  _internal_set_arrayname(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListHaVolumeResponse.Result.Volume.arrayName)
}
inline std::string* ListHaVolumeResponse_Result_Volume::mutable_arrayname() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListHaVolumeResponse.Result.Volume.arrayName)
  return _internal_mutable_arrayname();
}
inline const std::string& ListHaVolumeResponse_Result_Volume::_internal_arrayname() const {
  return arrayname_.Get();
}
inline void ListHaVolumeResponse_Result_Volume::_internal_set_arrayname(const std::string& value) {
  
  arrayname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListHaVolumeResponse_Result_Volume::set_arrayname(std::string&& value) {
  
  arrayname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListHaVolumeResponse.Result.Volume.arrayName)
}
inline void ListHaVolumeResponse_Result_Volume::set_arrayname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  arrayname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListHaVolumeResponse.Result.Volume.arrayName)
}
inline void ListHaVolumeResponse_Result_Volume::set_arrayname(const char* value,
    size_t size) {
  
  arrayname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListHaVolumeResponse.Result.Volume.arrayName)
}
inline std::string* ListHaVolumeResponse_Result_Volume::_internal_mutable_arrayname() {
  
  return arrayname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListHaVolumeResponse_Result_Volume::release_arrayname() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListHaVolumeResponse.Result.Volume.arrayName)
  return arrayname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListHaVolumeResponse_Result_Volume::set_allocated_arrayname(std::string* arrayname) {
  if (arrayname != nullptr) {
    
  } else {
    
  }
  arrayname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), arrayname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListHaVolumeResponse.Result.Volume.arrayName)
}

// int64 size = 5;
inline void ListHaVolumeResponse_Result_Volume::clear_size() {
  size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ListHaVolumeResponse_Result_Volume::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ListHaVolumeResponse_Result_Volume::size() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListHaVolumeResponse.Result.Volume.size)
  return _internal_size();
}
inline void ListHaVolumeResponse_Result_Volume::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  size_ = value;
}
inline void ListHaVolumeResponse_Result_Volume::set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListHaVolumeResponse.Result.Volume.size)
}

// string lastseen = 6;
inline void ListHaVolumeResponse_Result_Volume::clear_lastseen() {
  lastseen_.ClearToEmpty();
}
inline const std::string& ListHaVolumeResponse_Result_Volume::lastseen() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListHaVolumeResponse.Result.Volume.lastseen)
  return _internal_lastseen();
}
inline void ListHaVolumeResponse_Result_Volume::set_lastseen(const std::string& value) {
  _internal_set_lastseen(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListHaVolumeResponse.Result.Volume.lastseen)
}
inline std::string* ListHaVolumeResponse_Result_Volume::mutable_lastseen() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListHaVolumeResponse.Result.Volume.lastseen)
  return _internal_mutable_lastseen();
}
inline const std::string& ListHaVolumeResponse_Result_Volume::_internal_lastseen() const {
  return lastseen_.Get();
}
inline void ListHaVolumeResponse_Result_Volume::_internal_set_lastseen(const std::string& value) {
  
  lastseen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListHaVolumeResponse_Result_Volume::set_lastseen(std::string&& value) {
  
  lastseen_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListHaVolumeResponse.Result.Volume.lastseen)
}
inline void ListHaVolumeResponse_Result_Volume::set_lastseen(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lastseen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListHaVolumeResponse.Result.Volume.lastseen)
}
inline void ListHaVolumeResponse_Result_Volume::set_lastseen(const char* value,
    size_t size) {
  
  lastseen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListHaVolumeResponse.Result.Volume.lastseen)
}
inline std::string* ListHaVolumeResponse_Result_Volume::_internal_mutable_lastseen() {
  
  return lastseen_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListHaVolumeResponse_Result_Volume::release_lastseen() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListHaVolumeResponse.Result.Volume.lastseen)
  return lastseen_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListHaVolumeResponse_Result_Volume::set_allocated_lastseen(std::string* lastseen) {
  if (lastseen != nullptr) {
    
  } else {
    
  }
  lastseen_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lastseen,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListHaVolumeResponse.Result.Volume.lastseen)
}

// -------------------------------------------------------------------

// ListHaVolumeResponse_Result

// .grpc_cli.Status status = 1;
inline bool ListHaVolumeResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool ListHaVolumeResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void ListHaVolumeResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& ListHaVolumeResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& ListHaVolumeResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListHaVolumeResponse.Result.status)
  return _internal_status();
}
inline void ListHaVolumeResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ListHaVolumeResponse.Result.status)
}
inline ::grpc_cli::Status* ListHaVolumeResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* ListHaVolumeResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListHaVolumeResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* ListHaVolumeResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* ListHaVolumeResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListHaVolumeResponse.Result.status)
  return _internal_mutable_status();
}
inline void ListHaVolumeResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListHaVolumeResponse.Result.status)
}

// repeated .grpc_cli.ListHaVolumeResponse.Result.Volume data = 2;
inline int ListHaVolumeResponse_Result::_internal_data_size() const {
  return data_.size();
}
inline int ListHaVolumeResponse_Result::data_size() const {
  return _internal_data_size();
}
inline void ListHaVolumeResponse_Result::clear_data() {
  data_.Clear();
}
inline ::grpc_cli::ListHaVolumeResponse_Result_Volume* ListHaVolumeResponse_Result::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListHaVolumeResponse.Result.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::ListHaVolumeResponse_Result_Volume >*
ListHaVolumeResponse_Result::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:grpc_cli.ListHaVolumeResponse.Result.data)
  return &data_;
}
inline const ::grpc_cli::ListHaVolumeResponse_Result_Volume& ListHaVolumeResponse_Result::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::grpc_cli::ListHaVolumeResponse_Result_Volume& ListHaVolumeResponse_Result::data(int index) const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListHaVolumeResponse.Result.data)
  return _internal_data(index);
}
inline ::grpc_cli::ListHaVolumeResponse_Result_Volume* ListHaVolumeResponse_Result::_internal_add_data() {
  return data_.Add();
}
inline ::grpc_cli::ListHaVolumeResponse_Result_Volume* ListHaVolumeResponse_Result::add_data() {
  // @@protoc_insertion_point(field_add:grpc_cli.ListHaVolumeResponse.Result.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::ListHaVolumeResponse_Result_Volume >&
ListHaVolumeResponse_Result::data() const {
  // @@protoc_insertion_point(field_list:grpc_cli.ListHaVolumeResponse.Result.data)
  return data_;
}

// -------------------------------------------------------------------

// ListHaVolumeResponse

// string command = 1;
inline void ListHaVolumeResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& ListHaVolumeResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListHaVolumeResponse.command)
  return _internal_command();
}
inline void ListHaVolumeResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListHaVolumeResponse.command)
}
inline std::string* ListHaVolumeResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListHaVolumeResponse.command)
  return _internal_mutable_command();
}
inline const std::string& ListHaVolumeResponse::_internal_command() const {
  return command_.Get();
}
inline void ListHaVolumeResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListHaVolumeResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListHaVolumeResponse.command)
}
inline void ListHaVolumeResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListHaVolumeResponse.command)
}
inline void ListHaVolumeResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListHaVolumeResponse.command)
}
inline std::string* ListHaVolumeResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListHaVolumeResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListHaVolumeResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListHaVolumeResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListHaVolumeResponse.command)
}

// string rid = 2;
inline void ListHaVolumeResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& ListHaVolumeResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListHaVolumeResponse.rid)
  return _internal_rid();
}
inline void ListHaVolumeResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListHaVolumeResponse.rid)
}
inline std::string* ListHaVolumeResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListHaVolumeResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& ListHaVolumeResponse::_internal_rid() const {
  return rid_.Get();
}
inline void ListHaVolumeResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListHaVolumeResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListHaVolumeResponse.rid)
}
inline void ListHaVolumeResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListHaVolumeResponse.rid)
}
inline void ListHaVolumeResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListHaVolumeResponse.rid)
}
inline std::string* ListHaVolumeResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListHaVolumeResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListHaVolumeResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListHaVolumeResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListHaVolumeResponse.rid)
}

// .grpc_cli.ListHaVolumeResponse.Result result = 3;
inline bool ListHaVolumeResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool ListHaVolumeResponse::has_result() const {
  return _internal_has_result();
}
inline void ListHaVolumeResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::ListHaVolumeResponse_Result& ListHaVolumeResponse::_internal_result() const {
  const ::grpc_cli::ListHaVolumeResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::ListHaVolumeResponse_Result&>(
      ::grpc_cli::_ListHaVolumeResponse_Result_default_instance_);
}
inline const ::grpc_cli::ListHaVolumeResponse_Result& ListHaVolumeResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListHaVolumeResponse.result)
  return _internal_result();
}
inline void ListHaVolumeResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::ListHaVolumeResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ListHaVolumeResponse.result)
}
inline ::grpc_cli::ListHaVolumeResponse_Result* ListHaVolumeResponse::release_result() {
  
  ::grpc_cli::ListHaVolumeResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::ListHaVolumeResponse_Result* ListHaVolumeResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListHaVolumeResponse.result)
  
  ::grpc_cli::ListHaVolumeResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::ListHaVolumeResponse_Result* ListHaVolumeResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::ListHaVolumeResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::ListHaVolumeResponse_Result* ListHaVolumeResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListHaVolumeResponse.result)
  return _internal_mutable_result();
}
inline void ListHaVolumeResponse::set_allocated_result(::grpc_cli::ListHaVolumeResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListHaVolumeResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool ListHaVolumeResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool ListHaVolumeResponse::has_info() const {
  return _internal_has_info();
}
inline void ListHaVolumeResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& ListHaVolumeResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& ListHaVolumeResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListHaVolumeResponse.info)
  return _internal_info();
}
inline void ListHaVolumeResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ListHaVolumeResponse.info)
}
inline ::grpc_cli::PosInfo* ListHaVolumeResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* ListHaVolumeResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListHaVolumeResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* ListHaVolumeResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* ListHaVolumeResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListHaVolumeResponse.info)
  return _internal_mutable_info();
}
inline void ListHaVolumeResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListHaVolumeResponse.info)
}

// -------------------------------------------------------------------

// ListHaReplicationRequest

// string command = 1;
inline void ListHaReplicationRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& ListHaReplicationRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListHaReplicationRequest.command)
  return _internal_command();
}
inline void ListHaReplicationRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListHaReplicationRequest.command)
}
inline std::string* ListHaReplicationRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListHaReplicationRequest.command)
  return _internal_mutable_command();
}
inline const std::string& ListHaReplicationRequest::_internal_command() const {
  return command_.Get();
}
inline void ListHaReplicationRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListHaReplicationRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListHaReplicationRequest.command)
}
inline void ListHaReplicationRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListHaReplicationRequest.command)
}
inline void ListHaReplicationRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListHaReplicationRequest.command)
}
inline std::string* ListHaReplicationRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListHaReplicationRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListHaReplicationRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListHaReplicationRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListHaReplicationRequest.command)
}

// string rid = 2;
inline void ListHaReplicationRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& ListHaReplicationRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListHaReplicationRequest.rid)
  return _internal_rid();
}
inline void ListHaReplicationRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListHaReplicationRequest.rid)
}
inline std::string* ListHaReplicationRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListHaReplicationRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& ListHaReplicationRequest::_internal_rid() const {
  return rid_.Get();
}
inline void ListHaReplicationRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListHaReplicationRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListHaReplicationRequest.rid)
}
inline void ListHaReplicationRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListHaReplicationRequest.rid)
}
inline void ListHaReplicationRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListHaReplicationRequest.rid)
}
inline std::string* ListHaReplicationRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListHaReplicationRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListHaReplicationRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListHaReplicationRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListHaReplicationRequest.rid)
}

// string requestor = 3;
inline void ListHaReplicationRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& ListHaReplicationRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListHaReplicationRequest.requestor)
  return _internal_requestor();
}
inline void ListHaReplicationRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListHaReplicationRequest.requestor)
}
inline std::string* ListHaReplicationRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListHaReplicationRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& ListHaReplicationRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void ListHaReplicationRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListHaReplicationRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListHaReplicationRequest.requestor)
}
inline void ListHaReplicationRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListHaReplicationRequest.requestor)
}
inline void ListHaReplicationRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListHaReplicationRequest.requestor)
}
inline std::string* ListHaReplicationRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListHaReplicationRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListHaReplicationRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListHaReplicationRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListHaReplicationRequest.requestor)
}

// -------------------------------------------------------------------

// ListHaReplicationResponse_Result_Replication

// int32 id = 1;
inline void ListHaReplicationResponse_Result_Replication::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListHaReplicationResponse_Result_Replication::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListHaReplicationResponse_Result_Replication::id() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListHaReplicationResponse.Result.Replication.id)
  return _internal_id();
}
inline void ListHaReplicationResponse_Result_Replication::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void ListHaReplicationResponse_Result_Replication::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListHaReplicationResponse.Result.Replication.id)
}

// int32 sourceVolumeId = 2;
inline void ListHaReplicationResponse_Result_Replication::clear_sourcevolumeid() {
  sourcevolumeid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListHaReplicationResponse_Result_Replication::_internal_sourcevolumeid() const {
  return sourcevolumeid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListHaReplicationResponse_Result_Replication::sourcevolumeid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListHaReplicationResponse.Result.Replication.sourceVolumeId)
  return _internal_sourcevolumeid();
}
inline void ListHaReplicationResponse_Result_Replication::_internal_set_sourcevolumeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sourcevolumeid_ = value;
}
inline void ListHaReplicationResponse_Result_Replication::set_sourcevolumeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sourcevolumeid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListHaReplicationResponse.Result.Replication.sourceVolumeId)
}

// int32 sourceWalVolume_id = 3;
inline void ListHaReplicationResponse_Result_Replication::clear_sourcewalvolume_id() {
  sourcewalvolume_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListHaReplicationResponse_Result_Replication::_internal_sourcewalvolume_id() const {
  return sourcewalvolume_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListHaReplicationResponse_Result_Replication::sourcewalvolume_id() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListHaReplicationResponse.Result.Replication.sourceWalVolume_id)
  return _internal_sourcewalvolume_id();
}
inline void ListHaReplicationResponse_Result_Replication::_internal_set_sourcewalvolume_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sourcewalvolume_id_ = value;
}
inline void ListHaReplicationResponse_Result_Replication::set_sourcewalvolume_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sourcewalvolume_id(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListHaReplicationResponse.Result.Replication.sourceWalVolume_id)
}

// int32 destinationVolumeId = 4;
inline void ListHaReplicationResponse_Result_Replication::clear_destinationvolumeid() {
  destinationvolumeid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListHaReplicationResponse_Result_Replication::_internal_destinationvolumeid() const {
  return destinationvolumeid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListHaReplicationResponse_Result_Replication::destinationvolumeid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListHaReplicationResponse.Result.Replication.destinationVolumeId)
  return _internal_destinationvolumeid();
}
inline void ListHaReplicationResponse_Result_Replication::_internal_set_destinationvolumeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  destinationvolumeid_ = value;
}
inline void ListHaReplicationResponse_Result_Replication::set_destinationvolumeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_destinationvolumeid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListHaReplicationResponse.Result.Replication.destinationVolumeId)
}

// int32 destinationWalVolumeId = 5;
inline void ListHaReplicationResponse_Result_Replication::clear_destinationwalvolumeid() {
  destinationwalvolumeid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListHaReplicationResponse_Result_Replication::_internal_destinationwalvolumeid() const {
  return destinationwalvolumeid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListHaReplicationResponse_Result_Replication::destinationwalvolumeid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListHaReplicationResponse.Result.Replication.destinationWalVolumeId)
  return _internal_destinationwalvolumeid();
}
inline void ListHaReplicationResponse_Result_Replication::_internal_set_destinationwalvolumeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  destinationwalvolumeid_ = value;
}
inline void ListHaReplicationResponse_Result_Replication::set_destinationwalvolumeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_destinationwalvolumeid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListHaReplicationResponse.Result.Replication.destinationWalVolumeId)
}

// -------------------------------------------------------------------

// ListHaReplicationResponse_Result

// .grpc_cli.Status status = 1;
inline bool ListHaReplicationResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool ListHaReplicationResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void ListHaReplicationResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& ListHaReplicationResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& ListHaReplicationResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListHaReplicationResponse.Result.status)
  return _internal_status();
}
inline void ListHaReplicationResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ListHaReplicationResponse.Result.status)
}
inline ::grpc_cli::Status* ListHaReplicationResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* ListHaReplicationResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListHaReplicationResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* ListHaReplicationResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* ListHaReplicationResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListHaReplicationResponse.Result.status)
  return _internal_mutable_status();
}
inline void ListHaReplicationResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListHaReplicationResponse.Result.status)
}

// repeated .grpc_cli.ListHaReplicationResponse.Result.Replication data = 2;
inline int ListHaReplicationResponse_Result::_internal_data_size() const {
  return data_.size();
}
inline int ListHaReplicationResponse_Result::data_size() const {
  return _internal_data_size();
}
inline void ListHaReplicationResponse_Result::clear_data() {
  data_.Clear();
}
inline ::grpc_cli::ListHaReplicationResponse_Result_Replication* ListHaReplicationResponse_Result::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListHaReplicationResponse.Result.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::ListHaReplicationResponse_Result_Replication >*
ListHaReplicationResponse_Result::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:grpc_cli.ListHaReplicationResponse.Result.data)
  return &data_;
}
inline const ::grpc_cli::ListHaReplicationResponse_Result_Replication& ListHaReplicationResponse_Result::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::grpc_cli::ListHaReplicationResponse_Result_Replication& ListHaReplicationResponse_Result::data(int index) const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListHaReplicationResponse.Result.data)
  return _internal_data(index);
}
inline ::grpc_cli::ListHaReplicationResponse_Result_Replication* ListHaReplicationResponse_Result::_internal_add_data() {
  return data_.Add();
}
inline ::grpc_cli::ListHaReplicationResponse_Result_Replication* ListHaReplicationResponse_Result::add_data() {
  // @@protoc_insertion_point(field_add:grpc_cli.ListHaReplicationResponse.Result.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::ListHaReplicationResponse_Result_Replication >&
ListHaReplicationResponse_Result::data() const {
  // @@protoc_insertion_point(field_list:grpc_cli.ListHaReplicationResponse.Result.data)
  return data_;
}

// -------------------------------------------------------------------

// ListHaReplicationResponse

// string command = 1;
inline void ListHaReplicationResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& ListHaReplicationResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListHaReplicationResponse.command)
  return _internal_command();
}
inline void ListHaReplicationResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListHaReplicationResponse.command)
}
inline std::string* ListHaReplicationResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListHaReplicationResponse.command)
  return _internal_mutable_command();
}
inline const std::string& ListHaReplicationResponse::_internal_command() const {
  return command_.Get();
}
inline void ListHaReplicationResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListHaReplicationResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListHaReplicationResponse.command)
}
inline void ListHaReplicationResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListHaReplicationResponse.command)
}
inline void ListHaReplicationResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListHaReplicationResponse.command)
}
inline std::string* ListHaReplicationResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListHaReplicationResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListHaReplicationResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListHaReplicationResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListHaReplicationResponse.command)
}

// string rid = 2;
inline void ListHaReplicationResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& ListHaReplicationResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListHaReplicationResponse.rid)
  return _internal_rid();
}
inline void ListHaReplicationResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListHaReplicationResponse.rid)
}
inline std::string* ListHaReplicationResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListHaReplicationResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& ListHaReplicationResponse::_internal_rid() const {
  return rid_.Get();
}
inline void ListHaReplicationResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListHaReplicationResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListHaReplicationResponse.rid)
}
inline void ListHaReplicationResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListHaReplicationResponse.rid)
}
inline void ListHaReplicationResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListHaReplicationResponse.rid)
}
inline std::string* ListHaReplicationResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListHaReplicationResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListHaReplicationResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListHaReplicationResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListHaReplicationResponse.rid)
}

// .grpc_cli.ListHaReplicationResponse.Result result = 3;
inline bool ListHaReplicationResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool ListHaReplicationResponse::has_result() const {
  return _internal_has_result();
}
inline void ListHaReplicationResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::ListHaReplicationResponse_Result& ListHaReplicationResponse::_internal_result() const {
  const ::grpc_cli::ListHaReplicationResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::ListHaReplicationResponse_Result&>(
      ::grpc_cli::_ListHaReplicationResponse_Result_default_instance_);
}
inline const ::grpc_cli::ListHaReplicationResponse_Result& ListHaReplicationResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListHaReplicationResponse.result)
  return _internal_result();
}
inline void ListHaReplicationResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::ListHaReplicationResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ListHaReplicationResponse.result)
}
inline ::grpc_cli::ListHaReplicationResponse_Result* ListHaReplicationResponse::release_result() {
  
  ::grpc_cli::ListHaReplicationResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::ListHaReplicationResponse_Result* ListHaReplicationResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListHaReplicationResponse.result)
  
  ::grpc_cli::ListHaReplicationResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::ListHaReplicationResponse_Result* ListHaReplicationResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::ListHaReplicationResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::ListHaReplicationResponse_Result* ListHaReplicationResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListHaReplicationResponse.result)
  return _internal_mutable_result();
}
inline void ListHaReplicationResponse::set_allocated_result(::grpc_cli::ListHaReplicationResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListHaReplicationResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool ListHaReplicationResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool ListHaReplicationResponse::has_info() const {
  return _internal_has_info();
}
inline void ListHaReplicationResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& ListHaReplicationResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& ListHaReplicationResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListHaReplicationResponse.info)
  return _internal_info();
}
inline void ListHaReplicationResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ListHaReplicationResponse.info)
}
inline ::grpc_cli::PosInfo* ListHaReplicationResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* ListHaReplicationResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListHaReplicationResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* ListHaReplicationResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* ListHaReplicationResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListHaReplicationResponse.info)
  return _internal_mutable_info();
}
inline void ListHaReplicationResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListHaReplicationResponse.info)
}

// -------------------------------------------------------------------

// StartHaReplicationRequest_Param

// string primaryNodeName = 1;
inline void StartHaReplicationRequest_Param::clear_primarynodename() {
  primarynodename_.ClearToEmpty();
}
inline const std::string& StartHaReplicationRequest_Param::primarynodename() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StartHaReplicationRequest.Param.primaryNodeName)
  return _internal_primarynodename();
}
inline void StartHaReplicationRequest_Param::set_primarynodename(const std::string& value) {
  _internal_set_primarynodename(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StartHaReplicationRequest.Param.primaryNodeName)
}
inline std::string* StartHaReplicationRequest_Param::mutable_primarynodename() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StartHaReplicationRequest.Param.primaryNodeName)
  return _internal_mutable_primarynodename();
}
inline const std::string& StartHaReplicationRequest_Param::_internal_primarynodename() const {
  return primarynodename_.Get();
}
inline void StartHaReplicationRequest_Param::_internal_set_primarynodename(const std::string& value) {
  
  primarynodename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StartHaReplicationRequest_Param::set_primarynodename(std::string&& value) {
  
  primarynodename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StartHaReplicationRequest.Param.primaryNodeName)
}
inline void StartHaReplicationRequest_Param::set_primarynodename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  primarynodename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StartHaReplicationRequest.Param.primaryNodeName)
}
inline void StartHaReplicationRequest_Param::set_primarynodename(const char* value,
    size_t size) {
  
  primarynodename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StartHaReplicationRequest.Param.primaryNodeName)
}
inline std::string* StartHaReplicationRequest_Param::_internal_mutable_primarynodename() {
  
  return primarynodename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StartHaReplicationRequest_Param::release_primarynodename() {
  // @@protoc_insertion_point(field_release:grpc_cli.StartHaReplicationRequest.Param.primaryNodeName)
  return primarynodename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartHaReplicationRequest_Param::set_allocated_primarynodename(std::string* primarynodename) {
  if (primarynodename != nullptr) {
    
  } else {
    
  }
  primarynodename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), primarynodename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StartHaReplicationRequest.Param.primaryNodeName)
}

// string primaryArrayName = 2;
inline void StartHaReplicationRequest_Param::clear_primaryarrayname() {
  primaryarrayname_.ClearToEmpty();
}
inline const std::string& StartHaReplicationRequest_Param::primaryarrayname() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StartHaReplicationRequest.Param.primaryArrayName)
  return _internal_primaryarrayname();
}
inline void StartHaReplicationRequest_Param::set_primaryarrayname(const std::string& value) {
  _internal_set_primaryarrayname(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StartHaReplicationRequest.Param.primaryArrayName)
}
inline std::string* StartHaReplicationRequest_Param::mutable_primaryarrayname() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StartHaReplicationRequest.Param.primaryArrayName)
  return _internal_mutable_primaryarrayname();
}
inline const std::string& StartHaReplicationRequest_Param::_internal_primaryarrayname() const {
  return primaryarrayname_.Get();
}
inline void StartHaReplicationRequest_Param::_internal_set_primaryarrayname(const std::string& value) {
  
  primaryarrayname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StartHaReplicationRequest_Param::set_primaryarrayname(std::string&& value) {
  
  primaryarrayname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StartHaReplicationRequest.Param.primaryArrayName)
}
inline void StartHaReplicationRequest_Param::set_primaryarrayname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  primaryarrayname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StartHaReplicationRequest.Param.primaryArrayName)
}
inline void StartHaReplicationRequest_Param::set_primaryarrayname(const char* value,
    size_t size) {
  
  primaryarrayname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StartHaReplicationRequest.Param.primaryArrayName)
}
inline std::string* StartHaReplicationRequest_Param::_internal_mutable_primaryarrayname() {
  
  return primaryarrayname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StartHaReplicationRequest_Param::release_primaryarrayname() {
  // @@protoc_insertion_point(field_release:grpc_cli.StartHaReplicationRequest.Param.primaryArrayName)
  return primaryarrayname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartHaReplicationRequest_Param::set_allocated_primaryarrayname(std::string* primaryarrayname) {
  if (primaryarrayname != nullptr) {
    
  } else {
    
  }
  primaryarrayname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), primaryarrayname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StartHaReplicationRequest.Param.primaryArrayName)
}

// string primaryVolumeName = 3;
inline void StartHaReplicationRequest_Param::clear_primaryvolumename() {
  primaryvolumename_.ClearToEmpty();
}
inline const std::string& StartHaReplicationRequest_Param::primaryvolumename() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StartHaReplicationRequest.Param.primaryVolumeName)
  return _internal_primaryvolumename();
}
inline void StartHaReplicationRequest_Param::set_primaryvolumename(const std::string& value) {
  _internal_set_primaryvolumename(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StartHaReplicationRequest.Param.primaryVolumeName)
}
inline std::string* StartHaReplicationRequest_Param::mutable_primaryvolumename() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StartHaReplicationRequest.Param.primaryVolumeName)
  return _internal_mutable_primaryvolumename();
}
inline const std::string& StartHaReplicationRequest_Param::_internal_primaryvolumename() const {
  return primaryvolumename_.Get();
}
inline void StartHaReplicationRequest_Param::_internal_set_primaryvolumename(const std::string& value) {
  
  primaryvolumename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StartHaReplicationRequest_Param::set_primaryvolumename(std::string&& value) {
  
  primaryvolumename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StartHaReplicationRequest.Param.primaryVolumeName)
}
inline void StartHaReplicationRequest_Param::set_primaryvolumename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  primaryvolumename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StartHaReplicationRequest.Param.primaryVolumeName)
}
inline void StartHaReplicationRequest_Param::set_primaryvolumename(const char* value,
    size_t size) {
  
  primaryvolumename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StartHaReplicationRequest.Param.primaryVolumeName)
}
inline std::string* StartHaReplicationRequest_Param::_internal_mutable_primaryvolumename() {
  
  return primaryvolumename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StartHaReplicationRequest_Param::release_primaryvolumename() {
  // @@protoc_insertion_point(field_release:grpc_cli.StartHaReplicationRequest.Param.primaryVolumeName)
  return primaryvolumename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartHaReplicationRequest_Param::set_allocated_primaryvolumename(std::string* primaryvolumename) {
  if (primaryvolumename != nullptr) {
    
  } else {
    
  }
  primaryvolumename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), primaryvolumename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StartHaReplicationRequest.Param.primaryVolumeName)
}

// string primaryWalVolumeName = 4;
inline void StartHaReplicationRequest_Param::clear_primarywalvolumename() {
  primarywalvolumename_.ClearToEmpty();
}
inline const std::string& StartHaReplicationRequest_Param::primarywalvolumename() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StartHaReplicationRequest.Param.primaryWalVolumeName)
  return _internal_primarywalvolumename();
}
inline void StartHaReplicationRequest_Param::set_primarywalvolumename(const std::string& value) {
  _internal_set_primarywalvolumename(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StartHaReplicationRequest.Param.primaryWalVolumeName)
}
inline std::string* StartHaReplicationRequest_Param::mutable_primarywalvolumename() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StartHaReplicationRequest.Param.primaryWalVolumeName)
  return _internal_mutable_primarywalvolumename();
}
inline const std::string& StartHaReplicationRequest_Param::_internal_primarywalvolumename() const {
  return primarywalvolumename_.Get();
}
inline void StartHaReplicationRequest_Param::_internal_set_primarywalvolumename(const std::string& value) {
  
  primarywalvolumename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StartHaReplicationRequest_Param::set_primarywalvolumename(std::string&& value) {
  
  primarywalvolumename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StartHaReplicationRequest.Param.primaryWalVolumeName)
}
inline void StartHaReplicationRequest_Param::set_primarywalvolumename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  primarywalvolumename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StartHaReplicationRequest.Param.primaryWalVolumeName)
}
inline void StartHaReplicationRequest_Param::set_primarywalvolumename(const char* value,
    size_t size) {
  
  primarywalvolumename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StartHaReplicationRequest.Param.primaryWalVolumeName)
}
inline std::string* StartHaReplicationRequest_Param::_internal_mutable_primarywalvolumename() {
  
  return primarywalvolumename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StartHaReplicationRequest_Param::release_primarywalvolumename() {
  // @@protoc_insertion_point(field_release:grpc_cli.StartHaReplicationRequest.Param.primaryWalVolumeName)
  return primarywalvolumename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartHaReplicationRequest_Param::set_allocated_primarywalvolumename(std::string* primarywalvolumename) {
  if (primarywalvolumename != nullptr) {
    
  } else {
    
  }
  primarywalvolumename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), primarywalvolumename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StartHaReplicationRequest.Param.primaryWalVolumeName)
}

// string secondaryNodeName = 5;
inline void StartHaReplicationRequest_Param::clear_secondarynodename() {
  secondarynodename_.ClearToEmpty();
}
inline const std::string& StartHaReplicationRequest_Param::secondarynodename() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StartHaReplicationRequest.Param.secondaryNodeName)
  return _internal_secondarynodename();
}
inline void StartHaReplicationRequest_Param::set_secondarynodename(const std::string& value) {
  _internal_set_secondarynodename(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StartHaReplicationRequest.Param.secondaryNodeName)
}
inline std::string* StartHaReplicationRequest_Param::mutable_secondarynodename() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StartHaReplicationRequest.Param.secondaryNodeName)
  return _internal_mutable_secondarynodename();
}
inline const std::string& StartHaReplicationRequest_Param::_internal_secondarynodename() const {
  return secondarynodename_.Get();
}
inline void StartHaReplicationRequest_Param::_internal_set_secondarynodename(const std::string& value) {
  
  secondarynodename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StartHaReplicationRequest_Param::set_secondarynodename(std::string&& value) {
  
  secondarynodename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StartHaReplicationRequest.Param.secondaryNodeName)
}
inline void StartHaReplicationRequest_Param::set_secondarynodename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  secondarynodename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StartHaReplicationRequest.Param.secondaryNodeName)
}
inline void StartHaReplicationRequest_Param::set_secondarynodename(const char* value,
    size_t size) {
  
  secondarynodename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StartHaReplicationRequest.Param.secondaryNodeName)
}
inline std::string* StartHaReplicationRequest_Param::_internal_mutable_secondarynodename() {
  
  return secondarynodename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StartHaReplicationRequest_Param::release_secondarynodename() {
  // @@protoc_insertion_point(field_release:grpc_cli.StartHaReplicationRequest.Param.secondaryNodeName)
  return secondarynodename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartHaReplicationRequest_Param::set_allocated_secondarynodename(std::string* secondarynodename) {
  if (secondarynodename != nullptr) {
    
  } else {
    
  }
  secondarynodename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secondarynodename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StartHaReplicationRequest.Param.secondaryNodeName)
}

// string secondaryArrayName = 6;
inline void StartHaReplicationRequest_Param::clear_secondaryarrayname() {
  secondaryarrayname_.ClearToEmpty();
}
inline const std::string& StartHaReplicationRequest_Param::secondaryarrayname() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StartHaReplicationRequest.Param.secondaryArrayName)
  return _internal_secondaryarrayname();
}
inline void StartHaReplicationRequest_Param::set_secondaryarrayname(const std::string& value) {
  _internal_set_secondaryarrayname(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StartHaReplicationRequest.Param.secondaryArrayName)
}
inline std::string* StartHaReplicationRequest_Param::mutable_secondaryarrayname() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StartHaReplicationRequest.Param.secondaryArrayName)
  return _internal_mutable_secondaryarrayname();
}
inline const std::string& StartHaReplicationRequest_Param::_internal_secondaryarrayname() const {
  return secondaryarrayname_.Get();
}
inline void StartHaReplicationRequest_Param::_internal_set_secondaryarrayname(const std::string& value) {
  
  secondaryarrayname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StartHaReplicationRequest_Param::set_secondaryarrayname(std::string&& value) {
  
  secondaryarrayname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StartHaReplicationRequest.Param.secondaryArrayName)
}
inline void StartHaReplicationRequest_Param::set_secondaryarrayname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  secondaryarrayname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StartHaReplicationRequest.Param.secondaryArrayName)
}
inline void StartHaReplicationRequest_Param::set_secondaryarrayname(const char* value,
    size_t size) {
  
  secondaryarrayname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StartHaReplicationRequest.Param.secondaryArrayName)
}
inline std::string* StartHaReplicationRequest_Param::_internal_mutable_secondaryarrayname() {
  
  return secondaryarrayname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StartHaReplicationRequest_Param::release_secondaryarrayname() {
  // @@protoc_insertion_point(field_release:grpc_cli.StartHaReplicationRequest.Param.secondaryArrayName)
  return secondaryarrayname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartHaReplicationRequest_Param::set_allocated_secondaryarrayname(std::string* secondaryarrayname) {
  if (secondaryarrayname != nullptr) {
    
  } else {
    
  }
  secondaryarrayname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secondaryarrayname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StartHaReplicationRequest.Param.secondaryArrayName)
}

// string secondaryVolumeName = 7;
inline void StartHaReplicationRequest_Param::clear_secondaryvolumename() {
  secondaryvolumename_.ClearToEmpty();
}
inline const std::string& StartHaReplicationRequest_Param::secondaryvolumename() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StartHaReplicationRequest.Param.secondaryVolumeName)
  return _internal_secondaryvolumename();
}
inline void StartHaReplicationRequest_Param::set_secondaryvolumename(const std::string& value) {
  _internal_set_secondaryvolumename(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StartHaReplicationRequest.Param.secondaryVolumeName)
}
inline std::string* StartHaReplicationRequest_Param::mutable_secondaryvolumename() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StartHaReplicationRequest.Param.secondaryVolumeName)
  return _internal_mutable_secondaryvolumename();
}
inline const std::string& StartHaReplicationRequest_Param::_internal_secondaryvolumename() const {
  return secondaryvolumename_.Get();
}
inline void StartHaReplicationRequest_Param::_internal_set_secondaryvolumename(const std::string& value) {
  
  secondaryvolumename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StartHaReplicationRequest_Param::set_secondaryvolumename(std::string&& value) {
  
  secondaryvolumename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StartHaReplicationRequest.Param.secondaryVolumeName)
}
inline void StartHaReplicationRequest_Param::set_secondaryvolumename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  secondaryvolumename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StartHaReplicationRequest.Param.secondaryVolumeName)
}
inline void StartHaReplicationRequest_Param::set_secondaryvolumename(const char* value,
    size_t size) {
  
  secondaryvolumename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StartHaReplicationRequest.Param.secondaryVolumeName)
}
inline std::string* StartHaReplicationRequest_Param::_internal_mutable_secondaryvolumename() {
  
  return secondaryvolumename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StartHaReplicationRequest_Param::release_secondaryvolumename() {
  // @@protoc_insertion_point(field_release:grpc_cli.StartHaReplicationRequest.Param.secondaryVolumeName)
  return secondaryvolumename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartHaReplicationRequest_Param::set_allocated_secondaryvolumename(std::string* secondaryvolumename) {
  if (secondaryvolumename != nullptr) {
    
  } else {
    
  }
  secondaryvolumename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secondaryvolumename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StartHaReplicationRequest.Param.secondaryVolumeName)
}

// string secondaryWalVolumeName = 8;
inline void StartHaReplicationRequest_Param::clear_secondarywalvolumename() {
  secondarywalvolumename_.ClearToEmpty();
}
inline const std::string& StartHaReplicationRequest_Param::secondarywalvolumename() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StartHaReplicationRequest.Param.secondaryWalVolumeName)
  return _internal_secondarywalvolumename();
}
inline void StartHaReplicationRequest_Param::set_secondarywalvolumename(const std::string& value) {
  _internal_set_secondarywalvolumename(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StartHaReplicationRequest.Param.secondaryWalVolumeName)
}
inline std::string* StartHaReplicationRequest_Param::mutable_secondarywalvolumename() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StartHaReplicationRequest.Param.secondaryWalVolumeName)
  return _internal_mutable_secondarywalvolumename();
}
inline const std::string& StartHaReplicationRequest_Param::_internal_secondarywalvolumename() const {
  return secondarywalvolumename_.Get();
}
inline void StartHaReplicationRequest_Param::_internal_set_secondarywalvolumename(const std::string& value) {
  
  secondarywalvolumename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StartHaReplicationRequest_Param::set_secondarywalvolumename(std::string&& value) {
  
  secondarywalvolumename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StartHaReplicationRequest.Param.secondaryWalVolumeName)
}
inline void StartHaReplicationRequest_Param::set_secondarywalvolumename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  secondarywalvolumename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StartHaReplicationRequest.Param.secondaryWalVolumeName)
}
inline void StartHaReplicationRequest_Param::set_secondarywalvolumename(const char* value,
    size_t size) {
  
  secondarywalvolumename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StartHaReplicationRequest.Param.secondaryWalVolumeName)
}
inline std::string* StartHaReplicationRequest_Param::_internal_mutable_secondarywalvolumename() {
  
  return secondarywalvolumename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StartHaReplicationRequest_Param::release_secondarywalvolumename() {
  // @@protoc_insertion_point(field_release:grpc_cli.StartHaReplicationRequest.Param.secondaryWalVolumeName)
  return secondarywalvolumename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartHaReplicationRequest_Param::set_allocated_secondarywalvolumename(std::string* secondarywalvolumename) {
  if (secondarywalvolumename != nullptr) {
    
  } else {
    
  }
  secondarywalvolumename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secondarywalvolumename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StartHaReplicationRequest.Param.secondaryWalVolumeName)
}

// string stuats = 9;
inline void StartHaReplicationRequest_Param::clear_stuats() {
  stuats_.ClearToEmpty();
}
inline const std::string& StartHaReplicationRequest_Param::stuats() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StartHaReplicationRequest.Param.stuats)
  return _internal_stuats();
}
inline void StartHaReplicationRequest_Param::set_stuats(const std::string& value) {
  _internal_set_stuats(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StartHaReplicationRequest.Param.stuats)
}
inline std::string* StartHaReplicationRequest_Param::mutable_stuats() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StartHaReplicationRequest.Param.stuats)
  return _internal_mutable_stuats();
}
inline const std::string& StartHaReplicationRequest_Param::_internal_stuats() const {
  return stuats_.Get();
}
inline void StartHaReplicationRequest_Param::_internal_set_stuats(const std::string& value) {
  
  stuats_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StartHaReplicationRequest_Param::set_stuats(std::string&& value) {
  
  stuats_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StartHaReplicationRequest.Param.stuats)
}
inline void StartHaReplicationRequest_Param::set_stuats(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stuats_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StartHaReplicationRequest.Param.stuats)
}
inline void StartHaReplicationRequest_Param::set_stuats(const char* value,
    size_t size) {
  
  stuats_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StartHaReplicationRequest.Param.stuats)
}
inline std::string* StartHaReplicationRequest_Param::_internal_mutable_stuats() {
  
  return stuats_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StartHaReplicationRequest_Param::release_stuats() {
  // @@protoc_insertion_point(field_release:grpc_cli.StartHaReplicationRequest.Param.stuats)
  return stuats_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartHaReplicationRequest_Param::set_allocated_stuats(std::string* stuats) {
  if (stuats != nullptr) {
    
  } else {
    
  }
  stuats_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stuats,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StartHaReplicationRequest.Param.stuats)
}

// string timestamp = 10;
inline void StartHaReplicationRequest_Param::clear_timestamp() {
  timestamp_.ClearToEmpty();
}
inline const std::string& StartHaReplicationRequest_Param::timestamp() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StartHaReplicationRequest.Param.timestamp)
  return _internal_timestamp();
}
inline void StartHaReplicationRequest_Param::set_timestamp(const std::string& value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StartHaReplicationRequest.Param.timestamp)
}
inline std::string* StartHaReplicationRequest_Param::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StartHaReplicationRequest.Param.timestamp)
  return _internal_mutable_timestamp();
}
inline const std::string& StartHaReplicationRequest_Param::_internal_timestamp() const {
  return timestamp_.Get();
}
inline void StartHaReplicationRequest_Param::_internal_set_timestamp(const std::string& value) {
  
  timestamp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StartHaReplicationRequest_Param::set_timestamp(std::string&& value) {
  
  timestamp_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StartHaReplicationRequest.Param.timestamp)
}
inline void StartHaReplicationRequest_Param::set_timestamp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  timestamp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StartHaReplicationRequest.Param.timestamp)
}
inline void StartHaReplicationRequest_Param::set_timestamp(const char* value,
    size_t size) {
  
  timestamp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StartHaReplicationRequest.Param.timestamp)
}
inline std::string* StartHaReplicationRequest_Param::_internal_mutable_timestamp() {
  
  return timestamp_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StartHaReplicationRequest_Param::release_timestamp() {
  // @@protoc_insertion_point(field_release:grpc_cli.StartHaReplicationRequest.Param.timestamp)
  return timestamp_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartHaReplicationRequest_Param::set_allocated_timestamp(std::string* timestamp) {
  if (timestamp != nullptr) {
    
  } else {
    
  }
  timestamp_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timestamp,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StartHaReplicationRequest.Param.timestamp)
}

// -------------------------------------------------------------------

// StartHaReplicationRequest

// string command = 1;
inline void StartHaReplicationRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& StartHaReplicationRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StartHaReplicationRequest.command)
  return _internal_command();
}
inline void StartHaReplicationRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StartHaReplicationRequest.command)
}
inline std::string* StartHaReplicationRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StartHaReplicationRequest.command)
  return _internal_mutable_command();
}
inline const std::string& StartHaReplicationRequest::_internal_command() const {
  return command_.Get();
}
inline void StartHaReplicationRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StartHaReplicationRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StartHaReplicationRequest.command)
}
inline void StartHaReplicationRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StartHaReplicationRequest.command)
}
inline void StartHaReplicationRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StartHaReplicationRequest.command)
}
inline std::string* StartHaReplicationRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StartHaReplicationRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.StartHaReplicationRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartHaReplicationRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StartHaReplicationRequest.command)
}

// string rid = 2;
inline void StartHaReplicationRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& StartHaReplicationRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StartHaReplicationRequest.rid)
  return _internal_rid();
}
inline void StartHaReplicationRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StartHaReplicationRequest.rid)
}
inline std::string* StartHaReplicationRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StartHaReplicationRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& StartHaReplicationRequest::_internal_rid() const {
  return rid_.Get();
}
inline void StartHaReplicationRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StartHaReplicationRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StartHaReplicationRequest.rid)
}
inline void StartHaReplicationRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StartHaReplicationRequest.rid)
}
inline void StartHaReplicationRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StartHaReplicationRequest.rid)
}
inline std::string* StartHaReplicationRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StartHaReplicationRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.StartHaReplicationRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartHaReplicationRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StartHaReplicationRequest.rid)
}

// string requestor = 3;
inline void StartHaReplicationRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& StartHaReplicationRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StartHaReplicationRequest.requestor)
  return _internal_requestor();
}
inline void StartHaReplicationRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StartHaReplicationRequest.requestor)
}
inline std::string* StartHaReplicationRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StartHaReplicationRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& StartHaReplicationRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void StartHaReplicationRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StartHaReplicationRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StartHaReplicationRequest.requestor)
}
inline void StartHaReplicationRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StartHaReplicationRequest.requestor)
}
inline void StartHaReplicationRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StartHaReplicationRequest.requestor)
}
inline std::string* StartHaReplicationRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StartHaReplicationRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.StartHaReplicationRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartHaReplicationRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StartHaReplicationRequest.requestor)
}

// .grpc_cli.StartHaReplicationRequest.Param param = 4;
inline bool StartHaReplicationRequest::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool StartHaReplicationRequest::has_param() const {
  return _internal_has_param();
}
inline void StartHaReplicationRequest::clear_param() {
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::grpc_cli::StartHaReplicationRequest_Param& StartHaReplicationRequest::_internal_param() const {
  const ::grpc_cli::StartHaReplicationRequest_Param* p = param_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::StartHaReplicationRequest_Param&>(
      ::grpc_cli::_StartHaReplicationRequest_Param_default_instance_);
}
inline const ::grpc_cli::StartHaReplicationRequest_Param& StartHaReplicationRequest::param() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StartHaReplicationRequest.param)
  return _internal_param();
}
inline void StartHaReplicationRequest::unsafe_arena_set_allocated_param(
    ::grpc_cli::StartHaReplicationRequest_Param* param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.StartHaReplicationRequest.param)
}
inline ::grpc_cli::StartHaReplicationRequest_Param* StartHaReplicationRequest::release_param() {
  
  ::grpc_cli::StartHaReplicationRequest_Param* temp = param_;
  param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::StartHaReplicationRequest_Param* StartHaReplicationRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:grpc_cli.StartHaReplicationRequest.param)
  
  ::grpc_cli::StartHaReplicationRequest_Param* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::grpc_cli::StartHaReplicationRequest_Param* StartHaReplicationRequest::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::StartHaReplicationRequest_Param>(GetArena());
    param_ = p;
  }
  return param_;
}
inline ::grpc_cli::StartHaReplicationRequest_Param* StartHaReplicationRequest::mutable_param() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StartHaReplicationRequest.param)
  return _internal_mutable_param();
}
inline void StartHaReplicationRequest::set_allocated_param(::grpc_cli::StartHaReplicationRequest_Param* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StartHaReplicationRequest.param)
}

// -------------------------------------------------------------------

// StartHaReplicationResponse_Result

// .grpc_cli.Status status = 1;
inline bool StartHaReplicationResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool StartHaReplicationResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void StartHaReplicationResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& StartHaReplicationResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& StartHaReplicationResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StartHaReplicationResponse.Result.status)
  return _internal_status();
}
inline void StartHaReplicationResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.StartHaReplicationResponse.Result.status)
}
inline ::grpc_cli::Status* StartHaReplicationResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* StartHaReplicationResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.StartHaReplicationResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* StartHaReplicationResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* StartHaReplicationResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StartHaReplicationResponse.Result.status)
  return _internal_mutable_status();
}
inline void StartHaReplicationResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StartHaReplicationResponse.Result.status)
}

// -------------------------------------------------------------------

// StartHaReplicationResponse

// string command = 1;
inline void StartHaReplicationResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& StartHaReplicationResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StartHaReplicationResponse.command)
  return _internal_command();
}
inline void StartHaReplicationResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StartHaReplicationResponse.command)
}
inline std::string* StartHaReplicationResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StartHaReplicationResponse.command)
  return _internal_mutable_command();
}
inline const std::string& StartHaReplicationResponse::_internal_command() const {
  return command_.Get();
}
inline void StartHaReplicationResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StartHaReplicationResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StartHaReplicationResponse.command)
}
inline void StartHaReplicationResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StartHaReplicationResponse.command)
}
inline void StartHaReplicationResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StartHaReplicationResponse.command)
}
inline std::string* StartHaReplicationResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StartHaReplicationResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.StartHaReplicationResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartHaReplicationResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StartHaReplicationResponse.command)
}

// string rid = 2;
inline void StartHaReplicationResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& StartHaReplicationResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StartHaReplicationResponse.rid)
  return _internal_rid();
}
inline void StartHaReplicationResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StartHaReplicationResponse.rid)
}
inline std::string* StartHaReplicationResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StartHaReplicationResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& StartHaReplicationResponse::_internal_rid() const {
  return rid_.Get();
}
inline void StartHaReplicationResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StartHaReplicationResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StartHaReplicationResponse.rid)
}
inline void StartHaReplicationResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StartHaReplicationResponse.rid)
}
inline void StartHaReplicationResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StartHaReplicationResponse.rid)
}
inline std::string* StartHaReplicationResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StartHaReplicationResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.StartHaReplicationResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartHaReplicationResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StartHaReplicationResponse.rid)
}

// .grpc_cli.StartHaReplicationResponse.Result result = 3;
inline bool StartHaReplicationResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool StartHaReplicationResponse::has_result() const {
  return _internal_has_result();
}
inline void StartHaReplicationResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::StartHaReplicationResponse_Result& StartHaReplicationResponse::_internal_result() const {
  const ::grpc_cli::StartHaReplicationResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::StartHaReplicationResponse_Result&>(
      ::grpc_cli::_StartHaReplicationResponse_Result_default_instance_);
}
inline const ::grpc_cli::StartHaReplicationResponse_Result& StartHaReplicationResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StartHaReplicationResponse.result)
  return _internal_result();
}
inline void StartHaReplicationResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::StartHaReplicationResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.StartHaReplicationResponse.result)
}
inline ::grpc_cli::StartHaReplicationResponse_Result* StartHaReplicationResponse::release_result() {
  
  ::grpc_cli::StartHaReplicationResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::StartHaReplicationResponse_Result* StartHaReplicationResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.StartHaReplicationResponse.result)
  
  ::grpc_cli::StartHaReplicationResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::StartHaReplicationResponse_Result* StartHaReplicationResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::StartHaReplicationResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::StartHaReplicationResponse_Result* StartHaReplicationResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StartHaReplicationResponse.result)
  return _internal_mutable_result();
}
inline void StartHaReplicationResponse::set_allocated_result(::grpc_cli::StartHaReplicationResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StartHaReplicationResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool StartHaReplicationResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool StartHaReplicationResponse::has_info() const {
  return _internal_has_info();
}
inline void StartHaReplicationResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& StartHaReplicationResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& StartHaReplicationResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StartHaReplicationResponse.info)
  return _internal_info();
}
inline void StartHaReplicationResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.StartHaReplicationResponse.info)
}
inline ::grpc_cli::PosInfo* StartHaReplicationResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* StartHaReplicationResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.StartHaReplicationResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* StartHaReplicationResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* StartHaReplicationResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StartHaReplicationResponse.info)
  return _internal_mutable_info();
}
inline void StartHaReplicationResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StartHaReplicationResponse.info)
}

// -------------------------------------------------------------------

// SetLogLevelRequest_Param

// string level = 1;
inline void SetLogLevelRequest_Param::clear_level() {
  level_.ClearToEmpty();
}
inline const std::string& SetLogLevelRequest_Param::level() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetLogLevelRequest.Param.level)
  return _internal_level();
}
inline void SetLogLevelRequest_Param::set_level(const std::string& value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SetLogLevelRequest.Param.level)
}
inline std::string* SetLogLevelRequest_Param::mutable_level() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetLogLevelRequest.Param.level)
  return _internal_mutable_level();
}
inline const std::string& SetLogLevelRequest_Param::_internal_level() const {
  return level_.Get();
}
inline void SetLogLevelRequest_Param::_internal_set_level(const std::string& value) {
  
  level_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetLogLevelRequest_Param::set_level(std::string&& value) {
  
  level_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SetLogLevelRequest.Param.level)
}
inline void SetLogLevelRequest_Param::set_level(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  level_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SetLogLevelRequest.Param.level)
}
inline void SetLogLevelRequest_Param::set_level(const char* value,
    size_t size) {
  
  level_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SetLogLevelRequest.Param.level)
}
inline std::string* SetLogLevelRequest_Param::_internal_mutable_level() {
  
  return level_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetLogLevelRequest_Param::release_level() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetLogLevelRequest.Param.level)
  return level_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetLogLevelRequest_Param::set_allocated_level(std::string* level) {
  if (level != nullptr) {
    
  } else {
    
  }
  level_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), level,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetLogLevelRequest.Param.level)
}

// -------------------------------------------------------------------

// SetLogLevelRequest

// string command = 1;
inline void SetLogLevelRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& SetLogLevelRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetLogLevelRequest.command)
  return _internal_command();
}
inline void SetLogLevelRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SetLogLevelRequest.command)
}
inline std::string* SetLogLevelRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetLogLevelRequest.command)
  return _internal_mutable_command();
}
inline const std::string& SetLogLevelRequest::_internal_command() const {
  return command_.Get();
}
inline void SetLogLevelRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetLogLevelRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SetLogLevelRequest.command)
}
inline void SetLogLevelRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SetLogLevelRequest.command)
}
inline void SetLogLevelRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SetLogLevelRequest.command)
}
inline std::string* SetLogLevelRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetLogLevelRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetLogLevelRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetLogLevelRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetLogLevelRequest.command)
}

// string rid = 2;
inline void SetLogLevelRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& SetLogLevelRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetLogLevelRequest.rid)
  return _internal_rid();
}
inline void SetLogLevelRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SetLogLevelRequest.rid)
}
inline std::string* SetLogLevelRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetLogLevelRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& SetLogLevelRequest::_internal_rid() const {
  return rid_.Get();
}
inline void SetLogLevelRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetLogLevelRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SetLogLevelRequest.rid)
}
inline void SetLogLevelRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SetLogLevelRequest.rid)
}
inline void SetLogLevelRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SetLogLevelRequest.rid)
}
inline std::string* SetLogLevelRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetLogLevelRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetLogLevelRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetLogLevelRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetLogLevelRequest.rid)
}

// string requestor = 3;
inline void SetLogLevelRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& SetLogLevelRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetLogLevelRequest.requestor)
  return _internal_requestor();
}
inline void SetLogLevelRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SetLogLevelRequest.requestor)
}
inline std::string* SetLogLevelRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetLogLevelRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& SetLogLevelRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void SetLogLevelRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetLogLevelRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SetLogLevelRequest.requestor)
}
inline void SetLogLevelRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SetLogLevelRequest.requestor)
}
inline void SetLogLevelRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SetLogLevelRequest.requestor)
}
inline std::string* SetLogLevelRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetLogLevelRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetLogLevelRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetLogLevelRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetLogLevelRequest.requestor)
}

// .grpc_cli.SetLogLevelRequest.Param param = 4;
inline bool SetLogLevelRequest::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool SetLogLevelRequest::has_param() const {
  return _internal_has_param();
}
inline void SetLogLevelRequest::clear_param() {
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::grpc_cli::SetLogLevelRequest_Param& SetLogLevelRequest::_internal_param() const {
  const ::grpc_cli::SetLogLevelRequest_Param* p = param_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::SetLogLevelRequest_Param&>(
      ::grpc_cli::_SetLogLevelRequest_Param_default_instance_);
}
inline const ::grpc_cli::SetLogLevelRequest_Param& SetLogLevelRequest::param() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetLogLevelRequest.param)
  return _internal_param();
}
inline void SetLogLevelRequest::unsafe_arena_set_allocated_param(
    ::grpc_cli::SetLogLevelRequest_Param* param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.SetLogLevelRequest.param)
}
inline ::grpc_cli::SetLogLevelRequest_Param* SetLogLevelRequest::release_param() {
  
  ::grpc_cli::SetLogLevelRequest_Param* temp = param_;
  param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::SetLogLevelRequest_Param* SetLogLevelRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetLogLevelRequest.param)
  
  ::grpc_cli::SetLogLevelRequest_Param* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::grpc_cli::SetLogLevelRequest_Param* SetLogLevelRequest::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::SetLogLevelRequest_Param>(GetArena());
    param_ = p;
  }
  return param_;
}
inline ::grpc_cli::SetLogLevelRequest_Param* SetLogLevelRequest::mutable_param() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetLogLevelRequest.param)
  return _internal_mutable_param();
}
inline void SetLogLevelRequest::set_allocated_param(::grpc_cli::SetLogLevelRequest_Param* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetLogLevelRequest.param)
}

// -------------------------------------------------------------------

// SetLogLevelResponse_Result

// .grpc_cli.Status status = 1;
inline bool SetLogLevelResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SetLogLevelResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void SetLogLevelResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& SetLogLevelResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& SetLogLevelResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetLogLevelResponse.Result.status)
  return _internal_status();
}
inline void SetLogLevelResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.SetLogLevelResponse.Result.status)
}
inline ::grpc_cli::Status* SetLogLevelResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* SetLogLevelResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetLogLevelResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* SetLogLevelResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* SetLogLevelResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetLogLevelResponse.Result.status)
  return _internal_mutable_status();
}
inline void SetLogLevelResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetLogLevelResponse.Result.status)
}

// -------------------------------------------------------------------

// SetLogLevelResponse

// string command = 1;
inline void SetLogLevelResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& SetLogLevelResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetLogLevelResponse.command)
  return _internal_command();
}
inline void SetLogLevelResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SetLogLevelResponse.command)
}
inline std::string* SetLogLevelResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetLogLevelResponse.command)
  return _internal_mutable_command();
}
inline const std::string& SetLogLevelResponse::_internal_command() const {
  return command_.Get();
}
inline void SetLogLevelResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetLogLevelResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SetLogLevelResponse.command)
}
inline void SetLogLevelResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SetLogLevelResponse.command)
}
inline void SetLogLevelResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SetLogLevelResponse.command)
}
inline std::string* SetLogLevelResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetLogLevelResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetLogLevelResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetLogLevelResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetLogLevelResponse.command)
}

// string rid = 2;
inline void SetLogLevelResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& SetLogLevelResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetLogLevelResponse.rid)
  return _internal_rid();
}
inline void SetLogLevelResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SetLogLevelResponse.rid)
}
inline std::string* SetLogLevelResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetLogLevelResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& SetLogLevelResponse::_internal_rid() const {
  return rid_.Get();
}
inline void SetLogLevelResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetLogLevelResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SetLogLevelResponse.rid)
}
inline void SetLogLevelResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SetLogLevelResponse.rid)
}
inline void SetLogLevelResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SetLogLevelResponse.rid)
}
inline std::string* SetLogLevelResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetLogLevelResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetLogLevelResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetLogLevelResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetLogLevelResponse.rid)
}

// .grpc_cli.SetLogLevelResponse.Result result = 3;
inline bool SetLogLevelResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool SetLogLevelResponse::has_result() const {
  return _internal_has_result();
}
inline void SetLogLevelResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::SetLogLevelResponse_Result& SetLogLevelResponse::_internal_result() const {
  const ::grpc_cli::SetLogLevelResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::SetLogLevelResponse_Result&>(
      ::grpc_cli::_SetLogLevelResponse_Result_default_instance_);
}
inline const ::grpc_cli::SetLogLevelResponse_Result& SetLogLevelResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetLogLevelResponse.result)
  return _internal_result();
}
inline void SetLogLevelResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::SetLogLevelResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.SetLogLevelResponse.result)
}
inline ::grpc_cli::SetLogLevelResponse_Result* SetLogLevelResponse::release_result() {
  
  ::grpc_cli::SetLogLevelResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::SetLogLevelResponse_Result* SetLogLevelResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetLogLevelResponse.result)
  
  ::grpc_cli::SetLogLevelResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::SetLogLevelResponse_Result* SetLogLevelResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::SetLogLevelResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::SetLogLevelResponse_Result* SetLogLevelResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetLogLevelResponse.result)
  return _internal_mutable_result();
}
inline void SetLogLevelResponse::set_allocated_result(::grpc_cli::SetLogLevelResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetLogLevelResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool SetLogLevelResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool SetLogLevelResponse::has_info() const {
  return _internal_has_info();
}
inline void SetLogLevelResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& SetLogLevelResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& SetLogLevelResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetLogLevelResponse.info)
  return _internal_info();
}
inline void SetLogLevelResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.SetLogLevelResponse.info)
}
inline ::grpc_cli::PosInfo* SetLogLevelResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* SetLogLevelResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetLogLevelResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* SetLogLevelResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* SetLogLevelResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetLogLevelResponse.info)
  return _internal_mutable_info();
}
inline void SetLogLevelResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetLogLevelResponse.info)
}

// -------------------------------------------------------------------

// SetLogPreferenceRequest_Param

// string structuredLogging = 1;
inline void SetLogPreferenceRequest_Param::clear_structuredlogging() {
  structuredlogging_.ClearToEmpty();
}
inline const std::string& SetLogPreferenceRequest_Param::structuredlogging() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetLogPreferenceRequest.Param.structuredLogging)
  return _internal_structuredlogging();
}
inline void SetLogPreferenceRequest_Param::set_structuredlogging(const std::string& value) {
  _internal_set_structuredlogging(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SetLogPreferenceRequest.Param.structuredLogging)
}
inline std::string* SetLogPreferenceRequest_Param::mutable_structuredlogging() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetLogPreferenceRequest.Param.structuredLogging)
  return _internal_mutable_structuredlogging();
}
inline const std::string& SetLogPreferenceRequest_Param::_internal_structuredlogging() const {
  return structuredlogging_.Get();
}
inline void SetLogPreferenceRequest_Param::_internal_set_structuredlogging(const std::string& value) {
  
  structuredlogging_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetLogPreferenceRequest_Param::set_structuredlogging(std::string&& value) {
  
  structuredlogging_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SetLogPreferenceRequest.Param.structuredLogging)
}
inline void SetLogPreferenceRequest_Param::set_structuredlogging(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  structuredlogging_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SetLogPreferenceRequest.Param.structuredLogging)
}
inline void SetLogPreferenceRequest_Param::set_structuredlogging(const char* value,
    size_t size) {
  
  structuredlogging_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SetLogPreferenceRequest.Param.structuredLogging)
}
inline std::string* SetLogPreferenceRequest_Param::_internal_mutable_structuredlogging() {
  
  return structuredlogging_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetLogPreferenceRequest_Param::release_structuredlogging() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetLogPreferenceRequest.Param.structuredLogging)
  return structuredlogging_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetLogPreferenceRequest_Param::set_allocated_structuredlogging(std::string* structuredlogging) {
  if (structuredlogging != nullptr) {
    
  } else {
    
  }
  structuredlogging_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), structuredlogging,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetLogPreferenceRequest.Param.structuredLogging)
}

// -------------------------------------------------------------------

// SetLogPreferenceRequest

// string command = 1;
inline void SetLogPreferenceRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& SetLogPreferenceRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetLogPreferenceRequest.command)
  return _internal_command();
}
inline void SetLogPreferenceRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SetLogPreferenceRequest.command)
}
inline std::string* SetLogPreferenceRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetLogPreferenceRequest.command)
  return _internal_mutable_command();
}
inline const std::string& SetLogPreferenceRequest::_internal_command() const {
  return command_.Get();
}
inline void SetLogPreferenceRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetLogPreferenceRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SetLogPreferenceRequest.command)
}
inline void SetLogPreferenceRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SetLogPreferenceRequest.command)
}
inline void SetLogPreferenceRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SetLogPreferenceRequest.command)
}
inline std::string* SetLogPreferenceRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetLogPreferenceRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetLogPreferenceRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetLogPreferenceRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetLogPreferenceRequest.command)
}

// string rid = 2;
inline void SetLogPreferenceRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& SetLogPreferenceRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetLogPreferenceRequest.rid)
  return _internal_rid();
}
inline void SetLogPreferenceRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SetLogPreferenceRequest.rid)
}
inline std::string* SetLogPreferenceRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetLogPreferenceRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& SetLogPreferenceRequest::_internal_rid() const {
  return rid_.Get();
}
inline void SetLogPreferenceRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetLogPreferenceRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SetLogPreferenceRequest.rid)
}
inline void SetLogPreferenceRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SetLogPreferenceRequest.rid)
}
inline void SetLogPreferenceRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SetLogPreferenceRequest.rid)
}
inline std::string* SetLogPreferenceRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetLogPreferenceRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetLogPreferenceRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetLogPreferenceRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetLogPreferenceRequest.rid)
}

// string requestor = 3;
inline void SetLogPreferenceRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& SetLogPreferenceRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetLogPreferenceRequest.requestor)
  return _internal_requestor();
}
inline void SetLogPreferenceRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SetLogPreferenceRequest.requestor)
}
inline std::string* SetLogPreferenceRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetLogPreferenceRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& SetLogPreferenceRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void SetLogPreferenceRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetLogPreferenceRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SetLogPreferenceRequest.requestor)
}
inline void SetLogPreferenceRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SetLogPreferenceRequest.requestor)
}
inline void SetLogPreferenceRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SetLogPreferenceRequest.requestor)
}
inline std::string* SetLogPreferenceRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetLogPreferenceRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetLogPreferenceRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetLogPreferenceRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetLogPreferenceRequest.requestor)
}

// .grpc_cli.SetLogPreferenceRequest.Param param = 4;
inline bool SetLogPreferenceRequest::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool SetLogPreferenceRequest::has_param() const {
  return _internal_has_param();
}
inline void SetLogPreferenceRequest::clear_param() {
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::grpc_cli::SetLogPreferenceRequest_Param& SetLogPreferenceRequest::_internal_param() const {
  const ::grpc_cli::SetLogPreferenceRequest_Param* p = param_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::SetLogPreferenceRequest_Param&>(
      ::grpc_cli::_SetLogPreferenceRequest_Param_default_instance_);
}
inline const ::grpc_cli::SetLogPreferenceRequest_Param& SetLogPreferenceRequest::param() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetLogPreferenceRequest.param)
  return _internal_param();
}
inline void SetLogPreferenceRequest::unsafe_arena_set_allocated_param(
    ::grpc_cli::SetLogPreferenceRequest_Param* param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.SetLogPreferenceRequest.param)
}
inline ::grpc_cli::SetLogPreferenceRequest_Param* SetLogPreferenceRequest::release_param() {
  
  ::grpc_cli::SetLogPreferenceRequest_Param* temp = param_;
  param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::SetLogPreferenceRequest_Param* SetLogPreferenceRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetLogPreferenceRequest.param)
  
  ::grpc_cli::SetLogPreferenceRequest_Param* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::grpc_cli::SetLogPreferenceRequest_Param* SetLogPreferenceRequest::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::SetLogPreferenceRequest_Param>(GetArena());
    param_ = p;
  }
  return param_;
}
inline ::grpc_cli::SetLogPreferenceRequest_Param* SetLogPreferenceRequest::mutable_param() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetLogPreferenceRequest.param)
  return _internal_mutable_param();
}
inline void SetLogPreferenceRequest::set_allocated_param(::grpc_cli::SetLogPreferenceRequest_Param* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetLogPreferenceRequest.param)
}

// -------------------------------------------------------------------

// SetLogPreferenceResponse_Result

// .grpc_cli.Status status = 1;
inline bool SetLogPreferenceResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SetLogPreferenceResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void SetLogPreferenceResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& SetLogPreferenceResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& SetLogPreferenceResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetLogPreferenceResponse.Result.status)
  return _internal_status();
}
inline void SetLogPreferenceResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.SetLogPreferenceResponse.Result.status)
}
inline ::grpc_cli::Status* SetLogPreferenceResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* SetLogPreferenceResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetLogPreferenceResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* SetLogPreferenceResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* SetLogPreferenceResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetLogPreferenceResponse.Result.status)
  return _internal_mutable_status();
}
inline void SetLogPreferenceResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetLogPreferenceResponse.Result.status)
}

// -------------------------------------------------------------------

// SetLogPreferenceResponse

// string command = 1;
inline void SetLogPreferenceResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& SetLogPreferenceResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetLogPreferenceResponse.command)
  return _internal_command();
}
inline void SetLogPreferenceResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SetLogPreferenceResponse.command)
}
inline std::string* SetLogPreferenceResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetLogPreferenceResponse.command)
  return _internal_mutable_command();
}
inline const std::string& SetLogPreferenceResponse::_internal_command() const {
  return command_.Get();
}
inline void SetLogPreferenceResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetLogPreferenceResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SetLogPreferenceResponse.command)
}
inline void SetLogPreferenceResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SetLogPreferenceResponse.command)
}
inline void SetLogPreferenceResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SetLogPreferenceResponse.command)
}
inline std::string* SetLogPreferenceResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetLogPreferenceResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetLogPreferenceResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetLogPreferenceResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetLogPreferenceResponse.command)
}

// string rid = 2;
inline void SetLogPreferenceResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& SetLogPreferenceResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetLogPreferenceResponse.rid)
  return _internal_rid();
}
inline void SetLogPreferenceResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SetLogPreferenceResponse.rid)
}
inline std::string* SetLogPreferenceResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetLogPreferenceResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& SetLogPreferenceResponse::_internal_rid() const {
  return rid_.Get();
}
inline void SetLogPreferenceResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetLogPreferenceResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SetLogPreferenceResponse.rid)
}
inline void SetLogPreferenceResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SetLogPreferenceResponse.rid)
}
inline void SetLogPreferenceResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SetLogPreferenceResponse.rid)
}
inline std::string* SetLogPreferenceResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetLogPreferenceResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetLogPreferenceResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetLogPreferenceResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetLogPreferenceResponse.rid)
}

// .grpc_cli.SetLogPreferenceResponse.Result result = 3;
inline bool SetLogPreferenceResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool SetLogPreferenceResponse::has_result() const {
  return _internal_has_result();
}
inline void SetLogPreferenceResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::SetLogPreferenceResponse_Result& SetLogPreferenceResponse::_internal_result() const {
  const ::grpc_cli::SetLogPreferenceResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::SetLogPreferenceResponse_Result&>(
      ::grpc_cli::_SetLogPreferenceResponse_Result_default_instance_);
}
inline const ::grpc_cli::SetLogPreferenceResponse_Result& SetLogPreferenceResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetLogPreferenceResponse.result)
  return _internal_result();
}
inline void SetLogPreferenceResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::SetLogPreferenceResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.SetLogPreferenceResponse.result)
}
inline ::grpc_cli::SetLogPreferenceResponse_Result* SetLogPreferenceResponse::release_result() {
  
  ::grpc_cli::SetLogPreferenceResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::SetLogPreferenceResponse_Result* SetLogPreferenceResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetLogPreferenceResponse.result)
  
  ::grpc_cli::SetLogPreferenceResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::SetLogPreferenceResponse_Result* SetLogPreferenceResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::SetLogPreferenceResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::SetLogPreferenceResponse_Result* SetLogPreferenceResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetLogPreferenceResponse.result)
  return _internal_mutable_result();
}
inline void SetLogPreferenceResponse::set_allocated_result(::grpc_cli::SetLogPreferenceResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetLogPreferenceResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool SetLogPreferenceResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool SetLogPreferenceResponse::has_info() const {
  return _internal_has_info();
}
inline void SetLogPreferenceResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& SetLogPreferenceResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& SetLogPreferenceResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetLogPreferenceResponse.info)
  return _internal_info();
}
inline void SetLogPreferenceResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.SetLogPreferenceResponse.info)
}
inline ::grpc_cli::PosInfo* SetLogPreferenceResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* SetLogPreferenceResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetLogPreferenceResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* SetLogPreferenceResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* SetLogPreferenceResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetLogPreferenceResponse.info)
  return _internal_mutable_info();
}
inline void SetLogPreferenceResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetLogPreferenceResponse.info)
}

// -------------------------------------------------------------------

// LoggerInfoRequest

// string command = 1;
inline void LoggerInfoRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& LoggerInfoRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.LoggerInfoRequest.command)
  return _internal_command();
}
inline void LoggerInfoRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.LoggerInfoRequest.command)
}
inline std::string* LoggerInfoRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.LoggerInfoRequest.command)
  return _internal_mutable_command();
}
inline const std::string& LoggerInfoRequest::_internal_command() const {
  return command_.Get();
}
inline void LoggerInfoRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LoggerInfoRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.LoggerInfoRequest.command)
}
inline void LoggerInfoRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.LoggerInfoRequest.command)
}
inline void LoggerInfoRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.LoggerInfoRequest.command)
}
inline std::string* LoggerInfoRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LoggerInfoRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.LoggerInfoRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoggerInfoRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.LoggerInfoRequest.command)
}

// string rid = 2;
inline void LoggerInfoRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& LoggerInfoRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.LoggerInfoRequest.rid)
  return _internal_rid();
}
inline void LoggerInfoRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.LoggerInfoRequest.rid)
}
inline std::string* LoggerInfoRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.LoggerInfoRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& LoggerInfoRequest::_internal_rid() const {
  return rid_.Get();
}
inline void LoggerInfoRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LoggerInfoRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.LoggerInfoRequest.rid)
}
inline void LoggerInfoRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.LoggerInfoRequest.rid)
}
inline void LoggerInfoRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.LoggerInfoRequest.rid)
}
inline std::string* LoggerInfoRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LoggerInfoRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.LoggerInfoRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoggerInfoRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.LoggerInfoRequest.rid)
}

// string requestor = 3;
inline void LoggerInfoRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& LoggerInfoRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.LoggerInfoRequest.requestor)
  return _internal_requestor();
}
inline void LoggerInfoRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.LoggerInfoRequest.requestor)
}
inline std::string* LoggerInfoRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.LoggerInfoRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& LoggerInfoRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void LoggerInfoRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LoggerInfoRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.LoggerInfoRequest.requestor)
}
inline void LoggerInfoRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.LoggerInfoRequest.requestor)
}
inline void LoggerInfoRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.LoggerInfoRequest.requestor)
}
inline std::string* LoggerInfoRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LoggerInfoRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.LoggerInfoRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoggerInfoRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.LoggerInfoRequest.requestor)
}

// -------------------------------------------------------------------

// LoggerInfoResponse_Result_LoggerInfo

// string minorLogPath = 1;
inline void LoggerInfoResponse_Result_LoggerInfo::clear_minorlogpath() {
  minorlogpath_.ClearToEmpty();
}
inline const std::string& LoggerInfoResponse_Result_LoggerInfo::minorlogpath() const {
  // @@protoc_insertion_point(field_get:grpc_cli.LoggerInfoResponse.Result.LoggerInfo.minorLogPath)
  return _internal_minorlogpath();
}
inline void LoggerInfoResponse_Result_LoggerInfo::set_minorlogpath(const std::string& value) {
  _internal_set_minorlogpath(value);
  // @@protoc_insertion_point(field_set:grpc_cli.LoggerInfoResponse.Result.LoggerInfo.minorLogPath)
}
inline std::string* LoggerInfoResponse_Result_LoggerInfo::mutable_minorlogpath() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.LoggerInfoResponse.Result.LoggerInfo.minorLogPath)
  return _internal_mutable_minorlogpath();
}
inline const std::string& LoggerInfoResponse_Result_LoggerInfo::_internal_minorlogpath() const {
  return minorlogpath_.Get();
}
inline void LoggerInfoResponse_Result_LoggerInfo::_internal_set_minorlogpath(const std::string& value) {
  
  minorlogpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LoggerInfoResponse_Result_LoggerInfo::set_minorlogpath(std::string&& value) {
  
  minorlogpath_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.LoggerInfoResponse.Result.LoggerInfo.minorLogPath)
}
inline void LoggerInfoResponse_Result_LoggerInfo::set_minorlogpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  minorlogpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.LoggerInfoResponse.Result.LoggerInfo.minorLogPath)
}
inline void LoggerInfoResponse_Result_LoggerInfo::set_minorlogpath(const char* value,
    size_t size) {
  
  minorlogpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.LoggerInfoResponse.Result.LoggerInfo.minorLogPath)
}
inline std::string* LoggerInfoResponse_Result_LoggerInfo::_internal_mutable_minorlogpath() {
  
  return minorlogpath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LoggerInfoResponse_Result_LoggerInfo::release_minorlogpath() {
  // @@protoc_insertion_point(field_release:grpc_cli.LoggerInfoResponse.Result.LoggerInfo.minorLogPath)
  return minorlogpath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoggerInfoResponse_Result_LoggerInfo::set_allocated_minorlogpath(std::string* minorlogpath) {
  if (minorlogpath != nullptr) {
    
  } else {
    
  }
  minorlogpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), minorlogpath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.LoggerInfoResponse.Result.LoggerInfo.minorLogPath)
}

// string majorLogPath = 2;
inline void LoggerInfoResponse_Result_LoggerInfo::clear_majorlogpath() {
  majorlogpath_.ClearToEmpty();
}
inline const std::string& LoggerInfoResponse_Result_LoggerInfo::majorlogpath() const {
  // @@protoc_insertion_point(field_get:grpc_cli.LoggerInfoResponse.Result.LoggerInfo.majorLogPath)
  return _internal_majorlogpath();
}
inline void LoggerInfoResponse_Result_LoggerInfo::set_majorlogpath(const std::string& value) {
  _internal_set_majorlogpath(value);
  // @@protoc_insertion_point(field_set:grpc_cli.LoggerInfoResponse.Result.LoggerInfo.majorLogPath)
}
inline std::string* LoggerInfoResponse_Result_LoggerInfo::mutable_majorlogpath() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.LoggerInfoResponse.Result.LoggerInfo.majorLogPath)
  return _internal_mutable_majorlogpath();
}
inline const std::string& LoggerInfoResponse_Result_LoggerInfo::_internal_majorlogpath() const {
  return majorlogpath_.Get();
}
inline void LoggerInfoResponse_Result_LoggerInfo::_internal_set_majorlogpath(const std::string& value) {
  
  majorlogpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LoggerInfoResponse_Result_LoggerInfo::set_majorlogpath(std::string&& value) {
  
  majorlogpath_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.LoggerInfoResponse.Result.LoggerInfo.majorLogPath)
}
inline void LoggerInfoResponse_Result_LoggerInfo::set_majorlogpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  majorlogpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.LoggerInfoResponse.Result.LoggerInfo.majorLogPath)
}
inline void LoggerInfoResponse_Result_LoggerInfo::set_majorlogpath(const char* value,
    size_t size) {
  
  majorlogpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.LoggerInfoResponse.Result.LoggerInfo.majorLogPath)
}
inline std::string* LoggerInfoResponse_Result_LoggerInfo::_internal_mutable_majorlogpath() {
  
  return majorlogpath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LoggerInfoResponse_Result_LoggerInfo::release_majorlogpath() {
  // @@protoc_insertion_point(field_release:grpc_cli.LoggerInfoResponse.Result.LoggerInfo.majorLogPath)
  return majorlogpath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoggerInfoResponse_Result_LoggerInfo::set_allocated_majorlogpath(std::string* majorlogpath) {
  if (majorlogpath != nullptr) {
    
  } else {
    
  }
  majorlogpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), majorlogpath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.LoggerInfoResponse.Result.LoggerInfo.majorLogPath)
}

// string logfileSizeInMb = 3;
inline void LoggerInfoResponse_Result_LoggerInfo::clear_logfilesizeinmb() {
  logfilesizeinmb_.ClearToEmpty();
}
inline const std::string& LoggerInfoResponse_Result_LoggerInfo::logfilesizeinmb() const {
  // @@protoc_insertion_point(field_get:grpc_cli.LoggerInfoResponse.Result.LoggerInfo.logfileSizeInMb)
  return _internal_logfilesizeinmb();
}
inline void LoggerInfoResponse_Result_LoggerInfo::set_logfilesizeinmb(const std::string& value) {
  _internal_set_logfilesizeinmb(value);
  // @@protoc_insertion_point(field_set:grpc_cli.LoggerInfoResponse.Result.LoggerInfo.logfileSizeInMb)
}
inline std::string* LoggerInfoResponse_Result_LoggerInfo::mutable_logfilesizeinmb() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.LoggerInfoResponse.Result.LoggerInfo.logfileSizeInMb)
  return _internal_mutable_logfilesizeinmb();
}
inline const std::string& LoggerInfoResponse_Result_LoggerInfo::_internal_logfilesizeinmb() const {
  return logfilesizeinmb_.Get();
}
inline void LoggerInfoResponse_Result_LoggerInfo::_internal_set_logfilesizeinmb(const std::string& value) {
  
  logfilesizeinmb_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LoggerInfoResponse_Result_LoggerInfo::set_logfilesizeinmb(std::string&& value) {
  
  logfilesizeinmb_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.LoggerInfoResponse.Result.LoggerInfo.logfileSizeInMb)
}
inline void LoggerInfoResponse_Result_LoggerInfo::set_logfilesizeinmb(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  logfilesizeinmb_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.LoggerInfoResponse.Result.LoggerInfo.logfileSizeInMb)
}
inline void LoggerInfoResponse_Result_LoggerInfo::set_logfilesizeinmb(const char* value,
    size_t size) {
  
  logfilesizeinmb_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.LoggerInfoResponse.Result.LoggerInfo.logfileSizeInMb)
}
inline std::string* LoggerInfoResponse_Result_LoggerInfo::_internal_mutable_logfilesizeinmb() {
  
  return logfilesizeinmb_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LoggerInfoResponse_Result_LoggerInfo::release_logfilesizeinmb() {
  // @@protoc_insertion_point(field_release:grpc_cli.LoggerInfoResponse.Result.LoggerInfo.logfileSizeInMb)
  return logfilesizeinmb_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoggerInfoResponse_Result_LoggerInfo::set_allocated_logfilesizeinmb(std::string* logfilesizeinmb) {
  if (logfilesizeinmb != nullptr) {
    
  } else {
    
  }
  logfilesizeinmb_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), logfilesizeinmb,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.LoggerInfoResponse.Result.LoggerInfo.logfileSizeInMb)
}

// int32 logfileRotationCount = 4;
inline void LoggerInfoResponse_Result_LoggerInfo::clear_logfilerotationcount() {
  logfilerotationcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoggerInfoResponse_Result_LoggerInfo::_internal_logfilerotationcount() const {
  return logfilerotationcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoggerInfoResponse_Result_LoggerInfo::logfilerotationcount() const {
  // @@protoc_insertion_point(field_get:grpc_cli.LoggerInfoResponse.Result.LoggerInfo.logfileRotationCount)
  return _internal_logfilerotationcount();
}
inline void LoggerInfoResponse_Result_LoggerInfo::_internal_set_logfilerotationcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  logfilerotationcount_ = value;
}
inline void LoggerInfoResponse_Result_LoggerInfo::set_logfilerotationcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_logfilerotationcount(value);
  // @@protoc_insertion_point(field_set:grpc_cli.LoggerInfoResponse.Result.LoggerInfo.logfileRotationCount)
}

// string minAllowableLogLevel = 5;
inline void LoggerInfoResponse_Result_LoggerInfo::clear_minallowableloglevel() {
  minallowableloglevel_.ClearToEmpty();
}
inline const std::string& LoggerInfoResponse_Result_LoggerInfo::minallowableloglevel() const {
  // @@protoc_insertion_point(field_get:grpc_cli.LoggerInfoResponse.Result.LoggerInfo.minAllowableLogLevel)
  return _internal_minallowableloglevel();
}
inline void LoggerInfoResponse_Result_LoggerInfo::set_minallowableloglevel(const std::string& value) {
  _internal_set_minallowableloglevel(value);
  // @@protoc_insertion_point(field_set:grpc_cli.LoggerInfoResponse.Result.LoggerInfo.minAllowableLogLevel)
}
inline std::string* LoggerInfoResponse_Result_LoggerInfo::mutable_minallowableloglevel() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.LoggerInfoResponse.Result.LoggerInfo.minAllowableLogLevel)
  return _internal_mutable_minallowableloglevel();
}
inline const std::string& LoggerInfoResponse_Result_LoggerInfo::_internal_minallowableloglevel() const {
  return minallowableloglevel_.Get();
}
inline void LoggerInfoResponse_Result_LoggerInfo::_internal_set_minallowableloglevel(const std::string& value) {
  
  minallowableloglevel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LoggerInfoResponse_Result_LoggerInfo::set_minallowableloglevel(std::string&& value) {
  
  minallowableloglevel_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.LoggerInfoResponse.Result.LoggerInfo.minAllowableLogLevel)
}
inline void LoggerInfoResponse_Result_LoggerInfo::set_minallowableloglevel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  minallowableloglevel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.LoggerInfoResponse.Result.LoggerInfo.minAllowableLogLevel)
}
inline void LoggerInfoResponse_Result_LoggerInfo::set_minallowableloglevel(const char* value,
    size_t size) {
  
  minallowableloglevel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.LoggerInfoResponse.Result.LoggerInfo.minAllowableLogLevel)
}
inline std::string* LoggerInfoResponse_Result_LoggerInfo::_internal_mutable_minallowableloglevel() {
  
  return minallowableloglevel_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LoggerInfoResponse_Result_LoggerInfo::release_minallowableloglevel() {
  // @@protoc_insertion_point(field_release:grpc_cli.LoggerInfoResponse.Result.LoggerInfo.minAllowableLogLevel)
  return minallowableloglevel_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoggerInfoResponse_Result_LoggerInfo::set_allocated_minallowableloglevel(std::string* minallowableloglevel) {
  if (minallowableloglevel != nullptr) {
    
  } else {
    
  }
  minallowableloglevel_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), minallowableloglevel,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.LoggerInfoResponse.Result.LoggerInfo.minAllowableLogLevel)
}

// int32 filterEnabled = 6;
inline void LoggerInfoResponse_Result_LoggerInfo::clear_filterenabled() {
  filterenabled_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoggerInfoResponse_Result_LoggerInfo::_internal_filterenabled() const {
  return filterenabled_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoggerInfoResponse_Result_LoggerInfo::filterenabled() const {
  // @@protoc_insertion_point(field_get:grpc_cli.LoggerInfoResponse.Result.LoggerInfo.filterEnabled)
  return _internal_filterenabled();
}
inline void LoggerInfoResponse_Result_LoggerInfo::_internal_set_filterenabled(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  filterenabled_ = value;
}
inline void LoggerInfoResponse_Result_LoggerInfo::set_filterenabled(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_filterenabled(value);
  // @@protoc_insertion_point(field_set:grpc_cli.LoggerInfoResponse.Result.LoggerInfo.filterEnabled)
}

// string filterIncluded = 7;
inline void LoggerInfoResponse_Result_LoggerInfo::clear_filterincluded() {
  filterincluded_.ClearToEmpty();
}
inline const std::string& LoggerInfoResponse_Result_LoggerInfo::filterincluded() const {
  // @@protoc_insertion_point(field_get:grpc_cli.LoggerInfoResponse.Result.LoggerInfo.filterIncluded)
  return _internal_filterincluded();
}
inline void LoggerInfoResponse_Result_LoggerInfo::set_filterincluded(const std::string& value) {
  _internal_set_filterincluded(value);
  // @@protoc_insertion_point(field_set:grpc_cli.LoggerInfoResponse.Result.LoggerInfo.filterIncluded)
}
inline std::string* LoggerInfoResponse_Result_LoggerInfo::mutable_filterincluded() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.LoggerInfoResponse.Result.LoggerInfo.filterIncluded)
  return _internal_mutable_filterincluded();
}
inline const std::string& LoggerInfoResponse_Result_LoggerInfo::_internal_filterincluded() const {
  return filterincluded_.Get();
}
inline void LoggerInfoResponse_Result_LoggerInfo::_internal_set_filterincluded(const std::string& value) {
  
  filterincluded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LoggerInfoResponse_Result_LoggerInfo::set_filterincluded(std::string&& value) {
  
  filterincluded_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.LoggerInfoResponse.Result.LoggerInfo.filterIncluded)
}
inline void LoggerInfoResponse_Result_LoggerInfo::set_filterincluded(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filterincluded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.LoggerInfoResponse.Result.LoggerInfo.filterIncluded)
}
inline void LoggerInfoResponse_Result_LoggerInfo::set_filterincluded(const char* value,
    size_t size) {
  
  filterincluded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.LoggerInfoResponse.Result.LoggerInfo.filterIncluded)
}
inline std::string* LoggerInfoResponse_Result_LoggerInfo::_internal_mutable_filterincluded() {
  
  return filterincluded_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LoggerInfoResponse_Result_LoggerInfo::release_filterincluded() {
  // @@protoc_insertion_point(field_release:grpc_cli.LoggerInfoResponse.Result.LoggerInfo.filterIncluded)
  return filterincluded_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoggerInfoResponse_Result_LoggerInfo::set_allocated_filterincluded(std::string* filterincluded) {
  if (filterincluded != nullptr) {
    
  } else {
    
  }
  filterincluded_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filterincluded,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.LoggerInfoResponse.Result.LoggerInfo.filterIncluded)
}

// string filterExcluded = 8;
inline void LoggerInfoResponse_Result_LoggerInfo::clear_filterexcluded() {
  filterexcluded_.ClearToEmpty();
}
inline const std::string& LoggerInfoResponse_Result_LoggerInfo::filterexcluded() const {
  // @@protoc_insertion_point(field_get:grpc_cli.LoggerInfoResponse.Result.LoggerInfo.filterExcluded)
  return _internal_filterexcluded();
}
inline void LoggerInfoResponse_Result_LoggerInfo::set_filterexcluded(const std::string& value) {
  _internal_set_filterexcluded(value);
  // @@protoc_insertion_point(field_set:grpc_cli.LoggerInfoResponse.Result.LoggerInfo.filterExcluded)
}
inline std::string* LoggerInfoResponse_Result_LoggerInfo::mutable_filterexcluded() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.LoggerInfoResponse.Result.LoggerInfo.filterExcluded)
  return _internal_mutable_filterexcluded();
}
inline const std::string& LoggerInfoResponse_Result_LoggerInfo::_internal_filterexcluded() const {
  return filterexcluded_.Get();
}
inline void LoggerInfoResponse_Result_LoggerInfo::_internal_set_filterexcluded(const std::string& value) {
  
  filterexcluded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LoggerInfoResponse_Result_LoggerInfo::set_filterexcluded(std::string&& value) {
  
  filterexcluded_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.LoggerInfoResponse.Result.LoggerInfo.filterExcluded)
}
inline void LoggerInfoResponse_Result_LoggerInfo::set_filterexcluded(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filterexcluded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.LoggerInfoResponse.Result.LoggerInfo.filterExcluded)
}
inline void LoggerInfoResponse_Result_LoggerInfo::set_filterexcluded(const char* value,
    size_t size) {
  
  filterexcluded_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.LoggerInfoResponse.Result.LoggerInfo.filterExcluded)
}
inline std::string* LoggerInfoResponse_Result_LoggerInfo::_internal_mutable_filterexcluded() {
  
  return filterexcluded_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LoggerInfoResponse_Result_LoggerInfo::release_filterexcluded() {
  // @@protoc_insertion_point(field_release:grpc_cli.LoggerInfoResponse.Result.LoggerInfo.filterExcluded)
  return filterexcluded_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoggerInfoResponse_Result_LoggerInfo::set_allocated_filterexcluded(std::string* filterexcluded) {
  if (filterexcluded != nullptr) {
    
  } else {
    
  }
  filterexcluded_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filterexcluded,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.LoggerInfoResponse.Result.LoggerInfo.filterExcluded)
}

// bool structuredLogging = 9;
inline void LoggerInfoResponse_Result_LoggerInfo::clear_structuredlogging() {
  structuredlogging_ = false;
}
inline bool LoggerInfoResponse_Result_LoggerInfo::_internal_structuredlogging() const {
  return structuredlogging_;
}
inline bool LoggerInfoResponse_Result_LoggerInfo::structuredlogging() const {
  // @@protoc_insertion_point(field_get:grpc_cli.LoggerInfoResponse.Result.LoggerInfo.structuredLogging)
  return _internal_structuredlogging();
}
inline void LoggerInfoResponse_Result_LoggerInfo::_internal_set_structuredlogging(bool value) {
  
  structuredlogging_ = value;
}
inline void LoggerInfoResponse_Result_LoggerInfo::set_structuredlogging(bool value) {
  _internal_set_structuredlogging(value);
  // @@protoc_insertion_point(field_set:grpc_cli.LoggerInfoResponse.Result.LoggerInfo.structuredLogging)
}

// -------------------------------------------------------------------

// LoggerInfoResponse_Result

// .grpc_cli.Status status = 1;
inline bool LoggerInfoResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool LoggerInfoResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void LoggerInfoResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& LoggerInfoResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& LoggerInfoResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.LoggerInfoResponse.Result.status)
  return _internal_status();
}
inline void LoggerInfoResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.LoggerInfoResponse.Result.status)
}
inline ::grpc_cli::Status* LoggerInfoResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* LoggerInfoResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.LoggerInfoResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* LoggerInfoResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* LoggerInfoResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.LoggerInfoResponse.Result.status)
  return _internal_mutable_status();
}
inline void LoggerInfoResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.LoggerInfoResponse.Result.status)
}

// .grpc_cli.LoggerInfoResponse.Result.LoggerInfo data = 2;
inline bool LoggerInfoResponse_Result::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool LoggerInfoResponse_Result::has_data() const {
  return _internal_has_data();
}
inline void LoggerInfoResponse_Result::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::grpc_cli::LoggerInfoResponse_Result_LoggerInfo& LoggerInfoResponse_Result::_internal_data() const {
  const ::grpc_cli::LoggerInfoResponse_Result_LoggerInfo* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::LoggerInfoResponse_Result_LoggerInfo&>(
      ::grpc_cli::_LoggerInfoResponse_Result_LoggerInfo_default_instance_);
}
inline const ::grpc_cli::LoggerInfoResponse_Result_LoggerInfo& LoggerInfoResponse_Result::data() const {
  // @@protoc_insertion_point(field_get:grpc_cli.LoggerInfoResponse.Result.data)
  return _internal_data();
}
inline void LoggerInfoResponse_Result::unsafe_arena_set_allocated_data(
    ::grpc_cli::LoggerInfoResponse_Result_LoggerInfo* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.LoggerInfoResponse.Result.data)
}
inline ::grpc_cli::LoggerInfoResponse_Result_LoggerInfo* LoggerInfoResponse_Result::release_data() {
  
  ::grpc_cli::LoggerInfoResponse_Result_LoggerInfo* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::LoggerInfoResponse_Result_LoggerInfo* LoggerInfoResponse_Result::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:grpc_cli.LoggerInfoResponse.Result.data)
  
  ::grpc_cli::LoggerInfoResponse_Result_LoggerInfo* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::grpc_cli::LoggerInfoResponse_Result_LoggerInfo* LoggerInfoResponse_Result::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::LoggerInfoResponse_Result_LoggerInfo>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::grpc_cli::LoggerInfoResponse_Result_LoggerInfo* LoggerInfoResponse_Result::mutable_data() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.LoggerInfoResponse.Result.data)
  return _internal_mutable_data();
}
inline void LoggerInfoResponse_Result::set_allocated_data(::grpc_cli::LoggerInfoResponse_Result_LoggerInfo* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.LoggerInfoResponse.Result.data)
}

// -------------------------------------------------------------------

// LoggerInfoResponse

// string command = 1;
inline void LoggerInfoResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& LoggerInfoResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.LoggerInfoResponse.command)
  return _internal_command();
}
inline void LoggerInfoResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.LoggerInfoResponse.command)
}
inline std::string* LoggerInfoResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.LoggerInfoResponse.command)
  return _internal_mutable_command();
}
inline const std::string& LoggerInfoResponse::_internal_command() const {
  return command_.Get();
}
inline void LoggerInfoResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LoggerInfoResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.LoggerInfoResponse.command)
}
inline void LoggerInfoResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.LoggerInfoResponse.command)
}
inline void LoggerInfoResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.LoggerInfoResponse.command)
}
inline std::string* LoggerInfoResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LoggerInfoResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.LoggerInfoResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoggerInfoResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.LoggerInfoResponse.command)
}

// string rid = 2;
inline void LoggerInfoResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& LoggerInfoResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.LoggerInfoResponse.rid)
  return _internal_rid();
}
inline void LoggerInfoResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.LoggerInfoResponse.rid)
}
inline std::string* LoggerInfoResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.LoggerInfoResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& LoggerInfoResponse::_internal_rid() const {
  return rid_.Get();
}
inline void LoggerInfoResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LoggerInfoResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.LoggerInfoResponse.rid)
}
inline void LoggerInfoResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.LoggerInfoResponse.rid)
}
inline void LoggerInfoResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.LoggerInfoResponse.rid)
}
inline std::string* LoggerInfoResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LoggerInfoResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.LoggerInfoResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoggerInfoResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.LoggerInfoResponse.rid)
}

// .grpc_cli.LoggerInfoResponse.Result result = 3;
inline bool LoggerInfoResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool LoggerInfoResponse::has_result() const {
  return _internal_has_result();
}
inline void LoggerInfoResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::LoggerInfoResponse_Result& LoggerInfoResponse::_internal_result() const {
  const ::grpc_cli::LoggerInfoResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::LoggerInfoResponse_Result&>(
      ::grpc_cli::_LoggerInfoResponse_Result_default_instance_);
}
inline const ::grpc_cli::LoggerInfoResponse_Result& LoggerInfoResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.LoggerInfoResponse.result)
  return _internal_result();
}
inline void LoggerInfoResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::LoggerInfoResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.LoggerInfoResponse.result)
}
inline ::grpc_cli::LoggerInfoResponse_Result* LoggerInfoResponse::release_result() {
  
  ::grpc_cli::LoggerInfoResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::LoggerInfoResponse_Result* LoggerInfoResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.LoggerInfoResponse.result)
  
  ::grpc_cli::LoggerInfoResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::LoggerInfoResponse_Result* LoggerInfoResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::LoggerInfoResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::LoggerInfoResponse_Result* LoggerInfoResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.LoggerInfoResponse.result)
  return _internal_mutable_result();
}
inline void LoggerInfoResponse::set_allocated_result(::grpc_cli::LoggerInfoResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.LoggerInfoResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool LoggerInfoResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool LoggerInfoResponse::has_info() const {
  return _internal_has_info();
}
inline void LoggerInfoResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& LoggerInfoResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& LoggerInfoResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.LoggerInfoResponse.info)
  return _internal_info();
}
inline void LoggerInfoResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.LoggerInfoResponse.info)
}
inline ::grpc_cli::PosInfo* LoggerInfoResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* LoggerInfoResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.LoggerInfoResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* LoggerInfoResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* LoggerInfoResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.LoggerInfoResponse.info)
  return _internal_mutable_info();
}
inline void LoggerInfoResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.LoggerInfoResponse.info)
}

// -------------------------------------------------------------------

// GetLogLevelRequest

// string command = 1;
inline void GetLogLevelRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& GetLogLevelRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetLogLevelRequest.command)
  return _internal_command();
}
inline void GetLogLevelRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.GetLogLevelRequest.command)
}
inline std::string* GetLogLevelRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetLogLevelRequest.command)
  return _internal_mutable_command();
}
inline const std::string& GetLogLevelRequest::_internal_command() const {
  return command_.Get();
}
inline void GetLogLevelRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetLogLevelRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.GetLogLevelRequest.command)
}
inline void GetLogLevelRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.GetLogLevelRequest.command)
}
inline void GetLogLevelRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.GetLogLevelRequest.command)
}
inline std::string* GetLogLevelRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetLogLevelRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetLogLevelRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetLogLevelRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetLogLevelRequest.command)
}

// string rid = 2;
inline void GetLogLevelRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& GetLogLevelRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetLogLevelRequest.rid)
  return _internal_rid();
}
inline void GetLogLevelRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.GetLogLevelRequest.rid)
}
inline std::string* GetLogLevelRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetLogLevelRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& GetLogLevelRequest::_internal_rid() const {
  return rid_.Get();
}
inline void GetLogLevelRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetLogLevelRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.GetLogLevelRequest.rid)
}
inline void GetLogLevelRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.GetLogLevelRequest.rid)
}
inline void GetLogLevelRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.GetLogLevelRequest.rid)
}
inline std::string* GetLogLevelRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetLogLevelRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetLogLevelRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetLogLevelRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetLogLevelRequest.rid)
}

// string requestor = 3;
inline void GetLogLevelRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& GetLogLevelRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetLogLevelRequest.requestor)
  return _internal_requestor();
}
inline void GetLogLevelRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.GetLogLevelRequest.requestor)
}
inline std::string* GetLogLevelRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetLogLevelRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& GetLogLevelRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void GetLogLevelRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetLogLevelRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.GetLogLevelRequest.requestor)
}
inline void GetLogLevelRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.GetLogLevelRequest.requestor)
}
inline void GetLogLevelRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.GetLogLevelRequest.requestor)
}
inline std::string* GetLogLevelRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetLogLevelRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetLogLevelRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetLogLevelRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetLogLevelRequest.requestor)
}

// -------------------------------------------------------------------

// GetLogLevelResponse_Result_LogLevel

// string level = 1;
inline void GetLogLevelResponse_Result_LogLevel::clear_level() {
  level_.ClearToEmpty();
}
inline const std::string& GetLogLevelResponse_Result_LogLevel::level() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetLogLevelResponse.Result.LogLevel.level)
  return _internal_level();
}
inline void GetLogLevelResponse_Result_LogLevel::set_level(const std::string& value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:grpc_cli.GetLogLevelResponse.Result.LogLevel.level)
}
inline std::string* GetLogLevelResponse_Result_LogLevel::mutable_level() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetLogLevelResponse.Result.LogLevel.level)
  return _internal_mutable_level();
}
inline const std::string& GetLogLevelResponse_Result_LogLevel::_internal_level() const {
  return level_.Get();
}
inline void GetLogLevelResponse_Result_LogLevel::_internal_set_level(const std::string& value) {
  
  level_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetLogLevelResponse_Result_LogLevel::set_level(std::string&& value) {
  
  level_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.GetLogLevelResponse.Result.LogLevel.level)
}
inline void GetLogLevelResponse_Result_LogLevel::set_level(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  level_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.GetLogLevelResponse.Result.LogLevel.level)
}
inline void GetLogLevelResponse_Result_LogLevel::set_level(const char* value,
    size_t size) {
  
  level_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.GetLogLevelResponse.Result.LogLevel.level)
}
inline std::string* GetLogLevelResponse_Result_LogLevel::_internal_mutable_level() {
  
  return level_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetLogLevelResponse_Result_LogLevel::release_level() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetLogLevelResponse.Result.LogLevel.level)
  return level_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetLogLevelResponse_Result_LogLevel::set_allocated_level(std::string* level) {
  if (level != nullptr) {
    
  } else {
    
  }
  level_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), level,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetLogLevelResponse.Result.LogLevel.level)
}

// -------------------------------------------------------------------

// GetLogLevelResponse_Result

// .grpc_cli.Status status = 1;
inline bool GetLogLevelResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool GetLogLevelResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void GetLogLevelResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& GetLogLevelResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& GetLogLevelResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetLogLevelResponse.Result.status)
  return _internal_status();
}
inline void GetLogLevelResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.GetLogLevelResponse.Result.status)
}
inline ::grpc_cli::Status* GetLogLevelResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* GetLogLevelResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetLogLevelResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* GetLogLevelResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* GetLogLevelResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetLogLevelResponse.Result.status)
  return _internal_mutable_status();
}
inline void GetLogLevelResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetLogLevelResponse.Result.status)
}

// .grpc_cli.GetLogLevelResponse.Result.LogLevel data = 2;
inline bool GetLogLevelResponse_Result::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool GetLogLevelResponse_Result::has_data() const {
  return _internal_has_data();
}
inline void GetLogLevelResponse_Result::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::grpc_cli::GetLogLevelResponse_Result_LogLevel& GetLogLevelResponse_Result::_internal_data() const {
  const ::grpc_cli::GetLogLevelResponse_Result_LogLevel* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::GetLogLevelResponse_Result_LogLevel&>(
      ::grpc_cli::_GetLogLevelResponse_Result_LogLevel_default_instance_);
}
inline const ::grpc_cli::GetLogLevelResponse_Result_LogLevel& GetLogLevelResponse_Result::data() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetLogLevelResponse.Result.data)
  return _internal_data();
}
inline void GetLogLevelResponse_Result::unsafe_arena_set_allocated_data(
    ::grpc_cli::GetLogLevelResponse_Result_LogLevel* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.GetLogLevelResponse.Result.data)
}
inline ::grpc_cli::GetLogLevelResponse_Result_LogLevel* GetLogLevelResponse_Result::release_data() {
  
  ::grpc_cli::GetLogLevelResponse_Result_LogLevel* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::GetLogLevelResponse_Result_LogLevel* GetLogLevelResponse_Result::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetLogLevelResponse.Result.data)
  
  ::grpc_cli::GetLogLevelResponse_Result_LogLevel* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::grpc_cli::GetLogLevelResponse_Result_LogLevel* GetLogLevelResponse_Result::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::GetLogLevelResponse_Result_LogLevel>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::grpc_cli::GetLogLevelResponse_Result_LogLevel* GetLogLevelResponse_Result::mutable_data() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetLogLevelResponse.Result.data)
  return _internal_mutable_data();
}
inline void GetLogLevelResponse_Result::set_allocated_data(::grpc_cli::GetLogLevelResponse_Result_LogLevel* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetLogLevelResponse.Result.data)
}

// -------------------------------------------------------------------

// GetLogLevelResponse

// string command = 1;
inline void GetLogLevelResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& GetLogLevelResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetLogLevelResponse.command)
  return _internal_command();
}
inline void GetLogLevelResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.GetLogLevelResponse.command)
}
inline std::string* GetLogLevelResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetLogLevelResponse.command)
  return _internal_mutable_command();
}
inline const std::string& GetLogLevelResponse::_internal_command() const {
  return command_.Get();
}
inline void GetLogLevelResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetLogLevelResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.GetLogLevelResponse.command)
}
inline void GetLogLevelResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.GetLogLevelResponse.command)
}
inline void GetLogLevelResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.GetLogLevelResponse.command)
}
inline std::string* GetLogLevelResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetLogLevelResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetLogLevelResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetLogLevelResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetLogLevelResponse.command)
}

// string rid = 2;
inline void GetLogLevelResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& GetLogLevelResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetLogLevelResponse.rid)
  return _internal_rid();
}
inline void GetLogLevelResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.GetLogLevelResponse.rid)
}
inline std::string* GetLogLevelResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetLogLevelResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& GetLogLevelResponse::_internal_rid() const {
  return rid_.Get();
}
inline void GetLogLevelResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetLogLevelResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.GetLogLevelResponse.rid)
}
inline void GetLogLevelResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.GetLogLevelResponse.rid)
}
inline void GetLogLevelResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.GetLogLevelResponse.rid)
}
inline std::string* GetLogLevelResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetLogLevelResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetLogLevelResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetLogLevelResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetLogLevelResponse.rid)
}

// .grpc_cli.GetLogLevelResponse.Result result = 3;
inline bool GetLogLevelResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool GetLogLevelResponse::has_result() const {
  return _internal_has_result();
}
inline void GetLogLevelResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::GetLogLevelResponse_Result& GetLogLevelResponse::_internal_result() const {
  const ::grpc_cli::GetLogLevelResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::GetLogLevelResponse_Result&>(
      ::grpc_cli::_GetLogLevelResponse_Result_default_instance_);
}
inline const ::grpc_cli::GetLogLevelResponse_Result& GetLogLevelResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetLogLevelResponse.result)
  return _internal_result();
}
inline void GetLogLevelResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::GetLogLevelResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.GetLogLevelResponse.result)
}
inline ::grpc_cli::GetLogLevelResponse_Result* GetLogLevelResponse::release_result() {
  
  ::grpc_cli::GetLogLevelResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::GetLogLevelResponse_Result* GetLogLevelResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetLogLevelResponse.result)
  
  ::grpc_cli::GetLogLevelResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::GetLogLevelResponse_Result* GetLogLevelResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::GetLogLevelResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::GetLogLevelResponse_Result* GetLogLevelResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetLogLevelResponse.result)
  return _internal_mutable_result();
}
inline void GetLogLevelResponse::set_allocated_result(::grpc_cli::GetLogLevelResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetLogLevelResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool GetLogLevelResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool GetLogLevelResponse::has_info() const {
  return _internal_has_info();
}
inline void GetLogLevelResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& GetLogLevelResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& GetLogLevelResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetLogLevelResponse.info)
  return _internal_info();
}
inline void GetLogLevelResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.GetLogLevelResponse.info)
}
inline ::grpc_cli::PosInfo* GetLogLevelResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* GetLogLevelResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetLogLevelResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* GetLogLevelResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* GetLogLevelResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetLogLevelResponse.info)
  return _internal_mutable_info();
}
inline void GetLogLevelResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetLogLevelResponse.info)
}

// -------------------------------------------------------------------

// ApplyLogFilterRequest

// string command = 1;
inline void ApplyLogFilterRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& ApplyLogFilterRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ApplyLogFilterRequest.command)
  return _internal_command();
}
inline void ApplyLogFilterRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ApplyLogFilterRequest.command)
}
inline std::string* ApplyLogFilterRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ApplyLogFilterRequest.command)
  return _internal_mutable_command();
}
inline const std::string& ApplyLogFilterRequest::_internal_command() const {
  return command_.Get();
}
inline void ApplyLogFilterRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ApplyLogFilterRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ApplyLogFilterRequest.command)
}
inline void ApplyLogFilterRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ApplyLogFilterRequest.command)
}
inline void ApplyLogFilterRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ApplyLogFilterRequest.command)
}
inline std::string* ApplyLogFilterRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ApplyLogFilterRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.ApplyLogFilterRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ApplyLogFilterRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ApplyLogFilterRequest.command)
}

// string rid = 2;
inline void ApplyLogFilterRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& ApplyLogFilterRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ApplyLogFilterRequest.rid)
  return _internal_rid();
}
inline void ApplyLogFilterRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ApplyLogFilterRequest.rid)
}
inline std::string* ApplyLogFilterRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ApplyLogFilterRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& ApplyLogFilterRequest::_internal_rid() const {
  return rid_.Get();
}
inline void ApplyLogFilterRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ApplyLogFilterRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ApplyLogFilterRequest.rid)
}
inline void ApplyLogFilterRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ApplyLogFilterRequest.rid)
}
inline void ApplyLogFilterRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ApplyLogFilterRequest.rid)
}
inline std::string* ApplyLogFilterRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ApplyLogFilterRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.ApplyLogFilterRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ApplyLogFilterRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ApplyLogFilterRequest.rid)
}

// string requestor = 3;
inline void ApplyLogFilterRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& ApplyLogFilterRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ApplyLogFilterRequest.requestor)
  return _internal_requestor();
}
inline void ApplyLogFilterRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ApplyLogFilterRequest.requestor)
}
inline std::string* ApplyLogFilterRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ApplyLogFilterRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& ApplyLogFilterRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void ApplyLogFilterRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ApplyLogFilterRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ApplyLogFilterRequest.requestor)
}
inline void ApplyLogFilterRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ApplyLogFilterRequest.requestor)
}
inline void ApplyLogFilterRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ApplyLogFilterRequest.requestor)
}
inline std::string* ApplyLogFilterRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ApplyLogFilterRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.ApplyLogFilterRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ApplyLogFilterRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ApplyLogFilterRequest.requestor)
}

// -------------------------------------------------------------------

// ApplyLogFilterResponse_Result

// .grpc_cli.Status status = 1;
inline bool ApplyLogFilterResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool ApplyLogFilterResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void ApplyLogFilterResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& ApplyLogFilterResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& ApplyLogFilterResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ApplyLogFilterResponse.Result.status)
  return _internal_status();
}
inline void ApplyLogFilterResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ApplyLogFilterResponse.Result.status)
}
inline ::grpc_cli::Status* ApplyLogFilterResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* ApplyLogFilterResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.ApplyLogFilterResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* ApplyLogFilterResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* ApplyLogFilterResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ApplyLogFilterResponse.Result.status)
  return _internal_mutable_status();
}
inline void ApplyLogFilterResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ApplyLogFilterResponse.Result.status)
}

// -------------------------------------------------------------------

// ApplyLogFilterResponse

// string command = 1;
inline void ApplyLogFilterResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& ApplyLogFilterResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ApplyLogFilterResponse.command)
  return _internal_command();
}
inline void ApplyLogFilterResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ApplyLogFilterResponse.command)
}
inline std::string* ApplyLogFilterResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ApplyLogFilterResponse.command)
  return _internal_mutable_command();
}
inline const std::string& ApplyLogFilterResponse::_internal_command() const {
  return command_.Get();
}
inline void ApplyLogFilterResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ApplyLogFilterResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ApplyLogFilterResponse.command)
}
inline void ApplyLogFilterResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ApplyLogFilterResponse.command)
}
inline void ApplyLogFilterResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ApplyLogFilterResponse.command)
}
inline std::string* ApplyLogFilterResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ApplyLogFilterResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.ApplyLogFilterResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ApplyLogFilterResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ApplyLogFilterResponse.command)
}

// string rid = 2;
inline void ApplyLogFilterResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& ApplyLogFilterResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ApplyLogFilterResponse.rid)
  return _internal_rid();
}
inline void ApplyLogFilterResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ApplyLogFilterResponse.rid)
}
inline std::string* ApplyLogFilterResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ApplyLogFilterResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& ApplyLogFilterResponse::_internal_rid() const {
  return rid_.Get();
}
inline void ApplyLogFilterResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ApplyLogFilterResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ApplyLogFilterResponse.rid)
}
inline void ApplyLogFilterResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ApplyLogFilterResponse.rid)
}
inline void ApplyLogFilterResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ApplyLogFilterResponse.rid)
}
inline std::string* ApplyLogFilterResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ApplyLogFilterResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.ApplyLogFilterResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ApplyLogFilterResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ApplyLogFilterResponse.rid)
}

// .grpc_cli.ApplyLogFilterResponse.Result result = 3;
inline bool ApplyLogFilterResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool ApplyLogFilterResponse::has_result() const {
  return _internal_has_result();
}
inline void ApplyLogFilterResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::ApplyLogFilterResponse_Result& ApplyLogFilterResponse::_internal_result() const {
  const ::grpc_cli::ApplyLogFilterResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::ApplyLogFilterResponse_Result&>(
      ::grpc_cli::_ApplyLogFilterResponse_Result_default_instance_);
}
inline const ::grpc_cli::ApplyLogFilterResponse_Result& ApplyLogFilterResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ApplyLogFilterResponse.result)
  return _internal_result();
}
inline void ApplyLogFilterResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::ApplyLogFilterResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ApplyLogFilterResponse.result)
}
inline ::grpc_cli::ApplyLogFilterResponse_Result* ApplyLogFilterResponse::release_result() {
  
  ::grpc_cli::ApplyLogFilterResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::ApplyLogFilterResponse_Result* ApplyLogFilterResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.ApplyLogFilterResponse.result)
  
  ::grpc_cli::ApplyLogFilterResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::ApplyLogFilterResponse_Result* ApplyLogFilterResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::ApplyLogFilterResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::ApplyLogFilterResponse_Result* ApplyLogFilterResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ApplyLogFilterResponse.result)
  return _internal_mutable_result();
}
inline void ApplyLogFilterResponse::set_allocated_result(::grpc_cli::ApplyLogFilterResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ApplyLogFilterResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool ApplyLogFilterResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool ApplyLogFilterResponse::has_info() const {
  return _internal_has_info();
}
inline void ApplyLogFilterResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& ApplyLogFilterResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& ApplyLogFilterResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ApplyLogFilterResponse.info)
  return _internal_info();
}
inline void ApplyLogFilterResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ApplyLogFilterResponse.info)
}
inline ::grpc_cli::PosInfo* ApplyLogFilterResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* ApplyLogFilterResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.ApplyLogFilterResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* ApplyLogFilterResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* ApplyLogFilterResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ApplyLogFilterResponse.info)
  return _internal_mutable_info();
}
inline void ApplyLogFilterResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ApplyLogFilterResponse.info)
}

// -------------------------------------------------------------------

// CreateDeviceRequest_Param

// string name = 1;
inline void CreateDeviceRequest_Param::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CreateDeviceRequest_Param::name() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateDeviceRequest.Param.name)
  return _internal_name();
}
inline void CreateDeviceRequest_Param::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:grpc_cli.CreateDeviceRequest.Param.name)
}
inline std::string* CreateDeviceRequest_Param::mutable_name() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateDeviceRequest.Param.name)
  return _internal_mutable_name();
}
inline const std::string& CreateDeviceRequest_Param::_internal_name() const {
  return name_.Get();
}
inline void CreateDeviceRequest_Param::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateDeviceRequest_Param::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.CreateDeviceRequest.Param.name)
}
inline void CreateDeviceRequest_Param::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.CreateDeviceRequest.Param.name)
}
inline void CreateDeviceRequest_Param::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.CreateDeviceRequest.Param.name)
}
inline std::string* CreateDeviceRequest_Param::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateDeviceRequest_Param::release_name() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateDeviceRequest.Param.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateDeviceRequest_Param::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateDeviceRequest.Param.name)
}

// uint32 numBlocks = 2;
inline void CreateDeviceRequest_Param::clear_numblocks() {
  numblocks_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateDeviceRequest_Param::_internal_numblocks() const {
  return numblocks_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateDeviceRequest_Param::numblocks() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateDeviceRequest.Param.numBlocks)
  return _internal_numblocks();
}
inline void CreateDeviceRequest_Param::_internal_set_numblocks(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  numblocks_ = value;
}
inline void CreateDeviceRequest_Param::set_numblocks(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_numblocks(value);
  // @@protoc_insertion_point(field_set:grpc_cli.CreateDeviceRequest.Param.numBlocks)
}

// uint32 blockSize = 3;
inline void CreateDeviceRequest_Param::clear_blocksize() {
  blocksize_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateDeviceRequest_Param::_internal_blocksize() const {
  return blocksize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateDeviceRequest_Param::blocksize() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateDeviceRequest.Param.blockSize)
  return _internal_blocksize();
}
inline void CreateDeviceRequest_Param::_internal_set_blocksize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  blocksize_ = value;
}
inline void CreateDeviceRequest_Param::set_blocksize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_blocksize(value);
  // @@protoc_insertion_point(field_set:grpc_cli.CreateDeviceRequest.Param.blockSize)
}

// string devType = 4;
inline void CreateDeviceRequest_Param::clear_devtype() {
  devtype_.ClearToEmpty();
}
inline const std::string& CreateDeviceRequest_Param::devtype() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateDeviceRequest.Param.devType)
  return _internal_devtype();
}
inline void CreateDeviceRequest_Param::set_devtype(const std::string& value) {
  _internal_set_devtype(value);
  // @@protoc_insertion_point(field_set:grpc_cli.CreateDeviceRequest.Param.devType)
}
inline std::string* CreateDeviceRequest_Param::mutable_devtype() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateDeviceRequest.Param.devType)
  return _internal_mutable_devtype();
}
inline const std::string& CreateDeviceRequest_Param::_internal_devtype() const {
  return devtype_.Get();
}
inline void CreateDeviceRequest_Param::_internal_set_devtype(const std::string& value) {
  
  devtype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateDeviceRequest_Param::set_devtype(std::string&& value) {
  
  devtype_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.CreateDeviceRequest.Param.devType)
}
inline void CreateDeviceRequest_Param::set_devtype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  devtype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.CreateDeviceRequest.Param.devType)
}
inline void CreateDeviceRequest_Param::set_devtype(const char* value,
    size_t size) {
  
  devtype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.CreateDeviceRequest.Param.devType)
}
inline std::string* CreateDeviceRequest_Param::_internal_mutable_devtype() {
  
  return devtype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateDeviceRequest_Param::release_devtype() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateDeviceRequest.Param.devType)
  return devtype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateDeviceRequest_Param::set_allocated_devtype(std::string* devtype) {
  if (devtype != nullptr) {
    
  } else {
    
  }
  devtype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), devtype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateDeviceRequest.Param.devType)
}

// uint32 numa = 5;
inline void CreateDeviceRequest_Param::clear_numa() {
  numa_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateDeviceRequest_Param::_internal_numa() const {
  return numa_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateDeviceRequest_Param::numa() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateDeviceRequest.Param.numa)
  return _internal_numa();
}
inline void CreateDeviceRequest_Param::_internal_set_numa(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  numa_ = value;
}
inline void CreateDeviceRequest_Param::set_numa(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_numa(value);
  // @@protoc_insertion_point(field_set:grpc_cli.CreateDeviceRequest.Param.numa)
}

// -------------------------------------------------------------------

// CreateDeviceRequest

// string command = 1;
inline void CreateDeviceRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& CreateDeviceRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateDeviceRequest.command)
  return _internal_command();
}
inline void CreateDeviceRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.CreateDeviceRequest.command)
}
inline std::string* CreateDeviceRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateDeviceRequest.command)
  return _internal_mutable_command();
}
inline const std::string& CreateDeviceRequest::_internal_command() const {
  return command_.Get();
}
inline void CreateDeviceRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateDeviceRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.CreateDeviceRequest.command)
}
inline void CreateDeviceRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.CreateDeviceRequest.command)
}
inline void CreateDeviceRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.CreateDeviceRequest.command)
}
inline std::string* CreateDeviceRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateDeviceRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateDeviceRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateDeviceRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateDeviceRequest.command)
}

// string rid = 2;
inline void CreateDeviceRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& CreateDeviceRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateDeviceRequest.rid)
  return _internal_rid();
}
inline void CreateDeviceRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.CreateDeviceRequest.rid)
}
inline std::string* CreateDeviceRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateDeviceRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& CreateDeviceRequest::_internal_rid() const {
  return rid_.Get();
}
inline void CreateDeviceRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateDeviceRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.CreateDeviceRequest.rid)
}
inline void CreateDeviceRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.CreateDeviceRequest.rid)
}
inline void CreateDeviceRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.CreateDeviceRequest.rid)
}
inline std::string* CreateDeviceRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateDeviceRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateDeviceRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateDeviceRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateDeviceRequest.rid)
}

// string requestor = 3;
inline void CreateDeviceRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& CreateDeviceRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateDeviceRequest.requestor)
  return _internal_requestor();
}
inline void CreateDeviceRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.CreateDeviceRequest.requestor)
}
inline std::string* CreateDeviceRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateDeviceRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& CreateDeviceRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void CreateDeviceRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateDeviceRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.CreateDeviceRequest.requestor)
}
inline void CreateDeviceRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.CreateDeviceRequest.requestor)
}
inline void CreateDeviceRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.CreateDeviceRequest.requestor)
}
inline std::string* CreateDeviceRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateDeviceRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateDeviceRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateDeviceRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateDeviceRequest.requestor)
}

// .grpc_cli.CreateDeviceRequest.Param param = 4;
inline bool CreateDeviceRequest::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool CreateDeviceRequest::has_param() const {
  return _internal_has_param();
}
inline void CreateDeviceRequest::clear_param() {
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::grpc_cli::CreateDeviceRequest_Param& CreateDeviceRequest::_internal_param() const {
  const ::grpc_cli::CreateDeviceRequest_Param* p = param_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::CreateDeviceRequest_Param&>(
      ::grpc_cli::_CreateDeviceRequest_Param_default_instance_);
}
inline const ::grpc_cli::CreateDeviceRequest_Param& CreateDeviceRequest::param() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateDeviceRequest.param)
  return _internal_param();
}
inline void CreateDeviceRequest::unsafe_arena_set_allocated_param(
    ::grpc_cli::CreateDeviceRequest_Param* param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.CreateDeviceRequest.param)
}
inline ::grpc_cli::CreateDeviceRequest_Param* CreateDeviceRequest::release_param() {
  
  ::grpc_cli::CreateDeviceRequest_Param* temp = param_;
  param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::CreateDeviceRequest_Param* CreateDeviceRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateDeviceRequest.param)
  
  ::grpc_cli::CreateDeviceRequest_Param* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::grpc_cli::CreateDeviceRequest_Param* CreateDeviceRequest::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::CreateDeviceRequest_Param>(GetArena());
    param_ = p;
  }
  return param_;
}
inline ::grpc_cli::CreateDeviceRequest_Param* CreateDeviceRequest::mutable_param() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateDeviceRequest.param)
  return _internal_mutable_param();
}
inline void CreateDeviceRequest::set_allocated_param(::grpc_cli::CreateDeviceRequest_Param* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateDeviceRequest.param)
}

// -------------------------------------------------------------------

// CreateDeviceResponse_Result

// .grpc_cli.Status status = 1;
inline bool CreateDeviceResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool CreateDeviceResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void CreateDeviceResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& CreateDeviceResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& CreateDeviceResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateDeviceResponse.Result.status)
  return _internal_status();
}
inline void CreateDeviceResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.CreateDeviceResponse.Result.status)
}
inline ::grpc_cli::Status* CreateDeviceResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* CreateDeviceResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateDeviceResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* CreateDeviceResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* CreateDeviceResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateDeviceResponse.Result.status)
  return _internal_mutable_status();
}
inline void CreateDeviceResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateDeviceResponse.Result.status)
}

// -------------------------------------------------------------------

// CreateDeviceResponse

// string command = 1;
inline void CreateDeviceResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& CreateDeviceResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateDeviceResponse.command)
  return _internal_command();
}
inline void CreateDeviceResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.CreateDeviceResponse.command)
}
inline std::string* CreateDeviceResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateDeviceResponse.command)
  return _internal_mutable_command();
}
inline const std::string& CreateDeviceResponse::_internal_command() const {
  return command_.Get();
}
inline void CreateDeviceResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateDeviceResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.CreateDeviceResponse.command)
}
inline void CreateDeviceResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.CreateDeviceResponse.command)
}
inline void CreateDeviceResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.CreateDeviceResponse.command)
}
inline std::string* CreateDeviceResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateDeviceResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateDeviceResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateDeviceResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateDeviceResponse.command)
}

// string rid = 2;
inline void CreateDeviceResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& CreateDeviceResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateDeviceResponse.rid)
  return _internal_rid();
}
inline void CreateDeviceResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.CreateDeviceResponse.rid)
}
inline std::string* CreateDeviceResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateDeviceResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& CreateDeviceResponse::_internal_rid() const {
  return rid_.Get();
}
inline void CreateDeviceResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateDeviceResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.CreateDeviceResponse.rid)
}
inline void CreateDeviceResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.CreateDeviceResponse.rid)
}
inline void CreateDeviceResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.CreateDeviceResponse.rid)
}
inline std::string* CreateDeviceResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateDeviceResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateDeviceResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateDeviceResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateDeviceResponse.rid)
}

// .grpc_cli.CreateDeviceResponse.Result result = 3;
inline bool CreateDeviceResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool CreateDeviceResponse::has_result() const {
  return _internal_has_result();
}
inline void CreateDeviceResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::CreateDeviceResponse_Result& CreateDeviceResponse::_internal_result() const {
  const ::grpc_cli::CreateDeviceResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::CreateDeviceResponse_Result&>(
      ::grpc_cli::_CreateDeviceResponse_Result_default_instance_);
}
inline const ::grpc_cli::CreateDeviceResponse_Result& CreateDeviceResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateDeviceResponse.result)
  return _internal_result();
}
inline void CreateDeviceResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::CreateDeviceResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.CreateDeviceResponse.result)
}
inline ::grpc_cli::CreateDeviceResponse_Result* CreateDeviceResponse::release_result() {
  
  ::grpc_cli::CreateDeviceResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::CreateDeviceResponse_Result* CreateDeviceResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateDeviceResponse.result)
  
  ::grpc_cli::CreateDeviceResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::CreateDeviceResponse_Result* CreateDeviceResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::CreateDeviceResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::CreateDeviceResponse_Result* CreateDeviceResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateDeviceResponse.result)
  return _internal_mutable_result();
}
inline void CreateDeviceResponse::set_allocated_result(::grpc_cli::CreateDeviceResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateDeviceResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool CreateDeviceResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool CreateDeviceResponse::has_info() const {
  return _internal_has_info();
}
inline void CreateDeviceResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& CreateDeviceResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& CreateDeviceResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateDeviceResponse.info)
  return _internal_info();
}
inline void CreateDeviceResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.CreateDeviceResponse.info)
}
inline ::grpc_cli::PosInfo* CreateDeviceResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* CreateDeviceResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateDeviceResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* CreateDeviceResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* CreateDeviceResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateDeviceResponse.info)
  return _internal_mutable_info();
}
inline void CreateDeviceResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateDeviceResponse.info)
}

// -------------------------------------------------------------------

// ScanDeviceRequest

// string command = 1;
inline void ScanDeviceRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& ScanDeviceRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ScanDeviceRequest.command)
  return _internal_command();
}
inline void ScanDeviceRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ScanDeviceRequest.command)
}
inline std::string* ScanDeviceRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ScanDeviceRequest.command)
  return _internal_mutable_command();
}
inline const std::string& ScanDeviceRequest::_internal_command() const {
  return command_.Get();
}
inline void ScanDeviceRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ScanDeviceRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ScanDeviceRequest.command)
}
inline void ScanDeviceRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ScanDeviceRequest.command)
}
inline void ScanDeviceRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ScanDeviceRequest.command)
}
inline std::string* ScanDeviceRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ScanDeviceRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.ScanDeviceRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ScanDeviceRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ScanDeviceRequest.command)
}

// string rid = 2;
inline void ScanDeviceRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& ScanDeviceRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ScanDeviceRequest.rid)
  return _internal_rid();
}
inline void ScanDeviceRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ScanDeviceRequest.rid)
}
inline std::string* ScanDeviceRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ScanDeviceRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& ScanDeviceRequest::_internal_rid() const {
  return rid_.Get();
}
inline void ScanDeviceRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ScanDeviceRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ScanDeviceRequest.rid)
}
inline void ScanDeviceRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ScanDeviceRequest.rid)
}
inline void ScanDeviceRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ScanDeviceRequest.rid)
}
inline std::string* ScanDeviceRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ScanDeviceRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.ScanDeviceRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ScanDeviceRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ScanDeviceRequest.rid)
}

// string requestor = 3;
inline void ScanDeviceRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& ScanDeviceRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ScanDeviceRequest.requestor)
  return _internal_requestor();
}
inline void ScanDeviceRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ScanDeviceRequest.requestor)
}
inline std::string* ScanDeviceRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ScanDeviceRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& ScanDeviceRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void ScanDeviceRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ScanDeviceRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ScanDeviceRequest.requestor)
}
inline void ScanDeviceRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ScanDeviceRequest.requestor)
}
inline void ScanDeviceRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ScanDeviceRequest.requestor)
}
inline std::string* ScanDeviceRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ScanDeviceRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.ScanDeviceRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ScanDeviceRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ScanDeviceRequest.requestor)
}

// -------------------------------------------------------------------

// ScanDeviceResponse_Result

// .grpc_cli.Status status = 1;
inline bool ScanDeviceResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool ScanDeviceResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void ScanDeviceResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& ScanDeviceResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& ScanDeviceResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ScanDeviceResponse.Result.status)
  return _internal_status();
}
inline void ScanDeviceResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ScanDeviceResponse.Result.status)
}
inline ::grpc_cli::Status* ScanDeviceResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* ScanDeviceResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.ScanDeviceResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* ScanDeviceResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* ScanDeviceResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ScanDeviceResponse.Result.status)
  return _internal_mutable_status();
}
inline void ScanDeviceResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ScanDeviceResponse.Result.status)
}

// -------------------------------------------------------------------

// ScanDeviceResponse

// string command = 1;
inline void ScanDeviceResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& ScanDeviceResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ScanDeviceResponse.command)
  return _internal_command();
}
inline void ScanDeviceResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ScanDeviceResponse.command)
}
inline std::string* ScanDeviceResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ScanDeviceResponse.command)
  return _internal_mutable_command();
}
inline const std::string& ScanDeviceResponse::_internal_command() const {
  return command_.Get();
}
inline void ScanDeviceResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ScanDeviceResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ScanDeviceResponse.command)
}
inline void ScanDeviceResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ScanDeviceResponse.command)
}
inline void ScanDeviceResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ScanDeviceResponse.command)
}
inline std::string* ScanDeviceResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ScanDeviceResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.ScanDeviceResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ScanDeviceResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ScanDeviceResponse.command)
}

// string rid = 2;
inline void ScanDeviceResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& ScanDeviceResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ScanDeviceResponse.rid)
  return _internal_rid();
}
inline void ScanDeviceResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ScanDeviceResponse.rid)
}
inline std::string* ScanDeviceResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ScanDeviceResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& ScanDeviceResponse::_internal_rid() const {
  return rid_.Get();
}
inline void ScanDeviceResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ScanDeviceResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ScanDeviceResponse.rid)
}
inline void ScanDeviceResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ScanDeviceResponse.rid)
}
inline void ScanDeviceResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ScanDeviceResponse.rid)
}
inline std::string* ScanDeviceResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ScanDeviceResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.ScanDeviceResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ScanDeviceResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ScanDeviceResponse.rid)
}

// .grpc_cli.ScanDeviceResponse.Result result = 3;
inline bool ScanDeviceResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool ScanDeviceResponse::has_result() const {
  return _internal_has_result();
}
inline void ScanDeviceResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::ScanDeviceResponse_Result& ScanDeviceResponse::_internal_result() const {
  const ::grpc_cli::ScanDeviceResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::ScanDeviceResponse_Result&>(
      ::grpc_cli::_ScanDeviceResponse_Result_default_instance_);
}
inline const ::grpc_cli::ScanDeviceResponse_Result& ScanDeviceResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ScanDeviceResponse.result)
  return _internal_result();
}
inline void ScanDeviceResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::ScanDeviceResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ScanDeviceResponse.result)
}
inline ::grpc_cli::ScanDeviceResponse_Result* ScanDeviceResponse::release_result() {
  
  ::grpc_cli::ScanDeviceResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::ScanDeviceResponse_Result* ScanDeviceResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.ScanDeviceResponse.result)
  
  ::grpc_cli::ScanDeviceResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::ScanDeviceResponse_Result* ScanDeviceResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::ScanDeviceResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::ScanDeviceResponse_Result* ScanDeviceResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ScanDeviceResponse.result)
  return _internal_mutable_result();
}
inline void ScanDeviceResponse::set_allocated_result(::grpc_cli::ScanDeviceResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ScanDeviceResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool ScanDeviceResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool ScanDeviceResponse::has_info() const {
  return _internal_has_info();
}
inline void ScanDeviceResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& ScanDeviceResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& ScanDeviceResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ScanDeviceResponse.info)
  return _internal_info();
}
inline void ScanDeviceResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ScanDeviceResponse.info)
}
inline ::grpc_cli::PosInfo* ScanDeviceResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* ScanDeviceResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.ScanDeviceResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* ScanDeviceResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* ScanDeviceResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ScanDeviceResponse.info)
  return _internal_mutable_info();
}
inline void ScanDeviceResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ScanDeviceResponse.info)
}

// -------------------------------------------------------------------

// Device

// string name = 1;
inline void Device::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Device::name() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Device.name)
  return _internal_name();
}
inline void Device::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Device.name)
}
inline std::string* Device::mutable_name() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Device.name)
  return _internal_mutable_name();
}
inline const std::string& Device::_internal_name() const {
  return name_.Get();
}
inline void Device::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Device::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Device.name)
}
inline void Device::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Device.name)
}
inline void Device::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Device.name)
}
inline std::string* Device::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Device::release_name() {
  // @@protoc_insertion_point(field_release:grpc_cli.Device.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Device::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Device.name)
}

// string type = 2;
inline void Device::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& Device::type() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Device.type)
  return _internal_type();
}
inline void Device::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Device.type)
}
inline std::string* Device::mutable_type() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Device.type)
  return _internal_mutable_type();
}
inline const std::string& Device::_internal_type() const {
  return type_.Get();
}
inline void Device::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Device::set_type(std::string&& value) {
  
  type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Device.type)
}
inline void Device::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Device.type)
}
inline void Device::set_type(const char* value,
    size_t size) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Device.type)
}
inline std::string* Device::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Device::release_type() {
  // @@protoc_insertion_point(field_release:grpc_cli.Device.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Device::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Device.type)
}

// string address = 3;
inline void Device::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& Device::address() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Device.address)
  return _internal_address();
}
inline void Device::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Device.address)
}
inline std::string* Device::mutable_address() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Device.address)
  return _internal_mutable_address();
}
inline const std::string& Device::_internal_address() const {
  return address_.Get();
}
inline void Device::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Device::set_address(std::string&& value) {
  
  address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Device.address)
}
inline void Device::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Device.address)
}
inline void Device::set_address(const char* value,
    size_t size) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Device.address)
}
inline std::string* Device::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Device::release_address() {
  // @@protoc_insertion_point(field_release:grpc_cli.Device.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Device::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Device.address)
}

// string class = 4;
inline void Device::clear_class_() {
  class__.ClearToEmpty();
}
inline const std::string& Device::class_() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Device.class)
  return _internal_class_();
}
inline void Device::set_class_(const std::string& value) {
  _internal_set_class_(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Device.class)
}
inline std::string* Device::mutable_class_() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Device.class)
  return _internal_mutable_class_();
}
inline const std::string& Device::_internal_class_() const {
  return class__.Get();
}
inline void Device::_internal_set_class_(const std::string& value) {
  
  class__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Device::set_class_(std::string&& value) {
  
  class__.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Device.class)
}
inline void Device::set_class_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  class__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Device.class)
}
inline void Device::set_class_(const char* value,
    size_t size) {
  
  class__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Device.class)
}
inline std::string* Device::_internal_mutable_class_() {
  
  return class__.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Device::release_class_() {
  // @@protoc_insertion_point(field_release:grpc_cli.Device.class)
  return class__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Device::set_allocated_class_(std::string* class_) {
  if (class_ != nullptr) {
    
  } else {
    
  }
  class__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), class_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Device.class)
}

// string modelNumber = 5;
inline void Device::clear_modelnumber() {
  modelnumber_.ClearToEmpty();
}
inline const std::string& Device::modelnumber() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Device.modelNumber)
  return _internal_modelnumber();
}
inline void Device::set_modelnumber(const std::string& value) {
  _internal_set_modelnumber(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Device.modelNumber)
}
inline std::string* Device::mutable_modelnumber() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Device.modelNumber)
  return _internal_mutable_modelnumber();
}
inline const std::string& Device::_internal_modelnumber() const {
  return modelnumber_.Get();
}
inline void Device::_internal_set_modelnumber(const std::string& value) {
  
  modelnumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Device::set_modelnumber(std::string&& value) {
  
  modelnumber_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Device.modelNumber)
}
inline void Device::set_modelnumber(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  modelnumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Device.modelNumber)
}
inline void Device::set_modelnumber(const char* value,
    size_t size) {
  
  modelnumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Device.modelNumber)
}
inline std::string* Device::_internal_mutable_modelnumber() {
  
  return modelnumber_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Device::release_modelnumber() {
  // @@protoc_insertion_point(field_release:grpc_cli.Device.modelNumber)
  return modelnumber_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Device::set_allocated_modelnumber(std::string* modelnumber) {
  if (modelnumber != nullptr) {
    
  } else {
    
  }
  modelnumber_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), modelnumber,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Device.modelNumber)
}

// string numa = 6;
inline void Device::clear_numa() {
  numa_.ClearToEmpty();
}
inline const std::string& Device::numa() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Device.numa)
  return _internal_numa();
}
inline void Device::set_numa(const std::string& value) {
  _internal_set_numa(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Device.numa)
}
inline std::string* Device::mutable_numa() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Device.numa)
  return _internal_mutable_numa();
}
inline const std::string& Device::_internal_numa() const {
  return numa_.Get();
}
inline void Device::_internal_set_numa(const std::string& value) {
  
  numa_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Device::set_numa(std::string&& value) {
  
  numa_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Device.numa)
}
inline void Device::set_numa(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  numa_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Device.numa)
}
inline void Device::set_numa(const char* value,
    size_t size) {
  
  numa_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Device.numa)
}
inline std::string* Device::_internal_mutable_numa() {
  
  return numa_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Device::release_numa() {
  // @@protoc_insertion_point(field_release:grpc_cli.Device.numa)
  return numa_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Device::set_allocated_numa(std::string* numa) {
  if (numa != nullptr) {
    
  } else {
    
  }
  numa_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), numa,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Device.numa)
}

// uint64 size = 7;
inline void Device::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Device::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Device::size() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Device.size)
  return _internal_size();
}
inline void Device::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  size_ = value;
}
inline void Device::set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Device.size)
}

// string serialNumber = 8;
inline void Device::clear_serialnumber() {
  serialnumber_.ClearToEmpty();
}
inline const std::string& Device::serialnumber() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Device.serialNumber)
  return _internal_serialnumber();
}
inline void Device::set_serialnumber(const std::string& value) {
  _internal_set_serialnumber(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Device.serialNumber)
}
inline std::string* Device::mutable_serialnumber() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Device.serialNumber)
  return _internal_mutable_serialnumber();
}
inline const std::string& Device::_internal_serialnumber() const {
  return serialnumber_.Get();
}
inline void Device::_internal_set_serialnumber(const std::string& value) {
  
  serialnumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Device::set_serialnumber(std::string&& value) {
  
  serialnumber_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Device.serialNumber)
}
inline void Device::set_serialnumber(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  serialnumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Device.serialNumber)
}
inline void Device::set_serialnumber(const char* value,
    size_t size) {
  
  serialnumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Device.serialNumber)
}
inline std::string* Device::_internal_mutable_serialnumber() {
  
  return serialnumber_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Device::release_serialnumber() {
  // @@protoc_insertion_point(field_release:grpc_cli.Device.serialNumber)
  return serialnumber_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Device::set_allocated_serialnumber(std::string* serialnumber) {
  if (serialnumber != nullptr) {
    
  } else {
    
  }
  serialnumber_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serialnumber,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Device.serialNumber)
}

// -------------------------------------------------------------------

// ListDeviceRequest

// string command = 1;
inline void ListDeviceRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& ListDeviceRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListDeviceRequest.command)
  return _internal_command();
}
inline void ListDeviceRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListDeviceRequest.command)
}
inline std::string* ListDeviceRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListDeviceRequest.command)
  return _internal_mutable_command();
}
inline const std::string& ListDeviceRequest::_internal_command() const {
  return command_.Get();
}
inline void ListDeviceRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListDeviceRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListDeviceRequest.command)
}
inline void ListDeviceRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListDeviceRequest.command)
}
inline void ListDeviceRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListDeviceRequest.command)
}
inline std::string* ListDeviceRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListDeviceRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListDeviceRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListDeviceRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListDeviceRequest.command)
}

// string rid = 2;
inline void ListDeviceRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& ListDeviceRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListDeviceRequest.rid)
  return _internal_rid();
}
inline void ListDeviceRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListDeviceRequest.rid)
}
inline std::string* ListDeviceRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListDeviceRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& ListDeviceRequest::_internal_rid() const {
  return rid_.Get();
}
inline void ListDeviceRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListDeviceRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListDeviceRequest.rid)
}
inline void ListDeviceRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListDeviceRequest.rid)
}
inline void ListDeviceRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListDeviceRequest.rid)
}
inline std::string* ListDeviceRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListDeviceRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListDeviceRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListDeviceRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListDeviceRequest.rid)
}

// string requestor = 3;
inline void ListDeviceRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& ListDeviceRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListDeviceRequest.requestor)
  return _internal_requestor();
}
inline void ListDeviceRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListDeviceRequest.requestor)
}
inline std::string* ListDeviceRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListDeviceRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& ListDeviceRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void ListDeviceRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListDeviceRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListDeviceRequest.requestor)
}
inline void ListDeviceRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListDeviceRequest.requestor)
}
inline void ListDeviceRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListDeviceRequest.requestor)
}
inline std::string* ListDeviceRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListDeviceRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListDeviceRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListDeviceRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListDeviceRequest.requestor)
}

// -------------------------------------------------------------------

// ListDeviceResponse_Result_DeviceList

// repeated .grpc_cli.Device devicelist = 1;
inline int ListDeviceResponse_Result_DeviceList::_internal_devicelist_size() const {
  return devicelist_.size();
}
inline int ListDeviceResponse_Result_DeviceList::devicelist_size() const {
  return _internal_devicelist_size();
}
inline void ListDeviceResponse_Result_DeviceList::clear_devicelist() {
  devicelist_.Clear();
}
inline ::grpc_cli::Device* ListDeviceResponse_Result_DeviceList::mutable_devicelist(int index) {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListDeviceResponse.Result.DeviceList.devicelist)
  return devicelist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::Device >*
ListDeviceResponse_Result_DeviceList::mutable_devicelist() {
  // @@protoc_insertion_point(field_mutable_list:grpc_cli.ListDeviceResponse.Result.DeviceList.devicelist)
  return &devicelist_;
}
inline const ::grpc_cli::Device& ListDeviceResponse_Result_DeviceList::_internal_devicelist(int index) const {
  return devicelist_.Get(index);
}
inline const ::grpc_cli::Device& ListDeviceResponse_Result_DeviceList::devicelist(int index) const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListDeviceResponse.Result.DeviceList.devicelist)
  return _internal_devicelist(index);
}
inline ::grpc_cli::Device* ListDeviceResponse_Result_DeviceList::_internal_add_devicelist() {
  return devicelist_.Add();
}
inline ::grpc_cli::Device* ListDeviceResponse_Result_DeviceList::add_devicelist() {
  // @@protoc_insertion_point(field_add:grpc_cli.ListDeviceResponse.Result.DeviceList.devicelist)
  return _internal_add_devicelist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::Device >&
ListDeviceResponse_Result_DeviceList::devicelist() const {
  // @@protoc_insertion_point(field_list:grpc_cli.ListDeviceResponse.Result.DeviceList.devicelist)
  return devicelist_;
}

// -------------------------------------------------------------------

// ListDeviceResponse_Result

// .grpc_cli.Status status = 1;
inline bool ListDeviceResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool ListDeviceResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void ListDeviceResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& ListDeviceResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& ListDeviceResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListDeviceResponse.Result.status)
  return _internal_status();
}
inline void ListDeviceResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ListDeviceResponse.Result.status)
}
inline ::grpc_cli::Status* ListDeviceResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* ListDeviceResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListDeviceResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* ListDeviceResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* ListDeviceResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListDeviceResponse.Result.status)
  return _internal_mutable_status();
}
inline void ListDeviceResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListDeviceResponse.Result.status)
}

// .grpc_cli.ListDeviceResponse.Result.DeviceList data = 2;
inline bool ListDeviceResponse_Result::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool ListDeviceResponse_Result::has_data() const {
  return _internal_has_data();
}
inline void ListDeviceResponse_Result::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::grpc_cli::ListDeviceResponse_Result_DeviceList& ListDeviceResponse_Result::_internal_data() const {
  const ::grpc_cli::ListDeviceResponse_Result_DeviceList* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::ListDeviceResponse_Result_DeviceList&>(
      ::grpc_cli::_ListDeviceResponse_Result_DeviceList_default_instance_);
}
inline const ::grpc_cli::ListDeviceResponse_Result_DeviceList& ListDeviceResponse_Result::data() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListDeviceResponse.Result.data)
  return _internal_data();
}
inline void ListDeviceResponse_Result::unsafe_arena_set_allocated_data(
    ::grpc_cli::ListDeviceResponse_Result_DeviceList* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ListDeviceResponse.Result.data)
}
inline ::grpc_cli::ListDeviceResponse_Result_DeviceList* ListDeviceResponse_Result::release_data() {
  
  ::grpc_cli::ListDeviceResponse_Result_DeviceList* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::ListDeviceResponse_Result_DeviceList* ListDeviceResponse_Result::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListDeviceResponse.Result.data)
  
  ::grpc_cli::ListDeviceResponse_Result_DeviceList* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::grpc_cli::ListDeviceResponse_Result_DeviceList* ListDeviceResponse_Result::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::ListDeviceResponse_Result_DeviceList>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::grpc_cli::ListDeviceResponse_Result_DeviceList* ListDeviceResponse_Result::mutable_data() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListDeviceResponse.Result.data)
  return _internal_mutable_data();
}
inline void ListDeviceResponse_Result::set_allocated_data(::grpc_cli::ListDeviceResponse_Result_DeviceList* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListDeviceResponse.Result.data)
}

// -------------------------------------------------------------------

// ListDeviceResponse

// string command = 1;
inline void ListDeviceResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& ListDeviceResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListDeviceResponse.command)
  return _internal_command();
}
inline void ListDeviceResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListDeviceResponse.command)
}
inline std::string* ListDeviceResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListDeviceResponse.command)
  return _internal_mutable_command();
}
inline const std::string& ListDeviceResponse::_internal_command() const {
  return command_.Get();
}
inline void ListDeviceResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListDeviceResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListDeviceResponse.command)
}
inline void ListDeviceResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListDeviceResponse.command)
}
inline void ListDeviceResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListDeviceResponse.command)
}
inline std::string* ListDeviceResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListDeviceResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListDeviceResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListDeviceResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListDeviceResponse.command)
}

// string rid = 2;
inline void ListDeviceResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& ListDeviceResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListDeviceResponse.rid)
  return _internal_rid();
}
inline void ListDeviceResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListDeviceResponse.rid)
}
inline std::string* ListDeviceResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListDeviceResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& ListDeviceResponse::_internal_rid() const {
  return rid_.Get();
}
inline void ListDeviceResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListDeviceResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListDeviceResponse.rid)
}
inline void ListDeviceResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListDeviceResponse.rid)
}
inline void ListDeviceResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListDeviceResponse.rid)
}
inline std::string* ListDeviceResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListDeviceResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListDeviceResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListDeviceResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListDeviceResponse.rid)
}

// .grpc_cli.ListDeviceResponse.Result result = 3;
inline bool ListDeviceResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool ListDeviceResponse::has_result() const {
  return _internal_has_result();
}
inline void ListDeviceResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::ListDeviceResponse_Result& ListDeviceResponse::_internal_result() const {
  const ::grpc_cli::ListDeviceResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::ListDeviceResponse_Result&>(
      ::grpc_cli::_ListDeviceResponse_Result_default_instance_);
}
inline const ::grpc_cli::ListDeviceResponse_Result& ListDeviceResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListDeviceResponse.result)
  return _internal_result();
}
inline void ListDeviceResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::ListDeviceResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ListDeviceResponse.result)
}
inline ::grpc_cli::ListDeviceResponse_Result* ListDeviceResponse::release_result() {
  
  ::grpc_cli::ListDeviceResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::ListDeviceResponse_Result* ListDeviceResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListDeviceResponse.result)
  
  ::grpc_cli::ListDeviceResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::ListDeviceResponse_Result* ListDeviceResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::ListDeviceResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::ListDeviceResponse_Result* ListDeviceResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListDeviceResponse.result)
  return _internal_mutable_result();
}
inline void ListDeviceResponse::set_allocated_result(::grpc_cli::ListDeviceResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListDeviceResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool ListDeviceResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool ListDeviceResponse::has_info() const {
  return _internal_has_info();
}
inline void ListDeviceResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& ListDeviceResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& ListDeviceResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListDeviceResponse.info)
  return _internal_info();
}
inline void ListDeviceResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ListDeviceResponse.info)
}
inline ::grpc_cli::PosInfo* ListDeviceResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* ListDeviceResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListDeviceResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* ListDeviceResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* ListDeviceResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListDeviceResponse.info)
  return _internal_mutable_info();
}
inline void ListDeviceResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListDeviceResponse.info)
}

// -------------------------------------------------------------------

// SmartLog

// string availableSpareSpace = 1;
inline void SmartLog::clear_availablesparespace() {
  availablesparespace_.ClearToEmpty();
}
inline const std::string& SmartLog::availablesparespace() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SmartLog.availableSpareSpace)
  return _internal_availablesparespace();
}
inline void SmartLog::set_availablesparespace(const std::string& value) {
  _internal_set_availablesparespace(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SmartLog.availableSpareSpace)
}
inline std::string* SmartLog::mutable_availablesparespace() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SmartLog.availableSpareSpace)
  return _internal_mutable_availablesparespace();
}
inline const std::string& SmartLog::_internal_availablesparespace() const {
  return availablesparespace_.Get();
}
inline void SmartLog::_internal_set_availablesparespace(const std::string& value) {
  
  availablesparespace_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SmartLog::set_availablesparespace(std::string&& value) {
  
  availablesparespace_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SmartLog.availableSpareSpace)
}
inline void SmartLog::set_availablesparespace(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  availablesparespace_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SmartLog.availableSpareSpace)
}
inline void SmartLog::set_availablesparespace(const char* value,
    size_t size) {
  
  availablesparespace_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SmartLog.availableSpareSpace)
}
inline std::string* SmartLog::_internal_mutable_availablesparespace() {
  
  return availablesparespace_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SmartLog::release_availablesparespace() {
  // @@protoc_insertion_point(field_release:grpc_cli.SmartLog.availableSpareSpace)
  return availablesparespace_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SmartLog::set_allocated_availablesparespace(std::string* availablesparespace) {
  if (availablesparespace != nullptr) {
    
  } else {
    
  }
  availablesparespace_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), availablesparespace,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SmartLog.availableSpareSpace)
}

// string temperature = 2;
inline void SmartLog::clear_temperature() {
  temperature_.ClearToEmpty();
}
inline const std::string& SmartLog::temperature() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SmartLog.temperature)
  return _internal_temperature();
}
inline void SmartLog::set_temperature(const std::string& value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SmartLog.temperature)
}
inline std::string* SmartLog::mutable_temperature() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SmartLog.temperature)
  return _internal_mutable_temperature();
}
inline const std::string& SmartLog::_internal_temperature() const {
  return temperature_.Get();
}
inline void SmartLog::_internal_set_temperature(const std::string& value) {
  
  temperature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SmartLog::set_temperature(std::string&& value) {
  
  temperature_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SmartLog.temperature)
}
inline void SmartLog::set_temperature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  temperature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SmartLog.temperature)
}
inline void SmartLog::set_temperature(const char* value,
    size_t size) {
  
  temperature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SmartLog.temperature)
}
inline std::string* SmartLog::_internal_mutable_temperature() {
  
  return temperature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SmartLog::release_temperature() {
  // @@protoc_insertion_point(field_release:grpc_cli.SmartLog.temperature)
  return temperature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SmartLog::set_allocated_temperature(std::string* temperature) {
  if (temperature != nullptr) {
    
  } else {
    
  }
  temperature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), temperature,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SmartLog.temperature)
}

// string deviceReliability = 3;
inline void SmartLog::clear_devicereliability() {
  devicereliability_.ClearToEmpty();
}
inline const std::string& SmartLog::devicereliability() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SmartLog.deviceReliability)
  return _internal_devicereliability();
}
inline void SmartLog::set_devicereliability(const std::string& value) {
  _internal_set_devicereliability(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SmartLog.deviceReliability)
}
inline std::string* SmartLog::mutable_devicereliability() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SmartLog.deviceReliability)
  return _internal_mutable_devicereliability();
}
inline const std::string& SmartLog::_internal_devicereliability() const {
  return devicereliability_.Get();
}
inline void SmartLog::_internal_set_devicereliability(const std::string& value) {
  
  devicereliability_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SmartLog::set_devicereliability(std::string&& value) {
  
  devicereliability_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SmartLog.deviceReliability)
}
inline void SmartLog::set_devicereliability(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  devicereliability_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SmartLog.deviceReliability)
}
inline void SmartLog::set_devicereliability(const char* value,
    size_t size) {
  
  devicereliability_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SmartLog.deviceReliability)
}
inline std::string* SmartLog::_internal_mutable_devicereliability() {
  
  return devicereliability_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SmartLog::release_devicereliability() {
  // @@protoc_insertion_point(field_release:grpc_cli.SmartLog.deviceReliability)
  return devicereliability_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SmartLog::set_allocated_devicereliability(std::string* devicereliability) {
  if (devicereliability != nullptr) {
    
  } else {
    
  }
  devicereliability_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), devicereliability,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SmartLog.deviceReliability)
}

// string readOnly = 4;
inline void SmartLog::clear_readonly() {
  readonly_.ClearToEmpty();
}
inline const std::string& SmartLog::readonly() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SmartLog.readOnly)
  return _internal_readonly();
}
inline void SmartLog::set_readonly(const std::string& value) {
  _internal_set_readonly(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SmartLog.readOnly)
}
inline std::string* SmartLog::mutable_readonly() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SmartLog.readOnly)
  return _internal_mutable_readonly();
}
inline const std::string& SmartLog::_internal_readonly() const {
  return readonly_.Get();
}
inline void SmartLog::_internal_set_readonly(const std::string& value) {
  
  readonly_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SmartLog::set_readonly(std::string&& value) {
  
  readonly_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SmartLog.readOnly)
}
inline void SmartLog::set_readonly(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  readonly_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SmartLog.readOnly)
}
inline void SmartLog::set_readonly(const char* value,
    size_t size) {
  
  readonly_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SmartLog.readOnly)
}
inline std::string* SmartLog::_internal_mutable_readonly() {
  
  return readonly_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SmartLog::release_readonly() {
  // @@protoc_insertion_point(field_release:grpc_cli.SmartLog.readOnly)
  return readonly_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SmartLog::set_allocated_readonly(std::string* readonly) {
  if (readonly != nullptr) {
    
  } else {
    
  }
  readonly_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), readonly,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SmartLog.readOnly)
}

// string volatileMemoryBackup = 5;
inline void SmartLog::clear_volatilememorybackup() {
  volatilememorybackup_.ClearToEmpty();
}
inline const std::string& SmartLog::volatilememorybackup() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SmartLog.volatileMemoryBackup)
  return _internal_volatilememorybackup();
}
inline void SmartLog::set_volatilememorybackup(const std::string& value) {
  _internal_set_volatilememorybackup(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SmartLog.volatileMemoryBackup)
}
inline std::string* SmartLog::mutable_volatilememorybackup() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SmartLog.volatileMemoryBackup)
  return _internal_mutable_volatilememorybackup();
}
inline const std::string& SmartLog::_internal_volatilememorybackup() const {
  return volatilememorybackup_.Get();
}
inline void SmartLog::_internal_set_volatilememorybackup(const std::string& value) {
  
  volatilememorybackup_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SmartLog::set_volatilememorybackup(std::string&& value) {
  
  volatilememorybackup_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SmartLog.volatileMemoryBackup)
}
inline void SmartLog::set_volatilememorybackup(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  volatilememorybackup_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SmartLog.volatileMemoryBackup)
}
inline void SmartLog::set_volatilememorybackup(const char* value,
    size_t size) {
  
  volatilememorybackup_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SmartLog.volatileMemoryBackup)
}
inline std::string* SmartLog::_internal_mutable_volatilememorybackup() {
  
  return volatilememorybackup_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SmartLog::release_volatilememorybackup() {
  // @@protoc_insertion_point(field_release:grpc_cli.SmartLog.volatileMemoryBackup)
  return volatilememorybackup_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SmartLog::set_allocated_volatilememorybackup(std::string* volatilememorybackup) {
  if (volatilememorybackup != nullptr) {
    
  } else {
    
  }
  volatilememorybackup_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), volatilememorybackup,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SmartLog.volatileMemoryBackup)
}

// string currentTemperature = 6;
inline void SmartLog::clear_currenttemperature() {
  currenttemperature_.ClearToEmpty();
}
inline const std::string& SmartLog::currenttemperature() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SmartLog.currentTemperature)
  return _internal_currenttemperature();
}
inline void SmartLog::set_currenttemperature(const std::string& value) {
  _internal_set_currenttemperature(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SmartLog.currentTemperature)
}
inline std::string* SmartLog::mutable_currenttemperature() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SmartLog.currentTemperature)
  return _internal_mutable_currenttemperature();
}
inline const std::string& SmartLog::_internal_currenttemperature() const {
  return currenttemperature_.Get();
}
inline void SmartLog::_internal_set_currenttemperature(const std::string& value) {
  
  currenttemperature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SmartLog::set_currenttemperature(std::string&& value) {
  
  currenttemperature_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SmartLog.currentTemperature)
}
inline void SmartLog::set_currenttemperature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  currenttemperature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SmartLog.currentTemperature)
}
inline void SmartLog::set_currenttemperature(const char* value,
    size_t size) {
  
  currenttemperature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SmartLog.currentTemperature)
}
inline std::string* SmartLog::_internal_mutable_currenttemperature() {
  
  return currenttemperature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SmartLog::release_currenttemperature() {
  // @@protoc_insertion_point(field_release:grpc_cli.SmartLog.currentTemperature)
  return currenttemperature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SmartLog::set_allocated_currenttemperature(std::string* currenttemperature) {
  if (currenttemperature != nullptr) {
    
  } else {
    
  }
  currenttemperature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currenttemperature,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SmartLog.currentTemperature)
}

// string availableSpare = 7;
inline void SmartLog::clear_availablespare() {
  availablespare_.ClearToEmpty();
}
inline const std::string& SmartLog::availablespare() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SmartLog.availableSpare)
  return _internal_availablespare();
}
inline void SmartLog::set_availablespare(const std::string& value) {
  _internal_set_availablespare(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SmartLog.availableSpare)
}
inline std::string* SmartLog::mutable_availablespare() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SmartLog.availableSpare)
  return _internal_mutable_availablespare();
}
inline const std::string& SmartLog::_internal_availablespare() const {
  return availablespare_.Get();
}
inline void SmartLog::_internal_set_availablespare(const std::string& value) {
  
  availablespare_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SmartLog::set_availablespare(std::string&& value) {
  
  availablespare_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SmartLog.availableSpare)
}
inline void SmartLog::set_availablespare(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  availablespare_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SmartLog.availableSpare)
}
inline void SmartLog::set_availablespare(const char* value,
    size_t size) {
  
  availablespare_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SmartLog.availableSpare)
}
inline std::string* SmartLog::_internal_mutable_availablespare() {
  
  return availablespare_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SmartLog::release_availablespare() {
  // @@protoc_insertion_point(field_release:grpc_cli.SmartLog.availableSpare)
  return availablespare_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SmartLog::set_allocated_availablespare(std::string* availablespare) {
  if (availablespare != nullptr) {
    
  } else {
    
  }
  availablespare_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), availablespare,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SmartLog.availableSpare)
}

// string availableSpareThreshold = 8;
inline void SmartLog::clear_availablesparethreshold() {
  availablesparethreshold_.ClearToEmpty();
}
inline const std::string& SmartLog::availablesparethreshold() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SmartLog.availableSpareThreshold)
  return _internal_availablesparethreshold();
}
inline void SmartLog::set_availablesparethreshold(const std::string& value) {
  _internal_set_availablesparethreshold(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SmartLog.availableSpareThreshold)
}
inline std::string* SmartLog::mutable_availablesparethreshold() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SmartLog.availableSpareThreshold)
  return _internal_mutable_availablesparethreshold();
}
inline const std::string& SmartLog::_internal_availablesparethreshold() const {
  return availablesparethreshold_.Get();
}
inline void SmartLog::_internal_set_availablesparethreshold(const std::string& value) {
  
  availablesparethreshold_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SmartLog::set_availablesparethreshold(std::string&& value) {
  
  availablesparethreshold_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SmartLog.availableSpareThreshold)
}
inline void SmartLog::set_availablesparethreshold(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  availablesparethreshold_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SmartLog.availableSpareThreshold)
}
inline void SmartLog::set_availablesparethreshold(const char* value,
    size_t size) {
  
  availablesparethreshold_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SmartLog.availableSpareThreshold)
}
inline std::string* SmartLog::_internal_mutable_availablesparethreshold() {
  
  return availablesparethreshold_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SmartLog::release_availablesparethreshold() {
  // @@protoc_insertion_point(field_release:grpc_cli.SmartLog.availableSpareThreshold)
  return availablesparethreshold_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SmartLog::set_allocated_availablesparethreshold(std::string* availablesparethreshold) {
  if (availablesparethreshold != nullptr) {
    
  } else {
    
  }
  availablesparethreshold_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), availablesparethreshold,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SmartLog.availableSpareThreshold)
}

// string lifePercentageUsed = 9;
inline void SmartLog::clear_lifepercentageused() {
  lifepercentageused_.ClearToEmpty();
}
inline const std::string& SmartLog::lifepercentageused() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SmartLog.lifePercentageUsed)
  return _internal_lifepercentageused();
}
inline void SmartLog::set_lifepercentageused(const std::string& value) {
  _internal_set_lifepercentageused(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SmartLog.lifePercentageUsed)
}
inline std::string* SmartLog::mutable_lifepercentageused() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SmartLog.lifePercentageUsed)
  return _internal_mutable_lifepercentageused();
}
inline const std::string& SmartLog::_internal_lifepercentageused() const {
  return lifepercentageused_.Get();
}
inline void SmartLog::_internal_set_lifepercentageused(const std::string& value) {
  
  lifepercentageused_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SmartLog::set_lifepercentageused(std::string&& value) {
  
  lifepercentageused_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SmartLog.lifePercentageUsed)
}
inline void SmartLog::set_lifepercentageused(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lifepercentageused_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SmartLog.lifePercentageUsed)
}
inline void SmartLog::set_lifepercentageused(const char* value,
    size_t size) {
  
  lifepercentageused_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SmartLog.lifePercentageUsed)
}
inline std::string* SmartLog::_internal_mutable_lifepercentageused() {
  
  return lifepercentageused_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SmartLog::release_lifepercentageused() {
  // @@protoc_insertion_point(field_release:grpc_cli.SmartLog.lifePercentageUsed)
  return lifepercentageused_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SmartLog::set_allocated_lifepercentageused(std::string* lifepercentageused) {
  if (lifepercentageused != nullptr) {
    
  } else {
    
  }
  lifepercentageused_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lifepercentageused,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SmartLog.lifePercentageUsed)
}

// string dataUnitsRead = 10;
inline void SmartLog::clear_dataunitsread() {
  dataunitsread_.ClearToEmpty();
}
inline const std::string& SmartLog::dataunitsread() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SmartLog.dataUnitsRead)
  return _internal_dataunitsread();
}
inline void SmartLog::set_dataunitsread(const std::string& value) {
  _internal_set_dataunitsread(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SmartLog.dataUnitsRead)
}
inline std::string* SmartLog::mutable_dataunitsread() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SmartLog.dataUnitsRead)
  return _internal_mutable_dataunitsread();
}
inline const std::string& SmartLog::_internal_dataunitsread() const {
  return dataunitsread_.Get();
}
inline void SmartLog::_internal_set_dataunitsread(const std::string& value) {
  
  dataunitsread_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SmartLog::set_dataunitsread(std::string&& value) {
  
  dataunitsread_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SmartLog.dataUnitsRead)
}
inline void SmartLog::set_dataunitsread(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dataunitsread_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SmartLog.dataUnitsRead)
}
inline void SmartLog::set_dataunitsread(const char* value,
    size_t size) {
  
  dataunitsread_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SmartLog.dataUnitsRead)
}
inline std::string* SmartLog::_internal_mutable_dataunitsread() {
  
  return dataunitsread_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SmartLog::release_dataunitsread() {
  // @@protoc_insertion_point(field_release:grpc_cli.SmartLog.dataUnitsRead)
  return dataunitsread_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SmartLog::set_allocated_dataunitsread(std::string* dataunitsread) {
  if (dataunitsread != nullptr) {
    
  } else {
    
  }
  dataunitsread_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dataunitsread,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SmartLog.dataUnitsRead)
}

// string dataUnitsWritten = 11;
inline void SmartLog::clear_dataunitswritten() {
  dataunitswritten_.ClearToEmpty();
}
inline const std::string& SmartLog::dataunitswritten() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SmartLog.dataUnitsWritten)
  return _internal_dataunitswritten();
}
inline void SmartLog::set_dataunitswritten(const std::string& value) {
  _internal_set_dataunitswritten(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SmartLog.dataUnitsWritten)
}
inline std::string* SmartLog::mutable_dataunitswritten() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SmartLog.dataUnitsWritten)
  return _internal_mutable_dataunitswritten();
}
inline const std::string& SmartLog::_internal_dataunitswritten() const {
  return dataunitswritten_.Get();
}
inline void SmartLog::_internal_set_dataunitswritten(const std::string& value) {
  
  dataunitswritten_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SmartLog::set_dataunitswritten(std::string&& value) {
  
  dataunitswritten_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SmartLog.dataUnitsWritten)
}
inline void SmartLog::set_dataunitswritten(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dataunitswritten_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SmartLog.dataUnitsWritten)
}
inline void SmartLog::set_dataunitswritten(const char* value,
    size_t size) {
  
  dataunitswritten_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SmartLog.dataUnitsWritten)
}
inline std::string* SmartLog::_internal_mutable_dataunitswritten() {
  
  return dataunitswritten_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SmartLog::release_dataunitswritten() {
  // @@protoc_insertion_point(field_release:grpc_cli.SmartLog.dataUnitsWritten)
  return dataunitswritten_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SmartLog::set_allocated_dataunitswritten(std::string* dataunitswritten) {
  if (dataunitswritten != nullptr) {
    
  } else {
    
  }
  dataunitswritten_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dataunitswritten,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SmartLog.dataUnitsWritten)
}

// string hostReadCommands = 12;
inline void SmartLog::clear_hostreadcommands() {
  hostreadcommands_.ClearToEmpty();
}
inline const std::string& SmartLog::hostreadcommands() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SmartLog.hostReadCommands)
  return _internal_hostreadcommands();
}
inline void SmartLog::set_hostreadcommands(const std::string& value) {
  _internal_set_hostreadcommands(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SmartLog.hostReadCommands)
}
inline std::string* SmartLog::mutable_hostreadcommands() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SmartLog.hostReadCommands)
  return _internal_mutable_hostreadcommands();
}
inline const std::string& SmartLog::_internal_hostreadcommands() const {
  return hostreadcommands_.Get();
}
inline void SmartLog::_internal_set_hostreadcommands(const std::string& value) {
  
  hostreadcommands_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SmartLog::set_hostreadcommands(std::string&& value) {
  
  hostreadcommands_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SmartLog.hostReadCommands)
}
inline void SmartLog::set_hostreadcommands(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hostreadcommands_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SmartLog.hostReadCommands)
}
inline void SmartLog::set_hostreadcommands(const char* value,
    size_t size) {
  
  hostreadcommands_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SmartLog.hostReadCommands)
}
inline std::string* SmartLog::_internal_mutable_hostreadcommands() {
  
  return hostreadcommands_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SmartLog::release_hostreadcommands() {
  // @@protoc_insertion_point(field_release:grpc_cli.SmartLog.hostReadCommands)
  return hostreadcommands_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SmartLog::set_allocated_hostreadcommands(std::string* hostreadcommands) {
  if (hostreadcommands != nullptr) {
    
  } else {
    
  }
  hostreadcommands_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hostreadcommands,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SmartLog.hostReadCommands)
}

// string hostWriteCommands = 13;
inline void SmartLog::clear_hostwritecommands() {
  hostwritecommands_.ClearToEmpty();
}
inline const std::string& SmartLog::hostwritecommands() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SmartLog.hostWriteCommands)
  return _internal_hostwritecommands();
}
inline void SmartLog::set_hostwritecommands(const std::string& value) {
  _internal_set_hostwritecommands(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SmartLog.hostWriteCommands)
}
inline std::string* SmartLog::mutable_hostwritecommands() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SmartLog.hostWriteCommands)
  return _internal_mutable_hostwritecommands();
}
inline const std::string& SmartLog::_internal_hostwritecommands() const {
  return hostwritecommands_.Get();
}
inline void SmartLog::_internal_set_hostwritecommands(const std::string& value) {
  
  hostwritecommands_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SmartLog::set_hostwritecommands(std::string&& value) {
  
  hostwritecommands_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SmartLog.hostWriteCommands)
}
inline void SmartLog::set_hostwritecommands(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hostwritecommands_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SmartLog.hostWriteCommands)
}
inline void SmartLog::set_hostwritecommands(const char* value,
    size_t size) {
  
  hostwritecommands_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SmartLog.hostWriteCommands)
}
inline std::string* SmartLog::_internal_mutable_hostwritecommands() {
  
  return hostwritecommands_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SmartLog::release_hostwritecommands() {
  // @@protoc_insertion_point(field_release:grpc_cli.SmartLog.hostWriteCommands)
  return hostwritecommands_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SmartLog::set_allocated_hostwritecommands(std::string* hostwritecommands) {
  if (hostwritecommands != nullptr) {
    
  } else {
    
  }
  hostwritecommands_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hostwritecommands,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SmartLog.hostWriteCommands)
}

// string controllerBusyTime = 14;
inline void SmartLog::clear_controllerbusytime() {
  controllerbusytime_.ClearToEmpty();
}
inline const std::string& SmartLog::controllerbusytime() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SmartLog.controllerBusyTime)
  return _internal_controllerbusytime();
}
inline void SmartLog::set_controllerbusytime(const std::string& value) {
  _internal_set_controllerbusytime(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SmartLog.controllerBusyTime)
}
inline std::string* SmartLog::mutable_controllerbusytime() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SmartLog.controllerBusyTime)
  return _internal_mutable_controllerbusytime();
}
inline const std::string& SmartLog::_internal_controllerbusytime() const {
  return controllerbusytime_.Get();
}
inline void SmartLog::_internal_set_controllerbusytime(const std::string& value) {
  
  controllerbusytime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SmartLog::set_controllerbusytime(std::string&& value) {
  
  controllerbusytime_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SmartLog.controllerBusyTime)
}
inline void SmartLog::set_controllerbusytime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  controllerbusytime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SmartLog.controllerBusyTime)
}
inline void SmartLog::set_controllerbusytime(const char* value,
    size_t size) {
  
  controllerbusytime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SmartLog.controllerBusyTime)
}
inline std::string* SmartLog::_internal_mutable_controllerbusytime() {
  
  return controllerbusytime_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SmartLog::release_controllerbusytime() {
  // @@protoc_insertion_point(field_release:grpc_cli.SmartLog.controllerBusyTime)
  return controllerbusytime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SmartLog::set_allocated_controllerbusytime(std::string* controllerbusytime) {
  if (controllerbusytime != nullptr) {
    
  } else {
    
  }
  controllerbusytime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), controllerbusytime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SmartLog.controllerBusyTime)
}

// string powerCycles = 15;
inline void SmartLog::clear_powercycles() {
  powercycles_.ClearToEmpty();
}
inline const std::string& SmartLog::powercycles() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SmartLog.powerCycles)
  return _internal_powercycles();
}
inline void SmartLog::set_powercycles(const std::string& value) {
  _internal_set_powercycles(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SmartLog.powerCycles)
}
inline std::string* SmartLog::mutable_powercycles() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SmartLog.powerCycles)
  return _internal_mutable_powercycles();
}
inline const std::string& SmartLog::_internal_powercycles() const {
  return powercycles_.Get();
}
inline void SmartLog::_internal_set_powercycles(const std::string& value) {
  
  powercycles_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SmartLog::set_powercycles(std::string&& value) {
  
  powercycles_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SmartLog.powerCycles)
}
inline void SmartLog::set_powercycles(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  powercycles_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SmartLog.powerCycles)
}
inline void SmartLog::set_powercycles(const char* value,
    size_t size) {
  
  powercycles_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SmartLog.powerCycles)
}
inline std::string* SmartLog::_internal_mutable_powercycles() {
  
  return powercycles_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SmartLog::release_powercycles() {
  // @@protoc_insertion_point(field_release:grpc_cli.SmartLog.powerCycles)
  return powercycles_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SmartLog::set_allocated_powercycles(std::string* powercycles) {
  if (powercycles != nullptr) {
    
  } else {
    
  }
  powercycles_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), powercycles,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SmartLog.powerCycles)
}

// string powerOnHours = 16;
inline void SmartLog::clear_poweronhours() {
  poweronhours_.ClearToEmpty();
}
inline const std::string& SmartLog::poweronhours() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SmartLog.powerOnHours)
  return _internal_poweronhours();
}
inline void SmartLog::set_poweronhours(const std::string& value) {
  _internal_set_poweronhours(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SmartLog.powerOnHours)
}
inline std::string* SmartLog::mutable_poweronhours() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SmartLog.powerOnHours)
  return _internal_mutable_poweronhours();
}
inline const std::string& SmartLog::_internal_poweronhours() const {
  return poweronhours_.Get();
}
inline void SmartLog::_internal_set_poweronhours(const std::string& value) {
  
  poweronhours_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SmartLog::set_poweronhours(std::string&& value) {
  
  poweronhours_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SmartLog.powerOnHours)
}
inline void SmartLog::set_poweronhours(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  poweronhours_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SmartLog.powerOnHours)
}
inline void SmartLog::set_poweronhours(const char* value,
    size_t size) {
  
  poweronhours_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SmartLog.powerOnHours)
}
inline std::string* SmartLog::_internal_mutable_poweronhours() {
  
  return poweronhours_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SmartLog::release_poweronhours() {
  // @@protoc_insertion_point(field_release:grpc_cli.SmartLog.powerOnHours)
  return poweronhours_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SmartLog::set_allocated_poweronhours(std::string* poweronhours) {
  if (poweronhours != nullptr) {
    
  } else {
    
  }
  poweronhours_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), poweronhours,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SmartLog.powerOnHours)
}

// string unsafeShutdowns = 17;
inline void SmartLog::clear_unsafeshutdowns() {
  unsafeshutdowns_.ClearToEmpty();
}
inline const std::string& SmartLog::unsafeshutdowns() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SmartLog.unsafeShutdowns)
  return _internal_unsafeshutdowns();
}
inline void SmartLog::set_unsafeshutdowns(const std::string& value) {
  _internal_set_unsafeshutdowns(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SmartLog.unsafeShutdowns)
}
inline std::string* SmartLog::mutable_unsafeshutdowns() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SmartLog.unsafeShutdowns)
  return _internal_mutable_unsafeshutdowns();
}
inline const std::string& SmartLog::_internal_unsafeshutdowns() const {
  return unsafeshutdowns_.Get();
}
inline void SmartLog::_internal_set_unsafeshutdowns(const std::string& value) {
  
  unsafeshutdowns_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SmartLog::set_unsafeshutdowns(std::string&& value) {
  
  unsafeshutdowns_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SmartLog.unsafeShutdowns)
}
inline void SmartLog::set_unsafeshutdowns(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  unsafeshutdowns_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SmartLog.unsafeShutdowns)
}
inline void SmartLog::set_unsafeshutdowns(const char* value,
    size_t size) {
  
  unsafeshutdowns_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SmartLog.unsafeShutdowns)
}
inline std::string* SmartLog::_internal_mutable_unsafeshutdowns() {
  
  return unsafeshutdowns_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SmartLog::release_unsafeshutdowns() {
  // @@protoc_insertion_point(field_release:grpc_cli.SmartLog.unsafeShutdowns)
  return unsafeshutdowns_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SmartLog::set_allocated_unsafeshutdowns(std::string* unsafeshutdowns) {
  if (unsafeshutdowns != nullptr) {
    
  } else {
    
  }
  unsafeshutdowns_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unsafeshutdowns,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SmartLog.unsafeShutdowns)
}

// string unrecoverableMediaErrors = 18;
inline void SmartLog::clear_unrecoverablemediaerrors() {
  unrecoverablemediaerrors_.ClearToEmpty();
}
inline const std::string& SmartLog::unrecoverablemediaerrors() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SmartLog.unrecoverableMediaErrors)
  return _internal_unrecoverablemediaerrors();
}
inline void SmartLog::set_unrecoverablemediaerrors(const std::string& value) {
  _internal_set_unrecoverablemediaerrors(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SmartLog.unrecoverableMediaErrors)
}
inline std::string* SmartLog::mutable_unrecoverablemediaerrors() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SmartLog.unrecoverableMediaErrors)
  return _internal_mutable_unrecoverablemediaerrors();
}
inline const std::string& SmartLog::_internal_unrecoverablemediaerrors() const {
  return unrecoverablemediaerrors_.Get();
}
inline void SmartLog::_internal_set_unrecoverablemediaerrors(const std::string& value) {
  
  unrecoverablemediaerrors_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SmartLog::set_unrecoverablemediaerrors(std::string&& value) {
  
  unrecoverablemediaerrors_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SmartLog.unrecoverableMediaErrors)
}
inline void SmartLog::set_unrecoverablemediaerrors(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  unrecoverablemediaerrors_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SmartLog.unrecoverableMediaErrors)
}
inline void SmartLog::set_unrecoverablemediaerrors(const char* value,
    size_t size) {
  
  unrecoverablemediaerrors_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SmartLog.unrecoverableMediaErrors)
}
inline std::string* SmartLog::_internal_mutable_unrecoverablemediaerrors() {
  
  return unrecoverablemediaerrors_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SmartLog::release_unrecoverablemediaerrors() {
  // @@protoc_insertion_point(field_release:grpc_cli.SmartLog.unrecoverableMediaErrors)
  return unrecoverablemediaerrors_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SmartLog::set_allocated_unrecoverablemediaerrors(std::string* unrecoverablemediaerrors) {
  if (unrecoverablemediaerrors != nullptr) {
    
  } else {
    
  }
  unrecoverablemediaerrors_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unrecoverablemediaerrors,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SmartLog.unrecoverableMediaErrors)
}

// string lifetimeErrorLogEntries = 19;
inline void SmartLog::clear_lifetimeerrorlogentries() {
  lifetimeerrorlogentries_.ClearToEmpty();
}
inline const std::string& SmartLog::lifetimeerrorlogentries() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SmartLog.lifetimeErrorLogEntries)
  return _internal_lifetimeerrorlogentries();
}
inline void SmartLog::set_lifetimeerrorlogentries(const std::string& value) {
  _internal_set_lifetimeerrorlogentries(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SmartLog.lifetimeErrorLogEntries)
}
inline std::string* SmartLog::mutable_lifetimeerrorlogentries() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SmartLog.lifetimeErrorLogEntries)
  return _internal_mutable_lifetimeerrorlogentries();
}
inline const std::string& SmartLog::_internal_lifetimeerrorlogentries() const {
  return lifetimeerrorlogentries_.Get();
}
inline void SmartLog::_internal_set_lifetimeerrorlogentries(const std::string& value) {
  
  lifetimeerrorlogentries_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SmartLog::set_lifetimeerrorlogentries(std::string&& value) {
  
  lifetimeerrorlogentries_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SmartLog.lifetimeErrorLogEntries)
}
inline void SmartLog::set_lifetimeerrorlogentries(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lifetimeerrorlogentries_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SmartLog.lifetimeErrorLogEntries)
}
inline void SmartLog::set_lifetimeerrorlogentries(const char* value,
    size_t size) {
  
  lifetimeerrorlogentries_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SmartLog.lifetimeErrorLogEntries)
}
inline std::string* SmartLog::_internal_mutable_lifetimeerrorlogentries() {
  
  return lifetimeerrorlogentries_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SmartLog::release_lifetimeerrorlogentries() {
  // @@protoc_insertion_point(field_release:grpc_cli.SmartLog.lifetimeErrorLogEntries)
  return lifetimeerrorlogentries_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SmartLog::set_allocated_lifetimeerrorlogentries(std::string* lifetimeerrorlogentries) {
  if (lifetimeerrorlogentries != nullptr) {
    
  } else {
    
  }
  lifetimeerrorlogentries_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lifetimeerrorlogentries,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SmartLog.lifetimeErrorLogEntries)
}

// string warningTemperatureTime = 20;
inline void SmartLog::clear_warningtemperaturetime() {
  warningtemperaturetime_.ClearToEmpty();
}
inline const std::string& SmartLog::warningtemperaturetime() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SmartLog.warningTemperatureTime)
  return _internal_warningtemperaturetime();
}
inline void SmartLog::set_warningtemperaturetime(const std::string& value) {
  _internal_set_warningtemperaturetime(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SmartLog.warningTemperatureTime)
}
inline std::string* SmartLog::mutable_warningtemperaturetime() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SmartLog.warningTemperatureTime)
  return _internal_mutable_warningtemperaturetime();
}
inline const std::string& SmartLog::_internal_warningtemperaturetime() const {
  return warningtemperaturetime_.Get();
}
inline void SmartLog::_internal_set_warningtemperaturetime(const std::string& value) {
  
  warningtemperaturetime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SmartLog::set_warningtemperaturetime(std::string&& value) {
  
  warningtemperaturetime_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SmartLog.warningTemperatureTime)
}
inline void SmartLog::set_warningtemperaturetime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  warningtemperaturetime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SmartLog.warningTemperatureTime)
}
inline void SmartLog::set_warningtemperaturetime(const char* value,
    size_t size) {
  
  warningtemperaturetime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SmartLog.warningTemperatureTime)
}
inline std::string* SmartLog::_internal_mutable_warningtemperaturetime() {
  
  return warningtemperaturetime_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SmartLog::release_warningtemperaturetime() {
  // @@protoc_insertion_point(field_release:grpc_cli.SmartLog.warningTemperatureTime)
  return warningtemperaturetime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SmartLog::set_allocated_warningtemperaturetime(std::string* warningtemperaturetime) {
  if (warningtemperaturetime != nullptr) {
    
  } else {
    
  }
  warningtemperaturetime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), warningtemperaturetime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SmartLog.warningTemperatureTime)
}

// string criticalTemperatureTime = 21;
inline void SmartLog::clear_criticaltemperaturetime() {
  criticaltemperaturetime_.ClearToEmpty();
}
inline const std::string& SmartLog::criticaltemperaturetime() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SmartLog.criticalTemperatureTime)
  return _internal_criticaltemperaturetime();
}
inline void SmartLog::set_criticaltemperaturetime(const std::string& value) {
  _internal_set_criticaltemperaturetime(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SmartLog.criticalTemperatureTime)
}
inline std::string* SmartLog::mutable_criticaltemperaturetime() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SmartLog.criticalTemperatureTime)
  return _internal_mutable_criticaltemperaturetime();
}
inline const std::string& SmartLog::_internal_criticaltemperaturetime() const {
  return criticaltemperaturetime_.Get();
}
inline void SmartLog::_internal_set_criticaltemperaturetime(const std::string& value) {
  
  criticaltemperaturetime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SmartLog::set_criticaltemperaturetime(std::string&& value) {
  
  criticaltemperaturetime_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SmartLog.criticalTemperatureTime)
}
inline void SmartLog::set_criticaltemperaturetime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  criticaltemperaturetime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SmartLog.criticalTemperatureTime)
}
inline void SmartLog::set_criticaltemperaturetime(const char* value,
    size_t size) {
  
  criticaltemperaturetime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SmartLog.criticalTemperatureTime)
}
inline std::string* SmartLog::_internal_mutable_criticaltemperaturetime() {
  
  return criticaltemperaturetime_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SmartLog::release_criticaltemperaturetime() {
  // @@protoc_insertion_point(field_release:grpc_cli.SmartLog.criticalTemperatureTime)
  return criticaltemperaturetime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SmartLog::set_allocated_criticaltemperaturetime(std::string* criticaltemperaturetime) {
  if (criticaltemperaturetime != nullptr) {
    
  } else {
    
  }
  criticaltemperaturetime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), criticaltemperaturetime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SmartLog.criticalTemperatureTime)
}

// repeated string temperatureSensor = 22;
inline int SmartLog::_internal_temperaturesensor_size() const {
  return temperaturesensor_.size();
}
inline int SmartLog::temperaturesensor_size() const {
  return _internal_temperaturesensor_size();
}
inline void SmartLog::clear_temperaturesensor() {
  temperaturesensor_.Clear();
}
inline std::string* SmartLog::add_temperaturesensor() {
  // @@protoc_insertion_point(field_add_mutable:grpc_cli.SmartLog.temperatureSensor)
  return _internal_add_temperaturesensor();
}
inline const std::string& SmartLog::_internal_temperaturesensor(int index) const {
  return temperaturesensor_.Get(index);
}
inline const std::string& SmartLog::temperaturesensor(int index) const {
  // @@protoc_insertion_point(field_get:grpc_cli.SmartLog.temperatureSensor)
  return _internal_temperaturesensor(index);
}
inline std::string* SmartLog::mutable_temperaturesensor(int index) {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SmartLog.temperatureSensor)
  return temperaturesensor_.Mutable(index);
}
inline void SmartLog::set_temperaturesensor(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:grpc_cli.SmartLog.temperatureSensor)
  temperaturesensor_.Mutable(index)->assign(value);
}
inline void SmartLog::set_temperaturesensor(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:grpc_cli.SmartLog.temperatureSensor)
  temperaturesensor_.Mutable(index)->assign(std::move(value));
}
inline void SmartLog::set_temperaturesensor(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  temperaturesensor_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:grpc_cli.SmartLog.temperatureSensor)
}
inline void SmartLog::set_temperaturesensor(int index, const char* value, size_t size) {
  temperaturesensor_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SmartLog.temperatureSensor)
}
inline std::string* SmartLog::_internal_add_temperaturesensor() {
  return temperaturesensor_.Add();
}
inline void SmartLog::add_temperaturesensor(const std::string& value) {
  temperaturesensor_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:grpc_cli.SmartLog.temperatureSensor)
}
inline void SmartLog::add_temperaturesensor(std::string&& value) {
  temperaturesensor_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:grpc_cli.SmartLog.temperatureSensor)
}
inline void SmartLog::add_temperaturesensor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  temperaturesensor_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:grpc_cli.SmartLog.temperatureSensor)
}
inline void SmartLog::add_temperaturesensor(const char* value, size_t size) {
  temperaturesensor_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:grpc_cli.SmartLog.temperatureSensor)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SmartLog::temperaturesensor() const {
  // @@protoc_insertion_point(field_list:grpc_cli.SmartLog.temperatureSensor)
  return temperaturesensor_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SmartLog::mutable_temperaturesensor() {
  // @@protoc_insertion_point(field_mutable_list:grpc_cli.SmartLog.temperatureSensor)
  return &temperaturesensor_;
}

// -------------------------------------------------------------------

// GetSmartLogRequest_Param

// string name = 1;
inline void GetSmartLogRequest_Param::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetSmartLogRequest_Param::name() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetSmartLogRequest.Param.name)
  return _internal_name();
}
inline void GetSmartLogRequest_Param::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:grpc_cli.GetSmartLogRequest.Param.name)
}
inline std::string* GetSmartLogRequest_Param::mutable_name() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetSmartLogRequest.Param.name)
  return _internal_mutable_name();
}
inline const std::string& GetSmartLogRequest_Param::_internal_name() const {
  return name_.Get();
}
inline void GetSmartLogRequest_Param::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetSmartLogRequest_Param::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.GetSmartLogRequest.Param.name)
}
inline void GetSmartLogRequest_Param::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.GetSmartLogRequest.Param.name)
}
inline void GetSmartLogRequest_Param::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.GetSmartLogRequest.Param.name)
}
inline std::string* GetSmartLogRequest_Param::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetSmartLogRequest_Param::release_name() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetSmartLogRequest.Param.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSmartLogRequest_Param::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetSmartLogRequest.Param.name)
}

// -------------------------------------------------------------------

// GetSmartLogRequest

// string command = 1;
inline void GetSmartLogRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& GetSmartLogRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetSmartLogRequest.command)
  return _internal_command();
}
inline void GetSmartLogRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.GetSmartLogRequest.command)
}
inline std::string* GetSmartLogRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetSmartLogRequest.command)
  return _internal_mutable_command();
}
inline const std::string& GetSmartLogRequest::_internal_command() const {
  return command_.Get();
}
inline void GetSmartLogRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetSmartLogRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.GetSmartLogRequest.command)
}
inline void GetSmartLogRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.GetSmartLogRequest.command)
}
inline void GetSmartLogRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.GetSmartLogRequest.command)
}
inline std::string* GetSmartLogRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetSmartLogRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetSmartLogRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSmartLogRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetSmartLogRequest.command)
}

// string rid = 2;
inline void GetSmartLogRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& GetSmartLogRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetSmartLogRequest.rid)
  return _internal_rid();
}
inline void GetSmartLogRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.GetSmartLogRequest.rid)
}
inline std::string* GetSmartLogRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetSmartLogRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& GetSmartLogRequest::_internal_rid() const {
  return rid_.Get();
}
inline void GetSmartLogRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetSmartLogRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.GetSmartLogRequest.rid)
}
inline void GetSmartLogRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.GetSmartLogRequest.rid)
}
inline void GetSmartLogRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.GetSmartLogRequest.rid)
}
inline std::string* GetSmartLogRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetSmartLogRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetSmartLogRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSmartLogRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetSmartLogRequest.rid)
}

// string requestor = 3;
inline void GetSmartLogRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& GetSmartLogRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetSmartLogRequest.requestor)
  return _internal_requestor();
}
inline void GetSmartLogRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.GetSmartLogRequest.requestor)
}
inline std::string* GetSmartLogRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetSmartLogRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& GetSmartLogRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void GetSmartLogRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetSmartLogRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.GetSmartLogRequest.requestor)
}
inline void GetSmartLogRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.GetSmartLogRequest.requestor)
}
inline void GetSmartLogRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.GetSmartLogRequest.requestor)
}
inline std::string* GetSmartLogRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetSmartLogRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetSmartLogRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSmartLogRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetSmartLogRequest.requestor)
}

// .grpc_cli.GetSmartLogRequest.Param param = 4;
inline bool GetSmartLogRequest::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool GetSmartLogRequest::has_param() const {
  return _internal_has_param();
}
inline void GetSmartLogRequest::clear_param() {
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::grpc_cli::GetSmartLogRequest_Param& GetSmartLogRequest::_internal_param() const {
  const ::grpc_cli::GetSmartLogRequest_Param* p = param_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::GetSmartLogRequest_Param&>(
      ::grpc_cli::_GetSmartLogRequest_Param_default_instance_);
}
inline const ::grpc_cli::GetSmartLogRequest_Param& GetSmartLogRequest::param() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetSmartLogRequest.param)
  return _internal_param();
}
inline void GetSmartLogRequest::unsafe_arena_set_allocated_param(
    ::grpc_cli::GetSmartLogRequest_Param* param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.GetSmartLogRequest.param)
}
inline ::grpc_cli::GetSmartLogRequest_Param* GetSmartLogRequest::release_param() {
  
  ::grpc_cli::GetSmartLogRequest_Param* temp = param_;
  param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::GetSmartLogRequest_Param* GetSmartLogRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetSmartLogRequest.param)
  
  ::grpc_cli::GetSmartLogRequest_Param* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::grpc_cli::GetSmartLogRequest_Param* GetSmartLogRequest::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::GetSmartLogRequest_Param>(GetArena());
    param_ = p;
  }
  return param_;
}
inline ::grpc_cli::GetSmartLogRequest_Param* GetSmartLogRequest::mutable_param() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetSmartLogRequest.param)
  return _internal_mutable_param();
}
inline void GetSmartLogRequest::set_allocated_param(::grpc_cli::GetSmartLogRequest_Param* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetSmartLogRequest.param)
}

// -------------------------------------------------------------------

// GetSmartLogResponse_Result

// .grpc_cli.Status status = 1;
inline bool GetSmartLogResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool GetSmartLogResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void GetSmartLogResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& GetSmartLogResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& GetSmartLogResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetSmartLogResponse.Result.status)
  return _internal_status();
}
inline void GetSmartLogResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.GetSmartLogResponse.Result.status)
}
inline ::grpc_cli::Status* GetSmartLogResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* GetSmartLogResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetSmartLogResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* GetSmartLogResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* GetSmartLogResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetSmartLogResponse.Result.status)
  return _internal_mutable_status();
}
inline void GetSmartLogResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetSmartLogResponse.Result.status)
}

// .grpc_cli.SmartLog data = 2;
inline bool GetSmartLogResponse_Result::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool GetSmartLogResponse_Result::has_data() const {
  return _internal_has_data();
}
inline void GetSmartLogResponse_Result::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::grpc_cli::SmartLog& GetSmartLogResponse_Result::_internal_data() const {
  const ::grpc_cli::SmartLog* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::SmartLog&>(
      ::grpc_cli::_SmartLog_default_instance_);
}
inline const ::grpc_cli::SmartLog& GetSmartLogResponse_Result::data() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetSmartLogResponse.Result.data)
  return _internal_data();
}
inline void GetSmartLogResponse_Result::unsafe_arena_set_allocated_data(
    ::grpc_cli::SmartLog* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.GetSmartLogResponse.Result.data)
}
inline ::grpc_cli::SmartLog* GetSmartLogResponse_Result::release_data() {
  
  ::grpc_cli::SmartLog* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::SmartLog* GetSmartLogResponse_Result::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetSmartLogResponse.Result.data)
  
  ::grpc_cli::SmartLog* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::grpc_cli::SmartLog* GetSmartLogResponse_Result::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::SmartLog>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::grpc_cli::SmartLog* GetSmartLogResponse_Result::mutable_data() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetSmartLogResponse.Result.data)
  return _internal_mutable_data();
}
inline void GetSmartLogResponse_Result::set_allocated_data(::grpc_cli::SmartLog* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetSmartLogResponse.Result.data)
}

// -------------------------------------------------------------------

// GetSmartLogResponse

// string command = 1;
inline void GetSmartLogResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& GetSmartLogResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetSmartLogResponse.command)
  return _internal_command();
}
inline void GetSmartLogResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.GetSmartLogResponse.command)
}
inline std::string* GetSmartLogResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetSmartLogResponse.command)
  return _internal_mutable_command();
}
inline const std::string& GetSmartLogResponse::_internal_command() const {
  return command_.Get();
}
inline void GetSmartLogResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetSmartLogResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.GetSmartLogResponse.command)
}
inline void GetSmartLogResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.GetSmartLogResponse.command)
}
inline void GetSmartLogResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.GetSmartLogResponse.command)
}
inline std::string* GetSmartLogResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetSmartLogResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetSmartLogResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSmartLogResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetSmartLogResponse.command)
}

// string rid = 2;
inline void GetSmartLogResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& GetSmartLogResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetSmartLogResponse.rid)
  return _internal_rid();
}
inline void GetSmartLogResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.GetSmartLogResponse.rid)
}
inline std::string* GetSmartLogResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetSmartLogResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& GetSmartLogResponse::_internal_rid() const {
  return rid_.Get();
}
inline void GetSmartLogResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetSmartLogResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.GetSmartLogResponse.rid)
}
inline void GetSmartLogResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.GetSmartLogResponse.rid)
}
inline void GetSmartLogResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.GetSmartLogResponse.rid)
}
inline std::string* GetSmartLogResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetSmartLogResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetSmartLogResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSmartLogResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetSmartLogResponse.rid)
}

// .grpc_cli.GetSmartLogResponse.Result result = 3;
inline bool GetSmartLogResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool GetSmartLogResponse::has_result() const {
  return _internal_has_result();
}
inline void GetSmartLogResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::GetSmartLogResponse_Result& GetSmartLogResponse::_internal_result() const {
  const ::grpc_cli::GetSmartLogResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::GetSmartLogResponse_Result&>(
      ::grpc_cli::_GetSmartLogResponse_Result_default_instance_);
}
inline const ::grpc_cli::GetSmartLogResponse_Result& GetSmartLogResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetSmartLogResponse.result)
  return _internal_result();
}
inline void GetSmartLogResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::GetSmartLogResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.GetSmartLogResponse.result)
}
inline ::grpc_cli::GetSmartLogResponse_Result* GetSmartLogResponse::release_result() {
  
  ::grpc_cli::GetSmartLogResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::GetSmartLogResponse_Result* GetSmartLogResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetSmartLogResponse.result)
  
  ::grpc_cli::GetSmartLogResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::GetSmartLogResponse_Result* GetSmartLogResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::GetSmartLogResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::GetSmartLogResponse_Result* GetSmartLogResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetSmartLogResponse.result)
  return _internal_mutable_result();
}
inline void GetSmartLogResponse::set_allocated_result(::grpc_cli::GetSmartLogResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetSmartLogResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool GetSmartLogResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool GetSmartLogResponse::has_info() const {
  return _internal_has_info();
}
inline void GetSmartLogResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& GetSmartLogResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& GetSmartLogResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetSmartLogResponse.info)
  return _internal_info();
}
inline void GetSmartLogResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.GetSmartLogResponse.info)
}
inline ::grpc_cli::PosInfo* GetSmartLogResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* GetSmartLogResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetSmartLogResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* GetSmartLogResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* GetSmartLogResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetSmartLogResponse.info)
  return _internal_mutable_info();
}
inline void GetSmartLogResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetSmartLogResponse.info)
}

// -------------------------------------------------------------------

// CreateSubsystemRequest_Param

// string nqn = 1;
inline void CreateSubsystemRequest_Param::clear_nqn() {
  nqn_.ClearToEmpty();
}
inline const std::string& CreateSubsystemRequest_Param::nqn() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateSubsystemRequest.Param.nqn)
  return _internal_nqn();
}
inline void CreateSubsystemRequest_Param::set_nqn(const std::string& value) {
  _internal_set_nqn(value);
  // @@protoc_insertion_point(field_set:grpc_cli.CreateSubsystemRequest.Param.nqn)
}
inline std::string* CreateSubsystemRequest_Param::mutable_nqn() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateSubsystemRequest.Param.nqn)
  return _internal_mutable_nqn();
}
inline const std::string& CreateSubsystemRequest_Param::_internal_nqn() const {
  return nqn_.Get();
}
inline void CreateSubsystemRequest_Param::_internal_set_nqn(const std::string& value) {
  
  nqn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateSubsystemRequest_Param::set_nqn(std::string&& value) {
  
  nqn_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.CreateSubsystemRequest.Param.nqn)
}
inline void CreateSubsystemRequest_Param::set_nqn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nqn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.CreateSubsystemRequest.Param.nqn)
}
inline void CreateSubsystemRequest_Param::set_nqn(const char* value,
    size_t size) {
  
  nqn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.CreateSubsystemRequest.Param.nqn)
}
inline std::string* CreateSubsystemRequest_Param::_internal_mutable_nqn() {
  
  return nqn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateSubsystemRequest_Param::release_nqn() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateSubsystemRequest.Param.nqn)
  return nqn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateSubsystemRequest_Param::set_allocated_nqn(std::string* nqn) {
  if (nqn != nullptr) {
    
  } else {
    
  }
  nqn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nqn,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateSubsystemRequest.Param.nqn)
}

// string serialNumber = 2;
inline void CreateSubsystemRequest_Param::clear_serialnumber() {
  serialnumber_.ClearToEmpty();
}
inline const std::string& CreateSubsystemRequest_Param::serialnumber() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateSubsystemRequest.Param.serialNumber)
  return _internal_serialnumber();
}
inline void CreateSubsystemRequest_Param::set_serialnumber(const std::string& value) {
  _internal_set_serialnumber(value);
  // @@protoc_insertion_point(field_set:grpc_cli.CreateSubsystemRequest.Param.serialNumber)
}
inline std::string* CreateSubsystemRequest_Param::mutable_serialnumber() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateSubsystemRequest.Param.serialNumber)
  return _internal_mutable_serialnumber();
}
inline const std::string& CreateSubsystemRequest_Param::_internal_serialnumber() const {
  return serialnumber_.Get();
}
inline void CreateSubsystemRequest_Param::_internal_set_serialnumber(const std::string& value) {
  
  serialnumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateSubsystemRequest_Param::set_serialnumber(std::string&& value) {
  
  serialnumber_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.CreateSubsystemRequest.Param.serialNumber)
}
inline void CreateSubsystemRequest_Param::set_serialnumber(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  serialnumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.CreateSubsystemRequest.Param.serialNumber)
}
inline void CreateSubsystemRequest_Param::set_serialnumber(const char* value,
    size_t size) {
  
  serialnumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.CreateSubsystemRequest.Param.serialNumber)
}
inline std::string* CreateSubsystemRequest_Param::_internal_mutable_serialnumber() {
  
  return serialnumber_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateSubsystemRequest_Param::release_serialnumber() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateSubsystemRequest.Param.serialNumber)
  return serialnumber_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateSubsystemRequest_Param::set_allocated_serialnumber(std::string* serialnumber) {
  if (serialnumber != nullptr) {
    
  } else {
    
  }
  serialnumber_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serialnumber,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateSubsystemRequest.Param.serialNumber)
}

// string modelNumber = 3;
inline void CreateSubsystemRequest_Param::clear_modelnumber() {
  modelnumber_.ClearToEmpty();
}
inline const std::string& CreateSubsystemRequest_Param::modelnumber() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateSubsystemRequest.Param.modelNumber)
  return _internal_modelnumber();
}
inline void CreateSubsystemRequest_Param::set_modelnumber(const std::string& value) {
  _internal_set_modelnumber(value);
  // @@protoc_insertion_point(field_set:grpc_cli.CreateSubsystemRequest.Param.modelNumber)
}
inline std::string* CreateSubsystemRequest_Param::mutable_modelnumber() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateSubsystemRequest.Param.modelNumber)
  return _internal_mutable_modelnumber();
}
inline const std::string& CreateSubsystemRequest_Param::_internal_modelnumber() const {
  return modelnumber_.Get();
}
inline void CreateSubsystemRequest_Param::_internal_set_modelnumber(const std::string& value) {
  
  modelnumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateSubsystemRequest_Param::set_modelnumber(std::string&& value) {
  
  modelnumber_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.CreateSubsystemRequest.Param.modelNumber)
}
inline void CreateSubsystemRequest_Param::set_modelnumber(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  modelnumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.CreateSubsystemRequest.Param.modelNumber)
}
inline void CreateSubsystemRequest_Param::set_modelnumber(const char* value,
    size_t size) {
  
  modelnumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.CreateSubsystemRequest.Param.modelNumber)
}
inline std::string* CreateSubsystemRequest_Param::_internal_mutable_modelnumber() {
  
  return modelnumber_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateSubsystemRequest_Param::release_modelnumber() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateSubsystemRequest.Param.modelNumber)
  return modelnumber_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateSubsystemRequest_Param::set_allocated_modelnumber(std::string* modelnumber) {
  if (modelnumber != nullptr) {
    
  } else {
    
  }
  modelnumber_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), modelnumber,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateSubsystemRequest.Param.modelNumber)
}

// uint32 maxNamespaces = 4;
inline void CreateSubsystemRequest_Param::clear_maxnamespaces() {
  maxnamespaces_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateSubsystemRequest_Param::_internal_maxnamespaces() const {
  return maxnamespaces_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateSubsystemRequest_Param::maxnamespaces() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateSubsystemRequest.Param.maxNamespaces)
  return _internal_maxnamespaces();
}
inline void CreateSubsystemRequest_Param::_internal_set_maxnamespaces(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maxnamespaces_ = value;
}
inline void CreateSubsystemRequest_Param::set_maxnamespaces(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxnamespaces(value);
  // @@protoc_insertion_point(field_set:grpc_cli.CreateSubsystemRequest.Param.maxNamespaces)
}

// bool allowAnyHost = 5;
inline void CreateSubsystemRequest_Param::clear_allowanyhost() {
  allowanyhost_ = false;
}
inline bool CreateSubsystemRequest_Param::_internal_allowanyhost() const {
  return allowanyhost_;
}
inline bool CreateSubsystemRequest_Param::allowanyhost() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateSubsystemRequest.Param.allowAnyHost)
  return _internal_allowanyhost();
}
inline void CreateSubsystemRequest_Param::_internal_set_allowanyhost(bool value) {
  
  allowanyhost_ = value;
}
inline void CreateSubsystemRequest_Param::set_allowanyhost(bool value) {
  _internal_set_allowanyhost(value);
  // @@protoc_insertion_point(field_set:grpc_cli.CreateSubsystemRequest.Param.allowAnyHost)
}

// bool anaReporting = 6;
inline void CreateSubsystemRequest_Param::clear_anareporting() {
  anareporting_ = false;
}
inline bool CreateSubsystemRequest_Param::_internal_anareporting() const {
  return anareporting_;
}
inline bool CreateSubsystemRequest_Param::anareporting() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateSubsystemRequest.Param.anaReporting)
  return _internal_anareporting();
}
inline void CreateSubsystemRequest_Param::_internal_set_anareporting(bool value) {
  
  anareporting_ = value;
}
inline void CreateSubsystemRequest_Param::set_anareporting(bool value) {
  _internal_set_anareporting(value);
  // @@protoc_insertion_point(field_set:grpc_cli.CreateSubsystemRequest.Param.anaReporting)
}

// -------------------------------------------------------------------

// CreateSubsystemRequest

// string command = 1;
inline void CreateSubsystemRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& CreateSubsystemRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateSubsystemRequest.command)
  return _internal_command();
}
inline void CreateSubsystemRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.CreateSubsystemRequest.command)
}
inline std::string* CreateSubsystemRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateSubsystemRequest.command)
  return _internal_mutable_command();
}
inline const std::string& CreateSubsystemRequest::_internal_command() const {
  return command_.Get();
}
inline void CreateSubsystemRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateSubsystemRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.CreateSubsystemRequest.command)
}
inline void CreateSubsystemRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.CreateSubsystemRequest.command)
}
inline void CreateSubsystemRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.CreateSubsystemRequest.command)
}
inline std::string* CreateSubsystemRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateSubsystemRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateSubsystemRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateSubsystemRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateSubsystemRequest.command)
}

// string rid = 2;
inline void CreateSubsystemRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& CreateSubsystemRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateSubsystemRequest.rid)
  return _internal_rid();
}
inline void CreateSubsystemRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.CreateSubsystemRequest.rid)
}
inline std::string* CreateSubsystemRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateSubsystemRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& CreateSubsystemRequest::_internal_rid() const {
  return rid_.Get();
}
inline void CreateSubsystemRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateSubsystemRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.CreateSubsystemRequest.rid)
}
inline void CreateSubsystemRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.CreateSubsystemRequest.rid)
}
inline void CreateSubsystemRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.CreateSubsystemRequest.rid)
}
inline std::string* CreateSubsystemRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateSubsystemRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateSubsystemRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateSubsystemRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateSubsystemRequest.rid)
}

// string requestor = 3;
inline void CreateSubsystemRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& CreateSubsystemRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateSubsystemRequest.requestor)
  return _internal_requestor();
}
inline void CreateSubsystemRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.CreateSubsystemRequest.requestor)
}
inline std::string* CreateSubsystemRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateSubsystemRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& CreateSubsystemRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void CreateSubsystemRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateSubsystemRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.CreateSubsystemRequest.requestor)
}
inline void CreateSubsystemRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.CreateSubsystemRequest.requestor)
}
inline void CreateSubsystemRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.CreateSubsystemRequest.requestor)
}
inline std::string* CreateSubsystemRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateSubsystemRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateSubsystemRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateSubsystemRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateSubsystemRequest.requestor)
}

// .grpc_cli.CreateSubsystemRequest.Param param = 4;
inline bool CreateSubsystemRequest::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool CreateSubsystemRequest::has_param() const {
  return _internal_has_param();
}
inline void CreateSubsystemRequest::clear_param() {
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::grpc_cli::CreateSubsystemRequest_Param& CreateSubsystemRequest::_internal_param() const {
  const ::grpc_cli::CreateSubsystemRequest_Param* p = param_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::CreateSubsystemRequest_Param&>(
      ::grpc_cli::_CreateSubsystemRequest_Param_default_instance_);
}
inline const ::grpc_cli::CreateSubsystemRequest_Param& CreateSubsystemRequest::param() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateSubsystemRequest.param)
  return _internal_param();
}
inline void CreateSubsystemRequest::unsafe_arena_set_allocated_param(
    ::grpc_cli::CreateSubsystemRequest_Param* param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.CreateSubsystemRequest.param)
}
inline ::grpc_cli::CreateSubsystemRequest_Param* CreateSubsystemRequest::release_param() {
  
  ::grpc_cli::CreateSubsystemRequest_Param* temp = param_;
  param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::CreateSubsystemRequest_Param* CreateSubsystemRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateSubsystemRequest.param)
  
  ::grpc_cli::CreateSubsystemRequest_Param* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::grpc_cli::CreateSubsystemRequest_Param* CreateSubsystemRequest::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::CreateSubsystemRequest_Param>(GetArena());
    param_ = p;
  }
  return param_;
}
inline ::grpc_cli::CreateSubsystemRequest_Param* CreateSubsystemRequest::mutable_param() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateSubsystemRequest.param)
  return _internal_mutable_param();
}
inline void CreateSubsystemRequest::set_allocated_param(::grpc_cli::CreateSubsystemRequest_Param* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateSubsystemRequest.param)
}

// -------------------------------------------------------------------

// CreateSubsystemResponse_Result

// .grpc_cli.Status status = 1;
inline bool CreateSubsystemResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool CreateSubsystemResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void CreateSubsystemResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& CreateSubsystemResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& CreateSubsystemResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateSubsystemResponse.Result.status)
  return _internal_status();
}
inline void CreateSubsystemResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.CreateSubsystemResponse.Result.status)
}
inline ::grpc_cli::Status* CreateSubsystemResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* CreateSubsystemResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateSubsystemResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* CreateSubsystemResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* CreateSubsystemResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateSubsystemResponse.Result.status)
  return _internal_mutable_status();
}
inline void CreateSubsystemResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateSubsystemResponse.Result.status)
}

// -------------------------------------------------------------------

// CreateSubsystemResponse

// string command = 1;
inline void CreateSubsystemResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& CreateSubsystemResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateSubsystemResponse.command)
  return _internal_command();
}
inline void CreateSubsystemResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.CreateSubsystemResponse.command)
}
inline std::string* CreateSubsystemResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateSubsystemResponse.command)
  return _internal_mutable_command();
}
inline const std::string& CreateSubsystemResponse::_internal_command() const {
  return command_.Get();
}
inline void CreateSubsystemResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateSubsystemResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.CreateSubsystemResponse.command)
}
inline void CreateSubsystemResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.CreateSubsystemResponse.command)
}
inline void CreateSubsystemResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.CreateSubsystemResponse.command)
}
inline std::string* CreateSubsystemResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateSubsystemResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateSubsystemResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateSubsystemResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateSubsystemResponse.command)
}

// string rid = 2;
inline void CreateSubsystemResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& CreateSubsystemResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateSubsystemResponse.rid)
  return _internal_rid();
}
inline void CreateSubsystemResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.CreateSubsystemResponse.rid)
}
inline std::string* CreateSubsystemResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateSubsystemResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& CreateSubsystemResponse::_internal_rid() const {
  return rid_.Get();
}
inline void CreateSubsystemResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateSubsystemResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.CreateSubsystemResponse.rid)
}
inline void CreateSubsystemResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.CreateSubsystemResponse.rid)
}
inline void CreateSubsystemResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.CreateSubsystemResponse.rid)
}
inline std::string* CreateSubsystemResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateSubsystemResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateSubsystemResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateSubsystemResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateSubsystemResponse.rid)
}

// .grpc_cli.CreateSubsystemResponse.Result result = 3;
inline bool CreateSubsystemResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool CreateSubsystemResponse::has_result() const {
  return _internal_has_result();
}
inline void CreateSubsystemResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::CreateSubsystemResponse_Result& CreateSubsystemResponse::_internal_result() const {
  const ::grpc_cli::CreateSubsystemResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::CreateSubsystemResponse_Result&>(
      ::grpc_cli::_CreateSubsystemResponse_Result_default_instance_);
}
inline const ::grpc_cli::CreateSubsystemResponse_Result& CreateSubsystemResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateSubsystemResponse.result)
  return _internal_result();
}
inline void CreateSubsystemResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::CreateSubsystemResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.CreateSubsystemResponse.result)
}
inline ::grpc_cli::CreateSubsystemResponse_Result* CreateSubsystemResponse::release_result() {
  
  ::grpc_cli::CreateSubsystemResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::CreateSubsystemResponse_Result* CreateSubsystemResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateSubsystemResponse.result)
  
  ::grpc_cli::CreateSubsystemResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::CreateSubsystemResponse_Result* CreateSubsystemResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::CreateSubsystemResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::CreateSubsystemResponse_Result* CreateSubsystemResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateSubsystemResponse.result)
  return _internal_mutable_result();
}
inline void CreateSubsystemResponse::set_allocated_result(::grpc_cli::CreateSubsystemResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateSubsystemResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool CreateSubsystemResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool CreateSubsystemResponse::has_info() const {
  return _internal_has_info();
}
inline void CreateSubsystemResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& CreateSubsystemResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& CreateSubsystemResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateSubsystemResponse.info)
  return _internal_info();
}
inline void CreateSubsystemResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.CreateSubsystemResponse.info)
}
inline ::grpc_cli::PosInfo* CreateSubsystemResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* CreateSubsystemResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateSubsystemResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* CreateSubsystemResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* CreateSubsystemResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateSubsystemResponse.info)
  return _internal_mutable_info();
}
inline void CreateSubsystemResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateSubsystemResponse.info)
}

// -------------------------------------------------------------------

// DeleteSubsystemRequest_Param

// string subnqn = 1;
inline void DeleteSubsystemRequest_Param::clear_subnqn() {
  subnqn_.ClearToEmpty();
}
inline const std::string& DeleteSubsystemRequest_Param::subnqn() const {
  // @@protoc_insertion_point(field_get:grpc_cli.DeleteSubsystemRequest.Param.subnqn)
  return _internal_subnqn();
}
inline void DeleteSubsystemRequest_Param::set_subnqn(const std::string& value) {
  _internal_set_subnqn(value);
  // @@protoc_insertion_point(field_set:grpc_cli.DeleteSubsystemRequest.Param.subnqn)
}
inline std::string* DeleteSubsystemRequest_Param::mutable_subnqn() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.DeleteSubsystemRequest.Param.subnqn)
  return _internal_mutable_subnqn();
}
inline const std::string& DeleteSubsystemRequest_Param::_internal_subnqn() const {
  return subnqn_.Get();
}
inline void DeleteSubsystemRequest_Param::_internal_set_subnqn(const std::string& value) {
  
  subnqn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteSubsystemRequest_Param::set_subnqn(std::string&& value) {
  
  subnqn_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.DeleteSubsystemRequest.Param.subnqn)
}
inline void DeleteSubsystemRequest_Param::set_subnqn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subnqn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.DeleteSubsystemRequest.Param.subnqn)
}
inline void DeleteSubsystemRequest_Param::set_subnqn(const char* value,
    size_t size) {
  
  subnqn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.DeleteSubsystemRequest.Param.subnqn)
}
inline std::string* DeleteSubsystemRequest_Param::_internal_mutable_subnqn() {
  
  return subnqn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteSubsystemRequest_Param::release_subnqn() {
  // @@protoc_insertion_point(field_release:grpc_cli.DeleteSubsystemRequest.Param.subnqn)
  return subnqn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteSubsystemRequest_Param::set_allocated_subnqn(std::string* subnqn) {
  if (subnqn != nullptr) {
    
  } else {
    
  }
  subnqn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subnqn,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.DeleteSubsystemRequest.Param.subnqn)
}

// -------------------------------------------------------------------

// DeleteSubsystemRequest

// string command = 1;
inline void DeleteSubsystemRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& DeleteSubsystemRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.DeleteSubsystemRequest.command)
  return _internal_command();
}
inline void DeleteSubsystemRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.DeleteSubsystemRequest.command)
}
inline std::string* DeleteSubsystemRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.DeleteSubsystemRequest.command)
  return _internal_mutable_command();
}
inline const std::string& DeleteSubsystemRequest::_internal_command() const {
  return command_.Get();
}
inline void DeleteSubsystemRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteSubsystemRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.DeleteSubsystemRequest.command)
}
inline void DeleteSubsystemRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.DeleteSubsystemRequest.command)
}
inline void DeleteSubsystemRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.DeleteSubsystemRequest.command)
}
inline std::string* DeleteSubsystemRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteSubsystemRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.DeleteSubsystemRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteSubsystemRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.DeleteSubsystemRequest.command)
}

// string rid = 2;
inline void DeleteSubsystemRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& DeleteSubsystemRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.DeleteSubsystemRequest.rid)
  return _internal_rid();
}
inline void DeleteSubsystemRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.DeleteSubsystemRequest.rid)
}
inline std::string* DeleteSubsystemRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.DeleteSubsystemRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& DeleteSubsystemRequest::_internal_rid() const {
  return rid_.Get();
}
inline void DeleteSubsystemRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteSubsystemRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.DeleteSubsystemRequest.rid)
}
inline void DeleteSubsystemRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.DeleteSubsystemRequest.rid)
}
inline void DeleteSubsystemRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.DeleteSubsystemRequest.rid)
}
inline std::string* DeleteSubsystemRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteSubsystemRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.DeleteSubsystemRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteSubsystemRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.DeleteSubsystemRequest.rid)
}

// string requestor = 3;
inline void DeleteSubsystemRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& DeleteSubsystemRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.DeleteSubsystemRequest.requestor)
  return _internal_requestor();
}
inline void DeleteSubsystemRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.DeleteSubsystemRequest.requestor)
}
inline std::string* DeleteSubsystemRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.DeleteSubsystemRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& DeleteSubsystemRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void DeleteSubsystemRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteSubsystemRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.DeleteSubsystemRequest.requestor)
}
inline void DeleteSubsystemRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.DeleteSubsystemRequest.requestor)
}
inline void DeleteSubsystemRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.DeleteSubsystemRequest.requestor)
}
inline std::string* DeleteSubsystemRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteSubsystemRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.DeleteSubsystemRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteSubsystemRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.DeleteSubsystemRequest.requestor)
}

// .grpc_cli.DeleteSubsystemRequest.Param param = 4;
inline bool DeleteSubsystemRequest::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool DeleteSubsystemRequest::has_param() const {
  return _internal_has_param();
}
inline void DeleteSubsystemRequest::clear_param() {
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::grpc_cli::DeleteSubsystemRequest_Param& DeleteSubsystemRequest::_internal_param() const {
  const ::grpc_cli::DeleteSubsystemRequest_Param* p = param_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::DeleteSubsystemRequest_Param&>(
      ::grpc_cli::_DeleteSubsystemRequest_Param_default_instance_);
}
inline const ::grpc_cli::DeleteSubsystemRequest_Param& DeleteSubsystemRequest::param() const {
  // @@protoc_insertion_point(field_get:grpc_cli.DeleteSubsystemRequest.param)
  return _internal_param();
}
inline void DeleteSubsystemRequest::unsafe_arena_set_allocated_param(
    ::grpc_cli::DeleteSubsystemRequest_Param* param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.DeleteSubsystemRequest.param)
}
inline ::grpc_cli::DeleteSubsystemRequest_Param* DeleteSubsystemRequest::release_param() {
  
  ::grpc_cli::DeleteSubsystemRequest_Param* temp = param_;
  param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::DeleteSubsystemRequest_Param* DeleteSubsystemRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:grpc_cli.DeleteSubsystemRequest.param)
  
  ::grpc_cli::DeleteSubsystemRequest_Param* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::grpc_cli::DeleteSubsystemRequest_Param* DeleteSubsystemRequest::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::DeleteSubsystemRequest_Param>(GetArena());
    param_ = p;
  }
  return param_;
}
inline ::grpc_cli::DeleteSubsystemRequest_Param* DeleteSubsystemRequest::mutable_param() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.DeleteSubsystemRequest.param)
  return _internal_mutable_param();
}
inline void DeleteSubsystemRequest::set_allocated_param(::grpc_cli::DeleteSubsystemRequest_Param* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.DeleteSubsystemRequest.param)
}

// -------------------------------------------------------------------

// DeleteSubsystemResponse_Result

// .grpc_cli.Status status = 1;
inline bool DeleteSubsystemResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool DeleteSubsystemResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void DeleteSubsystemResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& DeleteSubsystemResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& DeleteSubsystemResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.DeleteSubsystemResponse.Result.status)
  return _internal_status();
}
inline void DeleteSubsystemResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.DeleteSubsystemResponse.Result.status)
}
inline ::grpc_cli::Status* DeleteSubsystemResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* DeleteSubsystemResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.DeleteSubsystemResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* DeleteSubsystemResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* DeleteSubsystemResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.DeleteSubsystemResponse.Result.status)
  return _internal_mutable_status();
}
inline void DeleteSubsystemResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.DeleteSubsystemResponse.Result.status)
}

// -------------------------------------------------------------------

// DeleteSubsystemResponse

// string command = 1;
inline void DeleteSubsystemResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& DeleteSubsystemResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.DeleteSubsystemResponse.command)
  return _internal_command();
}
inline void DeleteSubsystemResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.DeleteSubsystemResponse.command)
}
inline std::string* DeleteSubsystemResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.DeleteSubsystemResponse.command)
  return _internal_mutable_command();
}
inline const std::string& DeleteSubsystemResponse::_internal_command() const {
  return command_.Get();
}
inline void DeleteSubsystemResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteSubsystemResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.DeleteSubsystemResponse.command)
}
inline void DeleteSubsystemResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.DeleteSubsystemResponse.command)
}
inline void DeleteSubsystemResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.DeleteSubsystemResponse.command)
}
inline std::string* DeleteSubsystemResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteSubsystemResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.DeleteSubsystemResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteSubsystemResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.DeleteSubsystemResponse.command)
}

// string rid = 2;
inline void DeleteSubsystemResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& DeleteSubsystemResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.DeleteSubsystemResponse.rid)
  return _internal_rid();
}
inline void DeleteSubsystemResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.DeleteSubsystemResponse.rid)
}
inline std::string* DeleteSubsystemResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.DeleteSubsystemResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& DeleteSubsystemResponse::_internal_rid() const {
  return rid_.Get();
}
inline void DeleteSubsystemResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteSubsystemResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.DeleteSubsystemResponse.rid)
}
inline void DeleteSubsystemResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.DeleteSubsystemResponse.rid)
}
inline void DeleteSubsystemResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.DeleteSubsystemResponse.rid)
}
inline std::string* DeleteSubsystemResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteSubsystemResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.DeleteSubsystemResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteSubsystemResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.DeleteSubsystemResponse.rid)
}

// .grpc_cli.DeleteSubsystemResponse.Result result = 3;
inline bool DeleteSubsystemResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool DeleteSubsystemResponse::has_result() const {
  return _internal_has_result();
}
inline void DeleteSubsystemResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::DeleteSubsystemResponse_Result& DeleteSubsystemResponse::_internal_result() const {
  const ::grpc_cli::DeleteSubsystemResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::DeleteSubsystemResponse_Result&>(
      ::grpc_cli::_DeleteSubsystemResponse_Result_default_instance_);
}
inline const ::grpc_cli::DeleteSubsystemResponse_Result& DeleteSubsystemResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.DeleteSubsystemResponse.result)
  return _internal_result();
}
inline void DeleteSubsystemResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::DeleteSubsystemResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.DeleteSubsystemResponse.result)
}
inline ::grpc_cli::DeleteSubsystemResponse_Result* DeleteSubsystemResponse::release_result() {
  
  ::grpc_cli::DeleteSubsystemResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::DeleteSubsystemResponse_Result* DeleteSubsystemResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.DeleteSubsystemResponse.result)
  
  ::grpc_cli::DeleteSubsystemResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::DeleteSubsystemResponse_Result* DeleteSubsystemResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::DeleteSubsystemResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::DeleteSubsystemResponse_Result* DeleteSubsystemResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.DeleteSubsystemResponse.result)
  return _internal_mutable_result();
}
inline void DeleteSubsystemResponse::set_allocated_result(::grpc_cli::DeleteSubsystemResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.DeleteSubsystemResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool DeleteSubsystemResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool DeleteSubsystemResponse::has_info() const {
  return _internal_has_info();
}
inline void DeleteSubsystemResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& DeleteSubsystemResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& DeleteSubsystemResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.DeleteSubsystemResponse.info)
  return _internal_info();
}
inline void DeleteSubsystemResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.DeleteSubsystemResponse.info)
}
inline ::grpc_cli::PosInfo* DeleteSubsystemResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* DeleteSubsystemResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.DeleteSubsystemResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* DeleteSubsystemResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* DeleteSubsystemResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.DeleteSubsystemResponse.info)
  return _internal_mutable_info();
}
inline void DeleteSubsystemResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.DeleteSubsystemResponse.info)
}

// -------------------------------------------------------------------

// AddListenerRequest_Param

// string subnqn = 1;
inline void AddListenerRequest_Param::clear_subnqn() {
  subnqn_.ClearToEmpty();
}
inline const std::string& AddListenerRequest_Param::subnqn() const {
  // @@protoc_insertion_point(field_get:grpc_cli.AddListenerRequest.Param.subnqn)
  return _internal_subnqn();
}
inline void AddListenerRequest_Param::set_subnqn(const std::string& value) {
  _internal_set_subnqn(value);
  // @@protoc_insertion_point(field_set:grpc_cli.AddListenerRequest.Param.subnqn)
}
inline std::string* AddListenerRequest_Param::mutable_subnqn() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.AddListenerRequest.Param.subnqn)
  return _internal_mutable_subnqn();
}
inline const std::string& AddListenerRequest_Param::_internal_subnqn() const {
  return subnqn_.Get();
}
inline void AddListenerRequest_Param::_internal_set_subnqn(const std::string& value) {
  
  subnqn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddListenerRequest_Param::set_subnqn(std::string&& value) {
  
  subnqn_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.AddListenerRequest.Param.subnqn)
}
inline void AddListenerRequest_Param::set_subnqn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subnqn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.AddListenerRequest.Param.subnqn)
}
inline void AddListenerRequest_Param::set_subnqn(const char* value,
    size_t size) {
  
  subnqn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.AddListenerRequest.Param.subnqn)
}
inline std::string* AddListenerRequest_Param::_internal_mutable_subnqn() {
  
  return subnqn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddListenerRequest_Param::release_subnqn() {
  // @@protoc_insertion_point(field_release:grpc_cli.AddListenerRequest.Param.subnqn)
  return subnqn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddListenerRequest_Param::set_allocated_subnqn(std::string* subnqn) {
  if (subnqn != nullptr) {
    
  } else {
    
  }
  subnqn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subnqn,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.AddListenerRequest.Param.subnqn)
}

// string transportType = 2;
inline void AddListenerRequest_Param::clear_transporttype() {
  transporttype_.ClearToEmpty();
}
inline const std::string& AddListenerRequest_Param::transporttype() const {
  // @@protoc_insertion_point(field_get:grpc_cli.AddListenerRequest.Param.transportType)
  return _internal_transporttype();
}
inline void AddListenerRequest_Param::set_transporttype(const std::string& value) {
  _internal_set_transporttype(value);
  // @@protoc_insertion_point(field_set:grpc_cli.AddListenerRequest.Param.transportType)
}
inline std::string* AddListenerRequest_Param::mutable_transporttype() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.AddListenerRequest.Param.transportType)
  return _internal_mutable_transporttype();
}
inline const std::string& AddListenerRequest_Param::_internal_transporttype() const {
  return transporttype_.Get();
}
inline void AddListenerRequest_Param::_internal_set_transporttype(const std::string& value) {
  
  transporttype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddListenerRequest_Param::set_transporttype(std::string&& value) {
  
  transporttype_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.AddListenerRequest.Param.transportType)
}
inline void AddListenerRequest_Param::set_transporttype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transporttype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.AddListenerRequest.Param.transportType)
}
inline void AddListenerRequest_Param::set_transporttype(const char* value,
    size_t size) {
  
  transporttype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.AddListenerRequest.Param.transportType)
}
inline std::string* AddListenerRequest_Param::_internal_mutable_transporttype() {
  
  return transporttype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddListenerRequest_Param::release_transporttype() {
  // @@protoc_insertion_point(field_release:grpc_cli.AddListenerRequest.Param.transportType)
  return transporttype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddListenerRequest_Param::set_allocated_transporttype(std::string* transporttype) {
  if (transporttype != nullptr) {
    
  } else {
    
  }
  transporttype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transporttype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.AddListenerRequest.Param.transportType)
}

// string targetAddress = 3;
inline void AddListenerRequest_Param::clear_targetaddress() {
  targetaddress_.ClearToEmpty();
}
inline const std::string& AddListenerRequest_Param::targetaddress() const {
  // @@protoc_insertion_point(field_get:grpc_cli.AddListenerRequest.Param.targetAddress)
  return _internal_targetaddress();
}
inline void AddListenerRequest_Param::set_targetaddress(const std::string& value) {
  _internal_set_targetaddress(value);
  // @@protoc_insertion_point(field_set:grpc_cli.AddListenerRequest.Param.targetAddress)
}
inline std::string* AddListenerRequest_Param::mutable_targetaddress() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.AddListenerRequest.Param.targetAddress)
  return _internal_mutable_targetaddress();
}
inline const std::string& AddListenerRequest_Param::_internal_targetaddress() const {
  return targetaddress_.Get();
}
inline void AddListenerRequest_Param::_internal_set_targetaddress(const std::string& value) {
  
  targetaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddListenerRequest_Param::set_targetaddress(std::string&& value) {
  
  targetaddress_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.AddListenerRequest.Param.targetAddress)
}
inline void AddListenerRequest_Param::set_targetaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  targetaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.AddListenerRequest.Param.targetAddress)
}
inline void AddListenerRequest_Param::set_targetaddress(const char* value,
    size_t size) {
  
  targetaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.AddListenerRequest.Param.targetAddress)
}
inline std::string* AddListenerRequest_Param::_internal_mutable_targetaddress() {
  
  return targetaddress_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddListenerRequest_Param::release_targetaddress() {
  // @@protoc_insertion_point(field_release:grpc_cli.AddListenerRequest.Param.targetAddress)
  return targetaddress_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddListenerRequest_Param::set_allocated_targetaddress(std::string* targetaddress) {
  if (targetaddress != nullptr) {
    
  } else {
    
  }
  targetaddress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), targetaddress,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.AddListenerRequest.Param.targetAddress)
}

// string transportServiceId = 4;
inline void AddListenerRequest_Param::clear_transportserviceid() {
  transportserviceid_.ClearToEmpty();
}
inline const std::string& AddListenerRequest_Param::transportserviceid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.AddListenerRequest.Param.transportServiceId)
  return _internal_transportserviceid();
}
inline void AddListenerRequest_Param::set_transportserviceid(const std::string& value) {
  _internal_set_transportserviceid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.AddListenerRequest.Param.transportServiceId)
}
inline std::string* AddListenerRequest_Param::mutable_transportserviceid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.AddListenerRequest.Param.transportServiceId)
  return _internal_mutable_transportserviceid();
}
inline const std::string& AddListenerRequest_Param::_internal_transportserviceid() const {
  return transportserviceid_.Get();
}
inline void AddListenerRequest_Param::_internal_set_transportserviceid(const std::string& value) {
  
  transportserviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddListenerRequest_Param::set_transportserviceid(std::string&& value) {
  
  transportserviceid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.AddListenerRequest.Param.transportServiceId)
}
inline void AddListenerRequest_Param::set_transportserviceid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transportserviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.AddListenerRequest.Param.transportServiceId)
}
inline void AddListenerRequest_Param::set_transportserviceid(const char* value,
    size_t size) {
  
  transportserviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.AddListenerRequest.Param.transportServiceId)
}
inline std::string* AddListenerRequest_Param::_internal_mutable_transportserviceid() {
  
  return transportserviceid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddListenerRequest_Param::release_transportserviceid() {
  // @@protoc_insertion_point(field_release:grpc_cli.AddListenerRequest.Param.transportServiceId)
  return transportserviceid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddListenerRequest_Param::set_allocated_transportserviceid(std::string* transportserviceid) {
  if (transportserviceid != nullptr) {
    
  } else {
    
  }
  transportserviceid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transportserviceid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.AddListenerRequest.Param.transportServiceId)
}

// -------------------------------------------------------------------

// AddListenerRequest

// string command = 1;
inline void AddListenerRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& AddListenerRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.AddListenerRequest.command)
  return _internal_command();
}
inline void AddListenerRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.AddListenerRequest.command)
}
inline std::string* AddListenerRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.AddListenerRequest.command)
  return _internal_mutable_command();
}
inline const std::string& AddListenerRequest::_internal_command() const {
  return command_.Get();
}
inline void AddListenerRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddListenerRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.AddListenerRequest.command)
}
inline void AddListenerRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.AddListenerRequest.command)
}
inline void AddListenerRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.AddListenerRequest.command)
}
inline std::string* AddListenerRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddListenerRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.AddListenerRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddListenerRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.AddListenerRequest.command)
}

// string rid = 2;
inline void AddListenerRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& AddListenerRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.AddListenerRequest.rid)
  return _internal_rid();
}
inline void AddListenerRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.AddListenerRequest.rid)
}
inline std::string* AddListenerRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.AddListenerRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& AddListenerRequest::_internal_rid() const {
  return rid_.Get();
}
inline void AddListenerRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddListenerRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.AddListenerRequest.rid)
}
inline void AddListenerRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.AddListenerRequest.rid)
}
inline void AddListenerRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.AddListenerRequest.rid)
}
inline std::string* AddListenerRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddListenerRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.AddListenerRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddListenerRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.AddListenerRequest.rid)
}

// string requestor = 3;
inline void AddListenerRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& AddListenerRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.AddListenerRequest.requestor)
  return _internal_requestor();
}
inline void AddListenerRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.AddListenerRequest.requestor)
}
inline std::string* AddListenerRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.AddListenerRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& AddListenerRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void AddListenerRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddListenerRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.AddListenerRequest.requestor)
}
inline void AddListenerRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.AddListenerRequest.requestor)
}
inline void AddListenerRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.AddListenerRequest.requestor)
}
inline std::string* AddListenerRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddListenerRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.AddListenerRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddListenerRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.AddListenerRequest.requestor)
}

// .grpc_cli.AddListenerRequest.Param param = 4;
inline bool AddListenerRequest::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool AddListenerRequest::has_param() const {
  return _internal_has_param();
}
inline void AddListenerRequest::clear_param() {
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::grpc_cli::AddListenerRequest_Param& AddListenerRequest::_internal_param() const {
  const ::grpc_cli::AddListenerRequest_Param* p = param_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::AddListenerRequest_Param&>(
      ::grpc_cli::_AddListenerRequest_Param_default_instance_);
}
inline const ::grpc_cli::AddListenerRequest_Param& AddListenerRequest::param() const {
  // @@protoc_insertion_point(field_get:grpc_cli.AddListenerRequest.param)
  return _internal_param();
}
inline void AddListenerRequest::unsafe_arena_set_allocated_param(
    ::grpc_cli::AddListenerRequest_Param* param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.AddListenerRequest.param)
}
inline ::grpc_cli::AddListenerRequest_Param* AddListenerRequest::release_param() {
  
  ::grpc_cli::AddListenerRequest_Param* temp = param_;
  param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::AddListenerRequest_Param* AddListenerRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:grpc_cli.AddListenerRequest.param)
  
  ::grpc_cli::AddListenerRequest_Param* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::grpc_cli::AddListenerRequest_Param* AddListenerRequest::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::AddListenerRequest_Param>(GetArena());
    param_ = p;
  }
  return param_;
}
inline ::grpc_cli::AddListenerRequest_Param* AddListenerRequest::mutable_param() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.AddListenerRequest.param)
  return _internal_mutable_param();
}
inline void AddListenerRequest::set_allocated_param(::grpc_cli::AddListenerRequest_Param* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.AddListenerRequest.param)
}

// -------------------------------------------------------------------

// AddListenerResponse_Result

// .grpc_cli.Status status = 1;
inline bool AddListenerResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool AddListenerResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void AddListenerResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& AddListenerResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& AddListenerResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.AddListenerResponse.Result.status)
  return _internal_status();
}
inline void AddListenerResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.AddListenerResponse.Result.status)
}
inline ::grpc_cli::Status* AddListenerResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* AddListenerResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.AddListenerResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* AddListenerResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* AddListenerResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.AddListenerResponse.Result.status)
  return _internal_mutable_status();
}
inline void AddListenerResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.AddListenerResponse.Result.status)
}

// -------------------------------------------------------------------

// AddListenerResponse

// string command = 1;
inline void AddListenerResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& AddListenerResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.AddListenerResponse.command)
  return _internal_command();
}
inline void AddListenerResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.AddListenerResponse.command)
}
inline std::string* AddListenerResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.AddListenerResponse.command)
  return _internal_mutable_command();
}
inline const std::string& AddListenerResponse::_internal_command() const {
  return command_.Get();
}
inline void AddListenerResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddListenerResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.AddListenerResponse.command)
}
inline void AddListenerResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.AddListenerResponse.command)
}
inline void AddListenerResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.AddListenerResponse.command)
}
inline std::string* AddListenerResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddListenerResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.AddListenerResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddListenerResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.AddListenerResponse.command)
}

// string rid = 2;
inline void AddListenerResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& AddListenerResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.AddListenerResponse.rid)
  return _internal_rid();
}
inline void AddListenerResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.AddListenerResponse.rid)
}
inline std::string* AddListenerResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.AddListenerResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& AddListenerResponse::_internal_rid() const {
  return rid_.Get();
}
inline void AddListenerResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddListenerResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.AddListenerResponse.rid)
}
inline void AddListenerResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.AddListenerResponse.rid)
}
inline void AddListenerResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.AddListenerResponse.rid)
}
inline std::string* AddListenerResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddListenerResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.AddListenerResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddListenerResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.AddListenerResponse.rid)
}

// .grpc_cli.AddListenerResponse.Result result = 3;
inline bool AddListenerResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool AddListenerResponse::has_result() const {
  return _internal_has_result();
}
inline void AddListenerResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::AddListenerResponse_Result& AddListenerResponse::_internal_result() const {
  const ::grpc_cli::AddListenerResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::AddListenerResponse_Result&>(
      ::grpc_cli::_AddListenerResponse_Result_default_instance_);
}
inline const ::grpc_cli::AddListenerResponse_Result& AddListenerResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.AddListenerResponse.result)
  return _internal_result();
}
inline void AddListenerResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::AddListenerResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.AddListenerResponse.result)
}
inline ::grpc_cli::AddListenerResponse_Result* AddListenerResponse::release_result() {
  
  ::grpc_cli::AddListenerResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::AddListenerResponse_Result* AddListenerResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.AddListenerResponse.result)
  
  ::grpc_cli::AddListenerResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::AddListenerResponse_Result* AddListenerResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::AddListenerResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::AddListenerResponse_Result* AddListenerResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.AddListenerResponse.result)
  return _internal_mutable_result();
}
inline void AddListenerResponse::set_allocated_result(::grpc_cli::AddListenerResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.AddListenerResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool AddListenerResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool AddListenerResponse::has_info() const {
  return _internal_has_info();
}
inline void AddListenerResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& AddListenerResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& AddListenerResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.AddListenerResponse.info)
  return _internal_info();
}
inline void AddListenerResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.AddListenerResponse.info)
}
inline ::grpc_cli::PosInfo* AddListenerResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* AddListenerResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.AddListenerResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* AddListenerResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* AddListenerResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.AddListenerResponse.info)
  return _internal_mutable_info();
}
inline void AddListenerResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.AddListenerResponse.info)
}

// -------------------------------------------------------------------

// Subsystem_AddressInfo

// string transportType = 1;
inline void Subsystem_AddressInfo::clear_transporttype() {
  transporttype_.ClearToEmpty();
}
inline const std::string& Subsystem_AddressInfo::transporttype() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Subsystem.AddressInfo.transportType)
  return _internal_transporttype();
}
inline void Subsystem_AddressInfo::set_transporttype(const std::string& value) {
  _internal_set_transporttype(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Subsystem.AddressInfo.transportType)
}
inline std::string* Subsystem_AddressInfo::mutable_transporttype() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Subsystem.AddressInfo.transportType)
  return _internal_mutable_transporttype();
}
inline const std::string& Subsystem_AddressInfo::_internal_transporttype() const {
  return transporttype_.Get();
}
inline void Subsystem_AddressInfo::_internal_set_transporttype(const std::string& value) {
  
  transporttype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Subsystem_AddressInfo::set_transporttype(std::string&& value) {
  
  transporttype_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Subsystem.AddressInfo.transportType)
}
inline void Subsystem_AddressInfo::set_transporttype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transporttype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Subsystem.AddressInfo.transportType)
}
inline void Subsystem_AddressInfo::set_transporttype(const char* value,
    size_t size) {
  
  transporttype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Subsystem.AddressInfo.transportType)
}
inline std::string* Subsystem_AddressInfo::_internal_mutable_transporttype() {
  
  return transporttype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Subsystem_AddressInfo::release_transporttype() {
  // @@protoc_insertion_point(field_release:grpc_cli.Subsystem.AddressInfo.transportType)
  return transporttype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Subsystem_AddressInfo::set_allocated_transporttype(std::string* transporttype) {
  if (transporttype != nullptr) {
    
  } else {
    
  }
  transporttype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transporttype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Subsystem.AddressInfo.transportType)
}

// string addressFamily = 2;
inline void Subsystem_AddressInfo::clear_addressfamily() {
  addressfamily_.ClearToEmpty();
}
inline const std::string& Subsystem_AddressInfo::addressfamily() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Subsystem.AddressInfo.addressFamily)
  return _internal_addressfamily();
}
inline void Subsystem_AddressInfo::set_addressfamily(const std::string& value) {
  _internal_set_addressfamily(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Subsystem.AddressInfo.addressFamily)
}
inline std::string* Subsystem_AddressInfo::mutable_addressfamily() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Subsystem.AddressInfo.addressFamily)
  return _internal_mutable_addressfamily();
}
inline const std::string& Subsystem_AddressInfo::_internal_addressfamily() const {
  return addressfamily_.Get();
}
inline void Subsystem_AddressInfo::_internal_set_addressfamily(const std::string& value) {
  
  addressfamily_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Subsystem_AddressInfo::set_addressfamily(std::string&& value) {
  
  addressfamily_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Subsystem.AddressInfo.addressFamily)
}
inline void Subsystem_AddressInfo::set_addressfamily(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  addressfamily_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Subsystem.AddressInfo.addressFamily)
}
inline void Subsystem_AddressInfo::set_addressfamily(const char* value,
    size_t size) {
  
  addressfamily_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Subsystem.AddressInfo.addressFamily)
}
inline std::string* Subsystem_AddressInfo::_internal_mutable_addressfamily() {
  
  return addressfamily_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Subsystem_AddressInfo::release_addressfamily() {
  // @@protoc_insertion_point(field_release:grpc_cli.Subsystem.AddressInfo.addressFamily)
  return addressfamily_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Subsystem_AddressInfo::set_allocated_addressfamily(std::string* addressfamily) {
  if (addressfamily != nullptr) {
    
  } else {
    
  }
  addressfamily_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), addressfamily,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Subsystem.AddressInfo.addressFamily)
}

// string targetAddress = 3;
inline void Subsystem_AddressInfo::clear_targetaddress() {
  targetaddress_.ClearToEmpty();
}
inline const std::string& Subsystem_AddressInfo::targetaddress() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Subsystem.AddressInfo.targetAddress)
  return _internal_targetaddress();
}
inline void Subsystem_AddressInfo::set_targetaddress(const std::string& value) {
  _internal_set_targetaddress(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Subsystem.AddressInfo.targetAddress)
}
inline std::string* Subsystem_AddressInfo::mutable_targetaddress() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Subsystem.AddressInfo.targetAddress)
  return _internal_mutable_targetaddress();
}
inline const std::string& Subsystem_AddressInfo::_internal_targetaddress() const {
  return targetaddress_.Get();
}
inline void Subsystem_AddressInfo::_internal_set_targetaddress(const std::string& value) {
  
  targetaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Subsystem_AddressInfo::set_targetaddress(std::string&& value) {
  
  targetaddress_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Subsystem.AddressInfo.targetAddress)
}
inline void Subsystem_AddressInfo::set_targetaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  targetaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Subsystem.AddressInfo.targetAddress)
}
inline void Subsystem_AddressInfo::set_targetaddress(const char* value,
    size_t size) {
  
  targetaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Subsystem.AddressInfo.targetAddress)
}
inline std::string* Subsystem_AddressInfo::_internal_mutable_targetaddress() {
  
  return targetaddress_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Subsystem_AddressInfo::release_targetaddress() {
  // @@protoc_insertion_point(field_release:grpc_cli.Subsystem.AddressInfo.targetAddress)
  return targetaddress_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Subsystem_AddressInfo::set_allocated_targetaddress(std::string* targetaddress) {
  if (targetaddress != nullptr) {
    
  } else {
    
  }
  targetaddress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), targetaddress,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Subsystem.AddressInfo.targetAddress)
}

// string transportServiceId = 4;
inline void Subsystem_AddressInfo::clear_transportserviceid() {
  transportserviceid_.ClearToEmpty();
}
inline const std::string& Subsystem_AddressInfo::transportserviceid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Subsystem.AddressInfo.transportServiceId)
  return _internal_transportserviceid();
}
inline void Subsystem_AddressInfo::set_transportserviceid(const std::string& value) {
  _internal_set_transportserviceid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Subsystem.AddressInfo.transportServiceId)
}
inline std::string* Subsystem_AddressInfo::mutable_transportserviceid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Subsystem.AddressInfo.transportServiceId)
  return _internal_mutable_transportserviceid();
}
inline const std::string& Subsystem_AddressInfo::_internal_transportserviceid() const {
  return transportserviceid_.Get();
}
inline void Subsystem_AddressInfo::_internal_set_transportserviceid(const std::string& value) {
  
  transportserviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Subsystem_AddressInfo::set_transportserviceid(std::string&& value) {
  
  transportserviceid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Subsystem.AddressInfo.transportServiceId)
}
inline void Subsystem_AddressInfo::set_transportserviceid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transportserviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Subsystem.AddressInfo.transportServiceId)
}
inline void Subsystem_AddressInfo::set_transportserviceid(const char* value,
    size_t size) {
  
  transportserviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Subsystem.AddressInfo.transportServiceId)
}
inline std::string* Subsystem_AddressInfo::_internal_mutable_transportserviceid() {
  
  return transportserviceid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Subsystem_AddressInfo::release_transportserviceid() {
  // @@protoc_insertion_point(field_release:grpc_cli.Subsystem.AddressInfo.transportServiceId)
  return transportserviceid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Subsystem_AddressInfo::set_allocated_transportserviceid(std::string* transportserviceid) {
  if (transportserviceid != nullptr) {
    
  } else {
    
  }
  transportserviceid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transportserviceid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Subsystem.AddressInfo.transportServiceId)
}

// -------------------------------------------------------------------

// Subsystem_Host

// string nqn = 1;
inline void Subsystem_Host::clear_nqn() {
  nqn_.ClearToEmpty();
}
inline const std::string& Subsystem_Host::nqn() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Subsystem.Host.nqn)
  return _internal_nqn();
}
inline void Subsystem_Host::set_nqn(const std::string& value) {
  _internal_set_nqn(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Subsystem.Host.nqn)
}
inline std::string* Subsystem_Host::mutable_nqn() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Subsystem.Host.nqn)
  return _internal_mutable_nqn();
}
inline const std::string& Subsystem_Host::_internal_nqn() const {
  return nqn_.Get();
}
inline void Subsystem_Host::_internal_set_nqn(const std::string& value) {
  
  nqn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Subsystem_Host::set_nqn(std::string&& value) {
  
  nqn_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Subsystem.Host.nqn)
}
inline void Subsystem_Host::set_nqn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nqn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Subsystem.Host.nqn)
}
inline void Subsystem_Host::set_nqn(const char* value,
    size_t size) {
  
  nqn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Subsystem.Host.nqn)
}
inline std::string* Subsystem_Host::_internal_mutable_nqn() {
  
  return nqn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Subsystem_Host::release_nqn() {
  // @@protoc_insertion_point(field_release:grpc_cli.Subsystem.Host.nqn)
  return nqn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Subsystem_Host::set_allocated_nqn(std::string* nqn) {
  if (nqn != nullptr) {
    
  } else {
    
  }
  nqn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nqn,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Subsystem.Host.nqn)
}

// -------------------------------------------------------------------

// Subsystem_Namespace

// int32 nsid = 1;
inline void Subsystem_Namespace::clear_nsid() {
  nsid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Subsystem_Namespace::_internal_nsid() const {
  return nsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Subsystem_Namespace::nsid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Subsystem.Namespace.nsid)
  return _internal_nsid();
}
inline void Subsystem_Namespace::_internal_set_nsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nsid_ = value;
}
inline void Subsystem_Namespace::set_nsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nsid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Subsystem.Namespace.nsid)
}

// string bdevName = 2;
inline void Subsystem_Namespace::clear_bdevname() {
  bdevname_.ClearToEmpty();
}
inline const std::string& Subsystem_Namespace::bdevname() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Subsystem.Namespace.bdevName)
  return _internal_bdevname();
}
inline void Subsystem_Namespace::set_bdevname(const std::string& value) {
  _internal_set_bdevname(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Subsystem.Namespace.bdevName)
}
inline std::string* Subsystem_Namespace::mutable_bdevname() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Subsystem.Namespace.bdevName)
  return _internal_mutable_bdevname();
}
inline const std::string& Subsystem_Namespace::_internal_bdevname() const {
  return bdevname_.Get();
}
inline void Subsystem_Namespace::_internal_set_bdevname(const std::string& value) {
  
  bdevname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Subsystem_Namespace::set_bdevname(std::string&& value) {
  
  bdevname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Subsystem.Namespace.bdevName)
}
inline void Subsystem_Namespace::set_bdevname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bdevname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Subsystem.Namespace.bdevName)
}
inline void Subsystem_Namespace::set_bdevname(const char* value,
    size_t size) {
  
  bdevname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Subsystem.Namespace.bdevName)
}
inline std::string* Subsystem_Namespace::_internal_mutable_bdevname() {
  
  return bdevname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Subsystem_Namespace::release_bdevname() {
  // @@protoc_insertion_point(field_release:grpc_cli.Subsystem.Namespace.bdevName)
  return bdevname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Subsystem_Namespace::set_allocated_bdevname(std::string* bdevname) {
  if (bdevname != nullptr) {
    
  } else {
    
  }
  bdevname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bdevname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Subsystem.Namespace.bdevName)
}

// string uuid = 3;
inline void Subsystem_Namespace::clear_uuid() {
  uuid_.ClearToEmpty();
}
inline const std::string& Subsystem_Namespace::uuid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Subsystem.Namespace.uuid)
  return _internal_uuid();
}
inline void Subsystem_Namespace::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Subsystem.Namespace.uuid)
}
inline std::string* Subsystem_Namespace::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Subsystem.Namespace.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& Subsystem_Namespace::_internal_uuid() const {
  return uuid_.Get();
}
inline void Subsystem_Namespace::_internal_set_uuid(const std::string& value) {
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Subsystem_Namespace::set_uuid(std::string&& value) {
  
  uuid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Subsystem.Namespace.uuid)
}
inline void Subsystem_Namespace::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Subsystem.Namespace.uuid)
}
inline void Subsystem_Namespace::set_uuid(const char* value,
    size_t size) {
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Subsystem.Namespace.uuid)
}
inline std::string* Subsystem_Namespace::_internal_mutable_uuid() {
  
  return uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Subsystem_Namespace::release_uuid() {
  // @@protoc_insertion_point(field_release:grpc_cli.Subsystem.Namespace.uuid)
  return uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Subsystem_Namespace::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Subsystem.Namespace.uuid)
}

// -------------------------------------------------------------------

// Subsystem

// string nqn = 1;
inline void Subsystem::clear_nqn() {
  nqn_.ClearToEmpty();
}
inline const std::string& Subsystem::nqn() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Subsystem.nqn)
  return _internal_nqn();
}
inline void Subsystem::set_nqn(const std::string& value) {
  _internal_set_nqn(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Subsystem.nqn)
}
inline std::string* Subsystem::mutable_nqn() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Subsystem.nqn)
  return _internal_mutable_nqn();
}
inline const std::string& Subsystem::_internal_nqn() const {
  return nqn_.Get();
}
inline void Subsystem::_internal_set_nqn(const std::string& value) {
  
  nqn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Subsystem::set_nqn(std::string&& value) {
  
  nqn_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Subsystem.nqn)
}
inline void Subsystem::set_nqn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nqn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Subsystem.nqn)
}
inline void Subsystem::set_nqn(const char* value,
    size_t size) {
  
  nqn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Subsystem.nqn)
}
inline std::string* Subsystem::_internal_mutable_nqn() {
  
  return nqn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Subsystem::release_nqn() {
  // @@protoc_insertion_point(field_release:grpc_cli.Subsystem.nqn)
  return nqn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Subsystem::set_allocated_nqn(std::string* nqn) {
  if (nqn != nullptr) {
    
  } else {
    
  }
  nqn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nqn,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Subsystem.nqn)
}

// string subtype = 2;
inline void Subsystem::clear_subtype() {
  subtype_.ClearToEmpty();
}
inline const std::string& Subsystem::subtype() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Subsystem.subtype)
  return _internal_subtype();
}
inline void Subsystem::set_subtype(const std::string& value) {
  _internal_set_subtype(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Subsystem.subtype)
}
inline std::string* Subsystem::mutable_subtype() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Subsystem.subtype)
  return _internal_mutable_subtype();
}
inline const std::string& Subsystem::_internal_subtype() const {
  return subtype_.Get();
}
inline void Subsystem::_internal_set_subtype(const std::string& value) {
  
  subtype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Subsystem::set_subtype(std::string&& value) {
  
  subtype_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Subsystem.subtype)
}
inline void Subsystem::set_subtype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subtype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Subsystem.subtype)
}
inline void Subsystem::set_subtype(const char* value,
    size_t size) {
  
  subtype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Subsystem.subtype)
}
inline std::string* Subsystem::_internal_mutable_subtype() {
  
  return subtype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Subsystem::release_subtype() {
  // @@protoc_insertion_point(field_release:grpc_cli.Subsystem.subtype)
  return subtype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Subsystem::set_allocated_subtype(std::string* subtype) {
  if (subtype != nullptr) {
    
  } else {
    
  }
  subtype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subtype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Subsystem.subtype)
}

// repeated .grpc_cli.Subsystem.AddressInfo listenAddresses = 3;
inline int Subsystem::_internal_listenaddresses_size() const {
  return listenaddresses_.size();
}
inline int Subsystem::listenaddresses_size() const {
  return _internal_listenaddresses_size();
}
inline void Subsystem::clear_listenaddresses() {
  listenaddresses_.Clear();
}
inline ::grpc_cli::Subsystem_AddressInfo* Subsystem::mutable_listenaddresses(int index) {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Subsystem.listenAddresses)
  return listenaddresses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::Subsystem_AddressInfo >*
Subsystem::mutable_listenaddresses() {
  // @@protoc_insertion_point(field_mutable_list:grpc_cli.Subsystem.listenAddresses)
  return &listenaddresses_;
}
inline const ::grpc_cli::Subsystem_AddressInfo& Subsystem::_internal_listenaddresses(int index) const {
  return listenaddresses_.Get(index);
}
inline const ::grpc_cli::Subsystem_AddressInfo& Subsystem::listenaddresses(int index) const {
  // @@protoc_insertion_point(field_get:grpc_cli.Subsystem.listenAddresses)
  return _internal_listenaddresses(index);
}
inline ::grpc_cli::Subsystem_AddressInfo* Subsystem::_internal_add_listenaddresses() {
  return listenaddresses_.Add();
}
inline ::grpc_cli::Subsystem_AddressInfo* Subsystem::add_listenaddresses() {
  // @@protoc_insertion_point(field_add:grpc_cli.Subsystem.listenAddresses)
  return _internal_add_listenaddresses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::Subsystem_AddressInfo >&
Subsystem::listenaddresses() const {
  // @@protoc_insertion_point(field_list:grpc_cli.Subsystem.listenAddresses)
  return listenaddresses_;
}

// int32 allowAnyHost = 4;
inline void Subsystem::clear_allowanyhost() {
  allowanyhost_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Subsystem::_internal_allowanyhost() const {
  return allowanyhost_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Subsystem::allowanyhost() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Subsystem.allowAnyHost)
  return _internal_allowanyhost();
}
inline void Subsystem::_internal_set_allowanyhost(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  allowanyhost_ = value;
}
inline void Subsystem::set_allowanyhost(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_allowanyhost(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Subsystem.allowAnyHost)
}

// repeated .grpc_cli.Subsystem.Host hosts = 5;
inline int Subsystem::_internal_hosts_size() const {
  return hosts_.size();
}
inline int Subsystem::hosts_size() const {
  return _internal_hosts_size();
}
inline void Subsystem::clear_hosts() {
  hosts_.Clear();
}
inline ::grpc_cli::Subsystem_Host* Subsystem::mutable_hosts(int index) {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Subsystem.hosts)
  return hosts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::Subsystem_Host >*
Subsystem::mutable_hosts() {
  // @@protoc_insertion_point(field_mutable_list:grpc_cli.Subsystem.hosts)
  return &hosts_;
}
inline const ::grpc_cli::Subsystem_Host& Subsystem::_internal_hosts(int index) const {
  return hosts_.Get(index);
}
inline const ::grpc_cli::Subsystem_Host& Subsystem::hosts(int index) const {
  // @@protoc_insertion_point(field_get:grpc_cli.Subsystem.hosts)
  return _internal_hosts(index);
}
inline ::grpc_cli::Subsystem_Host* Subsystem::_internal_add_hosts() {
  return hosts_.Add();
}
inline ::grpc_cli::Subsystem_Host* Subsystem::add_hosts() {
  // @@protoc_insertion_point(field_add:grpc_cli.Subsystem.hosts)
  return _internal_add_hosts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::Subsystem_Host >&
Subsystem::hosts() const {
  // @@protoc_insertion_point(field_list:grpc_cli.Subsystem.hosts)
  return hosts_;
}

// string serialNumber = 6;
inline void Subsystem::clear_serialnumber() {
  serialnumber_.ClearToEmpty();
}
inline const std::string& Subsystem::serialnumber() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Subsystem.serialNumber)
  return _internal_serialnumber();
}
inline void Subsystem::set_serialnumber(const std::string& value) {
  _internal_set_serialnumber(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Subsystem.serialNumber)
}
inline std::string* Subsystem::mutable_serialnumber() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Subsystem.serialNumber)
  return _internal_mutable_serialnumber();
}
inline const std::string& Subsystem::_internal_serialnumber() const {
  return serialnumber_.Get();
}
inline void Subsystem::_internal_set_serialnumber(const std::string& value) {
  
  serialnumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Subsystem::set_serialnumber(std::string&& value) {
  
  serialnumber_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Subsystem.serialNumber)
}
inline void Subsystem::set_serialnumber(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  serialnumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Subsystem.serialNumber)
}
inline void Subsystem::set_serialnumber(const char* value,
    size_t size) {
  
  serialnumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Subsystem.serialNumber)
}
inline std::string* Subsystem::_internal_mutable_serialnumber() {
  
  return serialnumber_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Subsystem::release_serialnumber() {
  // @@protoc_insertion_point(field_release:grpc_cli.Subsystem.serialNumber)
  return serialnumber_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Subsystem::set_allocated_serialnumber(std::string* serialnumber) {
  if (serialnumber != nullptr) {
    
  } else {
    
  }
  serialnumber_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serialnumber,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Subsystem.serialNumber)
}

// string modelNumber = 7;
inline void Subsystem::clear_modelnumber() {
  modelnumber_.ClearToEmpty();
}
inline const std::string& Subsystem::modelnumber() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Subsystem.modelNumber)
  return _internal_modelnumber();
}
inline void Subsystem::set_modelnumber(const std::string& value) {
  _internal_set_modelnumber(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Subsystem.modelNumber)
}
inline std::string* Subsystem::mutable_modelnumber() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Subsystem.modelNumber)
  return _internal_mutable_modelnumber();
}
inline const std::string& Subsystem::_internal_modelnumber() const {
  return modelnumber_.Get();
}
inline void Subsystem::_internal_set_modelnumber(const std::string& value) {
  
  modelnumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Subsystem::set_modelnumber(std::string&& value) {
  
  modelnumber_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Subsystem.modelNumber)
}
inline void Subsystem::set_modelnumber(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  modelnumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Subsystem.modelNumber)
}
inline void Subsystem::set_modelnumber(const char* value,
    size_t size) {
  
  modelnumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Subsystem.modelNumber)
}
inline std::string* Subsystem::_internal_mutable_modelnumber() {
  
  return modelnumber_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Subsystem::release_modelnumber() {
  // @@protoc_insertion_point(field_release:grpc_cli.Subsystem.modelNumber)
  return modelnumber_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Subsystem::set_allocated_modelnumber(std::string* modelnumber) {
  if (modelnumber != nullptr) {
    
  } else {
    
  }
  modelnumber_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), modelnumber,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Subsystem.modelNumber)
}

// int32 maxNamespaces = 8;
inline void Subsystem::clear_maxnamespaces() {
  maxnamespaces_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Subsystem::_internal_maxnamespaces() const {
  return maxnamespaces_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Subsystem::maxnamespaces() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Subsystem.maxNamespaces)
  return _internal_maxnamespaces();
}
inline void Subsystem::_internal_set_maxnamespaces(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxnamespaces_ = value;
}
inline void Subsystem::set_maxnamespaces(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxnamespaces(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Subsystem.maxNamespaces)
}

// repeated .grpc_cli.Subsystem.Namespace namespaces = 9;
inline int Subsystem::_internal_namespaces_size() const {
  return namespaces_.size();
}
inline int Subsystem::namespaces_size() const {
  return _internal_namespaces_size();
}
inline void Subsystem::clear_namespaces() {
  namespaces_.Clear();
}
inline ::grpc_cli::Subsystem_Namespace* Subsystem::mutable_namespaces(int index) {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Subsystem.namespaces)
  return namespaces_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::Subsystem_Namespace >*
Subsystem::mutable_namespaces() {
  // @@protoc_insertion_point(field_mutable_list:grpc_cli.Subsystem.namespaces)
  return &namespaces_;
}
inline const ::grpc_cli::Subsystem_Namespace& Subsystem::_internal_namespaces(int index) const {
  return namespaces_.Get(index);
}
inline const ::grpc_cli::Subsystem_Namespace& Subsystem::namespaces(int index) const {
  // @@protoc_insertion_point(field_get:grpc_cli.Subsystem.namespaces)
  return _internal_namespaces(index);
}
inline ::grpc_cli::Subsystem_Namespace* Subsystem::_internal_add_namespaces() {
  return namespaces_.Add();
}
inline ::grpc_cli::Subsystem_Namespace* Subsystem::add_namespaces() {
  // @@protoc_insertion_point(field_add:grpc_cli.Subsystem.namespaces)
  return _internal_add_namespaces();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::Subsystem_Namespace >&
Subsystem::namespaces() const {
  // @@protoc_insertion_point(field_list:grpc_cli.Subsystem.namespaces)
  return namespaces_;
}

// -------------------------------------------------------------------

// ListSubsystemRequest

// string command = 1;
inline void ListSubsystemRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& ListSubsystemRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListSubsystemRequest.command)
  return _internal_command();
}
inline void ListSubsystemRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListSubsystemRequest.command)
}
inline std::string* ListSubsystemRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListSubsystemRequest.command)
  return _internal_mutable_command();
}
inline const std::string& ListSubsystemRequest::_internal_command() const {
  return command_.Get();
}
inline void ListSubsystemRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListSubsystemRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListSubsystemRequest.command)
}
inline void ListSubsystemRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListSubsystemRequest.command)
}
inline void ListSubsystemRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListSubsystemRequest.command)
}
inline std::string* ListSubsystemRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListSubsystemRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListSubsystemRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListSubsystemRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListSubsystemRequest.command)
}

// string rid = 2;
inline void ListSubsystemRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& ListSubsystemRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListSubsystemRequest.rid)
  return _internal_rid();
}
inline void ListSubsystemRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListSubsystemRequest.rid)
}
inline std::string* ListSubsystemRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListSubsystemRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& ListSubsystemRequest::_internal_rid() const {
  return rid_.Get();
}
inline void ListSubsystemRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListSubsystemRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListSubsystemRequest.rid)
}
inline void ListSubsystemRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListSubsystemRequest.rid)
}
inline void ListSubsystemRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListSubsystemRequest.rid)
}
inline std::string* ListSubsystemRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListSubsystemRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListSubsystemRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListSubsystemRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListSubsystemRequest.rid)
}

// string requestor = 3;
inline void ListSubsystemRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& ListSubsystemRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListSubsystemRequest.requestor)
  return _internal_requestor();
}
inline void ListSubsystemRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListSubsystemRequest.requestor)
}
inline std::string* ListSubsystemRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListSubsystemRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& ListSubsystemRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void ListSubsystemRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListSubsystemRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListSubsystemRequest.requestor)
}
inline void ListSubsystemRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListSubsystemRequest.requestor)
}
inline void ListSubsystemRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListSubsystemRequest.requestor)
}
inline std::string* ListSubsystemRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListSubsystemRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListSubsystemRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListSubsystemRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListSubsystemRequest.requestor)
}

// -------------------------------------------------------------------

// ListSubsystemResponse_Result_SubsystemList

// repeated .grpc_cli.Subsystem subsystemlist = 1;
inline int ListSubsystemResponse_Result_SubsystemList::_internal_subsystemlist_size() const {
  return subsystemlist_.size();
}
inline int ListSubsystemResponse_Result_SubsystemList::subsystemlist_size() const {
  return _internal_subsystemlist_size();
}
inline void ListSubsystemResponse_Result_SubsystemList::clear_subsystemlist() {
  subsystemlist_.Clear();
}
inline ::grpc_cli::Subsystem* ListSubsystemResponse_Result_SubsystemList::mutable_subsystemlist(int index) {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListSubsystemResponse.Result.SubsystemList.subsystemlist)
  return subsystemlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::Subsystem >*
ListSubsystemResponse_Result_SubsystemList::mutable_subsystemlist() {
  // @@protoc_insertion_point(field_mutable_list:grpc_cli.ListSubsystemResponse.Result.SubsystemList.subsystemlist)
  return &subsystemlist_;
}
inline const ::grpc_cli::Subsystem& ListSubsystemResponse_Result_SubsystemList::_internal_subsystemlist(int index) const {
  return subsystemlist_.Get(index);
}
inline const ::grpc_cli::Subsystem& ListSubsystemResponse_Result_SubsystemList::subsystemlist(int index) const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListSubsystemResponse.Result.SubsystemList.subsystemlist)
  return _internal_subsystemlist(index);
}
inline ::grpc_cli::Subsystem* ListSubsystemResponse_Result_SubsystemList::_internal_add_subsystemlist() {
  return subsystemlist_.Add();
}
inline ::grpc_cli::Subsystem* ListSubsystemResponse_Result_SubsystemList::add_subsystemlist() {
  // @@protoc_insertion_point(field_add:grpc_cli.ListSubsystemResponse.Result.SubsystemList.subsystemlist)
  return _internal_add_subsystemlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::Subsystem >&
ListSubsystemResponse_Result_SubsystemList::subsystemlist() const {
  // @@protoc_insertion_point(field_list:grpc_cli.ListSubsystemResponse.Result.SubsystemList.subsystemlist)
  return subsystemlist_;
}

// -------------------------------------------------------------------

// ListSubsystemResponse_Result

// .grpc_cli.Status status = 1;
inline bool ListSubsystemResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool ListSubsystemResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void ListSubsystemResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& ListSubsystemResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& ListSubsystemResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListSubsystemResponse.Result.status)
  return _internal_status();
}
inline void ListSubsystemResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ListSubsystemResponse.Result.status)
}
inline ::grpc_cli::Status* ListSubsystemResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* ListSubsystemResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListSubsystemResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* ListSubsystemResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* ListSubsystemResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListSubsystemResponse.Result.status)
  return _internal_mutable_status();
}
inline void ListSubsystemResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListSubsystemResponse.Result.status)
}

// .grpc_cli.ListSubsystemResponse.Result.SubsystemList data = 2;
inline bool ListSubsystemResponse_Result::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool ListSubsystemResponse_Result::has_data() const {
  return _internal_has_data();
}
inline void ListSubsystemResponse_Result::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::grpc_cli::ListSubsystemResponse_Result_SubsystemList& ListSubsystemResponse_Result::_internal_data() const {
  const ::grpc_cli::ListSubsystemResponse_Result_SubsystemList* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::ListSubsystemResponse_Result_SubsystemList&>(
      ::grpc_cli::_ListSubsystemResponse_Result_SubsystemList_default_instance_);
}
inline const ::grpc_cli::ListSubsystemResponse_Result_SubsystemList& ListSubsystemResponse_Result::data() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListSubsystemResponse.Result.data)
  return _internal_data();
}
inline void ListSubsystemResponse_Result::unsafe_arena_set_allocated_data(
    ::grpc_cli::ListSubsystemResponse_Result_SubsystemList* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ListSubsystemResponse.Result.data)
}
inline ::grpc_cli::ListSubsystemResponse_Result_SubsystemList* ListSubsystemResponse_Result::release_data() {
  
  ::grpc_cli::ListSubsystemResponse_Result_SubsystemList* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::ListSubsystemResponse_Result_SubsystemList* ListSubsystemResponse_Result::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListSubsystemResponse.Result.data)
  
  ::grpc_cli::ListSubsystemResponse_Result_SubsystemList* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::grpc_cli::ListSubsystemResponse_Result_SubsystemList* ListSubsystemResponse_Result::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::ListSubsystemResponse_Result_SubsystemList>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::grpc_cli::ListSubsystemResponse_Result_SubsystemList* ListSubsystemResponse_Result::mutable_data() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListSubsystemResponse.Result.data)
  return _internal_mutable_data();
}
inline void ListSubsystemResponse_Result::set_allocated_data(::grpc_cli::ListSubsystemResponse_Result_SubsystemList* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListSubsystemResponse.Result.data)
}

// -------------------------------------------------------------------

// ListSubsystemResponse

// string command = 1;
inline void ListSubsystemResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& ListSubsystemResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListSubsystemResponse.command)
  return _internal_command();
}
inline void ListSubsystemResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListSubsystemResponse.command)
}
inline std::string* ListSubsystemResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListSubsystemResponse.command)
  return _internal_mutable_command();
}
inline const std::string& ListSubsystemResponse::_internal_command() const {
  return command_.Get();
}
inline void ListSubsystemResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListSubsystemResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListSubsystemResponse.command)
}
inline void ListSubsystemResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListSubsystemResponse.command)
}
inline void ListSubsystemResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListSubsystemResponse.command)
}
inline std::string* ListSubsystemResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListSubsystemResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListSubsystemResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListSubsystemResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListSubsystemResponse.command)
}

// string rid = 2;
inline void ListSubsystemResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& ListSubsystemResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListSubsystemResponse.rid)
  return _internal_rid();
}
inline void ListSubsystemResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListSubsystemResponse.rid)
}
inline std::string* ListSubsystemResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListSubsystemResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& ListSubsystemResponse::_internal_rid() const {
  return rid_.Get();
}
inline void ListSubsystemResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListSubsystemResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListSubsystemResponse.rid)
}
inline void ListSubsystemResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListSubsystemResponse.rid)
}
inline void ListSubsystemResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListSubsystemResponse.rid)
}
inline std::string* ListSubsystemResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListSubsystemResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListSubsystemResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListSubsystemResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListSubsystemResponse.rid)
}

// .grpc_cli.ListSubsystemResponse.Result result = 3;
inline bool ListSubsystemResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool ListSubsystemResponse::has_result() const {
  return _internal_has_result();
}
inline void ListSubsystemResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::ListSubsystemResponse_Result& ListSubsystemResponse::_internal_result() const {
  const ::grpc_cli::ListSubsystemResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::ListSubsystemResponse_Result&>(
      ::grpc_cli::_ListSubsystemResponse_Result_default_instance_);
}
inline const ::grpc_cli::ListSubsystemResponse_Result& ListSubsystemResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListSubsystemResponse.result)
  return _internal_result();
}
inline void ListSubsystemResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::ListSubsystemResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ListSubsystemResponse.result)
}
inline ::grpc_cli::ListSubsystemResponse_Result* ListSubsystemResponse::release_result() {
  
  ::grpc_cli::ListSubsystemResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::ListSubsystemResponse_Result* ListSubsystemResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListSubsystemResponse.result)
  
  ::grpc_cli::ListSubsystemResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::ListSubsystemResponse_Result* ListSubsystemResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::ListSubsystemResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::ListSubsystemResponse_Result* ListSubsystemResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListSubsystemResponse.result)
  return _internal_mutable_result();
}
inline void ListSubsystemResponse::set_allocated_result(::grpc_cli::ListSubsystemResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListSubsystemResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool ListSubsystemResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool ListSubsystemResponse::has_info() const {
  return _internal_has_info();
}
inline void ListSubsystemResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& ListSubsystemResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& ListSubsystemResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListSubsystemResponse.info)
  return _internal_info();
}
inline void ListSubsystemResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ListSubsystemResponse.info)
}
inline ::grpc_cli::PosInfo* ListSubsystemResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* ListSubsystemResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListSubsystemResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* ListSubsystemResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* ListSubsystemResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListSubsystemResponse.info)
  return _internal_mutable_info();
}
inline void ListSubsystemResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListSubsystemResponse.info)
}

// -------------------------------------------------------------------

// SubsystemInfoRequest_Param

// string subnqn = 1;
inline void SubsystemInfoRequest_Param::clear_subnqn() {
  subnqn_.ClearToEmpty();
}
inline const std::string& SubsystemInfoRequest_Param::subnqn() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SubsystemInfoRequest.Param.subnqn)
  return _internal_subnqn();
}
inline void SubsystemInfoRequest_Param::set_subnqn(const std::string& value) {
  _internal_set_subnqn(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SubsystemInfoRequest.Param.subnqn)
}
inline std::string* SubsystemInfoRequest_Param::mutable_subnqn() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SubsystemInfoRequest.Param.subnqn)
  return _internal_mutable_subnqn();
}
inline const std::string& SubsystemInfoRequest_Param::_internal_subnqn() const {
  return subnqn_.Get();
}
inline void SubsystemInfoRequest_Param::_internal_set_subnqn(const std::string& value) {
  
  subnqn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SubsystemInfoRequest_Param::set_subnqn(std::string&& value) {
  
  subnqn_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SubsystemInfoRequest.Param.subnqn)
}
inline void SubsystemInfoRequest_Param::set_subnqn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subnqn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SubsystemInfoRequest.Param.subnqn)
}
inline void SubsystemInfoRequest_Param::set_subnqn(const char* value,
    size_t size) {
  
  subnqn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SubsystemInfoRequest.Param.subnqn)
}
inline std::string* SubsystemInfoRequest_Param::_internal_mutable_subnqn() {
  
  return subnqn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SubsystemInfoRequest_Param::release_subnqn() {
  // @@protoc_insertion_point(field_release:grpc_cli.SubsystemInfoRequest.Param.subnqn)
  return subnqn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubsystemInfoRequest_Param::set_allocated_subnqn(std::string* subnqn) {
  if (subnqn != nullptr) {
    
  } else {
    
  }
  subnqn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subnqn,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SubsystemInfoRequest.Param.subnqn)
}

// -------------------------------------------------------------------

// SubsystemInfoRequest

// string command = 1;
inline void SubsystemInfoRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& SubsystemInfoRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SubsystemInfoRequest.command)
  return _internal_command();
}
inline void SubsystemInfoRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SubsystemInfoRequest.command)
}
inline std::string* SubsystemInfoRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SubsystemInfoRequest.command)
  return _internal_mutable_command();
}
inline const std::string& SubsystemInfoRequest::_internal_command() const {
  return command_.Get();
}
inline void SubsystemInfoRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SubsystemInfoRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SubsystemInfoRequest.command)
}
inline void SubsystemInfoRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SubsystemInfoRequest.command)
}
inline void SubsystemInfoRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SubsystemInfoRequest.command)
}
inline std::string* SubsystemInfoRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SubsystemInfoRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.SubsystemInfoRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubsystemInfoRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SubsystemInfoRequest.command)
}

// string rid = 2;
inline void SubsystemInfoRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& SubsystemInfoRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SubsystemInfoRequest.rid)
  return _internal_rid();
}
inline void SubsystemInfoRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SubsystemInfoRequest.rid)
}
inline std::string* SubsystemInfoRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SubsystemInfoRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& SubsystemInfoRequest::_internal_rid() const {
  return rid_.Get();
}
inline void SubsystemInfoRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SubsystemInfoRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SubsystemInfoRequest.rid)
}
inline void SubsystemInfoRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SubsystemInfoRequest.rid)
}
inline void SubsystemInfoRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SubsystemInfoRequest.rid)
}
inline std::string* SubsystemInfoRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SubsystemInfoRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.SubsystemInfoRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubsystemInfoRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SubsystemInfoRequest.rid)
}

// string requestor = 3;
inline void SubsystemInfoRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& SubsystemInfoRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SubsystemInfoRequest.requestor)
  return _internal_requestor();
}
inline void SubsystemInfoRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SubsystemInfoRequest.requestor)
}
inline std::string* SubsystemInfoRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SubsystemInfoRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& SubsystemInfoRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void SubsystemInfoRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SubsystemInfoRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SubsystemInfoRequest.requestor)
}
inline void SubsystemInfoRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SubsystemInfoRequest.requestor)
}
inline void SubsystemInfoRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SubsystemInfoRequest.requestor)
}
inline std::string* SubsystemInfoRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SubsystemInfoRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.SubsystemInfoRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubsystemInfoRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SubsystemInfoRequest.requestor)
}

// .grpc_cli.SubsystemInfoRequest.Param param = 4;
inline bool SubsystemInfoRequest::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool SubsystemInfoRequest::has_param() const {
  return _internal_has_param();
}
inline void SubsystemInfoRequest::clear_param() {
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::grpc_cli::SubsystemInfoRequest_Param& SubsystemInfoRequest::_internal_param() const {
  const ::grpc_cli::SubsystemInfoRequest_Param* p = param_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::SubsystemInfoRequest_Param&>(
      ::grpc_cli::_SubsystemInfoRequest_Param_default_instance_);
}
inline const ::grpc_cli::SubsystemInfoRequest_Param& SubsystemInfoRequest::param() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SubsystemInfoRequest.param)
  return _internal_param();
}
inline void SubsystemInfoRequest::unsafe_arena_set_allocated_param(
    ::grpc_cli::SubsystemInfoRequest_Param* param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.SubsystemInfoRequest.param)
}
inline ::grpc_cli::SubsystemInfoRequest_Param* SubsystemInfoRequest::release_param() {
  
  ::grpc_cli::SubsystemInfoRequest_Param* temp = param_;
  param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::SubsystemInfoRequest_Param* SubsystemInfoRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:grpc_cli.SubsystemInfoRequest.param)
  
  ::grpc_cli::SubsystemInfoRequest_Param* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::grpc_cli::SubsystemInfoRequest_Param* SubsystemInfoRequest::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::SubsystemInfoRequest_Param>(GetArena());
    param_ = p;
  }
  return param_;
}
inline ::grpc_cli::SubsystemInfoRequest_Param* SubsystemInfoRequest::mutable_param() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SubsystemInfoRequest.param)
  return _internal_mutable_param();
}
inline void SubsystemInfoRequest::set_allocated_param(::grpc_cli::SubsystemInfoRequest_Param* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SubsystemInfoRequest.param)
}

// -------------------------------------------------------------------

// SubsystemInfoResponse_Result_SubsystemList

// repeated .grpc_cli.Subsystem subsystemlist = 1;
inline int SubsystemInfoResponse_Result_SubsystemList::_internal_subsystemlist_size() const {
  return subsystemlist_.size();
}
inline int SubsystemInfoResponse_Result_SubsystemList::subsystemlist_size() const {
  return _internal_subsystemlist_size();
}
inline void SubsystemInfoResponse_Result_SubsystemList::clear_subsystemlist() {
  subsystemlist_.Clear();
}
inline ::grpc_cli::Subsystem* SubsystemInfoResponse_Result_SubsystemList::mutable_subsystemlist(int index) {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SubsystemInfoResponse.Result.SubsystemList.subsystemlist)
  return subsystemlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::Subsystem >*
SubsystemInfoResponse_Result_SubsystemList::mutable_subsystemlist() {
  // @@protoc_insertion_point(field_mutable_list:grpc_cli.SubsystemInfoResponse.Result.SubsystemList.subsystemlist)
  return &subsystemlist_;
}
inline const ::grpc_cli::Subsystem& SubsystemInfoResponse_Result_SubsystemList::_internal_subsystemlist(int index) const {
  return subsystemlist_.Get(index);
}
inline const ::grpc_cli::Subsystem& SubsystemInfoResponse_Result_SubsystemList::subsystemlist(int index) const {
  // @@protoc_insertion_point(field_get:grpc_cli.SubsystemInfoResponse.Result.SubsystemList.subsystemlist)
  return _internal_subsystemlist(index);
}
inline ::grpc_cli::Subsystem* SubsystemInfoResponse_Result_SubsystemList::_internal_add_subsystemlist() {
  return subsystemlist_.Add();
}
inline ::grpc_cli::Subsystem* SubsystemInfoResponse_Result_SubsystemList::add_subsystemlist() {
  // @@protoc_insertion_point(field_add:grpc_cli.SubsystemInfoResponse.Result.SubsystemList.subsystemlist)
  return _internal_add_subsystemlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::Subsystem >&
SubsystemInfoResponse_Result_SubsystemList::subsystemlist() const {
  // @@protoc_insertion_point(field_list:grpc_cli.SubsystemInfoResponse.Result.SubsystemList.subsystemlist)
  return subsystemlist_;
}

// -------------------------------------------------------------------

// SubsystemInfoResponse_Result

// .grpc_cli.Status status = 1;
inline bool SubsystemInfoResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SubsystemInfoResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void SubsystemInfoResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& SubsystemInfoResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& SubsystemInfoResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SubsystemInfoResponse.Result.status)
  return _internal_status();
}
inline void SubsystemInfoResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.SubsystemInfoResponse.Result.status)
}
inline ::grpc_cli::Status* SubsystemInfoResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* SubsystemInfoResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.SubsystemInfoResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* SubsystemInfoResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* SubsystemInfoResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SubsystemInfoResponse.Result.status)
  return _internal_mutable_status();
}
inline void SubsystemInfoResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SubsystemInfoResponse.Result.status)
}

// .grpc_cli.SubsystemInfoResponse.Result.SubsystemList data = 2;
inline bool SubsystemInfoResponse_Result::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool SubsystemInfoResponse_Result::has_data() const {
  return _internal_has_data();
}
inline void SubsystemInfoResponse_Result::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::grpc_cli::SubsystemInfoResponse_Result_SubsystemList& SubsystemInfoResponse_Result::_internal_data() const {
  const ::grpc_cli::SubsystemInfoResponse_Result_SubsystemList* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::SubsystemInfoResponse_Result_SubsystemList&>(
      ::grpc_cli::_SubsystemInfoResponse_Result_SubsystemList_default_instance_);
}
inline const ::grpc_cli::SubsystemInfoResponse_Result_SubsystemList& SubsystemInfoResponse_Result::data() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SubsystemInfoResponse.Result.data)
  return _internal_data();
}
inline void SubsystemInfoResponse_Result::unsafe_arena_set_allocated_data(
    ::grpc_cli::SubsystemInfoResponse_Result_SubsystemList* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.SubsystemInfoResponse.Result.data)
}
inline ::grpc_cli::SubsystemInfoResponse_Result_SubsystemList* SubsystemInfoResponse_Result::release_data() {
  
  ::grpc_cli::SubsystemInfoResponse_Result_SubsystemList* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::SubsystemInfoResponse_Result_SubsystemList* SubsystemInfoResponse_Result::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:grpc_cli.SubsystemInfoResponse.Result.data)
  
  ::grpc_cli::SubsystemInfoResponse_Result_SubsystemList* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::grpc_cli::SubsystemInfoResponse_Result_SubsystemList* SubsystemInfoResponse_Result::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::SubsystemInfoResponse_Result_SubsystemList>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::grpc_cli::SubsystemInfoResponse_Result_SubsystemList* SubsystemInfoResponse_Result::mutable_data() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SubsystemInfoResponse.Result.data)
  return _internal_mutable_data();
}
inline void SubsystemInfoResponse_Result::set_allocated_data(::grpc_cli::SubsystemInfoResponse_Result_SubsystemList* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SubsystemInfoResponse.Result.data)
}

// -------------------------------------------------------------------

// SubsystemInfoResponse

// string command = 1;
inline void SubsystemInfoResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& SubsystemInfoResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SubsystemInfoResponse.command)
  return _internal_command();
}
inline void SubsystemInfoResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SubsystemInfoResponse.command)
}
inline std::string* SubsystemInfoResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SubsystemInfoResponse.command)
  return _internal_mutable_command();
}
inline const std::string& SubsystemInfoResponse::_internal_command() const {
  return command_.Get();
}
inline void SubsystemInfoResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SubsystemInfoResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SubsystemInfoResponse.command)
}
inline void SubsystemInfoResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SubsystemInfoResponse.command)
}
inline void SubsystemInfoResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SubsystemInfoResponse.command)
}
inline std::string* SubsystemInfoResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SubsystemInfoResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.SubsystemInfoResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubsystemInfoResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SubsystemInfoResponse.command)
}

// string rid = 2;
inline void SubsystemInfoResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& SubsystemInfoResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SubsystemInfoResponse.rid)
  return _internal_rid();
}
inline void SubsystemInfoResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SubsystemInfoResponse.rid)
}
inline std::string* SubsystemInfoResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SubsystemInfoResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& SubsystemInfoResponse::_internal_rid() const {
  return rid_.Get();
}
inline void SubsystemInfoResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SubsystemInfoResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SubsystemInfoResponse.rid)
}
inline void SubsystemInfoResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SubsystemInfoResponse.rid)
}
inline void SubsystemInfoResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SubsystemInfoResponse.rid)
}
inline std::string* SubsystemInfoResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SubsystemInfoResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.SubsystemInfoResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubsystemInfoResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SubsystemInfoResponse.rid)
}

// .grpc_cli.SubsystemInfoResponse.Result result = 3;
inline bool SubsystemInfoResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool SubsystemInfoResponse::has_result() const {
  return _internal_has_result();
}
inline void SubsystemInfoResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::SubsystemInfoResponse_Result& SubsystemInfoResponse::_internal_result() const {
  const ::grpc_cli::SubsystemInfoResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::SubsystemInfoResponse_Result&>(
      ::grpc_cli::_SubsystemInfoResponse_Result_default_instance_);
}
inline const ::grpc_cli::SubsystemInfoResponse_Result& SubsystemInfoResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SubsystemInfoResponse.result)
  return _internal_result();
}
inline void SubsystemInfoResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::SubsystemInfoResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.SubsystemInfoResponse.result)
}
inline ::grpc_cli::SubsystemInfoResponse_Result* SubsystemInfoResponse::release_result() {
  
  ::grpc_cli::SubsystemInfoResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::SubsystemInfoResponse_Result* SubsystemInfoResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.SubsystemInfoResponse.result)
  
  ::grpc_cli::SubsystemInfoResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::SubsystemInfoResponse_Result* SubsystemInfoResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::SubsystemInfoResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::SubsystemInfoResponse_Result* SubsystemInfoResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SubsystemInfoResponse.result)
  return _internal_mutable_result();
}
inline void SubsystemInfoResponse::set_allocated_result(::grpc_cli::SubsystemInfoResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SubsystemInfoResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool SubsystemInfoResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool SubsystemInfoResponse::has_info() const {
  return _internal_has_info();
}
inline void SubsystemInfoResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& SubsystemInfoResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& SubsystemInfoResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SubsystemInfoResponse.info)
  return _internal_info();
}
inline void SubsystemInfoResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.SubsystemInfoResponse.info)
}
inline ::grpc_cli::PosInfo* SubsystemInfoResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* SubsystemInfoResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.SubsystemInfoResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* SubsystemInfoResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* SubsystemInfoResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SubsystemInfoResponse.info)
  return _internal_mutable_info();
}
inline void SubsystemInfoResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SubsystemInfoResponse.info)
}

// -------------------------------------------------------------------

// CreateTransportRequest_Param

// string transportType = 1;
inline void CreateTransportRequest_Param::clear_transporttype() {
  transporttype_.ClearToEmpty();
}
inline const std::string& CreateTransportRequest_Param::transporttype() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateTransportRequest.Param.transportType)
  return _internal_transporttype();
}
inline void CreateTransportRequest_Param::set_transporttype(const std::string& value) {
  _internal_set_transporttype(value);
  // @@protoc_insertion_point(field_set:grpc_cli.CreateTransportRequest.Param.transportType)
}
inline std::string* CreateTransportRequest_Param::mutable_transporttype() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateTransportRequest.Param.transportType)
  return _internal_mutable_transporttype();
}
inline const std::string& CreateTransportRequest_Param::_internal_transporttype() const {
  return transporttype_.Get();
}
inline void CreateTransportRequest_Param::_internal_set_transporttype(const std::string& value) {
  
  transporttype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateTransportRequest_Param::set_transporttype(std::string&& value) {
  
  transporttype_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.CreateTransportRequest.Param.transportType)
}
inline void CreateTransportRequest_Param::set_transporttype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transporttype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.CreateTransportRequest.Param.transportType)
}
inline void CreateTransportRequest_Param::set_transporttype(const char* value,
    size_t size) {
  
  transporttype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.CreateTransportRequest.Param.transportType)
}
inline std::string* CreateTransportRequest_Param::_internal_mutable_transporttype() {
  
  return transporttype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateTransportRequest_Param::release_transporttype() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateTransportRequest.Param.transportType)
  return transporttype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateTransportRequest_Param::set_allocated_transporttype(std::string* transporttype) {
  if (transporttype != nullptr) {
    
  } else {
    
  }
  transporttype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transporttype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateTransportRequest.Param.transportType)
}

// int32 bufCacheSize = 2;
inline void CreateTransportRequest_Param::clear_bufcachesize() {
  bufcachesize_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateTransportRequest_Param::_internal_bufcachesize() const {
  return bufcachesize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateTransportRequest_Param::bufcachesize() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateTransportRequest.Param.bufCacheSize)
  return _internal_bufcachesize();
}
inline void CreateTransportRequest_Param::_internal_set_bufcachesize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bufcachesize_ = value;
}
inline void CreateTransportRequest_Param::set_bufcachesize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bufcachesize(value);
  // @@protoc_insertion_point(field_set:grpc_cli.CreateTransportRequest.Param.bufCacheSize)
}

// int32 numSharedBuf = 3;
inline void CreateTransportRequest_Param::clear_numsharedbuf() {
  numsharedbuf_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateTransportRequest_Param::_internal_numsharedbuf() const {
  return numsharedbuf_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateTransportRequest_Param::numsharedbuf() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateTransportRequest.Param.numSharedBuf)
  return _internal_numsharedbuf();
}
inline void CreateTransportRequest_Param::_internal_set_numsharedbuf(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  numsharedbuf_ = value;
}
inline void CreateTransportRequest_Param::set_numsharedbuf(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_numsharedbuf(value);
  // @@protoc_insertion_point(field_set:grpc_cli.CreateTransportRequest.Param.numSharedBuf)
}

// -------------------------------------------------------------------

// CreateTransportRequest

// string command = 1;
inline void CreateTransportRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& CreateTransportRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateTransportRequest.command)
  return _internal_command();
}
inline void CreateTransportRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.CreateTransportRequest.command)
}
inline std::string* CreateTransportRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateTransportRequest.command)
  return _internal_mutable_command();
}
inline const std::string& CreateTransportRequest::_internal_command() const {
  return command_.Get();
}
inline void CreateTransportRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateTransportRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.CreateTransportRequest.command)
}
inline void CreateTransportRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.CreateTransportRequest.command)
}
inline void CreateTransportRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.CreateTransportRequest.command)
}
inline std::string* CreateTransportRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateTransportRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateTransportRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateTransportRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateTransportRequest.command)
}

// string rid = 2;
inline void CreateTransportRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& CreateTransportRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateTransportRequest.rid)
  return _internal_rid();
}
inline void CreateTransportRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.CreateTransportRequest.rid)
}
inline std::string* CreateTransportRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateTransportRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& CreateTransportRequest::_internal_rid() const {
  return rid_.Get();
}
inline void CreateTransportRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateTransportRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.CreateTransportRequest.rid)
}
inline void CreateTransportRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.CreateTransportRequest.rid)
}
inline void CreateTransportRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.CreateTransportRequest.rid)
}
inline std::string* CreateTransportRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateTransportRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateTransportRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateTransportRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateTransportRequest.rid)
}

// string requestor = 3;
inline void CreateTransportRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& CreateTransportRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateTransportRequest.requestor)
  return _internal_requestor();
}
inline void CreateTransportRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.CreateTransportRequest.requestor)
}
inline std::string* CreateTransportRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateTransportRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& CreateTransportRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void CreateTransportRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateTransportRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.CreateTransportRequest.requestor)
}
inline void CreateTransportRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.CreateTransportRequest.requestor)
}
inline void CreateTransportRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.CreateTransportRequest.requestor)
}
inline std::string* CreateTransportRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateTransportRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateTransportRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateTransportRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateTransportRequest.requestor)
}

// .grpc_cli.CreateTransportRequest.Param param = 4;
inline bool CreateTransportRequest::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool CreateTransportRequest::has_param() const {
  return _internal_has_param();
}
inline void CreateTransportRequest::clear_param() {
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::grpc_cli::CreateTransportRequest_Param& CreateTransportRequest::_internal_param() const {
  const ::grpc_cli::CreateTransportRequest_Param* p = param_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::CreateTransportRequest_Param&>(
      ::grpc_cli::_CreateTransportRequest_Param_default_instance_);
}
inline const ::grpc_cli::CreateTransportRequest_Param& CreateTransportRequest::param() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateTransportRequest.param)
  return _internal_param();
}
inline void CreateTransportRequest::unsafe_arena_set_allocated_param(
    ::grpc_cli::CreateTransportRequest_Param* param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.CreateTransportRequest.param)
}
inline ::grpc_cli::CreateTransportRequest_Param* CreateTransportRequest::release_param() {
  
  ::grpc_cli::CreateTransportRequest_Param* temp = param_;
  param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::CreateTransportRequest_Param* CreateTransportRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateTransportRequest.param)
  
  ::grpc_cli::CreateTransportRequest_Param* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::grpc_cli::CreateTransportRequest_Param* CreateTransportRequest::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::CreateTransportRequest_Param>(GetArena());
    param_ = p;
  }
  return param_;
}
inline ::grpc_cli::CreateTransportRequest_Param* CreateTransportRequest::mutable_param() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateTransportRequest.param)
  return _internal_mutable_param();
}
inline void CreateTransportRequest::set_allocated_param(::grpc_cli::CreateTransportRequest_Param* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateTransportRequest.param)
}

// -------------------------------------------------------------------

// CreateTransportResponse_Result

// .grpc_cli.Status status = 1;
inline bool CreateTransportResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool CreateTransportResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void CreateTransportResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& CreateTransportResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& CreateTransportResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateTransportResponse.Result.status)
  return _internal_status();
}
inline void CreateTransportResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.CreateTransportResponse.Result.status)
}
inline ::grpc_cli::Status* CreateTransportResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* CreateTransportResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateTransportResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* CreateTransportResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* CreateTransportResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateTransportResponse.Result.status)
  return _internal_mutable_status();
}
inline void CreateTransportResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateTransportResponse.Result.status)
}

// -------------------------------------------------------------------

// CreateTransportResponse

// string command = 1;
inline void CreateTransportResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& CreateTransportResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateTransportResponse.command)
  return _internal_command();
}
inline void CreateTransportResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.CreateTransportResponse.command)
}
inline std::string* CreateTransportResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateTransportResponse.command)
  return _internal_mutable_command();
}
inline const std::string& CreateTransportResponse::_internal_command() const {
  return command_.Get();
}
inline void CreateTransportResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateTransportResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.CreateTransportResponse.command)
}
inline void CreateTransportResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.CreateTransportResponse.command)
}
inline void CreateTransportResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.CreateTransportResponse.command)
}
inline std::string* CreateTransportResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateTransportResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateTransportResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateTransportResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateTransportResponse.command)
}

// string rid = 2;
inline void CreateTransportResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& CreateTransportResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateTransportResponse.rid)
  return _internal_rid();
}
inline void CreateTransportResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.CreateTransportResponse.rid)
}
inline std::string* CreateTransportResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateTransportResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& CreateTransportResponse::_internal_rid() const {
  return rid_.Get();
}
inline void CreateTransportResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateTransportResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.CreateTransportResponse.rid)
}
inline void CreateTransportResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.CreateTransportResponse.rid)
}
inline void CreateTransportResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.CreateTransportResponse.rid)
}
inline std::string* CreateTransportResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateTransportResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateTransportResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateTransportResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateTransportResponse.rid)
}

// .grpc_cli.CreateTransportResponse.Result result = 3;
inline bool CreateTransportResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool CreateTransportResponse::has_result() const {
  return _internal_has_result();
}
inline void CreateTransportResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::CreateTransportResponse_Result& CreateTransportResponse::_internal_result() const {
  const ::grpc_cli::CreateTransportResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::CreateTransportResponse_Result&>(
      ::grpc_cli::_CreateTransportResponse_Result_default_instance_);
}
inline const ::grpc_cli::CreateTransportResponse_Result& CreateTransportResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateTransportResponse.result)
  return _internal_result();
}
inline void CreateTransportResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::CreateTransportResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.CreateTransportResponse.result)
}
inline ::grpc_cli::CreateTransportResponse_Result* CreateTransportResponse::release_result() {
  
  ::grpc_cli::CreateTransportResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::CreateTransportResponse_Result* CreateTransportResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateTransportResponse.result)
  
  ::grpc_cli::CreateTransportResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::CreateTransportResponse_Result* CreateTransportResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::CreateTransportResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::CreateTransportResponse_Result* CreateTransportResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateTransportResponse.result)
  return _internal_mutable_result();
}
inline void CreateTransportResponse::set_allocated_result(::grpc_cli::CreateTransportResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateTransportResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool CreateTransportResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool CreateTransportResponse::has_info() const {
  return _internal_has_info();
}
inline void CreateTransportResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& CreateTransportResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& CreateTransportResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateTransportResponse.info)
  return _internal_info();
}
inline void CreateTransportResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.CreateTransportResponse.info)
}
inline ::grpc_cli::PosInfo* CreateTransportResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* CreateTransportResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateTransportResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* CreateTransportResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* CreateTransportResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateTransportResponse.info)
  return _internal_mutable_info();
}
inline void CreateTransportResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateTransportResponse.info)
}

// -------------------------------------------------------------------

// CreateVolumeRequest_Param

// string name = 1;
inline void CreateVolumeRequest_Param::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CreateVolumeRequest_Param::name() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateVolumeRequest.Param.name)
  return _internal_name();
}
inline void CreateVolumeRequest_Param::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:grpc_cli.CreateVolumeRequest.Param.name)
}
inline std::string* CreateVolumeRequest_Param::mutable_name() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateVolumeRequest.Param.name)
  return _internal_mutable_name();
}
inline const std::string& CreateVolumeRequest_Param::_internal_name() const {
  return name_.Get();
}
inline void CreateVolumeRequest_Param::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateVolumeRequest_Param::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.CreateVolumeRequest.Param.name)
}
inline void CreateVolumeRequest_Param::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.CreateVolumeRequest.Param.name)
}
inline void CreateVolumeRequest_Param::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.CreateVolumeRequest.Param.name)
}
inline std::string* CreateVolumeRequest_Param::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateVolumeRequest_Param::release_name() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateVolumeRequest.Param.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateVolumeRequest_Param::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateVolumeRequest.Param.name)
}

// string array = 2;
inline void CreateVolumeRequest_Param::clear_array() {
  array_.ClearToEmpty();
}
inline const std::string& CreateVolumeRequest_Param::array() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateVolumeRequest.Param.array)
  return _internal_array();
}
inline void CreateVolumeRequest_Param::set_array(const std::string& value) {
  _internal_set_array(value);
  // @@protoc_insertion_point(field_set:grpc_cli.CreateVolumeRequest.Param.array)
}
inline std::string* CreateVolumeRequest_Param::mutable_array() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateVolumeRequest.Param.array)
  return _internal_mutable_array();
}
inline const std::string& CreateVolumeRequest_Param::_internal_array() const {
  return array_.Get();
}
inline void CreateVolumeRequest_Param::_internal_set_array(const std::string& value) {
  
  array_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateVolumeRequest_Param::set_array(std::string&& value) {
  
  array_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.CreateVolumeRequest.Param.array)
}
inline void CreateVolumeRequest_Param::set_array(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  array_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.CreateVolumeRequest.Param.array)
}
inline void CreateVolumeRequest_Param::set_array(const char* value,
    size_t size) {
  
  array_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.CreateVolumeRequest.Param.array)
}
inline std::string* CreateVolumeRequest_Param::_internal_mutable_array() {
  
  return array_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateVolumeRequest_Param::release_array() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateVolumeRequest.Param.array)
  return array_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateVolumeRequest_Param::set_allocated_array(std::string* array) {
  if (array != nullptr) {
    
  } else {
    
  }
  array_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), array,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateVolumeRequest.Param.array)
}

// uint64 size = 3;
inline void CreateVolumeRequest_Param::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateVolumeRequest_Param::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateVolumeRequest_Param::size() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateVolumeRequest.Param.size)
  return _internal_size();
}
inline void CreateVolumeRequest_Param::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  size_ = value;
}
inline void CreateVolumeRequest_Param::set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:grpc_cli.CreateVolumeRequest.Param.size)
}

// uint64 maxiops = 4;
inline void CreateVolumeRequest_Param::clear_maxiops() {
  maxiops_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateVolumeRequest_Param::_internal_maxiops() const {
  return maxiops_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateVolumeRequest_Param::maxiops() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateVolumeRequest.Param.maxiops)
  return _internal_maxiops();
}
inline void CreateVolumeRequest_Param::_internal_set_maxiops(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  maxiops_ = value;
}
inline void CreateVolumeRequest_Param::set_maxiops(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_maxiops(value);
  // @@protoc_insertion_point(field_set:grpc_cli.CreateVolumeRequest.Param.maxiops)
}

// uint64 maxbw = 5;
inline void CreateVolumeRequest_Param::clear_maxbw() {
  maxbw_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateVolumeRequest_Param::_internal_maxbw() const {
  return maxbw_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateVolumeRequest_Param::maxbw() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateVolumeRequest.Param.maxbw)
  return _internal_maxbw();
}
inline void CreateVolumeRequest_Param::_internal_set_maxbw(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  maxbw_ = value;
}
inline void CreateVolumeRequest_Param::set_maxbw(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_maxbw(value);
  // @@protoc_insertion_point(field_set:grpc_cli.CreateVolumeRequest.Param.maxbw)
}

// bool isWalVol = 6;
inline void CreateVolumeRequest_Param::clear_iswalvol() {
  iswalvol_ = false;
}
inline bool CreateVolumeRequest_Param::_internal_iswalvol() const {
  return iswalvol_;
}
inline bool CreateVolumeRequest_Param::iswalvol() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateVolumeRequest.Param.isWalVol)
  return _internal_iswalvol();
}
inline void CreateVolumeRequest_Param::_internal_set_iswalvol(bool value) {
  
  iswalvol_ = value;
}
inline void CreateVolumeRequest_Param::set_iswalvol(bool value) {
  _internal_set_iswalvol(value);
  // @@protoc_insertion_point(field_set:grpc_cli.CreateVolumeRequest.Param.isWalVol)
}

// string uuid = 7;
inline void CreateVolumeRequest_Param::clear_uuid() {
  uuid_.ClearToEmpty();
}
inline const std::string& CreateVolumeRequest_Param::uuid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateVolumeRequest.Param.uuid)
  return _internal_uuid();
}
inline void CreateVolumeRequest_Param::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.CreateVolumeRequest.Param.uuid)
}
inline std::string* CreateVolumeRequest_Param::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateVolumeRequest.Param.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& CreateVolumeRequest_Param::_internal_uuid() const {
  return uuid_.Get();
}
inline void CreateVolumeRequest_Param::_internal_set_uuid(const std::string& value) {
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateVolumeRequest_Param::set_uuid(std::string&& value) {
  
  uuid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.CreateVolumeRequest.Param.uuid)
}
inline void CreateVolumeRequest_Param::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.CreateVolumeRequest.Param.uuid)
}
inline void CreateVolumeRequest_Param::set_uuid(const char* value,
    size_t size) {
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.CreateVolumeRequest.Param.uuid)
}
inline std::string* CreateVolumeRequest_Param::_internal_mutable_uuid() {
  
  return uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateVolumeRequest_Param::release_uuid() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateVolumeRequest.Param.uuid)
  return uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateVolumeRequest_Param::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateVolumeRequest.Param.uuid)
}

// int32 nsid = 8;
inline void CreateVolumeRequest_Param::clear_nsid() {
  nsid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateVolumeRequest_Param::_internal_nsid() const {
  return nsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateVolumeRequest_Param::nsid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateVolumeRequest.Param.nsid)
  return _internal_nsid();
}
inline void CreateVolumeRequest_Param::_internal_set_nsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nsid_ = value;
}
inline void CreateVolumeRequest_Param::set_nsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nsid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.CreateVolumeRequest.Param.nsid)
}

// bool isPrimary = 9;
inline void CreateVolumeRequest_Param::clear_isprimary() {
  isprimary_ = false;
}
inline bool CreateVolumeRequest_Param::_internal_isprimary() const {
  return isprimary_;
}
inline bool CreateVolumeRequest_Param::isprimary() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateVolumeRequest.Param.isPrimary)
  return _internal_isprimary();
}
inline void CreateVolumeRequest_Param::_internal_set_isprimary(bool value) {
  
  isprimary_ = value;
}
inline void CreateVolumeRequest_Param::set_isprimary(bool value) {
  _internal_set_isprimary(value);
  // @@protoc_insertion_point(field_set:grpc_cli.CreateVolumeRequest.Param.isPrimary)
}

// bool isAnaNonoptimized = 10;
inline void CreateVolumeRequest_Param::clear_isananonoptimized() {
  isananonoptimized_ = false;
}
inline bool CreateVolumeRequest_Param::_internal_isananonoptimized() const {
  return isananonoptimized_;
}
inline bool CreateVolumeRequest_Param::isananonoptimized() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateVolumeRequest.Param.isAnaNonoptimized)
  return _internal_isananonoptimized();
}
inline void CreateVolumeRequest_Param::_internal_set_isananonoptimized(bool value) {
  
  isananonoptimized_ = value;
}
inline void CreateVolumeRequest_Param::set_isananonoptimized(bool value) {
  _internal_set_isananonoptimized(value);
  // @@protoc_insertion_point(field_set:grpc_cli.CreateVolumeRequest.Param.isAnaNonoptimized)
}

// -------------------------------------------------------------------

// CreateVolumeRequest

// string command = 1;
inline void CreateVolumeRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& CreateVolumeRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateVolumeRequest.command)
  return _internal_command();
}
inline void CreateVolumeRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.CreateVolumeRequest.command)
}
inline std::string* CreateVolumeRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateVolumeRequest.command)
  return _internal_mutable_command();
}
inline const std::string& CreateVolumeRequest::_internal_command() const {
  return command_.Get();
}
inline void CreateVolumeRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateVolumeRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.CreateVolumeRequest.command)
}
inline void CreateVolumeRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.CreateVolumeRequest.command)
}
inline void CreateVolumeRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.CreateVolumeRequest.command)
}
inline std::string* CreateVolumeRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateVolumeRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateVolumeRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateVolumeRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateVolumeRequest.command)
}

// string rid = 2;
inline void CreateVolumeRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& CreateVolumeRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateVolumeRequest.rid)
  return _internal_rid();
}
inline void CreateVolumeRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.CreateVolumeRequest.rid)
}
inline std::string* CreateVolumeRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateVolumeRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& CreateVolumeRequest::_internal_rid() const {
  return rid_.Get();
}
inline void CreateVolumeRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateVolumeRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.CreateVolumeRequest.rid)
}
inline void CreateVolumeRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.CreateVolumeRequest.rid)
}
inline void CreateVolumeRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.CreateVolumeRequest.rid)
}
inline std::string* CreateVolumeRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateVolumeRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateVolumeRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateVolumeRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateVolumeRequest.rid)
}

// string requestor = 3;
inline void CreateVolumeRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& CreateVolumeRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateVolumeRequest.requestor)
  return _internal_requestor();
}
inline void CreateVolumeRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.CreateVolumeRequest.requestor)
}
inline std::string* CreateVolumeRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateVolumeRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& CreateVolumeRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void CreateVolumeRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateVolumeRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.CreateVolumeRequest.requestor)
}
inline void CreateVolumeRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.CreateVolumeRequest.requestor)
}
inline void CreateVolumeRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.CreateVolumeRequest.requestor)
}
inline std::string* CreateVolumeRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateVolumeRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateVolumeRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateVolumeRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateVolumeRequest.requestor)
}

// .grpc_cli.CreateVolumeRequest.Param param = 4;
inline bool CreateVolumeRequest::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool CreateVolumeRequest::has_param() const {
  return _internal_has_param();
}
inline void CreateVolumeRequest::clear_param() {
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::grpc_cli::CreateVolumeRequest_Param& CreateVolumeRequest::_internal_param() const {
  const ::grpc_cli::CreateVolumeRequest_Param* p = param_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::CreateVolumeRequest_Param&>(
      ::grpc_cli::_CreateVolumeRequest_Param_default_instance_);
}
inline const ::grpc_cli::CreateVolumeRequest_Param& CreateVolumeRequest::param() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateVolumeRequest.param)
  return _internal_param();
}
inline void CreateVolumeRequest::unsafe_arena_set_allocated_param(
    ::grpc_cli::CreateVolumeRequest_Param* param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.CreateVolumeRequest.param)
}
inline ::grpc_cli::CreateVolumeRequest_Param* CreateVolumeRequest::release_param() {
  
  ::grpc_cli::CreateVolumeRequest_Param* temp = param_;
  param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::CreateVolumeRequest_Param* CreateVolumeRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateVolumeRequest.param)
  
  ::grpc_cli::CreateVolumeRequest_Param* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::grpc_cli::CreateVolumeRequest_Param* CreateVolumeRequest::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::CreateVolumeRequest_Param>(GetArena());
    param_ = p;
  }
  return param_;
}
inline ::grpc_cli::CreateVolumeRequest_Param* CreateVolumeRequest::mutable_param() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateVolumeRequest.param)
  return _internal_mutable_param();
}
inline void CreateVolumeRequest::set_allocated_param(::grpc_cli::CreateVolumeRequest_Param* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateVolumeRequest.param)
}

// -------------------------------------------------------------------

// CreateVolumeResponse_Result_CreateVolumeData

// string targetAddress = 1;
inline void CreateVolumeResponse_Result_CreateVolumeData::clear_targetaddress() {
  targetaddress_.ClearToEmpty();
}
inline const std::string& CreateVolumeResponse_Result_CreateVolumeData::targetaddress() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateVolumeResponse.Result.CreateVolumeData.targetAddress)
  return _internal_targetaddress();
}
inline void CreateVolumeResponse_Result_CreateVolumeData::set_targetaddress(const std::string& value) {
  _internal_set_targetaddress(value);
  // @@protoc_insertion_point(field_set:grpc_cli.CreateVolumeResponse.Result.CreateVolumeData.targetAddress)
}
inline std::string* CreateVolumeResponse_Result_CreateVolumeData::mutable_targetaddress() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateVolumeResponse.Result.CreateVolumeData.targetAddress)
  return _internal_mutable_targetaddress();
}
inline const std::string& CreateVolumeResponse_Result_CreateVolumeData::_internal_targetaddress() const {
  return targetaddress_.Get();
}
inline void CreateVolumeResponse_Result_CreateVolumeData::_internal_set_targetaddress(const std::string& value) {
  
  targetaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateVolumeResponse_Result_CreateVolumeData::set_targetaddress(std::string&& value) {
  
  targetaddress_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.CreateVolumeResponse.Result.CreateVolumeData.targetAddress)
}
inline void CreateVolumeResponse_Result_CreateVolumeData::set_targetaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  targetaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.CreateVolumeResponse.Result.CreateVolumeData.targetAddress)
}
inline void CreateVolumeResponse_Result_CreateVolumeData::set_targetaddress(const char* value,
    size_t size) {
  
  targetaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.CreateVolumeResponse.Result.CreateVolumeData.targetAddress)
}
inline std::string* CreateVolumeResponse_Result_CreateVolumeData::_internal_mutable_targetaddress() {
  
  return targetaddress_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateVolumeResponse_Result_CreateVolumeData::release_targetaddress() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateVolumeResponse.Result.CreateVolumeData.targetAddress)
  return targetaddress_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateVolumeResponse_Result_CreateVolumeData::set_allocated_targetaddress(std::string* targetaddress) {
  if (targetaddress != nullptr) {
    
  } else {
    
  }
  targetaddress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), targetaddress,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateVolumeResponse.Result.CreateVolumeData.targetAddress)
}

// -------------------------------------------------------------------

// CreateVolumeResponse_Result

// .grpc_cli.Status status = 1;
inline bool CreateVolumeResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool CreateVolumeResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void CreateVolumeResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& CreateVolumeResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& CreateVolumeResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateVolumeResponse.Result.status)
  return _internal_status();
}
inline void CreateVolumeResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.CreateVolumeResponse.Result.status)
}
inline ::grpc_cli::Status* CreateVolumeResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* CreateVolumeResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateVolumeResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* CreateVolumeResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* CreateVolumeResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateVolumeResponse.Result.status)
  return _internal_mutable_status();
}
inline void CreateVolumeResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateVolumeResponse.Result.status)
}

// .grpc_cli.CreateVolumeResponse.Result.CreateVolumeData data = 2;
inline bool CreateVolumeResponse_Result::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool CreateVolumeResponse_Result::has_data() const {
  return _internal_has_data();
}
inline void CreateVolumeResponse_Result::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::grpc_cli::CreateVolumeResponse_Result_CreateVolumeData& CreateVolumeResponse_Result::_internal_data() const {
  const ::grpc_cli::CreateVolumeResponse_Result_CreateVolumeData* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::CreateVolumeResponse_Result_CreateVolumeData&>(
      ::grpc_cli::_CreateVolumeResponse_Result_CreateVolumeData_default_instance_);
}
inline const ::grpc_cli::CreateVolumeResponse_Result_CreateVolumeData& CreateVolumeResponse_Result::data() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateVolumeResponse.Result.data)
  return _internal_data();
}
inline void CreateVolumeResponse_Result::unsafe_arena_set_allocated_data(
    ::grpc_cli::CreateVolumeResponse_Result_CreateVolumeData* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.CreateVolumeResponse.Result.data)
}
inline ::grpc_cli::CreateVolumeResponse_Result_CreateVolumeData* CreateVolumeResponse_Result::release_data() {
  
  ::grpc_cli::CreateVolumeResponse_Result_CreateVolumeData* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::CreateVolumeResponse_Result_CreateVolumeData* CreateVolumeResponse_Result::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateVolumeResponse.Result.data)
  
  ::grpc_cli::CreateVolumeResponse_Result_CreateVolumeData* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::grpc_cli::CreateVolumeResponse_Result_CreateVolumeData* CreateVolumeResponse_Result::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::CreateVolumeResponse_Result_CreateVolumeData>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::grpc_cli::CreateVolumeResponse_Result_CreateVolumeData* CreateVolumeResponse_Result::mutable_data() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateVolumeResponse.Result.data)
  return _internal_mutable_data();
}
inline void CreateVolumeResponse_Result::set_allocated_data(::grpc_cli::CreateVolumeResponse_Result_CreateVolumeData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateVolumeResponse.Result.data)
}

// -------------------------------------------------------------------

// CreateVolumeResponse

// string command = 1;
inline void CreateVolumeResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& CreateVolumeResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateVolumeResponse.command)
  return _internal_command();
}
inline void CreateVolumeResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.CreateVolumeResponse.command)
}
inline std::string* CreateVolumeResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateVolumeResponse.command)
  return _internal_mutable_command();
}
inline const std::string& CreateVolumeResponse::_internal_command() const {
  return command_.Get();
}
inline void CreateVolumeResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateVolumeResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.CreateVolumeResponse.command)
}
inline void CreateVolumeResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.CreateVolumeResponse.command)
}
inline void CreateVolumeResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.CreateVolumeResponse.command)
}
inline std::string* CreateVolumeResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateVolumeResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateVolumeResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateVolumeResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateVolumeResponse.command)
}

// string rid = 2;
inline void CreateVolumeResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& CreateVolumeResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateVolumeResponse.rid)
  return _internal_rid();
}
inline void CreateVolumeResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.CreateVolumeResponse.rid)
}
inline std::string* CreateVolumeResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateVolumeResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& CreateVolumeResponse::_internal_rid() const {
  return rid_.Get();
}
inline void CreateVolumeResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateVolumeResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.CreateVolumeResponse.rid)
}
inline void CreateVolumeResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.CreateVolumeResponse.rid)
}
inline void CreateVolumeResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.CreateVolumeResponse.rid)
}
inline std::string* CreateVolumeResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateVolumeResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateVolumeResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateVolumeResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateVolumeResponse.rid)
}

// .grpc_cli.CreateVolumeResponse.Result result = 3;
inline bool CreateVolumeResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool CreateVolumeResponse::has_result() const {
  return _internal_has_result();
}
inline void CreateVolumeResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::CreateVolumeResponse_Result& CreateVolumeResponse::_internal_result() const {
  const ::grpc_cli::CreateVolumeResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::CreateVolumeResponse_Result&>(
      ::grpc_cli::_CreateVolumeResponse_Result_default_instance_);
}
inline const ::grpc_cli::CreateVolumeResponse_Result& CreateVolumeResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateVolumeResponse.result)
  return _internal_result();
}
inline void CreateVolumeResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::CreateVolumeResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.CreateVolumeResponse.result)
}
inline ::grpc_cli::CreateVolumeResponse_Result* CreateVolumeResponse::release_result() {
  
  ::grpc_cli::CreateVolumeResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::CreateVolumeResponse_Result* CreateVolumeResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateVolumeResponse.result)
  
  ::grpc_cli::CreateVolumeResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::CreateVolumeResponse_Result* CreateVolumeResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::CreateVolumeResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::CreateVolumeResponse_Result* CreateVolumeResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateVolumeResponse.result)
  return _internal_mutable_result();
}
inline void CreateVolumeResponse::set_allocated_result(::grpc_cli::CreateVolumeResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateVolumeResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool CreateVolumeResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool CreateVolumeResponse::has_info() const {
  return _internal_has_info();
}
inline void CreateVolumeResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& CreateVolumeResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& CreateVolumeResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.CreateVolumeResponse.info)
  return _internal_info();
}
inline void CreateVolumeResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.CreateVolumeResponse.info)
}
inline ::grpc_cli::PosInfo* CreateVolumeResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* CreateVolumeResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.CreateVolumeResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* CreateVolumeResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* CreateVolumeResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.CreateVolumeResponse.info)
  return _internal_mutable_info();
}
inline void CreateVolumeResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.CreateVolumeResponse.info)
}

// -------------------------------------------------------------------

// DeleteVolumeRequest_Param

// string name = 1;
inline void DeleteVolumeRequest_Param::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& DeleteVolumeRequest_Param::name() const {
  // @@protoc_insertion_point(field_get:grpc_cli.DeleteVolumeRequest.Param.name)
  return _internal_name();
}
inline void DeleteVolumeRequest_Param::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:grpc_cli.DeleteVolumeRequest.Param.name)
}
inline std::string* DeleteVolumeRequest_Param::mutable_name() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.DeleteVolumeRequest.Param.name)
  return _internal_mutable_name();
}
inline const std::string& DeleteVolumeRequest_Param::_internal_name() const {
  return name_.Get();
}
inline void DeleteVolumeRequest_Param::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteVolumeRequest_Param::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.DeleteVolumeRequest.Param.name)
}
inline void DeleteVolumeRequest_Param::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.DeleteVolumeRequest.Param.name)
}
inline void DeleteVolumeRequest_Param::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.DeleteVolumeRequest.Param.name)
}
inline std::string* DeleteVolumeRequest_Param::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteVolumeRequest_Param::release_name() {
  // @@protoc_insertion_point(field_release:grpc_cli.DeleteVolumeRequest.Param.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteVolumeRequest_Param::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.DeleteVolumeRequest.Param.name)
}

// string array = 2;
inline void DeleteVolumeRequest_Param::clear_array() {
  array_.ClearToEmpty();
}
inline const std::string& DeleteVolumeRequest_Param::array() const {
  // @@protoc_insertion_point(field_get:grpc_cli.DeleteVolumeRequest.Param.array)
  return _internal_array();
}
inline void DeleteVolumeRequest_Param::set_array(const std::string& value) {
  _internal_set_array(value);
  // @@protoc_insertion_point(field_set:grpc_cli.DeleteVolumeRequest.Param.array)
}
inline std::string* DeleteVolumeRequest_Param::mutable_array() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.DeleteVolumeRequest.Param.array)
  return _internal_mutable_array();
}
inline const std::string& DeleteVolumeRequest_Param::_internal_array() const {
  return array_.Get();
}
inline void DeleteVolumeRequest_Param::_internal_set_array(const std::string& value) {
  
  array_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteVolumeRequest_Param::set_array(std::string&& value) {
  
  array_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.DeleteVolumeRequest.Param.array)
}
inline void DeleteVolumeRequest_Param::set_array(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  array_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.DeleteVolumeRequest.Param.array)
}
inline void DeleteVolumeRequest_Param::set_array(const char* value,
    size_t size) {
  
  array_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.DeleteVolumeRequest.Param.array)
}
inline std::string* DeleteVolumeRequest_Param::_internal_mutable_array() {
  
  return array_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteVolumeRequest_Param::release_array() {
  // @@protoc_insertion_point(field_release:grpc_cli.DeleteVolumeRequest.Param.array)
  return array_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteVolumeRequest_Param::set_allocated_array(std::string* array) {
  if (array != nullptr) {
    
  } else {
    
  }
  array_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), array,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.DeleteVolumeRequest.Param.array)
}

// -------------------------------------------------------------------

// DeleteVolumeRequest

// string command = 1;
inline void DeleteVolumeRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& DeleteVolumeRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.DeleteVolumeRequest.command)
  return _internal_command();
}
inline void DeleteVolumeRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.DeleteVolumeRequest.command)
}
inline std::string* DeleteVolumeRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.DeleteVolumeRequest.command)
  return _internal_mutable_command();
}
inline const std::string& DeleteVolumeRequest::_internal_command() const {
  return command_.Get();
}
inline void DeleteVolumeRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteVolumeRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.DeleteVolumeRequest.command)
}
inline void DeleteVolumeRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.DeleteVolumeRequest.command)
}
inline void DeleteVolumeRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.DeleteVolumeRequest.command)
}
inline std::string* DeleteVolumeRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteVolumeRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.DeleteVolumeRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteVolumeRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.DeleteVolumeRequest.command)
}

// string rid = 2;
inline void DeleteVolumeRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& DeleteVolumeRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.DeleteVolumeRequest.rid)
  return _internal_rid();
}
inline void DeleteVolumeRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.DeleteVolumeRequest.rid)
}
inline std::string* DeleteVolumeRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.DeleteVolumeRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& DeleteVolumeRequest::_internal_rid() const {
  return rid_.Get();
}
inline void DeleteVolumeRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteVolumeRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.DeleteVolumeRequest.rid)
}
inline void DeleteVolumeRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.DeleteVolumeRequest.rid)
}
inline void DeleteVolumeRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.DeleteVolumeRequest.rid)
}
inline std::string* DeleteVolumeRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteVolumeRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.DeleteVolumeRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteVolumeRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.DeleteVolumeRequest.rid)
}

// string requestor = 3;
inline void DeleteVolumeRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& DeleteVolumeRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.DeleteVolumeRequest.requestor)
  return _internal_requestor();
}
inline void DeleteVolumeRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.DeleteVolumeRequest.requestor)
}
inline std::string* DeleteVolumeRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.DeleteVolumeRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& DeleteVolumeRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void DeleteVolumeRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteVolumeRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.DeleteVolumeRequest.requestor)
}
inline void DeleteVolumeRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.DeleteVolumeRequest.requestor)
}
inline void DeleteVolumeRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.DeleteVolumeRequest.requestor)
}
inline std::string* DeleteVolumeRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteVolumeRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.DeleteVolumeRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteVolumeRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.DeleteVolumeRequest.requestor)
}

// .grpc_cli.DeleteVolumeRequest.Param param = 4;
inline bool DeleteVolumeRequest::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool DeleteVolumeRequest::has_param() const {
  return _internal_has_param();
}
inline void DeleteVolumeRequest::clear_param() {
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::grpc_cli::DeleteVolumeRequest_Param& DeleteVolumeRequest::_internal_param() const {
  const ::grpc_cli::DeleteVolumeRequest_Param* p = param_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::DeleteVolumeRequest_Param&>(
      ::grpc_cli::_DeleteVolumeRequest_Param_default_instance_);
}
inline const ::grpc_cli::DeleteVolumeRequest_Param& DeleteVolumeRequest::param() const {
  // @@protoc_insertion_point(field_get:grpc_cli.DeleteVolumeRequest.param)
  return _internal_param();
}
inline void DeleteVolumeRequest::unsafe_arena_set_allocated_param(
    ::grpc_cli::DeleteVolumeRequest_Param* param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.DeleteVolumeRequest.param)
}
inline ::grpc_cli::DeleteVolumeRequest_Param* DeleteVolumeRequest::release_param() {
  
  ::grpc_cli::DeleteVolumeRequest_Param* temp = param_;
  param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::DeleteVolumeRequest_Param* DeleteVolumeRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:grpc_cli.DeleteVolumeRequest.param)
  
  ::grpc_cli::DeleteVolumeRequest_Param* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::grpc_cli::DeleteVolumeRequest_Param* DeleteVolumeRequest::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::DeleteVolumeRequest_Param>(GetArena());
    param_ = p;
  }
  return param_;
}
inline ::grpc_cli::DeleteVolumeRequest_Param* DeleteVolumeRequest::mutable_param() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.DeleteVolumeRequest.param)
  return _internal_mutable_param();
}
inline void DeleteVolumeRequest::set_allocated_param(::grpc_cli::DeleteVolumeRequest_Param* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.DeleteVolumeRequest.param)
}

// -------------------------------------------------------------------

// DeleteVolumeResponse_Result

// .grpc_cli.Status status = 1;
inline bool DeleteVolumeResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool DeleteVolumeResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void DeleteVolumeResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& DeleteVolumeResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& DeleteVolumeResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.DeleteVolumeResponse.Result.status)
  return _internal_status();
}
inline void DeleteVolumeResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.DeleteVolumeResponse.Result.status)
}
inline ::grpc_cli::Status* DeleteVolumeResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* DeleteVolumeResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.DeleteVolumeResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* DeleteVolumeResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* DeleteVolumeResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.DeleteVolumeResponse.Result.status)
  return _internal_mutable_status();
}
inline void DeleteVolumeResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.DeleteVolumeResponse.Result.status)
}

// -------------------------------------------------------------------

// DeleteVolumeResponse

// string command = 1;
inline void DeleteVolumeResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& DeleteVolumeResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.DeleteVolumeResponse.command)
  return _internal_command();
}
inline void DeleteVolumeResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.DeleteVolumeResponse.command)
}
inline std::string* DeleteVolumeResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.DeleteVolumeResponse.command)
  return _internal_mutable_command();
}
inline const std::string& DeleteVolumeResponse::_internal_command() const {
  return command_.Get();
}
inline void DeleteVolumeResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteVolumeResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.DeleteVolumeResponse.command)
}
inline void DeleteVolumeResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.DeleteVolumeResponse.command)
}
inline void DeleteVolumeResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.DeleteVolumeResponse.command)
}
inline std::string* DeleteVolumeResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteVolumeResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.DeleteVolumeResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteVolumeResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.DeleteVolumeResponse.command)
}

// string rid = 2;
inline void DeleteVolumeResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& DeleteVolumeResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.DeleteVolumeResponse.rid)
  return _internal_rid();
}
inline void DeleteVolumeResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.DeleteVolumeResponse.rid)
}
inline std::string* DeleteVolumeResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.DeleteVolumeResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& DeleteVolumeResponse::_internal_rid() const {
  return rid_.Get();
}
inline void DeleteVolumeResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteVolumeResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.DeleteVolumeResponse.rid)
}
inline void DeleteVolumeResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.DeleteVolumeResponse.rid)
}
inline void DeleteVolumeResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.DeleteVolumeResponse.rid)
}
inline std::string* DeleteVolumeResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteVolumeResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.DeleteVolumeResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteVolumeResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.DeleteVolumeResponse.rid)
}

// .grpc_cli.DeleteVolumeResponse.Result result = 3;
inline bool DeleteVolumeResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool DeleteVolumeResponse::has_result() const {
  return _internal_has_result();
}
inline void DeleteVolumeResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::DeleteVolumeResponse_Result& DeleteVolumeResponse::_internal_result() const {
  const ::grpc_cli::DeleteVolumeResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::DeleteVolumeResponse_Result&>(
      ::grpc_cli::_DeleteVolumeResponse_Result_default_instance_);
}
inline const ::grpc_cli::DeleteVolumeResponse_Result& DeleteVolumeResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.DeleteVolumeResponse.result)
  return _internal_result();
}
inline void DeleteVolumeResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::DeleteVolumeResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.DeleteVolumeResponse.result)
}
inline ::grpc_cli::DeleteVolumeResponse_Result* DeleteVolumeResponse::release_result() {
  
  ::grpc_cli::DeleteVolumeResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::DeleteVolumeResponse_Result* DeleteVolumeResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.DeleteVolumeResponse.result)
  
  ::grpc_cli::DeleteVolumeResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::DeleteVolumeResponse_Result* DeleteVolumeResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::DeleteVolumeResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::DeleteVolumeResponse_Result* DeleteVolumeResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.DeleteVolumeResponse.result)
  return _internal_mutable_result();
}
inline void DeleteVolumeResponse::set_allocated_result(::grpc_cli::DeleteVolumeResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.DeleteVolumeResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool DeleteVolumeResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool DeleteVolumeResponse::has_info() const {
  return _internal_has_info();
}
inline void DeleteVolumeResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& DeleteVolumeResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& DeleteVolumeResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.DeleteVolumeResponse.info)
  return _internal_info();
}
inline void DeleteVolumeResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.DeleteVolumeResponse.info)
}
inline ::grpc_cli::PosInfo* DeleteVolumeResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* DeleteVolumeResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.DeleteVolumeResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* DeleteVolumeResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* DeleteVolumeResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.DeleteVolumeResponse.info)
  return _internal_mutable_info();
}
inline void DeleteVolumeResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.DeleteVolumeResponse.info)
}

// -------------------------------------------------------------------

// UnmountVolumeRequest_Param

// string name = 1;
inline void UnmountVolumeRequest_Param::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& UnmountVolumeRequest_Param::name() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UnmountVolumeRequest.Param.name)
  return _internal_name();
}
inline void UnmountVolumeRequest_Param::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:grpc_cli.UnmountVolumeRequest.Param.name)
}
inline std::string* UnmountVolumeRequest_Param::mutable_name() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UnmountVolumeRequest.Param.name)
  return _internal_mutable_name();
}
inline const std::string& UnmountVolumeRequest_Param::_internal_name() const {
  return name_.Get();
}
inline void UnmountVolumeRequest_Param::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UnmountVolumeRequest_Param::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.UnmountVolumeRequest.Param.name)
}
inline void UnmountVolumeRequest_Param::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.UnmountVolumeRequest.Param.name)
}
inline void UnmountVolumeRequest_Param::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.UnmountVolumeRequest.Param.name)
}
inline std::string* UnmountVolumeRequest_Param::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UnmountVolumeRequest_Param::release_name() {
  // @@protoc_insertion_point(field_release:grpc_cli.UnmountVolumeRequest.Param.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnmountVolumeRequest_Param::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UnmountVolumeRequest.Param.name)
}

// string array = 2;
inline void UnmountVolumeRequest_Param::clear_array() {
  array_.ClearToEmpty();
}
inline const std::string& UnmountVolumeRequest_Param::array() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UnmountVolumeRequest.Param.array)
  return _internal_array();
}
inline void UnmountVolumeRequest_Param::set_array(const std::string& value) {
  _internal_set_array(value);
  // @@protoc_insertion_point(field_set:grpc_cli.UnmountVolumeRequest.Param.array)
}
inline std::string* UnmountVolumeRequest_Param::mutable_array() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UnmountVolumeRequest.Param.array)
  return _internal_mutable_array();
}
inline const std::string& UnmountVolumeRequest_Param::_internal_array() const {
  return array_.Get();
}
inline void UnmountVolumeRequest_Param::_internal_set_array(const std::string& value) {
  
  array_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UnmountVolumeRequest_Param::set_array(std::string&& value) {
  
  array_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.UnmountVolumeRequest.Param.array)
}
inline void UnmountVolumeRequest_Param::set_array(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  array_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.UnmountVolumeRequest.Param.array)
}
inline void UnmountVolumeRequest_Param::set_array(const char* value,
    size_t size) {
  
  array_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.UnmountVolumeRequest.Param.array)
}
inline std::string* UnmountVolumeRequest_Param::_internal_mutable_array() {
  
  return array_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UnmountVolumeRequest_Param::release_array() {
  // @@protoc_insertion_point(field_release:grpc_cli.UnmountVolumeRequest.Param.array)
  return array_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnmountVolumeRequest_Param::set_allocated_array(std::string* array) {
  if (array != nullptr) {
    
  } else {
    
  }
  array_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), array,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UnmountVolumeRequest.Param.array)
}

// -------------------------------------------------------------------

// UnmountVolumeRequest

// string command = 1;
inline void UnmountVolumeRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& UnmountVolumeRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UnmountVolumeRequest.command)
  return _internal_command();
}
inline void UnmountVolumeRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.UnmountVolumeRequest.command)
}
inline std::string* UnmountVolumeRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UnmountVolumeRequest.command)
  return _internal_mutable_command();
}
inline const std::string& UnmountVolumeRequest::_internal_command() const {
  return command_.Get();
}
inline void UnmountVolumeRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UnmountVolumeRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.UnmountVolumeRequest.command)
}
inline void UnmountVolumeRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.UnmountVolumeRequest.command)
}
inline void UnmountVolumeRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.UnmountVolumeRequest.command)
}
inline std::string* UnmountVolumeRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UnmountVolumeRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.UnmountVolumeRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnmountVolumeRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UnmountVolumeRequest.command)
}

// string rid = 2;
inline void UnmountVolumeRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& UnmountVolumeRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UnmountVolumeRequest.rid)
  return _internal_rid();
}
inline void UnmountVolumeRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.UnmountVolumeRequest.rid)
}
inline std::string* UnmountVolumeRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UnmountVolumeRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& UnmountVolumeRequest::_internal_rid() const {
  return rid_.Get();
}
inline void UnmountVolumeRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UnmountVolumeRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.UnmountVolumeRequest.rid)
}
inline void UnmountVolumeRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.UnmountVolumeRequest.rid)
}
inline void UnmountVolumeRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.UnmountVolumeRequest.rid)
}
inline std::string* UnmountVolumeRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UnmountVolumeRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.UnmountVolumeRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnmountVolumeRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UnmountVolumeRequest.rid)
}

// string requestor = 3;
inline void UnmountVolumeRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& UnmountVolumeRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UnmountVolumeRequest.requestor)
  return _internal_requestor();
}
inline void UnmountVolumeRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.UnmountVolumeRequest.requestor)
}
inline std::string* UnmountVolumeRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UnmountVolumeRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& UnmountVolumeRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void UnmountVolumeRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UnmountVolumeRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.UnmountVolumeRequest.requestor)
}
inline void UnmountVolumeRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.UnmountVolumeRequest.requestor)
}
inline void UnmountVolumeRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.UnmountVolumeRequest.requestor)
}
inline std::string* UnmountVolumeRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UnmountVolumeRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.UnmountVolumeRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnmountVolumeRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UnmountVolumeRequest.requestor)
}

// .grpc_cli.UnmountVolumeRequest.Param param = 4;
inline bool UnmountVolumeRequest::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool UnmountVolumeRequest::has_param() const {
  return _internal_has_param();
}
inline void UnmountVolumeRequest::clear_param() {
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::grpc_cli::UnmountVolumeRequest_Param& UnmountVolumeRequest::_internal_param() const {
  const ::grpc_cli::UnmountVolumeRequest_Param* p = param_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::UnmountVolumeRequest_Param&>(
      ::grpc_cli::_UnmountVolumeRequest_Param_default_instance_);
}
inline const ::grpc_cli::UnmountVolumeRequest_Param& UnmountVolumeRequest::param() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UnmountVolumeRequest.param)
  return _internal_param();
}
inline void UnmountVolumeRequest::unsafe_arena_set_allocated_param(
    ::grpc_cli::UnmountVolumeRequest_Param* param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.UnmountVolumeRequest.param)
}
inline ::grpc_cli::UnmountVolumeRequest_Param* UnmountVolumeRequest::release_param() {
  
  ::grpc_cli::UnmountVolumeRequest_Param* temp = param_;
  param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::UnmountVolumeRequest_Param* UnmountVolumeRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:grpc_cli.UnmountVolumeRequest.param)
  
  ::grpc_cli::UnmountVolumeRequest_Param* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::grpc_cli::UnmountVolumeRequest_Param* UnmountVolumeRequest::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::UnmountVolumeRequest_Param>(GetArena());
    param_ = p;
  }
  return param_;
}
inline ::grpc_cli::UnmountVolumeRequest_Param* UnmountVolumeRequest::mutable_param() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UnmountVolumeRequest.param)
  return _internal_mutable_param();
}
inline void UnmountVolumeRequest::set_allocated_param(::grpc_cli::UnmountVolumeRequest_Param* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UnmountVolumeRequest.param)
}

// -------------------------------------------------------------------

// UnmountVolumeResponse_Result

// .grpc_cli.Status status = 1;
inline bool UnmountVolumeResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool UnmountVolumeResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void UnmountVolumeResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& UnmountVolumeResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& UnmountVolumeResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UnmountVolumeResponse.Result.status)
  return _internal_status();
}
inline void UnmountVolumeResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.UnmountVolumeResponse.Result.status)
}
inline ::grpc_cli::Status* UnmountVolumeResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* UnmountVolumeResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.UnmountVolumeResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* UnmountVolumeResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* UnmountVolumeResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UnmountVolumeResponse.Result.status)
  return _internal_mutable_status();
}
inline void UnmountVolumeResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UnmountVolumeResponse.Result.status)
}

// -------------------------------------------------------------------

// UnmountVolumeResponse

// string command = 1;
inline void UnmountVolumeResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& UnmountVolumeResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UnmountVolumeResponse.command)
  return _internal_command();
}
inline void UnmountVolumeResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.UnmountVolumeResponse.command)
}
inline std::string* UnmountVolumeResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UnmountVolumeResponse.command)
  return _internal_mutable_command();
}
inline const std::string& UnmountVolumeResponse::_internal_command() const {
  return command_.Get();
}
inline void UnmountVolumeResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UnmountVolumeResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.UnmountVolumeResponse.command)
}
inline void UnmountVolumeResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.UnmountVolumeResponse.command)
}
inline void UnmountVolumeResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.UnmountVolumeResponse.command)
}
inline std::string* UnmountVolumeResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UnmountVolumeResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.UnmountVolumeResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnmountVolumeResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UnmountVolumeResponse.command)
}

// string rid = 2;
inline void UnmountVolumeResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& UnmountVolumeResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UnmountVolumeResponse.rid)
  return _internal_rid();
}
inline void UnmountVolumeResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.UnmountVolumeResponse.rid)
}
inline std::string* UnmountVolumeResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UnmountVolumeResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& UnmountVolumeResponse::_internal_rid() const {
  return rid_.Get();
}
inline void UnmountVolumeResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UnmountVolumeResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.UnmountVolumeResponse.rid)
}
inline void UnmountVolumeResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.UnmountVolumeResponse.rid)
}
inline void UnmountVolumeResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.UnmountVolumeResponse.rid)
}
inline std::string* UnmountVolumeResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UnmountVolumeResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.UnmountVolumeResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnmountVolumeResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UnmountVolumeResponse.rid)
}

// .grpc_cli.UnmountVolumeResponse.Result result = 3;
inline bool UnmountVolumeResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool UnmountVolumeResponse::has_result() const {
  return _internal_has_result();
}
inline void UnmountVolumeResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::UnmountVolumeResponse_Result& UnmountVolumeResponse::_internal_result() const {
  const ::grpc_cli::UnmountVolumeResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::UnmountVolumeResponse_Result&>(
      ::grpc_cli::_UnmountVolumeResponse_Result_default_instance_);
}
inline const ::grpc_cli::UnmountVolumeResponse_Result& UnmountVolumeResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UnmountVolumeResponse.result)
  return _internal_result();
}
inline void UnmountVolumeResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::UnmountVolumeResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.UnmountVolumeResponse.result)
}
inline ::grpc_cli::UnmountVolumeResponse_Result* UnmountVolumeResponse::release_result() {
  
  ::grpc_cli::UnmountVolumeResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::UnmountVolumeResponse_Result* UnmountVolumeResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.UnmountVolumeResponse.result)
  
  ::grpc_cli::UnmountVolumeResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::UnmountVolumeResponse_Result* UnmountVolumeResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::UnmountVolumeResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::UnmountVolumeResponse_Result* UnmountVolumeResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UnmountVolumeResponse.result)
  return _internal_mutable_result();
}
inline void UnmountVolumeResponse::set_allocated_result(::grpc_cli::UnmountVolumeResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UnmountVolumeResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool UnmountVolumeResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool UnmountVolumeResponse::has_info() const {
  return _internal_has_info();
}
inline void UnmountVolumeResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& UnmountVolumeResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& UnmountVolumeResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UnmountVolumeResponse.info)
  return _internal_info();
}
inline void UnmountVolumeResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.UnmountVolumeResponse.info)
}
inline ::grpc_cli::PosInfo* UnmountVolumeResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* UnmountVolumeResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.UnmountVolumeResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* UnmountVolumeResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* UnmountVolumeResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UnmountVolumeResponse.info)
  return _internal_mutable_info();
}
inline void UnmountVolumeResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UnmountVolumeResponse.info)
}

// -------------------------------------------------------------------

// MountVolumeRequest_Param

// string name = 1;
inline void MountVolumeRequest_Param::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& MountVolumeRequest_Param::name() const {
  // @@protoc_insertion_point(field_get:grpc_cli.MountVolumeRequest.Param.name)
  return _internal_name();
}
inline void MountVolumeRequest_Param::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:grpc_cli.MountVolumeRequest.Param.name)
}
inline std::string* MountVolumeRequest_Param::mutable_name() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.MountVolumeRequest.Param.name)
  return _internal_mutable_name();
}
inline const std::string& MountVolumeRequest_Param::_internal_name() const {
  return name_.Get();
}
inline void MountVolumeRequest_Param::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MountVolumeRequest_Param::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.MountVolumeRequest.Param.name)
}
inline void MountVolumeRequest_Param::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.MountVolumeRequest.Param.name)
}
inline void MountVolumeRequest_Param::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.MountVolumeRequest.Param.name)
}
inline std::string* MountVolumeRequest_Param::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MountVolumeRequest_Param::release_name() {
  // @@protoc_insertion_point(field_release:grpc_cli.MountVolumeRequest.Param.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MountVolumeRequest_Param::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.MountVolumeRequest.Param.name)
}

// string subnqn = 2;
inline void MountVolumeRequest_Param::clear_subnqn() {
  subnqn_.ClearToEmpty();
}
inline const std::string& MountVolumeRequest_Param::subnqn() const {
  // @@protoc_insertion_point(field_get:grpc_cli.MountVolumeRequest.Param.subnqn)
  return _internal_subnqn();
}
inline void MountVolumeRequest_Param::set_subnqn(const std::string& value) {
  _internal_set_subnqn(value);
  // @@protoc_insertion_point(field_set:grpc_cli.MountVolumeRequest.Param.subnqn)
}
inline std::string* MountVolumeRequest_Param::mutable_subnqn() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.MountVolumeRequest.Param.subnqn)
  return _internal_mutable_subnqn();
}
inline const std::string& MountVolumeRequest_Param::_internal_subnqn() const {
  return subnqn_.Get();
}
inline void MountVolumeRequest_Param::_internal_set_subnqn(const std::string& value) {
  
  subnqn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MountVolumeRequest_Param::set_subnqn(std::string&& value) {
  
  subnqn_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.MountVolumeRequest.Param.subnqn)
}
inline void MountVolumeRequest_Param::set_subnqn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subnqn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.MountVolumeRequest.Param.subnqn)
}
inline void MountVolumeRequest_Param::set_subnqn(const char* value,
    size_t size) {
  
  subnqn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.MountVolumeRequest.Param.subnqn)
}
inline std::string* MountVolumeRequest_Param::_internal_mutable_subnqn() {
  
  return subnqn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MountVolumeRequest_Param::release_subnqn() {
  // @@protoc_insertion_point(field_release:grpc_cli.MountVolumeRequest.Param.subnqn)
  return subnqn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MountVolumeRequest_Param::set_allocated_subnqn(std::string* subnqn) {
  if (subnqn != nullptr) {
    
  } else {
    
  }
  subnqn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subnqn,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.MountVolumeRequest.Param.subnqn)
}

// string array = 3;
inline void MountVolumeRequest_Param::clear_array() {
  array_.ClearToEmpty();
}
inline const std::string& MountVolumeRequest_Param::array() const {
  // @@protoc_insertion_point(field_get:grpc_cli.MountVolumeRequest.Param.array)
  return _internal_array();
}
inline void MountVolumeRequest_Param::set_array(const std::string& value) {
  _internal_set_array(value);
  // @@protoc_insertion_point(field_set:grpc_cli.MountVolumeRequest.Param.array)
}
inline std::string* MountVolumeRequest_Param::mutable_array() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.MountVolumeRequest.Param.array)
  return _internal_mutable_array();
}
inline const std::string& MountVolumeRequest_Param::_internal_array() const {
  return array_.Get();
}
inline void MountVolumeRequest_Param::_internal_set_array(const std::string& value) {
  
  array_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MountVolumeRequest_Param::set_array(std::string&& value) {
  
  array_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.MountVolumeRequest.Param.array)
}
inline void MountVolumeRequest_Param::set_array(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  array_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.MountVolumeRequest.Param.array)
}
inline void MountVolumeRequest_Param::set_array(const char* value,
    size_t size) {
  
  array_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.MountVolumeRequest.Param.array)
}
inline std::string* MountVolumeRequest_Param::_internal_mutable_array() {
  
  return array_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MountVolumeRequest_Param::release_array() {
  // @@protoc_insertion_point(field_release:grpc_cli.MountVolumeRequest.Param.array)
  return array_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MountVolumeRequest_Param::set_allocated_array(std::string* array) {
  if (array != nullptr) {
    
  } else {
    
  }
  array_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), array,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.MountVolumeRequest.Param.array)
}

// -------------------------------------------------------------------

// MountVolumeRequest

// string command = 1;
inline void MountVolumeRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& MountVolumeRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.MountVolumeRequest.command)
  return _internal_command();
}
inline void MountVolumeRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.MountVolumeRequest.command)
}
inline std::string* MountVolumeRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.MountVolumeRequest.command)
  return _internal_mutable_command();
}
inline const std::string& MountVolumeRequest::_internal_command() const {
  return command_.Get();
}
inline void MountVolumeRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MountVolumeRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.MountVolumeRequest.command)
}
inline void MountVolumeRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.MountVolumeRequest.command)
}
inline void MountVolumeRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.MountVolumeRequest.command)
}
inline std::string* MountVolumeRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MountVolumeRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.MountVolumeRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MountVolumeRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.MountVolumeRequest.command)
}

// string rid = 2;
inline void MountVolumeRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& MountVolumeRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.MountVolumeRequest.rid)
  return _internal_rid();
}
inline void MountVolumeRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.MountVolumeRequest.rid)
}
inline std::string* MountVolumeRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.MountVolumeRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& MountVolumeRequest::_internal_rid() const {
  return rid_.Get();
}
inline void MountVolumeRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MountVolumeRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.MountVolumeRequest.rid)
}
inline void MountVolumeRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.MountVolumeRequest.rid)
}
inline void MountVolumeRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.MountVolumeRequest.rid)
}
inline std::string* MountVolumeRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MountVolumeRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.MountVolumeRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MountVolumeRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.MountVolumeRequest.rid)
}

// string requestor = 3;
inline void MountVolumeRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& MountVolumeRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.MountVolumeRequest.requestor)
  return _internal_requestor();
}
inline void MountVolumeRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.MountVolumeRequest.requestor)
}
inline std::string* MountVolumeRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.MountVolumeRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& MountVolumeRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void MountVolumeRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MountVolumeRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.MountVolumeRequest.requestor)
}
inline void MountVolumeRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.MountVolumeRequest.requestor)
}
inline void MountVolumeRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.MountVolumeRequest.requestor)
}
inline std::string* MountVolumeRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MountVolumeRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.MountVolumeRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MountVolumeRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.MountVolumeRequest.requestor)
}

// .grpc_cli.MountVolumeRequest.Param param = 4;
inline bool MountVolumeRequest::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool MountVolumeRequest::has_param() const {
  return _internal_has_param();
}
inline void MountVolumeRequest::clear_param() {
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::grpc_cli::MountVolumeRequest_Param& MountVolumeRequest::_internal_param() const {
  const ::grpc_cli::MountVolumeRequest_Param* p = param_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::MountVolumeRequest_Param&>(
      ::grpc_cli::_MountVolumeRequest_Param_default_instance_);
}
inline const ::grpc_cli::MountVolumeRequest_Param& MountVolumeRequest::param() const {
  // @@protoc_insertion_point(field_get:grpc_cli.MountVolumeRequest.param)
  return _internal_param();
}
inline void MountVolumeRequest::unsafe_arena_set_allocated_param(
    ::grpc_cli::MountVolumeRequest_Param* param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.MountVolumeRequest.param)
}
inline ::grpc_cli::MountVolumeRequest_Param* MountVolumeRequest::release_param() {
  
  ::grpc_cli::MountVolumeRequest_Param* temp = param_;
  param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::MountVolumeRequest_Param* MountVolumeRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:grpc_cli.MountVolumeRequest.param)
  
  ::grpc_cli::MountVolumeRequest_Param* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::grpc_cli::MountVolumeRequest_Param* MountVolumeRequest::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::MountVolumeRequest_Param>(GetArena());
    param_ = p;
  }
  return param_;
}
inline ::grpc_cli::MountVolumeRequest_Param* MountVolumeRequest::mutable_param() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.MountVolumeRequest.param)
  return _internal_mutable_param();
}
inline void MountVolumeRequest::set_allocated_param(::grpc_cli::MountVolumeRequest_Param* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.MountVolumeRequest.param)
}

// -------------------------------------------------------------------

// MountVolumeResponse_Result

// .grpc_cli.Status status = 1;
inline bool MountVolumeResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MountVolumeResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void MountVolumeResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& MountVolumeResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& MountVolumeResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.MountVolumeResponse.Result.status)
  return _internal_status();
}
inline void MountVolumeResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.MountVolumeResponse.Result.status)
}
inline ::grpc_cli::Status* MountVolumeResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* MountVolumeResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.MountVolumeResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* MountVolumeResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* MountVolumeResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.MountVolumeResponse.Result.status)
  return _internal_mutable_status();
}
inline void MountVolumeResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.MountVolumeResponse.Result.status)
}

// -------------------------------------------------------------------

// MountVolumeResponse

// string command = 1;
inline void MountVolumeResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& MountVolumeResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.MountVolumeResponse.command)
  return _internal_command();
}
inline void MountVolumeResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.MountVolumeResponse.command)
}
inline std::string* MountVolumeResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.MountVolumeResponse.command)
  return _internal_mutable_command();
}
inline const std::string& MountVolumeResponse::_internal_command() const {
  return command_.Get();
}
inline void MountVolumeResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MountVolumeResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.MountVolumeResponse.command)
}
inline void MountVolumeResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.MountVolumeResponse.command)
}
inline void MountVolumeResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.MountVolumeResponse.command)
}
inline std::string* MountVolumeResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MountVolumeResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.MountVolumeResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MountVolumeResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.MountVolumeResponse.command)
}

// string rid = 2;
inline void MountVolumeResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& MountVolumeResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.MountVolumeResponse.rid)
  return _internal_rid();
}
inline void MountVolumeResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.MountVolumeResponse.rid)
}
inline std::string* MountVolumeResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.MountVolumeResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& MountVolumeResponse::_internal_rid() const {
  return rid_.Get();
}
inline void MountVolumeResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MountVolumeResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.MountVolumeResponse.rid)
}
inline void MountVolumeResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.MountVolumeResponse.rid)
}
inline void MountVolumeResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.MountVolumeResponse.rid)
}
inline std::string* MountVolumeResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MountVolumeResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.MountVolumeResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MountVolumeResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.MountVolumeResponse.rid)
}

// .grpc_cli.MountVolumeResponse.Result result = 3;
inline bool MountVolumeResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool MountVolumeResponse::has_result() const {
  return _internal_has_result();
}
inline void MountVolumeResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::MountVolumeResponse_Result& MountVolumeResponse::_internal_result() const {
  const ::grpc_cli::MountVolumeResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::MountVolumeResponse_Result&>(
      ::grpc_cli::_MountVolumeResponse_Result_default_instance_);
}
inline const ::grpc_cli::MountVolumeResponse_Result& MountVolumeResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.MountVolumeResponse.result)
  return _internal_result();
}
inline void MountVolumeResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::MountVolumeResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.MountVolumeResponse.result)
}
inline ::grpc_cli::MountVolumeResponse_Result* MountVolumeResponse::release_result() {
  
  ::grpc_cli::MountVolumeResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::MountVolumeResponse_Result* MountVolumeResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.MountVolumeResponse.result)
  
  ::grpc_cli::MountVolumeResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::MountVolumeResponse_Result* MountVolumeResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::MountVolumeResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::MountVolumeResponse_Result* MountVolumeResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.MountVolumeResponse.result)
  return _internal_mutable_result();
}
inline void MountVolumeResponse::set_allocated_result(::grpc_cli::MountVolumeResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.MountVolumeResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool MountVolumeResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool MountVolumeResponse::has_info() const {
  return _internal_has_info();
}
inline void MountVolumeResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& MountVolumeResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& MountVolumeResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.MountVolumeResponse.info)
  return _internal_info();
}
inline void MountVolumeResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.MountVolumeResponse.info)
}
inline ::grpc_cli::PosInfo* MountVolumeResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* MountVolumeResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.MountVolumeResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* MountVolumeResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* MountVolumeResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.MountVolumeResponse.info)
  return _internal_mutable_info();
}
inline void MountVolumeResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.MountVolumeResponse.info)
}

// -------------------------------------------------------------------

// SetVolumePropertyRequest_Param

// string name = 1;
inline void SetVolumePropertyRequest_Param::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SetVolumePropertyRequest_Param::name() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetVolumePropertyRequest.Param.name)
  return _internal_name();
}
inline void SetVolumePropertyRequest_Param::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SetVolumePropertyRequest.Param.name)
}
inline std::string* SetVolumePropertyRequest_Param::mutable_name() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetVolumePropertyRequest.Param.name)
  return _internal_mutable_name();
}
inline const std::string& SetVolumePropertyRequest_Param::_internal_name() const {
  return name_.Get();
}
inline void SetVolumePropertyRequest_Param::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetVolumePropertyRequest_Param::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SetVolumePropertyRequest.Param.name)
}
inline void SetVolumePropertyRequest_Param::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SetVolumePropertyRequest.Param.name)
}
inline void SetVolumePropertyRequest_Param::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SetVolumePropertyRequest.Param.name)
}
inline std::string* SetVolumePropertyRequest_Param::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetVolumePropertyRequest_Param::release_name() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetVolumePropertyRequest.Param.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetVolumePropertyRequest_Param::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetVolumePropertyRequest.Param.name)
}

// string array = 2;
inline void SetVolumePropertyRequest_Param::clear_array() {
  array_.ClearToEmpty();
}
inline const std::string& SetVolumePropertyRequest_Param::array() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetVolumePropertyRequest.Param.array)
  return _internal_array();
}
inline void SetVolumePropertyRequest_Param::set_array(const std::string& value) {
  _internal_set_array(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SetVolumePropertyRequest.Param.array)
}
inline std::string* SetVolumePropertyRequest_Param::mutable_array() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetVolumePropertyRequest.Param.array)
  return _internal_mutable_array();
}
inline const std::string& SetVolumePropertyRequest_Param::_internal_array() const {
  return array_.Get();
}
inline void SetVolumePropertyRequest_Param::_internal_set_array(const std::string& value) {
  
  array_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetVolumePropertyRequest_Param::set_array(std::string&& value) {
  
  array_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SetVolumePropertyRequest.Param.array)
}
inline void SetVolumePropertyRequest_Param::set_array(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  array_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SetVolumePropertyRequest.Param.array)
}
inline void SetVolumePropertyRequest_Param::set_array(const char* value,
    size_t size) {
  
  array_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SetVolumePropertyRequest.Param.array)
}
inline std::string* SetVolumePropertyRequest_Param::_internal_mutable_array() {
  
  return array_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetVolumePropertyRequest_Param::release_array() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetVolumePropertyRequest.Param.array)
  return array_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetVolumePropertyRequest_Param::set_allocated_array(std::string* array) {
  if (array != nullptr) {
    
  } else {
    
  }
  array_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), array,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetVolumePropertyRequest.Param.array)
}

// string newVolumeName = 3;
inline void SetVolumePropertyRequest_Param::clear_newvolumename() {
  newvolumename_.ClearToEmpty();
}
inline const std::string& SetVolumePropertyRequest_Param::newvolumename() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetVolumePropertyRequest.Param.newVolumeName)
  return _internal_newvolumename();
}
inline void SetVolumePropertyRequest_Param::set_newvolumename(const std::string& value) {
  _internal_set_newvolumename(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SetVolumePropertyRequest.Param.newVolumeName)
}
inline std::string* SetVolumePropertyRequest_Param::mutable_newvolumename() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetVolumePropertyRequest.Param.newVolumeName)
  return _internal_mutable_newvolumename();
}
inline const std::string& SetVolumePropertyRequest_Param::_internal_newvolumename() const {
  return newvolumename_.Get();
}
inline void SetVolumePropertyRequest_Param::_internal_set_newvolumename(const std::string& value) {
  
  newvolumename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetVolumePropertyRequest_Param::set_newvolumename(std::string&& value) {
  
  newvolumename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SetVolumePropertyRequest.Param.newVolumeName)
}
inline void SetVolumePropertyRequest_Param::set_newvolumename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  newvolumename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SetVolumePropertyRequest.Param.newVolumeName)
}
inline void SetVolumePropertyRequest_Param::set_newvolumename(const char* value,
    size_t size) {
  
  newvolumename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SetVolumePropertyRequest.Param.newVolumeName)
}
inline std::string* SetVolumePropertyRequest_Param::_internal_mutable_newvolumename() {
  
  return newvolumename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetVolumePropertyRequest_Param::release_newvolumename() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetVolumePropertyRequest.Param.newVolumeName)
  return newvolumename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetVolumePropertyRequest_Param::set_allocated_newvolumename(std::string* newvolumename) {
  if (newvolumename != nullptr) {
    
  } else {
    
  }
  newvolumename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), newvolumename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetVolumePropertyRequest.Param.newVolumeName)
}

// uint64 size = 4;
inline void SetVolumePropertyRequest_Param::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SetVolumePropertyRequest_Param::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SetVolumePropertyRequest_Param::size() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetVolumePropertyRequest.Param.size)
  return _internal_size();
}
inline void SetVolumePropertyRequest_Param::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  size_ = value;
}
inline void SetVolumePropertyRequest_Param::set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SetVolumePropertyRequest.Param.size)
}

// uint64 maxiops = 5;
inline void SetVolumePropertyRequest_Param::clear_maxiops() {
  maxiops_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SetVolumePropertyRequest_Param::_internal_maxiops() const {
  return maxiops_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SetVolumePropertyRequest_Param::maxiops() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetVolumePropertyRequest.Param.maxiops)
  return _internal_maxiops();
}
inline void SetVolumePropertyRequest_Param::_internal_set_maxiops(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  maxiops_ = value;
}
inline void SetVolumePropertyRequest_Param::set_maxiops(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_maxiops(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SetVolumePropertyRequest.Param.maxiops)
}

// uint64 maxbw = 6;
inline void SetVolumePropertyRequest_Param::clear_maxbw() {
  maxbw_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SetVolumePropertyRequest_Param::_internal_maxbw() const {
  return maxbw_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SetVolumePropertyRequest_Param::maxbw() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetVolumePropertyRequest.Param.maxbw)
  return _internal_maxbw();
}
inline void SetVolumePropertyRequest_Param::_internal_set_maxbw(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  maxbw_ = value;
}
inline void SetVolumePropertyRequest_Param::set_maxbw(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_maxbw(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SetVolumePropertyRequest.Param.maxbw)
}

// bool updateprimaryvol = 7;
inline void SetVolumePropertyRequest_Param::clear_updateprimaryvol() {
  updateprimaryvol_ = false;
}
inline bool SetVolumePropertyRequest_Param::_internal_updateprimaryvol() const {
  return updateprimaryvol_;
}
inline bool SetVolumePropertyRequest_Param::updateprimaryvol() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetVolumePropertyRequest.Param.updateprimaryvol)
  return _internal_updateprimaryvol();
}
inline void SetVolumePropertyRequest_Param::_internal_set_updateprimaryvol(bool value) {
  
  updateprimaryvol_ = value;
}
inline void SetVolumePropertyRequest_Param::set_updateprimaryvol(bool value) {
  _internal_set_updateprimaryvol(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SetVolumePropertyRequest.Param.updateprimaryvol)
}

// bool isprimaryvol = 8;
inline void SetVolumePropertyRequest_Param::clear_isprimaryvol() {
  isprimaryvol_ = false;
}
inline bool SetVolumePropertyRequest_Param::_internal_isprimaryvol() const {
  return isprimaryvol_;
}
inline bool SetVolumePropertyRequest_Param::isprimaryvol() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetVolumePropertyRequest.Param.isprimaryvol)
  return _internal_isprimaryvol();
}
inline void SetVolumePropertyRequest_Param::_internal_set_isprimaryvol(bool value) {
  
  isprimaryvol_ = value;
}
inline void SetVolumePropertyRequest_Param::set_isprimaryvol(bool value) {
  _internal_set_isprimaryvol(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SetVolumePropertyRequest.Param.isprimaryvol)
}

// -------------------------------------------------------------------

// SetVolumePropertyRequest

// string command = 1;
inline void SetVolumePropertyRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& SetVolumePropertyRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetVolumePropertyRequest.command)
  return _internal_command();
}
inline void SetVolumePropertyRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SetVolumePropertyRequest.command)
}
inline std::string* SetVolumePropertyRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetVolumePropertyRequest.command)
  return _internal_mutable_command();
}
inline const std::string& SetVolumePropertyRequest::_internal_command() const {
  return command_.Get();
}
inline void SetVolumePropertyRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetVolumePropertyRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SetVolumePropertyRequest.command)
}
inline void SetVolumePropertyRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SetVolumePropertyRequest.command)
}
inline void SetVolumePropertyRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SetVolumePropertyRequest.command)
}
inline std::string* SetVolumePropertyRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetVolumePropertyRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetVolumePropertyRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetVolumePropertyRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetVolumePropertyRequest.command)
}

// string rid = 2;
inline void SetVolumePropertyRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& SetVolumePropertyRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetVolumePropertyRequest.rid)
  return _internal_rid();
}
inline void SetVolumePropertyRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SetVolumePropertyRequest.rid)
}
inline std::string* SetVolumePropertyRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetVolumePropertyRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& SetVolumePropertyRequest::_internal_rid() const {
  return rid_.Get();
}
inline void SetVolumePropertyRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetVolumePropertyRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SetVolumePropertyRequest.rid)
}
inline void SetVolumePropertyRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SetVolumePropertyRequest.rid)
}
inline void SetVolumePropertyRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SetVolumePropertyRequest.rid)
}
inline std::string* SetVolumePropertyRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetVolumePropertyRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetVolumePropertyRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetVolumePropertyRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetVolumePropertyRequest.rid)
}

// string requestor = 3;
inline void SetVolumePropertyRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& SetVolumePropertyRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetVolumePropertyRequest.requestor)
  return _internal_requestor();
}
inline void SetVolumePropertyRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SetVolumePropertyRequest.requestor)
}
inline std::string* SetVolumePropertyRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetVolumePropertyRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& SetVolumePropertyRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void SetVolumePropertyRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetVolumePropertyRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SetVolumePropertyRequest.requestor)
}
inline void SetVolumePropertyRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SetVolumePropertyRequest.requestor)
}
inline void SetVolumePropertyRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SetVolumePropertyRequest.requestor)
}
inline std::string* SetVolumePropertyRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetVolumePropertyRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetVolumePropertyRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetVolumePropertyRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetVolumePropertyRequest.requestor)
}

// .grpc_cli.SetVolumePropertyRequest.Param param = 4;
inline bool SetVolumePropertyRequest::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool SetVolumePropertyRequest::has_param() const {
  return _internal_has_param();
}
inline void SetVolumePropertyRequest::clear_param() {
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::grpc_cli::SetVolumePropertyRequest_Param& SetVolumePropertyRequest::_internal_param() const {
  const ::grpc_cli::SetVolumePropertyRequest_Param* p = param_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::SetVolumePropertyRequest_Param&>(
      ::grpc_cli::_SetVolumePropertyRequest_Param_default_instance_);
}
inline const ::grpc_cli::SetVolumePropertyRequest_Param& SetVolumePropertyRequest::param() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetVolumePropertyRequest.param)
  return _internal_param();
}
inline void SetVolumePropertyRequest::unsafe_arena_set_allocated_param(
    ::grpc_cli::SetVolumePropertyRequest_Param* param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.SetVolumePropertyRequest.param)
}
inline ::grpc_cli::SetVolumePropertyRequest_Param* SetVolumePropertyRequest::release_param() {
  
  ::grpc_cli::SetVolumePropertyRequest_Param* temp = param_;
  param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::SetVolumePropertyRequest_Param* SetVolumePropertyRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetVolumePropertyRequest.param)
  
  ::grpc_cli::SetVolumePropertyRequest_Param* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::grpc_cli::SetVolumePropertyRequest_Param* SetVolumePropertyRequest::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::SetVolumePropertyRequest_Param>(GetArena());
    param_ = p;
  }
  return param_;
}
inline ::grpc_cli::SetVolumePropertyRequest_Param* SetVolumePropertyRequest::mutable_param() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetVolumePropertyRequest.param)
  return _internal_mutable_param();
}
inline void SetVolumePropertyRequest::set_allocated_param(::grpc_cli::SetVolumePropertyRequest_Param* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetVolumePropertyRequest.param)
}

// -------------------------------------------------------------------

// SetVolumePropertyResponse_Result

// .grpc_cli.Status status = 1;
inline bool SetVolumePropertyResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SetVolumePropertyResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void SetVolumePropertyResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& SetVolumePropertyResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& SetVolumePropertyResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetVolumePropertyResponse.Result.status)
  return _internal_status();
}
inline void SetVolumePropertyResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.SetVolumePropertyResponse.Result.status)
}
inline ::grpc_cli::Status* SetVolumePropertyResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* SetVolumePropertyResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetVolumePropertyResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* SetVolumePropertyResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* SetVolumePropertyResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetVolumePropertyResponse.Result.status)
  return _internal_mutable_status();
}
inline void SetVolumePropertyResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetVolumePropertyResponse.Result.status)
}

// -------------------------------------------------------------------

// SetVolumePropertyResponse

// string command = 1;
inline void SetVolumePropertyResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& SetVolumePropertyResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetVolumePropertyResponse.command)
  return _internal_command();
}
inline void SetVolumePropertyResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SetVolumePropertyResponse.command)
}
inline std::string* SetVolumePropertyResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetVolumePropertyResponse.command)
  return _internal_mutable_command();
}
inline const std::string& SetVolumePropertyResponse::_internal_command() const {
  return command_.Get();
}
inline void SetVolumePropertyResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetVolumePropertyResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SetVolumePropertyResponse.command)
}
inline void SetVolumePropertyResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SetVolumePropertyResponse.command)
}
inline void SetVolumePropertyResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SetVolumePropertyResponse.command)
}
inline std::string* SetVolumePropertyResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetVolumePropertyResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetVolumePropertyResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetVolumePropertyResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetVolumePropertyResponse.command)
}

// string rid = 2;
inline void SetVolumePropertyResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& SetVolumePropertyResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetVolumePropertyResponse.rid)
  return _internal_rid();
}
inline void SetVolumePropertyResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SetVolumePropertyResponse.rid)
}
inline std::string* SetVolumePropertyResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetVolumePropertyResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& SetVolumePropertyResponse::_internal_rid() const {
  return rid_.Get();
}
inline void SetVolumePropertyResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetVolumePropertyResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SetVolumePropertyResponse.rid)
}
inline void SetVolumePropertyResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SetVolumePropertyResponse.rid)
}
inline void SetVolumePropertyResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SetVolumePropertyResponse.rid)
}
inline std::string* SetVolumePropertyResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetVolumePropertyResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetVolumePropertyResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetVolumePropertyResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetVolumePropertyResponse.rid)
}

// .grpc_cli.SetVolumePropertyResponse.Result result = 3;
inline bool SetVolumePropertyResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool SetVolumePropertyResponse::has_result() const {
  return _internal_has_result();
}
inline void SetVolumePropertyResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::SetVolumePropertyResponse_Result& SetVolumePropertyResponse::_internal_result() const {
  const ::grpc_cli::SetVolumePropertyResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::SetVolumePropertyResponse_Result&>(
      ::grpc_cli::_SetVolumePropertyResponse_Result_default_instance_);
}
inline const ::grpc_cli::SetVolumePropertyResponse_Result& SetVolumePropertyResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetVolumePropertyResponse.result)
  return _internal_result();
}
inline void SetVolumePropertyResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::SetVolumePropertyResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.SetVolumePropertyResponse.result)
}
inline ::grpc_cli::SetVolumePropertyResponse_Result* SetVolumePropertyResponse::release_result() {
  
  ::grpc_cli::SetVolumePropertyResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::SetVolumePropertyResponse_Result* SetVolumePropertyResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetVolumePropertyResponse.result)
  
  ::grpc_cli::SetVolumePropertyResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::SetVolumePropertyResponse_Result* SetVolumePropertyResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::SetVolumePropertyResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::SetVolumePropertyResponse_Result* SetVolumePropertyResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetVolumePropertyResponse.result)
  return _internal_mutable_result();
}
inline void SetVolumePropertyResponse::set_allocated_result(::grpc_cli::SetVolumePropertyResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetVolumePropertyResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool SetVolumePropertyResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool SetVolumePropertyResponse::has_info() const {
  return _internal_has_info();
}
inline void SetVolumePropertyResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& SetVolumePropertyResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& SetVolumePropertyResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetVolumePropertyResponse.info)
  return _internal_info();
}
inline void SetVolumePropertyResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.SetVolumePropertyResponse.info)
}
inline ::grpc_cli::PosInfo* SetVolumePropertyResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* SetVolumePropertyResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetVolumePropertyResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* SetVolumePropertyResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* SetVolumePropertyResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetVolumePropertyResponse.info)
  return _internal_mutable_info();
}
inline void SetVolumePropertyResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetVolumePropertyResponse.info)
}

// -------------------------------------------------------------------

// Volume

// string name = 1;
inline void Volume::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Volume::name() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Volume.name)
  return _internal_name();
}
inline void Volume::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Volume.name)
}
inline std::string* Volume::mutable_name() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Volume.name)
  return _internal_mutable_name();
}
inline const std::string& Volume::_internal_name() const {
  return name_.Get();
}
inline void Volume::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Volume::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Volume.name)
}
inline void Volume::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Volume.name)
}
inline void Volume::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Volume.name)
}
inline std::string* Volume::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Volume::release_name() {
  // @@protoc_insertion_point(field_release:grpc_cli.Volume.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Volume::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Volume.name)
}

// int32 index = 2;
inline void Volume::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Volume::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Volume::index() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Volume.index)
  return _internal_index();
}
inline void Volume::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
}
inline void Volume::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Volume.index)
}

// uint64 total = 3;
inline void Volume::clear_total() {
  total_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Volume::_internal_total() const {
  return total_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Volume::total() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Volume.total)
  return _internal_total();
}
inline void Volume::_internal_set_total(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  total_ = value;
}
inline void Volume::set_total(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Volume.total)
}

// uint64 remain = 4;
inline void Volume::clear_remain() {
  remain_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Volume::_internal_remain() const {
  return remain_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Volume::remain() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Volume.remain)
  return _internal_remain();
}
inline void Volume::_internal_set_remain(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  remain_ = value;
}
inline void Volume::set_remain(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_remain(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Volume.remain)
}

// string status = 5;
inline void Volume::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& Volume::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Volume.status)
  return _internal_status();
}
inline void Volume::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Volume.status)
}
inline std::string* Volume::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Volume.status)
  return _internal_mutable_status();
}
inline const std::string& Volume::_internal_status() const {
  return status_.Get();
}
inline void Volume::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Volume::set_status(std::string&& value) {
  
  status_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Volume.status)
}
inline void Volume::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Volume.status)
}
inline void Volume::set_status(const char* value,
    size_t size) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Volume.status)
}
inline std::string* Volume::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Volume::release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.Volume.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Volume::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Volume.status)
}

// uint64 maxiops = 6;
inline void Volume::clear_maxiops() {
  maxiops_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Volume::_internal_maxiops() const {
  return maxiops_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Volume::maxiops() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Volume.maxiops)
  return _internal_maxiops();
}
inline void Volume::_internal_set_maxiops(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  maxiops_ = value;
}
inline void Volume::set_maxiops(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_maxiops(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Volume.maxiops)
}

// uint64 maxbw = 7;
inline void Volume::clear_maxbw() {
  maxbw_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Volume::_internal_maxbw() const {
  return maxbw_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Volume::maxbw() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Volume.maxbw)
  return _internal_maxbw();
}
inline void Volume::_internal_set_maxbw(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  maxbw_ = value;
}
inline void Volume::set_maxbw(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_maxbw(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Volume.maxbw)
}

// uint64 miniops = 8;
inline void Volume::clear_miniops() {
  miniops_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Volume::_internal_miniops() const {
  return miniops_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Volume::miniops() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Volume.miniops)
  return _internal_miniops();
}
inline void Volume::_internal_set_miniops(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  miniops_ = value;
}
inline void Volume::set_miniops(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_miniops(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Volume.miniops)
}

// uint64 minbw = 9;
inline void Volume::clear_minbw() {
  minbw_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Volume::_internal_minbw() const {
  return minbw_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Volume::minbw() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Volume.minbw)
  return _internal_minbw();
}
inline void Volume::_internal_set_minbw(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  minbw_ = value;
}
inline void Volume::set_minbw(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_minbw(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Volume.minbw)
}

// string subnqn = 10;
inline void Volume::clear_subnqn() {
  subnqn_.ClearToEmpty();
}
inline const std::string& Volume::subnqn() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Volume.subnqn)
  return _internal_subnqn();
}
inline void Volume::set_subnqn(const std::string& value) {
  _internal_set_subnqn(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Volume.subnqn)
}
inline std::string* Volume::mutable_subnqn() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Volume.subnqn)
  return _internal_mutable_subnqn();
}
inline const std::string& Volume::_internal_subnqn() const {
  return subnqn_.Get();
}
inline void Volume::_internal_set_subnqn(const std::string& value) {
  
  subnqn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Volume::set_subnqn(std::string&& value) {
  
  subnqn_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Volume.subnqn)
}
inline void Volume::set_subnqn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subnqn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Volume.subnqn)
}
inline void Volume::set_subnqn(const char* value,
    size_t size) {
  
  subnqn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Volume.subnqn)
}
inline std::string* Volume::_internal_mutable_subnqn() {
  
  return subnqn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Volume::release_subnqn() {
  // @@protoc_insertion_point(field_release:grpc_cli.Volume.subnqn)
  return subnqn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Volume::set_allocated_subnqn(std::string* subnqn) {
  if (subnqn != nullptr) {
    
  } else {
    
  }
  subnqn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subnqn,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Volume.subnqn)
}

// string uuid = 11;
inline void Volume::clear_uuid() {
  uuid_.ClearToEmpty();
}
inline const std::string& Volume::uuid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Volume.uuid)
  return _internal_uuid();
}
inline void Volume::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Volume.uuid)
}
inline std::string* Volume::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Volume.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& Volume::_internal_uuid() const {
  return uuid_.Get();
}
inline void Volume::_internal_set_uuid(const std::string& value) {
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Volume::set_uuid(std::string&& value) {
  
  uuid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Volume.uuid)
}
inline void Volume::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Volume.uuid)
}
inline void Volume::set_uuid(const char* value,
    size_t size) {
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Volume.uuid)
}
inline std::string* Volume::_internal_mutable_uuid() {
  
  return uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Volume::release_uuid() {
  // @@protoc_insertion_point(field_release:grpc_cli.Volume.uuid)
  return uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Volume::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Volume.uuid)
}

// string arrayname = 12;
inline void Volume::clear_arrayname() {
  arrayname_.ClearToEmpty();
}
inline const std::string& Volume::arrayname() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Volume.arrayname)
  return _internal_arrayname();
}
inline void Volume::set_arrayname(const std::string& value) {
  _internal_set_arrayname(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Volume.arrayname)
}
inline std::string* Volume::mutable_arrayname() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Volume.arrayname)
  return _internal_mutable_arrayname();
}
inline const std::string& Volume::_internal_arrayname() const {
  return arrayname_.Get();
}
inline void Volume::_internal_set_arrayname(const std::string& value) {
  
  arrayname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Volume::set_arrayname(std::string&& value) {
  
  arrayname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Volume.arrayname)
}
inline void Volume::set_arrayname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  arrayname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Volume.arrayname)
}
inline void Volume::set_arrayname(const char* value,
    size_t size) {
  
  arrayname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Volume.arrayname)
}
inline std::string* Volume::_internal_mutable_arrayname() {
  
  return arrayname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Volume::release_arrayname() {
  // @@protoc_insertion_point(field_release:grpc_cli.Volume.arrayname)
  return arrayname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Volume::set_allocated_arrayname(std::string* arrayname) {
  if (arrayname != nullptr) {
    
  } else {
    
  }
  arrayname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), arrayname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Volume.arrayname)
}

// -------------------------------------------------------------------

// ListVolumeRequest_Param

// string array = 1;
inline void ListVolumeRequest_Param::clear_array() {
  array_.ClearToEmpty();
}
inline const std::string& ListVolumeRequest_Param::array() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListVolumeRequest.Param.array)
  return _internal_array();
}
inline void ListVolumeRequest_Param::set_array(const std::string& value) {
  _internal_set_array(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListVolumeRequest.Param.array)
}
inline std::string* ListVolumeRequest_Param::mutable_array() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListVolumeRequest.Param.array)
  return _internal_mutable_array();
}
inline const std::string& ListVolumeRequest_Param::_internal_array() const {
  return array_.Get();
}
inline void ListVolumeRequest_Param::_internal_set_array(const std::string& value) {
  
  array_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListVolumeRequest_Param::set_array(std::string&& value) {
  
  array_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListVolumeRequest.Param.array)
}
inline void ListVolumeRequest_Param::set_array(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  array_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListVolumeRequest.Param.array)
}
inline void ListVolumeRequest_Param::set_array(const char* value,
    size_t size) {
  
  array_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListVolumeRequest.Param.array)
}
inline std::string* ListVolumeRequest_Param::_internal_mutable_array() {
  
  return array_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListVolumeRequest_Param::release_array() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListVolumeRequest.Param.array)
  return array_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListVolumeRequest_Param::set_allocated_array(std::string* array) {
  if (array != nullptr) {
    
  } else {
    
  }
  array_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), array,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListVolumeRequest.Param.array)
}

// -------------------------------------------------------------------

// ListVolumeRequest

// string command = 1;
inline void ListVolumeRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& ListVolumeRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListVolumeRequest.command)
  return _internal_command();
}
inline void ListVolumeRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListVolumeRequest.command)
}
inline std::string* ListVolumeRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListVolumeRequest.command)
  return _internal_mutable_command();
}
inline const std::string& ListVolumeRequest::_internal_command() const {
  return command_.Get();
}
inline void ListVolumeRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListVolumeRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListVolumeRequest.command)
}
inline void ListVolumeRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListVolumeRequest.command)
}
inline void ListVolumeRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListVolumeRequest.command)
}
inline std::string* ListVolumeRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListVolumeRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListVolumeRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListVolumeRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListVolumeRequest.command)
}

// string rid = 2;
inline void ListVolumeRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& ListVolumeRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListVolumeRequest.rid)
  return _internal_rid();
}
inline void ListVolumeRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListVolumeRequest.rid)
}
inline std::string* ListVolumeRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListVolumeRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& ListVolumeRequest::_internal_rid() const {
  return rid_.Get();
}
inline void ListVolumeRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListVolumeRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListVolumeRequest.rid)
}
inline void ListVolumeRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListVolumeRequest.rid)
}
inline void ListVolumeRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListVolumeRequest.rid)
}
inline std::string* ListVolumeRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListVolumeRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListVolumeRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListVolumeRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListVolumeRequest.rid)
}

// string requestor = 3;
inline void ListVolumeRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& ListVolumeRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListVolumeRequest.requestor)
  return _internal_requestor();
}
inline void ListVolumeRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListVolumeRequest.requestor)
}
inline std::string* ListVolumeRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListVolumeRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& ListVolumeRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void ListVolumeRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListVolumeRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListVolumeRequest.requestor)
}
inline void ListVolumeRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListVolumeRequest.requestor)
}
inline void ListVolumeRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListVolumeRequest.requestor)
}
inline std::string* ListVolumeRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListVolumeRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListVolumeRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListVolumeRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListVolumeRequest.requestor)
}

// .grpc_cli.ListVolumeRequest.Param param = 4;
inline bool ListVolumeRequest::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool ListVolumeRequest::has_param() const {
  return _internal_has_param();
}
inline void ListVolumeRequest::clear_param() {
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::grpc_cli::ListVolumeRequest_Param& ListVolumeRequest::_internal_param() const {
  const ::grpc_cli::ListVolumeRequest_Param* p = param_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::ListVolumeRequest_Param&>(
      ::grpc_cli::_ListVolumeRequest_Param_default_instance_);
}
inline const ::grpc_cli::ListVolumeRequest_Param& ListVolumeRequest::param() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListVolumeRequest.param)
  return _internal_param();
}
inline void ListVolumeRequest::unsafe_arena_set_allocated_param(
    ::grpc_cli::ListVolumeRequest_Param* param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ListVolumeRequest.param)
}
inline ::grpc_cli::ListVolumeRequest_Param* ListVolumeRequest::release_param() {
  
  ::grpc_cli::ListVolumeRequest_Param* temp = param_;
  param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::ListVolumeRequest_Param* ListVolumeRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListVolumeRequest.param)
  
  ::grpc_cli::ListVolumeRequest_Param* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::grpc_cli::ListVolumeRequest_Param* ListVolumeRequest::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::ListVolumeRequest_Param>(GetArena());
    param_ = p;
  }
  return param_;
}
inline ::grpc_cli::ListVolumeRequest_Param* ListVolumeRequest::mutable_param() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListVolumeRequest.param)
  return _internal_mutable_param();
}
inline void ListVolumeRequest::set_allocated_param(::grpc_cli::ListVolumeRequest_Param* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListVolumeRequest.param)
}

// -------------------------------------------------------------------

// ListVolumeResponse_Result_VolumeList

// repeated .grpc_cli.Volume volumes = 1;
inline int ListVolumeResponse_Result_VolumeList::_internal_volumes_size() const {
  return volumes_.size();
}
inline int ListVolumeResponse_Result_VolumeList::volumes_size() const {
  return _internal_volumes_size();
}
inline void ListVolumeResponse_Result_VolumeList::clear_volumes() {
  volumes_.Clear();
}
inline ::grpc_cli::Volume* ListVolumeResponse_Result_VolumeList::mutable_volumes(int index) {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListVolumeResponse.Result.VolumeList.volumes)
  return volumes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::Volume >*
ListVolumeResponse_Result_VolumeList::mutable_volumes() {
  // @@protoc_insertion_point(field_mutable_list:grpc_cli.ListVolumeResponse.Result.VolumeList.volumes)
  return &volumes_;
}
inline const ::grpc_cli::Volume& ListVolumeResponse_Result_VolumeList::_internal_volumes(int index) const {
  return volumes_.Get(index);
}
inline const ::grpc_cli::Volume& ListVolumeResponse_Result_VolumeList::volumes(int index) const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListVolumeResponse.Result.VolumeList.volumes)
  return _internal_volumes(index);
}
inline ::grpc_cli::Volume* ListVolumeResponse_Result_VolumeList::_internal_add_volumes() {
  return volumes_.Add();
}
inline ::grpc_cli::Volume* ListVolumeResponse_Result_VolumeList::add_volumes() {
  // @@protoc_insertion_point(field_add:grpc_cli.ListVolumeResponse.Result.VolumeList.volumes)
  return _internal_add_volumes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::Volume >&
ListVolumeResponse_Result_VolumeList::volumes() const {
  // @@protoc_insertion_point(field_list:grpc_cli.ListVolumeResponse.Result.VolumeList.volumes)
  return volumes_;
}

// -------------------------------------------------------------------

// ListVolumeResponse_Result

// .grpc_cli.Status status = 1;
inline bool ListVolumeResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool ListVolumeResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void ListVolumeResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& ListVolumeResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& ListVolumeResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListVolumeResponse.Result.status)
  return _internal_status();
}
inline void ListVolumeResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ListVolumeResponse.Result.status)
}
inline ::grpc_cli::Status* ListVolumeResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* ListVolumeResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListVolumeResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* ListVolumeResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* ListVolumeResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListVolumeResponse.Result.status)
  return _internal_mutable_status();
}
inline void ListVolumeResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListVolumeResponse.Result.status)
}

// .grpc_cli.ListVolumeResponse.Result.VolumeList data = 2;
inline bool ListVolumeResponse_Result::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool ListVolumeResponse_Result::has_data() const {
  return _internal_has_data();
}
inline void ListVolumeResponse_Result::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::grpc_cli::ListVolumeResponse_Result_VolumeList& ListVolumeResponse_Result::_internal_data() const {
  const ::grpc_cli::ListVolumeResponse_Result_VolumeList* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::ListVolumeResponse_Result_VolumeList&>(
      ::grpc_cli::_ListVolumeResponse_Result_VolumeList_default_instance_);
}
inline const ::grpc_cli::ListVolumeResponse_Result_VolumeList& ListVolumeResponse_Result::data() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListVolumeResponse.Result.data)
  return _internal_data();
}
inline void ListVolumeResponse_Result::unsafe_arena_set_allocated_data(
    ::grpc_cli::ListVolumeResponse_Result_VolumeList* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ListVolumeResponse.Result.data)
}
inline ::grpc_cli::ListVolumeResponse_Result_VolumeList* ListVolumeResponse_Result::release_data() {
  
  ::grpc_cli::ListVolumeResponse_Result_VolumeList* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::ListVolumeResponse_Result_VolumeList* ListVolumeResponse_Result::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListVolumeResponse.Result.data)
  
  ::grpc_cli::ListVolumeResponse_Result_VolumeList* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::grpc_cli::ListVolumeResponse_Result_VolumeList* ListVolumeResponse_Result::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::ListVolumeResponse_Result_VolumeList>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::grpc_cli::ListVolumeResponse_Result_VolumeList* ListVolumeResponse_Result::mutable_data() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListVolumeResponse.Result.data)
  return _internal_mutable_data();
}
inline void ListVolumeResponse_Result::set_allocated_data(::grpc_cli::ListVolumeResponse_Result_VolumeList* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListVolumeResponse.Result.data)
}

// -------------------------------------------------------------------

// ListVolumeResponse

// string command = 1;
inline void ListVolumeResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& ListVolumeResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListVolumeResponse.command)
  return _internal_command();
}
inline void ListVolumeResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListVolumeResponse.command)
}
inline std::string* ListVolumeResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListVolumeResponse.command)
  return _internal_mutable_command();
}
inline const std::string& ListVolumeResponse::_internal_command() const {
  return command_.Get();
}
inline void ListVolumeResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListVolumeResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListVolumeResponse.command)
}
inline void ListVolumeResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListVolumeResponse.command)
}
inline void ListVolumeResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListVolumeResponse.command)
}
inline std::string* ListVolumeResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListVolumeResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListVolumeResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListVolumeResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListVolumeResponse.command)
}

// string rid = 2;
inline void ListVolumeResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& ListVolumeResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListVolumeResponse.rid)
  return _internal_rid();
}
inline void ListVolumeResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListVolumeResponse.rid)
}
inline std::string* ListVolumeResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListVolumeResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& ListVolumeResponse::_internal_rid() const {
  return rid_.Get();
}
inline void ListVolumeResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListVolumeResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListVolumeResponse.rid)
}
inline void ListVolumeResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListVolumeResponse.rid)
}
inline void ListVolumeResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListVolumeResponse.rid)
}
inline std::string* ListVolumeResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListVolumeResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListVolumeResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListVolumeResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListVolumeResponse.rid)
}

// .grpc_cli.ListVolumeResponse.Result result = 3;
inline bool ListVolumeResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool ListVolumeResponse::has_result() const {
  return _internal_has_result();
}
inline void ListVolumeResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::ListVolumeResponse_Result& ListVolumeResponse::_internal_result() const {
  const ::grpc_cli::ListVolumeResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::ListVolumeResponse_Result&>(
      ::grpc_cli::_ListVolumeResponse_Result_default_instance_);
}
inline const ::grpc_cli::ListVolumeResponse_Result& ListVolumeResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListVolumeResponse.result)
  return _internal_result();
}
inline void ListVolumeResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::ListVolumeResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ListVolumeResponse.result)
}
inline ::grpc_cli::ListVolumeResponse_Result* ListVolumeResponse::release_result() {
  
  ::grpc_cli::ListVolumeResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::ListVolumeResponse_Result* ListVolumeResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListVolumeResponse.result)
  
  ::grpc_cli::ListVolumeResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::ListVolumeResponse_Result* ListVolumeResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::ListVolumeResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::ListVolumeResponse_Result* ListVolumeResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListVolumeResponse.result)
  return _internal_mutable_result();
}
inline void ListVolumeResponse::set_allocated_result(::grpc_cli::ListVolumeResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListVolumeResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool ListVolumeResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool ListVolumeResponse::has_info() const {
  return _internal_has_info();
}
inline void ListVolumeResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& ListVolumeResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& ListVolumeResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListVolumeResponse.info)
  return _internal_info();
}
inline void ListVolumeResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ListVolumeResponse.info)
}
inline ::grpc_cli::PosInfo* ListVolumeResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* ListVolumeResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListVolumeResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* ListVolumeResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* ListVolumeResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListVolumeResponse.info)
  return _internal_mutable_info();
}
inline void ListVolumeResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListVolumeResponse.info)
}

// -------------------------------------------------------------------

// QosVolumeNameParam

// string volumeName = 1;
inline void QosVolumeNameParam::clear_volumename() {
  volumename_.ClearToEmpty();
}
inline const std::string& QosVolumeNameParam::volumename() const {
  // @@protoc_insertion_point(field_get:grpc_cli.QosVolumeNameParam.volumeName)
  return _internal_volumename();
}
inline void QosVolumeNameParam::set_volumename(const std::string& value) {
  _internal_set_volumename(value);
  // @@protoc_insertion_point(field_set:grpc_cli.QosVolumeNameParam.volumeName)
}
inline std::string* QosVolumeNameParam::mutable_volumename() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.QosVolumeNameParam.volumeName)
  return _internal_mutable_volumename();
}
inline const std::string& QosVolumeNameParam::_internal_volumename() const {
  return volumename_.Get();
}
inline void QosVolumeNameParam::_internal_set_volumename(const std::string& value) {
  
  volumename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void QosVolumeNameParam::set_volumename(std::string&& value) {
  
  volumename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.QosVolumeNameParam.volumeName)
}
inline void QosVolumeNameParam::set_volumename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  volumename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.QosVolumeNameParam.volumeName)
}
inline void QosVolumeNameParam::set_volumename(const char* value,
    size_t size) {
  
  volumename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.QosVolumeNameParam.volumeName)
}
inline std::string* QosVolumeNameParam::_internal_mutable_volumename() {
  
  return volumename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* QosVolumeNameParam::release_volumename() {
  // @@protoc_insertion_point(field_release:grpc_cli.QosVolumeNameParam.volumeName)
  return volumename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QosVolumeNameParam::set_allocated_volumename(std::string* volumename) {
  if (volumename != nullptr) {
    
  } else {
    
  }
  volumename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), volumename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.QosVolumeNameParam.volumeName)
}

// -------------------------------------------------------------------

// QosCreateVolumePolicyRequest_Param

// string array = 1;
inline void QosCreateVolumePolicyRequest_Param::clear_array() {
  array_.ClearToEmpty();
}
inline const std::string& QosCreateVolumePolicyRequest_Param::array() const {
  // @@protoc_insertion_point(field_get:grpc_cli.QosCreateVolumePolicyRequest.Param.array)
  return _internal_array();
}
inline void QosCreateVolumePolicyRequest_Param::set_array(const std::string& value) {
  _internal_set_array(value);
  // @@protoc_insertion_point(field_set:grpc_cli.QosCreateVolumePolicyRequest.Param.array)
}
inline std::string* QosCreateVolumePolicyRequest_Param::mutable_array() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.QosCreateVolumePolicyRequest.Param.array)
  return _internal_mutable_array();
}
inline const std::string& QosCreateVolumePolicyRequest_Param::_internal_array() const {
  return array_.Get();
}
inline void QosCreateVolumePolicyRequest_Param::_internal_set_array(const std::string& value) {
  
  array_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void QosCreateVolumePolicyRequest_Param::set_array(std::string&& value) {
  
  array_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.QosCreateVolumePolicyRequest.Param.array)
}
inline void QosCreateVolumePolicyRequest_Param::set_array(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  array_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.QosCreateVolumePolicyRequest.Param.array)
}
inline void QosCreateVolumePolicyRequest_Param::set_array(const char* value,
    size_t size) {
  
  array_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.QosCreateVolumePolicyRequest.Param.array)
}
inline std::string* QosCreateVolumePolicyRequest_Param::_internal_mutable_array() {
  
  return array_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* QosCreateVolumePolicyRequest_Param::release_array() {
  // @@protoc_insertion_point(field_release:grpc_cli.QosCreateVolumePolicyRequest.Param.array)
  return array_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QosCreateVolumePolicyRequest_Param::set_allocated_array(std::string* array) {
  if (array != nullptr) {
    
  } else {
    
  }
  array_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), array,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.QosCreateVolumePolicyRequest.Param.array)
}

// repeated .grpc_cli.QosVolumeNameParam vol = 2;
inline int QosCreateVolumePolicyRequest_Param::_internal_vol_size() const {
  return vol_.size();
}
inline int QosCreateVolumePolicyRequest_Param::vol_size() const {
  return _internal_vol_size();
}
inline void QosCreateVolumePolicyRequest_Param::clear_vol() {
  vol_.Clear();
}
inline ::grpc_cli::QosVolumeNameParam* QosCreateVolumePolicyRequest_Param::mutable_vol(int index) {
  // @@protoc_insertion_point(field_mutable:grpc_cli.QosCreateVolumePolicyRequest.Param.vol)
  return vol_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::QosVolumeNameParam >*
QosCreateVolumePolicyRequest_Param::mutable_vol() {
  // @@protoc_insertion_point(field_mutable_list:grpc_cli.QosCreateVolumePolicyRequest.Param.vol)
  return &vol_;
}
inline const ::grpc_cli::QosVolumeNameParam& QosCreateVolumePolicyRequest_Param::_internal_vol(int index) const {
  return vol_.Get(index);
}
inline const ::grpc_cli::QosVolumeNameParam& QosCreateVolumePolicyRequest_Param::vol(int index) const {
  // @@protoc_insertion_point(field_get:grpc_cli.QosCreateVolumePolicyRequest.Param.vol)
  return _internal_vol(index);
}
inline ::grpc_cli::QosVolumeNameParam* QosCreateVolumePolicyRequest_Param::_internal_add_vol() {
  return vol_.Add();
}
inline ::grpc_cli::QosVolumeNameParam* QosCreateVolumePolicyRequest_Param::add_vol() {
  // @@protoc_insertion_point(field_add:grpc_cli.QosCreateVolumePolicyRequest.Param.vol)
  return _internal_add_vol();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::QosVolumeNameParam >&
QosCreateVolumePolicyRequest_Param::vol() const {
  // @@protoc_insertion_point(field_list:grpc_cli.QosCreateVolumePolicyRequest.Param.vol)
  return vol_;
}

// int64 minbw = 3;
inline void QosCreateVolumePolicyRequest_Param::clear_minbw() {
  minbw_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QosCreateVolumePolicyRequest_Param::_internal_minbw() const {
  return minbw_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QosCreateVolumePolicyRequest_Param::minbw() const {
  // @@protoc_insertion_point(field_get:grpc_cli.QosCreateVolumePolicyRequest.Param.minbw)
  return _internal_minbw();
}
inline void QosCreateVolumePolicyRequest_Param::_internal_set_minbw(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  minbw_ = value;
}
inline void QosCreateVolumePolicyRequest_Param::set_minbw(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_minbw(value);
  // @@protoc_insertion_point(field_set:grpc_cli.QosCreateVolumePolicyRequest.Param.minbw)
}

// int64 miniops = 4;
inline void QosCreateVolumePolicyRequest_Param::clear_miniops() {
  miniops_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QosCreateVolumePolicyRequest_Param::_internal_miniops() const {
  return miniops_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QosCreateVolumePolicyRequest_Param::miniops() const {
  // @@protoc_insertion_point(field_get:grpc_cli.QosCreateVolumePolicyRequest.Param.miniops)
  return _internal_miniops();
}
inline void QosCreateVolumePolicyRequest_Param::_internal_set_miniops(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  miniops_ = value;
}
inline void QosCreateVolumePolicyRequest_Param::set_miniops(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_miniops(value);
  // @@protoc_insertion_point(field_set:grpc_cli.QosCreateVolumePolicyRequest.Param.miniops)
}

// int64 maxbw = 5;
inline void QosCreateVolumePolicyRequest_Param::clear_maxbw() {
  maxbw_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QosCreateVolumePolicyRequest_Param::_internal_maxbw() const {
  return maxbw_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QosCreateVolumePolicyRequest_Param::maxbw() const {
  // @@protoc_insertion_point(field_get:grpc_cli.QosCreateVolumePolicyRequest.Param.maxbw)
  return _internal_maxbw();
}
inline void QosCreateVolumePolicyRequest_Param::_internal_set_maxbw(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  maxbw_ = value;
}
inline void QosCreateVolumePolicyRequest_Param::set_maxbw(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_maxbw(value);
  // @@protoc_insertion_point(field_set:grpc_cli.QosCreateVolumePolicyRequest.Param.maxbw)
}

// int64 maxiops = 6;
inline void QosCreateVolumePolicyRequest_Param::clear_maxiops() {
  maxiops_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QosCreateVolumePolicyRequest_Param::_internal_maxiops() const {
  return maxiops_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QosCreateVolumePolicyRequest_Param::maxiops() const {
  // @@protoc_insertion_point(field_get:grpc_cli.QosCreateVolumePolicyRequest.Param.maxiops)
  return _internal_maxiops();
}
inline void QosCreateVolumePolicyRequest_Param::_internal_set_maxiops(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  maxiops_ = value;
}
inline void QosCreateVolumePolicyRequest_Param::set_maxiops(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_maxiops(value);
  // @@protoc_insertion_point(field_set:grpc_cli.QosCreateVolumePolicyRequest.Param.maxiops)
}

// -------------------------------------------------------------------

// QosCreateVolumePolicyRequest

// string command = 1;
inline void QosCreateVolumePolicyRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& QosCreateVolumePolicyRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.QosCreateVolumePolicyRequest.command)
  return _internal_command();
}
inline void QosCreateVolumePolicyRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.QosCreateVolumePolicyRequest.command)
}
inline std::string* QosCreateVolumePolicyRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.QosCreateVolumePolicyRequest.command)
  return _internal_mutable_command();
}
inline const std::string& QosCreateVolumePolicyRequest::_internal_command() const {
  return command_.Get();
}
inline void QosCreateVolumePolicyRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void QosCreateVolumePolicyRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.QosCreateVolumePolicyRequest.command)
}
inline void QosCreateVolumePolicyRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.QosCreateVolumePolicyRequest.command)
}
inline void QosCreateVolumePolicyRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.QosCreateVolumePolicyRequest.command)
}
inline std::string* QosCreateVolumePolicyRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* QosCreateVolumePolicyRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.QosCreateVolumePolicyRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QosCreateVolumePolicyRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.QosCreateVolumePolicyRequest.command)
}

// string rid = 2;
inline void QosCreateVolumePolicyRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& QosCreateVolumePolicyRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.QosCreateVolumePolicyRequest.rid)
  return _internal_rid();
}
inline void QosCreateVolumePolicyRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.QosCreateVolumePolicyRequest.rid)
}
inline std::string* QosCreateVolumePolicyRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.QosCreateVolumePolicyRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& QosCreateVolumePolicyRequest::_internal_rid() const {
  return rid_.Get();
}
inline void QosCreateVolumePolicyRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void QosCreateVolumePolicyRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.QosCreateVolumePolicyRequest.rid)
}
inline void QosCreateVolumePolicyRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.QosCreateVolumePolicyRequest.rid)
}
inline void QosCreateVolumePolicyRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.QosCreateVolumePolicyRequest.rid)
}
inline std::string* QosCreateVolumePolicyRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* QosCreateVolumePolicyRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.QosCreateVolumePolicyRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QosCreateVolumePolicyRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.QosCreateVolumePolicyRequest.rid)
}

// string requestor = 3;
inline void QosCreateVolumePolicyRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& QosCreateVolumePolicyRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.QosCreateVolumePolicyRequest.requestor)
  return _internal_requestor();
}
inline void QosCreateVolumePolicyRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.QosCreateVolumePolicyRequest.requestor)
}
inline std::string* QosCreateVolumePolicyRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.QosCreateVolumePolicyRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& QosCreateVolumePolicyRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void QosCreateVolumePolicyRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void QosCreateVolumePolicyRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.QosCreateVolumePolicyRequest.requestor)
}
inline void QosCreateVolumePolicyRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.QosCreateVolumePolicyRequest.requestor)
}
inline void QosCreateVolumePolicyRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.QosCreateVolumePolicyRequest.requestor)
}
inline std::string* QosCreateVolumePolicyRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* QosCreateVolumePolicyRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.QosCreateVolumePolicyRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QosCreateVolumePolicyRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.QosCreateVolumePolicyRequest.requestor)
}

// .grpc_cli.QosCreateVolumePolicyRequest.Param param = 4;
inline bool QosCreateVolumePolicyRequest::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool QosCreateVolumePolicyRequest::has_param() const {
  return _internal_has_param();
}
inline void QosCreateVolumePolicyRequest::clear_param() {
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::grpc_cli::QosCreateVolumePolicyRequest_Param& QosCreateVolumePolicyRequest::_internal_param() const {
  const ::grpc_cli::QosCreateVolumePolicyRequest_Param* p = param_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::QosCreateVolumePolicyRequest_Param&>(
      ::grpc_cli::_QosCreateVolumePolicyRequest_Param_default_instance_);
}
inline const ::grpc_cli::QosCreateVolumePolicyRequest_Param& QosCreateVolumePolicyRequest::param() const {
  // @@protoc_insertion_point(field_get:grpc_cli.QosCreateVolumePolicyRequest.param)
  return _internal_param();
}
inline void QosCreateVolumePolicyRequest::unsafe_arena_set_allocated_param(
    ::grpc_cli::QosCreateVolumePolicyRequest_Param* param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.QosCreateVolumePolicyRequest.param)
}
inline ::grpc_cli::QosCreateVolumePolicyRequest_Param* QosCreateVolumePolicyRequest::release_param() {
  
  ::grpc_cli::QosCreateVolumePolicyRequest_Param* temp = param_;
  param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::QosCreateVolumePolicyRequest_Param* QosCreateVolumePolicyRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:grpc_cli.QosCreateVolumePolicyRequest.param)
  
  ::grpc_cli::QosCreateVolumePolicyRequest_Param* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::grpc_cli::QosCreateVolumePolicyRequest_Param* QosCreateVolumePolicyRequest::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::QosCreateVolumePolicyRequest_Param>(GetArena());
    param_ = p;
  }
  return param_;
}
inline ::grpc_cli::QosCreateVolumePolicyRequest_Param* QosCreateVolumePolicyRequest::mutable_param() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.QosCreateVolumePolicyRequest.param)
  return _internal_mutable_param();
}
inline void QosCreateVolumePolicyRequest::set_allocated_param(::grpc_cli::QosCreateVolumePolicyRequest_Param* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.QosCreateVolumePolicyRequest.param)
}

// -------------------------------------------------------------------

// QosCreateVolumePolicyResponse_Result

// .grpc_cli.Status status = 1;
inline bool QosCreateVolumePolicyResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool QosCreateVolumePolicyResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void QosCreateVolumePolicyResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& QosCreateVolumePolicyResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& QosCreateVolumePolicyResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.QosCreateVolumePolicyResponse.Result.status)
  return _internal_status();
}
inline void QosCreateVolumePolicyResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.QosCreateVolumePolicyResponse.Result.status)
}
inline ::grpc_cli::Status* QosCreateVolumePolicyResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* QosCreateVolumePolicyResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.QosCreateVolumePolicyResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* QosCreateVolumePolicyResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* QosCreateVolumePolicyResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.QosCreateVolumePolicyResponse.Result.status)
  return _internal_mutable_status();
}
inline void QosCreateVolumePolicyResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.QosCreateVolumePolicyResponse.Result.status)
}

// -------------------------------------------------------------------

// QosCreateVolumePolicyResponse

// string command = 1;
inline void QosCreateVolumePolicyResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& QosCreateVolumePolicyResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.QosCreateVolumePolicyResponse.command)
  return _internal_command();
}
inline void QosCreateVolumePolicyResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.QosCreateVolumePolicyResponse.command)
}
inline std::string* QosCreateVolumePolicyResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.QosCreateVolumePolicyResponse.command)
  return _internal_mutable_command();
}
inline const std::string& QosCreateVolumePolicyResponse::_internal_command() const {
  return command_.Get();
}
inline void QosCreateVolumePolicyResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void QosCreateVolumePolicyResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.QosCreateVolumePolicyResponse.command)
}
inline void QosCreateVolumePolicyResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.QosCreateVolumePolicyResponse.command)
}
inline void QosCreateVolumePolicyResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.QosCreateVolumePolicyResponse.command)
}
inline std::string* QosCreateVolumePolicyResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* QosCreateVolumePolicyResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.QosCreateVolumePolicyResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QosCreateVolumePolicyResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.QosCreateVolumePolicyResponse.command)
}

// string rid = 2;
inline void QosCreateVolumePolicyResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& QosCreateVolumePolicyResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.QosCreateVolumePolicyResponse.rid)
  return _internal_rid();
}
inline void QosCreateVolumePolicyResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.QosCreateVolumePolicyResponse.rid)
}
inline std::string* QosCreateVolumePolicyResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.QosCreateVolumePolicyResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& QosCreateVolumePolicyResponse::_internal_rid() const {
  return rid_.Get();
}
inline void QosCreateVolumePolicyResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void QosCreateVolumePolicyResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.QosCreateVolumePolicyResponse.rid)
}
inline void QosCreateVolumePolicyResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.QosCreateVolumePolicyResponse.rid)
}
inline void QosCreateVolumePolicyResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.QosCreateVolumePolicyResponse.rid)
}
inline std::string* QosCreateVolumePolicyResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* QosCreateVolumePolicyResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.QosCreateVolumePolicyResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QosCreateVolumePolicyResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.QosCreateVolumePolicyResponse.rid)
}

// .grpc_cli.QosCreateVolumePolicyResponse.Result result = 3;
inline bool QosCreateVolumePolicyResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool QosCreateVolumePolicyResponse::has_result() const {
  return _internal_has_result();
}
inline void QosCreateVolumePolicyResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::QosCreateVolumePolicyResponse_Result& QosCreateVolumePolicyResponse::_internal_result() const {
  const ::grpc_cli::QosCreateVolumePolicyResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::QosCreateVolumePolicyResponse_Result&>(
      ::grpc_cli::_QosCreateVolumePolicyResponse_Result_default_instance_);
}
inline const ::grpc_cli::QosCreateVolumePolicyResponse_Result& QosCreateVolumePolicyResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.QosCreateVolumePolicyResponse.result)
  return _internal_result();
}
inline void QosCreateVolumePolicyResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::QosCreateVolumePolicyResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.QosCreateVolumePolicyResponse.result)
}
inline ::grpc_cli::QosCreateVolumePolicyResponse_Result* QosCreateVolumePolicyResponse::release_result() {
  
  ::grpc_cli::QosCreateVolumePolicyResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::QosCreateVolumePolicyResponse_Result* QosCreateVolumePolicyResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.QosCreateVolumePolicyResponse.result)
  
  ::grpc_cli::QosCreateVolumePolicyResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::QosCreateVolumePolicyResponse_Result* QosCreateVolumePolicyResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::QosCreateVolumePolicyResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::QosCreateVolumePolicyResponse_Result* QosCreateVolumePolicyResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.QosCreateVolumePolicyResponse.result)
  return _internal_mutable_result();
}
inline void QosCreateVolumePolicyResponse::set_allocated_result(::grpc_cli::QosCreateVolumePolicyResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.QosCreateVolumePolicyResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool QosCreateVolumePolicyResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool QosCreateVolumePolicyResponse::has_info() const {
  return _internal_has_info();
}
inline void QosCreateVolumePolicyResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& QosCreateVolumePolicyResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& QosCreateVolumePolicyResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.QosCreateVolumePolicyResponse.info)
  return _internal_info();
}
inline void QosCreateVolumePolicyResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.QosCreateVolumePolicyResponse.info)
}
inline ::grpc_cli::PosInfo* QosCreateVolumePolicyResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* QosCreateVolumePolicyResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.QosCreateVolumePolicyResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* QosCreateVolumePolicyResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* QosCreateVolumePolicyResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.QosCreateVolumePolicyResponse.info)
  return _internal_mutable_info();
}
inline void QosCreateVolumePolicyResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.QosCreateVolumePolicyResponse.info)
}

// -------------------------------------------------------------------

// QosResetVolumePolicyRequest_Param

// string array = 1;
inline void QosResetVolumePolicyRequest_Param::clear_array() {
  array_.ClearToEmpty();
}
inline const std::string& QosResetVolumePolicyRequest_Param::array() const {
  // @@protoc_insertion_point(field_get:grpc_cli.QosResetVolumePolicyRequest.Param.array)
  return _internal_array();
}
inline void QosResetVolumePolicyRequest_Param::set_array(const std::string& value) {
  _internal_set_array(value);
  // @@protoc_insertion_point(field_set:grpc_cli.QosResetVolumePolicyRequest.Param.array)
}
inline std::string* QosResetVolumePolicyRequest_Param::mutable_array() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.QosResetVolumePolicyRequest.Param.array)
  return _internal_mutable_array();
}
inline const std::string& QosResetVolumePolicyRequest_Param::_internal_array() const {
  return array_.Get();
}
inline void QosResetVolumePolicyRequest_Param::_internal_set_array(const std::string& value) {
  
  array_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void QosResetVolumePolicyRequest_Param::set_array(std::string&& value) {
  
  array_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.QosResetVolumePolicyRequest.Param.array)
}
inline void QosResetVolumePolicyRequest_Param::set_array(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  array_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.QosResetVolumePolicyRequest.Param.array)
}
inline void QosResetVolumePolicyRequest_Param::set_array(const char* value,
    size_t size) {
  
  array_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.QosResetVolumePolicyRequest.Param.array)
}
inline std::string* QosResetVolumePolicyRequest_Param::_internal_mutable_array() {
  
  return array_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* QosResetVolumePolicyRequest_Param::release_array() {
  // @@protoc_insertion_point(field_release:grpc_cli.QosResetVolumePolicyRequest.Param.array)
  return array_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QosResetVolumePolicyRequest_Param::set_allocated_array(std::string* array) {
  if (array != nullptr) {
    
  } else {
    
  }
  array_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), array,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.QosResetVolumePolicyRequest.Param.array)
}

// repeated .grpc_cli.QosVolumeNameParam vol = 2;
inline int QosResetVolumePolicyRequest_Param::_internal_vol_size() const {
  return vol_.size();
}
inline int QosResetVolumePolicyRequest_Param::vol_size() const {
  return _internal_vol_size();
}
inline void QosResetVolumePolicyRequest_Param::clear_vol() {
  vol_.Clear();
}
inline ::grpc_cli::QosVolumeNameParam* QosResetVolumePolicyRequest_Param::mutable_vol(int index) {
  // @@protoc_insertion_point(field_mutable:grpc_cli.QosResetVolumePolicyRequest.Param.vol)
  return vol_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::QosVolumeNameParam >*
QosResetVolumePolicyRequest_Param::mutable_vol() {
  // @@protoc_insertion_point(field_mutable_list:grpc_cli.QosResetVolumePolicyRequest.Param.vol)
  return &vol_;
}
inline const ::grpc_cli::QosVolumeNameParam& QosResetVolumePolicyRequest_Param::_internal_vol(int index) const {
  return vol_.Get(index);
}
inline const ::grpc_cli::QosVolumeNameParam& QosResetVolumePolicyRequest_Param::vol(int index) const {
  // @@protoc_insertion_point(field_get:grpc_cli.QosResetVolumePolicyRequest.Param.vol)
  return _internal_vol(index);
}
inline ::grpc_cli::QosVolumeNameParam* QosResetVolumePolicyRequest_Param::_internal_add_vol() {
  return vol_.Add();
}
inline ::grpc_cli::QosVolumeNameParam* QosResetVolumePolicyRequest_Param::add_vol() {
  // @@protoc_insertion_point(field_add:grpc_cli.QosResetVolumePolicyRequest.Param.vol)
  return _internal_add_vol();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::QosVolumeNameParam >&
QosResetVolumePolicyRequest_Param::vol() const {
  // @@protoc_insertion_point(field_list:grpc_cli.QosResetVolumePolicyRequest.Param.vol)
  return vol_;
}

// -------------------------------------------------------------------

// QosResetVolumePolicyRequest

// string command = 1;
inline void QosResetVolumePolicyRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& QosResetVolumePolicyRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.QosResetVolumePolicyRequest.command)
  return _internal_command();
}
inline void QosResetVolumePolicyRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.QosResetVolumePolicyRequest.command)
}
inline std::string* QosResetVolumePolicyRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.QosResetVolumePolicyRequest.command)
  return _internal_mutable_command();
}
inline const std::string& QosResetVolumePolicyRequest::_internal_command() const {
  return command_.Get();
}
inline void QosResetVolumePolicyRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void QosResetVolumePolicyRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.QosResetVolumePolicyRequest.command)
}
inline void QosResetVolumePolicyRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.QosResetVolumePolicyRequest.command)
}
inline void QosResetVolumePolicyRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.QosResetVolumePolicyRequest.command)
}
inline std::string* QosResetVolumePolicyRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* QosResetVolumePolicyRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.QosResetVolumePolicyRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QosResetVolumePolicyRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.QosResetVolumePolicyRequest.command)
}

// string rid = 2;
inline void QosResetVolumePolicyRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& QosResetVolumePolicyRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.QosResetVolumePolicyRequest.rid)
  return _internal_rid();
}
inline void QosResetVolumePolicyRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.QosResetVolumePolicyRequest.rid)
}
inline std::string* QosResetVolumePolicyRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.QosResetVolumePolicyRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& QosResetVolumePolicyRequest::_internal_rid() const {
  return rid_.Get();
}
inline void QosResetVolumePolicyRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void QosResetVolumePolicyRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.QosResetVolumePolicyRequest.rid)
}
inline void QosResetVolumePolicyRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.QosResetVolumePolicyRequest.rid)
}
inline void QosResetVolumePolicyRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.QosResetVolumePolicyRequest.rid)
}
inline std::string* QosResetVolumePolicyRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* QosResetVolumePolicyRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.QosResetVolumePolicyRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QosResetVolumePolicyRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.QosResetVolumePolicyRequest.rid)
}

// string requestor = 3;
inline void QosResetVolumePolicyRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& QosResetVolumePolicyRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.QosResetVolumePolicyRequest.requestor)
  return _internal_requestor();
}
inline void QosResetVolumePolicyRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.QosResetVolumePolicyRequest.requestor)
}
inline std::string* QosResetVolumePolicyRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.QosResetVolumePolicyRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& QosResetVolumePolicyRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void QosResetVolumePolicyRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void QosResetVolumePolicyRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.QosResetVolumePolicyRequest.requestor)
}
inline void QosResetVolumePolicyRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.QosResetVolumePolicyRequest.requestor)
}
inline void QosResetVolumePolicyRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.QosResetVolumePolicyRequest.requestor)
}
inline std::string* QosResetVolumePolicyRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* QosResetVolumePolicyRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.QosResetVolumePolicyRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QosResetVolumePolicyRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.QosResetVolumePolicyRequest.requestor)
}

// .grpc_cli.QosResetVolumePolicyRequest.Param param = 4;
inline bool QosResetVolumePolicyRequest::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool QosResetVolumePolicyRequest::has_param() const {
  return _internal_has_param();
}
inline void QosResetVolumePolicyRequest::clear_param() {
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::grpc_cli::QosResetVolumePolicyRequest_Param& QosResetVolumePolicyRequest::_internal_param() const {
  const ::grpc_cli::QosResetVolumePolicyRequest_Param* p = param_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::QosResetVolumePolicyRequest_Param&>(
      ::grpc_cli::_QosResetVolumePolicyRequest_Param_default_instance_);
}
inline const ::grpc_cli::QosResetVolumePolicyRequest_Param& QosResetVolumePolicyRequest::param() const {
  // @@protoc_insertion_point(field_get:grpc_cli.QosResetVolumePolicyRequest.param)
  return _internal_param();
}
inline void QosResetVolumePolicyRequest::unsafe_arena_set_allocated_param(
    ::grpc_cli::QosResetVolumePolicyRequest_Param* param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.QosResetVolumePolicyRequest.param)
}
inline ::grpc_cli::QosResetVolumePolicyRequest_Param* QosResetVolumePolicyRequest::release_param() {
  
  ::grpc_cli::QosResetVolumePolicyRequest_Param* temp = param_;
  param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::QosResetVolumePolicyRequest_Param* QosResetVolumePolicyRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:grpc_cli.QosResetVolumePolicyRequest.param)
  
  ::grpc_cli::QosResetVolumePolicyRequest_Param* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::grpc_cli::QosResetVolumePolicyRequest_Param* QosResetVolumePolicyRequest::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::QosResetVolumePolicyRequest_Param>(GetArena());
    param_ = p;
  }
  return param_;
}
inline ::grpc_cli::QosResetVolumePolicyRequest_Param* QosResetVolumePolicyRequest::mutable_param() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.QosResetVolumePolicyRequest.param)
  return _internal_mutable_param();
}
inline void QosResetVolumePolicyRequest::set_allocated_param(::grpc_cli::QosResetVolumePolicyRequest_Param* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.QosResetVolumePolicyRequest.param)
}

// -------------------------------------------------------------------

// VolumeInfoRequest_Param

// string array = 1;
inline void VolumeInfoRequest_Param::clear_array() {
  array_.ClearToEmpty();
}
inline const std::string& VolumeInfoRequest_Param::array() const {
  // @@protoc_insertion_point(field_get:grpc_cli.VolumeInfoRequest.Param.array)
  return _internal_array();
}
inline void VolumeInfoRequest_Param::set_array(const std::string& value) {
  _internal_set_array(value);
  // @@protoc_insertion_point(field_set:grpc_cli.VolumeInfoRequest.Param.array)
}
inline std::string* VolumeInfoRequest_Param::mutable_array() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.VolumeInfoRequest.Param.array)
  return _internal_mutable_array();
}
inline const std::string& VolumeInfoRequest_Param::_internal_array() const {
  return array_.Get();
}
inline void VolumeInfoRequest_Param::_internal_set_array(const std::string& value) {
  
  array_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VolumeInfoRequest_Param::set_array(std::string&& value) {
  
  array_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.VolumeInfoRequest.Param.array)
}
inline void VolumeInfoRequest_Param::set_array(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  array_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.VolumeInfoRequest.Param.array)
}
inline void VolumeInfoRequest_Param::set_array(const char* value,
    size_t size) {
  
  array_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.VolumeInfoRequest.Param.array)
}
inline std::string* VolumeInfoRequest_Param::_internal_mutable_array() {
  
  return array_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VolumeInfoRequest_Param::release_array() {
  // @@protoc_insertion_point(field_release:grpc_cli.VolumeInfoRequest.Param.array)
  return array_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VolumeInfoRequest_Param::set_allocated_array(std::string* array) {
  if (array != nullptr) {
    
  } else {
    
  }
  array_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), array,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.VolumeInfoRequest.Param.array)
}

// string volume = 2;
inline void VolumeInfoRequest_Param::clear_volume() {
  volume_.ClearToEmpty();
}
inline const std::string& VolumeInfoRequest_Param::volume() const {
  // @@protoc_insertion_point(field_get:grpc_cli.VolumeInfoRequest.Param.volume)
  return _internal_volume();
}
inline void VolumeInfoRequest_Param::set_volume(const std::string& value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:grpc_cli.VolumeInfoRequest.Param.volume)
}
inline std::string* VolumeInfoRequest_Param::mutable_volume() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.VolumeInfoRequest.Param.volume)
  return _internal_mutable_volume();
}
inline const std::string& VolumeInfoRequest_Param::_internal_volume() const {
  return volume_.Get();
}
inline void VolumeInfoRequest_Param::_internal_set_volume(const std::string& value) {
  
  volume_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VolumeInfoRequest_Param::set_volume(std::string&& value) {
  
  volume_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.VolumeInfoRequest.Param.volume)
}
inline void VolumeInfoRequest_Param::set_volume(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  volume_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.VolumeInfoRequest.Param.volume)
}
inline void VolumeInfoRequest_Param::set_volume(const char* value,
    size_t size) {
  
  volume_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.VolumeInfoRequest.Param.volume)
}
inline std::string* VolumeInfoRequest_Param::_internal_mutable_volume() {
  
  return volume_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VolumeInfoRequest_Param::release_volume() {
  // @@protoc_insertion_point(field_release:grpc_cli.VolumeInfoRequest.Param.volume)
  return volume_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VolumeInfoRequest_Param::set_allocated_volume(std::string* volume) {
  if (volume != nullptr) {
    
  } else {
    
  }
  volume_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), volume,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.VolumeInfoRequest.Param.volume)
}

// -------------------------------------------------------------------

// VolumeInfoRequest

// string command = 1;
inline void VolumeInfoRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& VolumeInfoRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.VolumeInfoRequest.command)
  return _internal_command();
}
inline void VolumeInfoRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.VolumeInfoRequest.command)
}
inline std::string* VolumeInfoRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.VolumeInfoRequest.command)
  return _internal_mutable_command();
}
inline const std::string& VolumeInfoRequest::_internal_command() const {
  return command_.Get();
}
inline void VolumeInfoRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VolumeInfoRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.VolumeInfoRequest.command)
}
inline void VolumeInfoRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.VolumeInfoRequest.command)
}
inline void VolumeInfoRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.VolumeInfoRequest.command)
}
inline std::string* VolumeInfoRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VolumeInfoRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.VolumeInfoRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VolumeInfoRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.VolumeInfoRequest.command)
}

// string rid = 2;
inline void VolumeInfoRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& VolumeInfoRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.VolumeInfoRequest.rid)
  return _internal_rid();
}
inline void VolumeInfoRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.VolumeInfoRequest.rid)
}
inline std::string* VolumeInfoRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.VolumeInfoRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& VolumeInfoRequest::_internal_rid() const {
  return rid_.Get();
}
inline void VolumeInfoRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VolumeInfoRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.VolumeInfoRequest.rid)
}
inline void VolumeInfoRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.VolumeInfoRequest.rid)
}
inline void VolumeInfoRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.VolumeInfoRequest.rid)
}
inline std::string* VolumeInfoRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VolumeInfoRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.VolumeInfoRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VolumeInfoRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.VolumeInfoRequest.rid)
}

// string requestor = 3;
inline void VolumeInfoRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& VolumeInfoRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.VolumeInfoRequest.requestor)
  return _internal_requestor();
}
inline void VolumeInfoRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.VolumeInfoRequest.requestor)
}
inline std::string* VolumeInfoRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.VolumeInfoRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& VolumeInfoRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void VolumeInfoRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VolumeInfoRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.VolumeInfoRequest.requestor)
}
inline void VolumeInfoRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.VolumeInfoRequest.requestor)
}
inline void VolumeInfoRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.VolumeInfoRequest.requestor)
}
inline std::string* VolumeInfoRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VolumeInfoRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.VolumeInfoRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VolumeInfoRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.VolumeInfoRequest.requestor)
}

// .grpc_cli.VolumeInfoRequest.Param param = 4;
inline bool VolumeInfoRequest::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool VolumeInfoRequest::has_param() const {
  return _internal_has_param();
}
inline void VolumeInfoRequest::clear_param() {
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::grpc_cli::VolumeInfoRequest_Param& VolumeInfoRequest::_internal_param() const {
  const ::grpc_cli::VolumeInfoRequest_Param* p = param_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::VolumeInfoRequest_Param&>(
      ::grpc_cli::_VolumeInfoRequest_Param_default_instance_);
}
inline const ::grpc_cli::VolumeInfoRequest_Param& VolumeInfoRequest::param() const {
  // @@protoc_insertion_point(field_get:grpc_cli.VolumeInfoRequest.param)
  return _internal_param();
}
inline void VolumeInfoRequest::unsafe_arena_set_allocated_param(
    ::grpc_cli::VolumeInfoRequest_Param* param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.VolumeInfoRequest.param)
}
inline ::grpc_cli::VolumeInfoRequest_Param* VolumeInfoRequest::release_param() {
  
  ::grpc_cli::VolumeInfoRequest_Param* temp = param_;
  param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::VolumeInfoRequest_Param* VolumeInfoRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:grpc_cli.VolumeInfoRequest.param)
  
  ::grpc_cli::VolumeInfoRequest_Param* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::grpc_cli::VolumeInfoRequest_Param* VolumeInfoRequest::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::VolumeInfoRequest_Param>(GetArena());
    param_ = p;
  }
  return param_;
}
inline ::grpc_cli::VolumeInfoRequest_Param* VolumeInfoRequest::mutable_param() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.VolumeInfoRequest.param)
  return _internal_mutable_param();
}
inline void VolumeInfoRequest::set_allocated_param(::grpc_cli::VolumeInfoRequest_Param* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.VolumeInfoRequest.param)
}

// -------------------------------------------------------------------

// QosResetVolumePolicyResponse_Result

// .grpc_cli.Status status = 1;
inline bool QosResetVolumePolicyResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool QosResetVolumePolicyResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void QosResetVolumePolicyResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& QosResetVolumePolicyResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& QosResetVolumePolicyResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.QosResetVolumePolicyResponse.Result.status)
  return _internal_status();
}
inline void QosResetVolumePolicyResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.QosResetVolumePolicyResponse.Result.status)
}
inline ::grpc_cli::Status* QosResetVolumePolicyResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* QosResetVolumePolicyResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.QosResetVolumePolicyResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* QosResetVolumePolicyResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* QosResetVolumePolicyResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.QosResetVolumePolicyResponse.Result.status)
  return _internal_mutable_status();
}
inline void QosResetVolumePolicyResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.QosResetVolumePolicyResponse.Result.status)
}

// -------------------------------------------------------------------

// QosResetVolumePolicyResponse

// string command = 1;
inline void QosResetVolumePolicyResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& QosResetVolumePolicyResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.QosResetVolumePolicyResponse.command)
  return _internal_command();
}
inline void QosResetVolumePolicyResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.QosResetVolumePolicyResponse.command)
}
inline std::string* QosResetVolumePolicyResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.QosResetVolumePolicyResponse.command)
  return _internal_mutable_command();
}
inline const std::string& QosResetVolumePolicyResponse::_internal_command() const {
  return command_.Get();
}
inline void QosResetVolumePolicyResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void QosResetVolumePolicyResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.QosResetVolumePolicyResponse.command)
}
inline void QosResetVolumePolicyResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.QosResetVolumePolicyResponse.command)
}
inline void QosResetVolumePolicyResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.QosResetVolumePolicyResponse.command)
}
inline std::string* QosResetVolumePolicyResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* QosResetVolumePolicyResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.QosResetVolumePolicyResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QosResetVolumePolicyResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.QosResetVolumePolicyResponse.command)
}

// string rid = 2;
inline void QosResetVolumePolicyResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& QosResetVolumePolicyResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.QosResetVolumePolicyResponse.rid)
  return _internal_rid();
}
inline void QosResetVolumePolicyResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.QosResetVolumePolicyResponse.rid)
}
inline std::string* QosResetVolumePolicyResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.QosResetVolumePolicyResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& QosResetVolumePolicyResponse::_internal_rid() const {
  return rid_.Get();
}
inline void QosResetVolumePolicyResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void QosResetVolumePolicyResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.QosResetVolumePolicyResponse.rid)
}
inline void QosResetVolumePolicyResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.QosResetVolumePolicyResponse.rid)
}
inline void QosResetVolumePolicyResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.QosResetVolumePolicyResponse.rid)
}
inline std::string* QosResetVolumePolicyResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* QosResetVolumePolicyResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.QosResetVolumePolicyResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QosResetVolumePolicyResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.QosResetVolumePolicyResponse.rid)
}

// .grpc_cli.QosResetVolumePolicyResponse.Result result = 3;
inline bool QosResetVolumePolicyResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool QosResetVolumePolicyResponse::has_result() const {
  return _internal_has_result();
}
inline void QosResetVolumePolicyResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::QosResetVolumePolicyResponse_Result& QosResetVolumePolicyResponse::_internal_result() const {
  const ::grpc_cli::QosResetVolumePolicyResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::QosResetVolumePolicyResponse_Result&>(
      ::grpc_cli::_QosResetVolumePolicyResponse_Result_default_instance_);
}
inline const ::grpc_cli::QosResetVolumePolicyResponse_Result& QosResetVolumePolicyResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.QosResetVolumePolicyResponse.result)
  return _internal_result();
}
inline void QosResetVolumePolicyResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::QosResetVolumePolicyResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.QosResetVolumePolicyResponse.result)
}
inline ::grpc_cli::QosResetVolumePolicyResponse_Result* QosResetVolumePolicyResponse::release_result() {
  
  ::grpc_cli::QosResetVolumePolicyResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::QosResetVolumePolicyResponse_Result* QosResetVolumePolicyResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.QosResetVolumePolicyResponse.result)
  
  ::grpc_cli::QosResetVolumePolicyResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::QosResetVolumePolicyResponse_Result* QosResetVolumePolicyResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::QosResetVolumePolicyResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::QosResetVolumePolicyResponse_Result* QosResetVolumePolicyResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.QosResetVolumePolicyResponse.result)
  return _internal_mutable_result();
}
inline void QosResetVolumePolicyResponse::set_allocated_result(::grpc_cli::QosResetVolumePolicyResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.QosResetVolumePolicyResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool QosResetVolumePolicyResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool QosResetVolumePolicyResponse::has_info() const {
  return _internal_has_info();
}
inline void QosResetVolumePolicyResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& QosResetVolumePolicyResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& QosResetVolumePolicyResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.QosResetVolumePolicyResponse.info)
  return _internal_info();
}
inline void QosResetVolumePolicyResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.QosResetVolumePolicyResponse.info)
}
inline ::grpc_cli::PosInfo* QosResetVolumePolicyResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* QosResetVolumePolicyResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.QosResetVolumePolicyResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* QosResetVolumePolicyResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* QosResetVolumePolicyResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.QosResetVolumePolicyResponse.info)
  return _internal_mutable_info();
}
inline void QosResetVolumePolicyResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.QosResetVolumePolicyResponse.info)
}

// -------------------------------------------------------------------

// VolumeInfoResponse_Result

// .grpc_cli.Status status = 1;
inline bool VolumeInfoResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool VolumeInfoResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void VolumeInfoResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& VolumeInfoResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& VolumeInfoResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.VolumeInfoResponse.Result.status)
  return _internal_status();
}
inline void VolumeInfoResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.VolumeInfoResponse.Result.status)
}
inline ::grpc_cli::Status* VolumeInfoResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* VolumeInfoResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.VolumeInfoResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* VolumeInfoResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* VolumeInfoResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.VolumeInfoResponse.Result.status)
  return _internal_mutable_status();
}
inline void VolumeInfoResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.VolumeInfoResponse.Result.status)
}

// .grpc_cli.Volume data = 2;
inline bool VolumeInfoResponse_Result::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool VolumeInfoResponse_Result::has_data() const {
  return _internal_has_data();
}
inline void VolumeInfoResponse_Result::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::grpc_cli::Volume& VolumeInfoResponse_Result::_internal_data() const {
  const ::grpc_cli::Volume* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Volume&>(
      ::grpc_cli::_Volume_default_instance_);
}
inline const ::grpc_cli::Volume& VolumeInfoResponse_Result::data() const {
  // @@protoc_insertion_point(field_get:grpc_cli.VolumeInfoResponse.Result.data)
  return _internal_data();
}
inline void VolumeInfoResponse_Result::unsafe_arena_set_allocated_data(
    ::grpc_cli::Volume* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.VolumeInfoResponse.Result.data)
}
inline ::grpc_cli::Volume* VolumeInfoResponse_Result::release_data() {
  
  ::grpc_cli::Volume* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Volume* VolumeInfoResponse_Result::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:grpc_cli.VolumeInfoResponse.Result.data)
  
  ::grpc_cli::Volume* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::grpc_cli::Volume* VolumeInfoResponse_Result::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Volume>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::grpc_cli::Volume* VolumeInfoResponse_Result::mutable_data() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.VolumeInfoResponse.Result.data)
  return _internal_mutable_data();
}
inline void VolumeInfoResponse_Result::set_allocated_data(::grpc_cli::Volume* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.VolumeInfoResponse.Result.data)
}

// -------------------------------------------------------------------

// VolumeInfoResponse

// string command = 1;
inline void VolumeInfoResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& VolumeInfoResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.VolumeInfoResponse.command)
  return _internal_command();
}
inline void VolumeInfoResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.VolumeInfoResponse.command)
}
inline std::string* VolumeInfoResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.VolumeInfoResponse.command)
  return _internal_mutable_command();
}
inline const std::string& VolumeInfoResponse::_internal_command() const {
  return command_.Get();
}
inline void VolumeInfoResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VolumeInfoResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.VolumeInfoResponse.command)
}
inline void VolumeInfoResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.VolumeInfoResponse.command)
}
inline void VolumeInfoResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.VolumeInfoResponse.command)
}
inline std::string* VolumeInfoResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VolumeInfoResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.VolumeInfoResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VolumeInfoResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.VolumeInfoResponse.command)
}

// string rid = 2;
inline void VolumeInfoResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& VolumeInfoResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.VolumeInfoResponse.rid)
  return _internal_rid();
}
inline void VolumeInfoResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.VolumeInfoResponse.rid)
}
inline std::string* VolumeInfoResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.VolumeInfoResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& VolumeInfoResponse::_internal_rid() const {
  return rid_.Get();
}
inline void VolumeInfoResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VolumeInfoResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.VolumeInfoResponse.rid)
}
inline void VolumeInfoResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.VolumeInfoResponse.rid)
}
inline void VolumeInfoResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.VolumeInfoResponse.rid)
}
inline std::string* VolumeInfoResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VolumeInfoResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.VolumeInfoResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VolumeInfoResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.VolumeInfoResponse.rid)
}

// .grpc_cli.VolumeInfoResponse.Result result = 3;
inline bool VolumeInfoResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool VolumeInfoResponse::has_result() const {
  return _internal_has_result();
}
inline void VolumeInfoResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::VolumeInfoResponse_Result& VolumeInfoResponse::_internal_result() const {
  const ::grpc_cli::VolumeInfoResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::VolumeInfoResponse_Result&>(
      ::grpc_cli::_VolumeInfoResponse_Result_default_instance_);
}
inline const ::grpc_cli::VolumeInfoResponse_Result& VolumeInfoResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.VolumeInfoResponse.result)
  return _internal_result();
}
inline void VolumeInfoResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::VolumeInfoResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.VolumeInfoResponse.result)
}
inline ::grpc_cli::VolumeInfoResponse_Result* VolumeInfoResponse::release_result() {
  
  ::grpc_cli::VolumeInfoResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::VolumeInfoResponse_Result* VolumeInfoResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.VolumeInfoResponse.result)
  
  ::grpc_cli::VolumeInfoResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::VolumeInfoResponse_Result* VolumeInfoResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::VolumeInfoResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::VolumeInfoResponse_Result* VolumeInfoResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.VolumeInfoResponse.result)
  return _internal_mutable_result();
}
inline void VolumeInfoResponse::set_allocated_result(::grpc_cli::VolumeInfoResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.VolumeInfoResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool VolumeInfoResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool VolumeInfoResponse::has_info() const {
  return _internal_has_info();
}
inline void VolumeInfoResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& VolumeInfoResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& VolumeInfoResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.VolumeInfoResponse.info)
  return _internal_info();
}
inline void VolumeInfoResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.VolumeInfoResponse.info)
}
inline ::grpc_cli::PosInfo* VolumeInfoResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* VolumeInfoResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.VolumeInfoResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* VolumeInfoResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* VolumeInfoResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.VolumeInfoResponse.info)
  return _internal_mutable_info();
}
inline void VolumeInfoResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.VolumeInfoResponse.info)
}

// -------------------------------------------------------------------

// VolumeRenameRequest_Param

// string array = 1;
inline void VolumeRenameRequest_Param::clear_array() {
  array_.ClearToEmpty();
}
inline const std::string& VolumeRenameRequest_Param::array() const {
  // @@protoc_insertion_point(field_get:grpc_cli.VolumeRenameRequest.Param.array)
  return _internal_array();
}
inline void VolumeRenameRequest_Param::set_array(const std::string& value) {
  _internal_set_array(value);
  // @@protoc_insertion_point(field_set:grpc_cli.VolumeRenameRequest.Param.array)
}
inline std::string* VolumeRenameRequest_Param::mutable_array() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.VolumeRenameRequest.Param.array)
  return _internal_mutable_array();
}
inline const std::string& VolumeRenameRequest_Param::_internal_array() const {
  return array_.Get();
}
inline void VolumeRenameRequest_Param::_internal_set_array(const std::string& value) {
  
  array_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VolumeRenameRequest_Param::set_array(std::string&& value) {
  
  array_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.VolumeRenameRequest.Param.array)
}
inline void VolumeRenameRequest_Param::set_array(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  array_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.VolumeRenameRequest.Param.array)
}
inline void VolumeRenameRequest_Param::set_array(const char* value,
    size_t size) {
  
  array_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.VolumeRenameRequest.Param.array)
}
inline std::string* VolumeRenameRequest_Param::_internal_mutable_array() {
  
  return array_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VolumeRenameRequest_Param::release_array() {
  // @@protoc_insertion_point(field_release:grpc_cli.VolumeRenameRequest.Param.array)
  return array_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VolumeRenameRequest_Param::set_allocated_array(std::string* array) {
  if (array != nullptr) {
    
  } else {
    
  }
  array_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), array,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.VolumeRenameRequest.Param.array)
}

// string name = 2;
inline void VolumeRenameRequest_Param::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& VolumeRenameRequest_Param::name() const {
  // @@protoc_insertion_point(field_get:grpc_cli.VolumeRenameRequest.Param.name)
  return _internal_name();
}
inline void VolumeRenameRequest_Param::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:grpc_cli.VolumeRenameRequest.Param.name)
}
inline std::string* VolumeRenameRequest_Param::mutable_name() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.VolumeRenameRequest.Param.name)
  return _internal_mutable_name();
}
inline const std::string& VolumeRenameRequest_Param::_internal_name() const {
  return name_.Get();
}
inline void VolumeRenameRequest_Param::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VolumeRenameRequest_Param::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.VolumeRenameRequest.Param.name)
}
inline void VolumeRenameRequest_Param::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.VolumeRenameRequest.Param.name)
}
inline void VolumeRenameRequest_Param::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.VolumeRenameRequest.Param.name)
}
inline std::string* VolumeRenameRequest_Param::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VolumeRenameRequest_Param::release_name() {
  // @@protoc_insertion_point(field_release:grpc_cli.VolumeRenameRequest.Param.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VolumeRenameRequest_Param::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.VolumeRenameRequest.Param.name)
}

// string newname = 3;
inline void VolumeRenameRequest_Param::clear_newname() {
  newname_.ClearToEmpty();
}
inline const std::string& VolumeRenameRequest_Param::newname() const {
  // @@protoc_insertion_point(field_get:grpc_cli.VolumeRenameRequest.Param.newname)
  return _internal_newname();
}
inline void VolumeRenameRequest_Param::set_newname(const std::string& value) {
  _internal_set_newname(value);
  // @@protoc_insertion_point(field_set:grpc_cli.VolumeRenameRequest.Param.newname)
}
inline std::string* VolumeRenameRequest_Param::mutable_newname() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.VolumeRenameRequest.Param.newname)
  return _internal_mutable_newname();
}
inline const std::string& VolumeRenameRequest_Param::_internal_newname() const {
  return newname_.Get();
}
inline void VolumeRenameRequest_Param::_internal_set_newname(const std::string& value) {
  
  newname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VolumeRenameRequest_Param::set_newname(std::string&& value) {
  
  newname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.VolumeRenameRequest.Param.newname)
}
inline void VolumeRenameRequest_Param::set_newname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  newname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.VolumeRenameRequest.Param.newname)
}
inline void VolumeRenameRequest_Param::set_newname(const char* value,
    size_t size) {
  
  newname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.VolumeRenameRequest.Param.newname)
}
inline std::string* VolumeRenameRequest_Param::_internal_mutable_newname() {
  
  return newname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VolumeRenameRequest_Param::release_newname() {
  // @@protoc_insertion_point(field_release:grpc_cli.VolumeRenameRequest.Param.newname)
  return newname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VolumeRenameRequest_Param::set_allocated_newname(std::string* newname) {
  if (newname != nullptr) {
    
  } else {
    
  }
  newname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), newname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.VolumeRenameRequest.Param.newname)
}

// -------------------------------------------------------------------

// VolumeRenameRequest

// string command = 1;
inline void VolumeRenameRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& VolumeRenameRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.VolumeRenameRequest.command)
  return _internal_command();
}
inline void VolumeRenameRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.VolumeRenameRequest.command)
}
inline std::string* VolumeRenameRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.VolumeRenameRequest.command)
  return _internal_mutable_command();
}
inline const std::string& VolumeRenameRequest::_internal_command() const {
  return command_.Get();
}
inline void VolumeRenameRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VolumeRenameRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.VolumeRenameRequest.command)
}
inline void VolumeRenameRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.VolumeRenameRequest.command)
}
inline void VolumeRenameRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.VolumeRenameRequest.command)
}
inline std::string* VolumeRenameRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VolumeRenameRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.VolumeRenameRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VolumeRenameRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.VolumeRenameRequest.command)
}

// string rid = 2;
inline void VolumeRenameRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& VolumeRenameRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.VolumeRenameRequest.rid)
  return _internal_rid();
}
inline void VolumeRenameRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.VolumeRenameRequest.rid)
}
inline std::string* VolumeRenameRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.VolumeRenameRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& VolumeRenameRequest::_internal_rid() const {
  return rid_.Get();
}
inline void VolumeRenameRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VolumeRenameRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.VolumeRenameRequest.rid)
}
inline void VolumeRenameRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.VolumeRenameRequest.rid)
}
inline void VolumeRenameRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.VolumeRenameRequest.rid)
}
inline std::string* VolumeRenameRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VolumeRenameRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.VolumeRenameRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VolumeRenameRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.VolumeRenameRequest.rid)
}

// string requestor = 3;
inline void VolumeRenameRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& VolumeRenameRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.VolumeRenameRequest.requestor)
  return _internal_requestor();
}
inline void VolumeRenameRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.VolumeRenameRequest.requestor)
}
inline std::string* VolumeRenameRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.VolumeRenameRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& VolumeRenameRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void VolumeRenameRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VolumeRenameRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.VolumeRenameRequest.requestor)
}
inline void VolumeRenameRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.VolumeRenameRequest.requestor)
}
inline void VolumeRenameRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.VolumeRenameRequest.requestor)
}
inline std::string* VolumeRenameRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VolumeRenameRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.VolumeRenameRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VolumeRenameRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.VolumeRenameRequest.requestor)
}

// .grpc_cli.VolumeRenameRequest.Param param = 4;
inline bool VolumeRenameRequest::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool VolumeRenameRequest::has_param() const {
  return _internal_has_param();
}
inline void VolumeRenameRequest::clear_param() {
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::grpc_cli::VolumeRenameRequest_Param& VolumeRenameRequest::_internal_param() const {
  const ::grpc_cli::VolumeRenameRequest_Param* p = param_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::VolumeRenameRequest_Param&>(
      ::grpc_cli::_VolumeRenameRequest_Param_default_instance_);
}
inline const ::grpc_cli::VolumeRenameRequest_Param& VolumeRenameRequest::param() const {
  // @@protoc_insertion_point(field_get:grpc_cli.VolumeRenameRequest.param)
  return _internal_param();
}
inline void VolumeRenameRequest::unsafe_arena_set_allocated_param(
    ::grpc_cli::VolumeRenameRequest_Param* param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.VolumeRenameRequest.param)
}
inline ::grpc_cli::VolumeRenameRequest_Param* VolumeRenameRequest::release_param() {
  
  ::grpc_cli::VolumeRenameRequest_Param* temp = param_;
  param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::VolumeRenameRequest_Param* VolumeRenameRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:grpc_cli.VolumeRenameRequest.param)
  
  ::grpc_cli::VolumeRenameRequest_Param* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::grpc_cli::VolumeRenameRequest_Param* VolumeRenameRequest::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::VolumeRenameRequest_Param>(GetArena());
    param_ = p;
  }
  return param_;
}
inline ::grpc_cli::VolumeRenameRequest_Param* VolumeRenameRequest::mutable_param() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.VolumeRenameRequest.param)
  return _internal_mutable_param();
}
inline void VolumeRenameRequest::set_allocated_param(::grpc_cli::VolumeRenameRequest_Param* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.VolumeRenameRequest.param)
}

// -------------------------------------------------------------------

// VolumeRenameResponse_Result

// .grpc_cli.Status status = 1;
inline bool VolumeRenameResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool VolumeRenameResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void VolumeRenameResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& VolumeRenameResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& VolumeRenameResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.VolumeRenameResponse.Result.status)
  return _internal_status();
}
inline void VolumeRenameResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.VolumeRenameResponse.Result.status)
}
inline ::grpc_cli::Status* VolumeRenameResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* VolumeRenameResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.VolumeRenameResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* VolumeRenameResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* VolumeRenameResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.VolumeRenameResponse.Result.status)
  return _internal_mutable_status();
}
inline void VolumeRenameResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.VolumeRenameResponse.Result.status)
}

// -------------------------------------------------------------------

// VolumeRenameResponse

// string command = 1;
inline void VolumeRenameResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& VolumeRenameResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.VolumeRenameResponse.command)
  return _internal_command();
}
inline void VolumeRenameResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.VolumeRenameResponse.command)
}
inline std::string* VolumeRenameResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.VolumeRenameResponse.command)
  return _internal_mutable_command();
}
inline const std::string& VolumeRenameResponse::_internal_command() const {
  return command_.Get();
}
inline void VolumeRenameResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VolumeRenameResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.VolumeRenameResponse.command)
}
inline void VolumeRenameResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.VolumeRenameResponse.command)
}
inline void VolumeRenameResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.VolumeRenameResponse.command)
}
inline std::string* VolumeRenameResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VolumeRenameResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.VolumeRenameResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VolumeRenameResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.VolumeRenameResponse.command)
}

// string rid = 2;
inline void VolumeRenameResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& VolumeRenameResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.VolumeRenameResponse.rid)
  return _internal_rid();
}
inline void VolumeRenameResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.VolumeRenameResponse.rid)
}
inline std::string* VolumeRenameResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.VolumeRenameResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& VolumeRenameResponse::_internal_rid() const {
  return rid_.Get();
}
inline void VolumeRenameResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VolumeRenameResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.VolumeRenameResponse.rid)
}
inline void VolumeRenameResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.VolumeRenameResponse.rid)
}
inline void VolumeRenameResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.VolumeRenameResponse.rid)
}
inline std::string* VolumeRenameResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VolumeRenameResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.VolumeRenameResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VolumeRenameResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.VolumeRenameResponse.rid)
}

// .grpc_cli.VolumeRenameResponse.Result result = 3;
inline bool VolumeRenameResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool VolumeRenameResponse::has_result() const {
  return _internal_has_result();
}
inline void VolumeRenameResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::VolumeRenameResponse_Result& VolumeRenameResponse::_internal_result() const {
  const ::grpc_cli::VolumeRenameResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::VolumeRenameResponse_Result&>(
      ::grpc_cli::_VolumeRenameResponse_Result_default_instance_);
}
inline const ::grpc_cli::VolumeRenameResponse_Result& VolumeRenameResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.VolumeRenameResponse.result)
  return _internal_result();
}
inline void VolumeRenameResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::VolumeRenameResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.VolumeRenameResponse.result)
}
inline ::grpc_cli::VolumeRenameResponse_Result* VolumeRenameResponse::release_result() {
  
  ::grpc_cli::VolumeRenameResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::VolumeRenameResponse_Result* VolumeRenameResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.VolumeRenameResponse.result)
  
  ::grpc_cli::VolumeRenameResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::VolumeRenameResponse_Result* VolumeRenameResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::VolumeRenameResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::VolumeRenameResponse_Result* VolumeRenameResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.VolumeRenameResponse.result)
  return _internal_mutable_result();
}
inline void VolumeRenameResponse::set_allocated_result(::grpc_cli::VolumeRenameResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.VolumeRenameResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool VolumeRenameResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool VolumeRenameResponse::has_info() const {
  return _internal_has_info();
}
inline void VolumeRenameResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& VolumeRenameResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& VolumeRenameResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.VolumeRenameResponse.info)
  return _internal_info();
}
inline void VolumeRenameResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.VolumeRenameResponse.info)
}
inline ::grpc_cli::PosInfo* VolumeRenameResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* VolumeRenameResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.VolumeRenameResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* VolumeRenameResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* VolumeRenameResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.VolumeRenameResponse.info)
  return _internal_mutable_info();
}
inline void VolumeRenameResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.VolumeRenameResponse.info)
}

// -------------------------------------------------------------------

// ListWBTRequest

// string command = 1;
inline void ListWBTRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& ListWBTRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListWBTRequest.command)
  return _internal_command();
}
inline void ListWBTRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListWBTRequest.command)
}
inline std::string* ListWBTRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListWBTRequest.command)
  return _internal_mutable_command();
}
inline const std::string& ListWBTRequest::_internal_command() const {
  return command_.Get();
}
inline void ListWBTRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListWBTRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListWBTRequest.command)
}
inline void ListWBTRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListWBTRequest.command)
}
inline void ListWBTRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListWBTRequest.command)
}
inline std::string* ListWBTRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListWBTRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListWBTRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListWBTRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListWBTRequest.command)
}

// string rid = 2;
inline void ListWBTRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& ListWBTRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListWBTRequest.rid)
  return _internal_rid();
}
inline void ListWBTRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListWBTRequest.rid)
}
inline std::string* ListWBTRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListWBTRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& ListWBTRequest::_internal_rid() const {
  return rid_.Get();
}
inline void ListWBTRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListWBTRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListWBTRequest.rid)
}
inline void ListWBTRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListWBTRequest.rid)
}
inline void ListWBTRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListWBTRequest.rid)
}
inline std::string* ListWBTRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListWBTRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListWBTRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListWBTRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListWBTRequest.rid)
}

// string requestor = 3;
inline void ListWBTRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& ListWBTRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListWBTRequest.requestor)
  return _internal_requestor();
}
inline void ListWBTRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListWBTRequest.requestor)
}
inline std::string* ListWBTRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListWBTRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& ListWBTRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void ListWBTRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListWBTRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListWBTRequest.requestor)
}
inline void ListWBTRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListWBTRequest.requestor)
}
inline void ListWBTRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListWBTRequest.requestor)
}
inline std::string* ListWBTRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListWBTRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListWBTRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListWBTRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListWBTRequest.requestor)
}

// -------------------------------------------------------------------

// WBTTest

// string testname = 1;
inline void WBTTest::clear_testname() {
  testname_.ClearToEmpty();
}
inline const std::string& WBTTest::testname() const {
  // @@protoc_insertion_point(field_get:grpc_cli.WBTTest.testname)
  return _internal_testname();
}
inline void WBTTest::set_testname(const std::string& value) {
  _internal_set_testname(value);
  // @@protoc_insertion_point(field_set:grpc_cli.WBTTest.testname)
}
inline std::string* WBTTest::mutable_testname() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.WBTTest.testname)
  return _internal_mutable_testname();
}
inline const std::string& WBTTest::_internal_testname() const {
  return testname_.Get();
}
inline void WBTTest::_internal_set_testname(const std::string& value) {
  
  testname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WBTTest::set_testname(std::string&& value) {
  
  testname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.WBTTest.testname)
}
inline void WBTTest::set_testname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  testname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.WBTTest.testname)
}
inline void WBTTest::set_testname(const char* value,
    size_t size) {
  
  testname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.WBTTest.testname)
}
inline std::string* WBTTest::_internal_mutable_testname() {
  
  return testname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WBTTest::release_testname() {
  // @@protoc_insertion_point(field_release:grpc_cli.WBTTest.testname)
  return testname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WBTTest::set_allocated_testname(std::string* testname) {
  if (testname != nullptr) {
    
  } else {
    
  }
  testname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), testname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.WBTTest.testname)
}

// -------------------------------------------------------------------

// ListWBTResponse_Result_Tests

// repeated .grpc_cli.WBTTest testlist = 1;
inline int ListWBTResponse_Result_Tests::_internal_testlist_size() const {
  return testlist_.size();
}
inline int ListWBTResponse_Result_Tests::testlist_size() const {
  return _internal_testlist_size();
}
inline void ListWBTResponse_Result_Tests::clear_testlist() {
  testlist_.Clear();
}
inline ::grpc_cli::WBTTest* ListWBTResponse_Result_Tests::mutable_testlist(int index) {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListWBTResponse.Result.Tests.testlist)
  return testlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::WBTTest >*
ListWBTResponse_Result_Tests::mutable_testlist() {
  // @@protoc_insertion_point(field_mutable_list:grpc_cli.ListWBTResponse.Result.Tests.testlist)
  return &testlist_;
}
inline const ::grpc_cli::WBTTest& ListWBTResponse_Result_Tests::_internal_testlist(int index) const {
  return testlist_.Get(index);
}
inline const ::grpc_cli::WBTTest& ListWBTResponse_Result_Tests::testlist(int index) const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListWBTResponse.Result.Tests.testlist)
  return _internal_testlist(index);
}
inline ::grpc_cli::WBTTest* ListWBTResponse_Result_Tests::_internal_add_testlist() {
  return testlist_.Add();
}
inline ::grpc_cli::WBTTest* ListWBTResponse_Result_Tests::add_testlist() {
  // @@protoc_insertion_point(field_add:grpc_cli.ListWBTResponse.Result.Tests.testlist)
  return _internal_add_testlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::WBTTest >&
ListWBTResponse_Result_Tests::testlist() const {
  // @@protoc_insertion_point(field_list:grpc_cli.ListWBTResponse.Result.Tests.testlist)
  return testlist_;
}

// -------------------------------------------------------------------

// ListWBTResponse_Result

// .grpc_cli.Status status = 1;
inline bool ListWBTResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool ListWBTResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void ListWBTResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& ListWBTResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& ListWBTResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListWBTResponse.Result.status)
  return _internal_status();
}
inline void ListWBTResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ListWBTResponse.Result.status)
}
inline ::grpc_cli::Status* ListWBTResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* ListWBTResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListWBTResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* ListWBTResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* ListWBTResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListWBTResponse.Result.status)
  return _internal_mutable_status();
}
inline void ListWBTResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListWBTResponse.Result.status)
}

// .grpc_cli.ListWBTResponse.Result.Tests data = 2;
inline bool ListWBTResponse_Result::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool ListWBTResponse_Result::has_data() const {
  return _internal_has_data();
}
inline void ListWBTResponse_Result::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::grpc_cli::ListWBTResponse_Result_Tests& ListWBTResponse_Result::_internal_data() const {
  const ::grpc_cli::ListWBTResponse_Result_Tests* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::ListWBTResponse_Result_Tests&>(
      ::grpc_cli::_ListWBTResponse_Result_Tests_default_instance_);
}
inline const ::grpc_cli::ListWBTResponse_Result_Tests& ListWBTResponse_Result::data() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListWBTResponse.Result.data)
  return _internal_data();
}
inline void ListWBTResponse_Result::unsafe_arena_set_allocated_data(
    ::grpc_cli::ListWBTResponse_Result_Tests* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ListWBTResponse.Result.data)
}
inline ::grpc_cli::ListWBTResponse_Result_Tests* ListWBTResponse_Result::release_data() {
  
  ::grpc_cli::ListWBTResponse_Result_Tests* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::ListWBTResponse_Result_Tests* ListWBTResponse_Result::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListWBTResponse.Result.data)
  
  ::grpc_cli::ListWBTResponse_Result_Tests* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::grpc_cli::ListWBTResponse_Result_Tests* ListWBTResponse_Result::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::ListWBTResponse_Result_Tests>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::grpc_cli::ListWBTResponse_Result_Tests* ListWBTResponse_Result::mutable_data() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListWBTResponse.Result.data)
  return _internal_mutable_data();
}
inline void ListWBTResponse_Result::set_allocated_data(::grpc_cli::ListWBTResponse_Result_Tests* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListWBTResponse.Result.data)
}

// -------------------------------------------------------------------

// ListWBTResponse

// string command = 1;
inline void ListWBTResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& ListWBTResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListWBTResponse.command)
  return _internal_command();
}
inline void ListWBTResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListWBTResponse.command)
}
inline std::string* ListWBTResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListWBTResponse.command)
  return _internal_mutable_command();
}
inline const std::string& ListWBTResponse::_internal_command() const {
  return command_.Get();
}
inline void ListWBTResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListWBTResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListWBTResponse.command)
}
inline void ListWBTResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListWBTResponse.command)
}
inline void ListWBTResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListWBTResponse.command)
}
inline std::string* ListWBTResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListWBTResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListWBTResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListWBTResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListWBTResponse.command)
}

// string rid = 2;
inline void ListWBTResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& ListWBTResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListWBTResponse.rid)
  return _internal_rid();
}
inline void ListWBTResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListWBTResponse.rid)
}
inline std::string* ListWBTResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListWBTResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& ListWBTResponse::_internal_rid() const {
  return rid_.Get();
}
inline void ListWBTResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListWBTResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListWBTResponse.rid)
}
inline void ListWBTResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListWBTResponse.rid)
}
inline void ListWBTResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListWBTResponse.rid)
}
inline std::string* ListWBTResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListWBTResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListWBTResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListWBTResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListWBTResponse.rid)
}

// .grpc_cli.ListWBTResponse.Result result = 3;
inline bool ListWBTResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool ListWBTResponse::has_result() const {
  return _internal_has_result();
}
inline void ListWBTResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::ListWBTResponse_Result& ListWBTResponse::_internal_result() const {
  const ::grpc_cli::ListWBTResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::ListWBTResponse_Result&>(
      ::grpc_cli::_ListWBTResponse_Result_default_instance_);
}
inline const ::grpc_cli::ListWBTResponse_Result& ListWBTResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListWBTResponse.result)
  return _internal_result();
}
inline void ListWBTResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::ListWBTResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ListWBTResponse.result)
}
inline ::grpc_cli::ListWBTResponse_Result* ListWBTResponse::release_result() {
  
  ::grpc_cli::ListWBTResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::ListWBTResponse_Result* ListWBTResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListWBTResponse.result)
  
  ::grpc_cli::ListWBTResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::ListWBTResponse_Result* ListWBTResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::ListWBTResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::ListWBTResponse_Result* ListWBTResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListWBTResponse.result)
  return _internal_mutable_result();
}
inline void ListWBTResponse::set_allocated_result(::grpc_cli::ListWBTResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListWBTResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool ListWBTResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool ListWBTResponse::has_info() const {
  return _internal_has_info();
}
inline void ListWBTResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& ListWBTResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& ListWBTResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListWBTResponse.info)
  return _internal_info();
}
inline void ListWBTResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ListWBTResponse.info)
}
inline ::grpc_cli::PosInfo* ListWBTResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* ListWBTResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListWBTResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* ListWBTResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* ListWBTResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListWBTResponse.info)
  return _internal_mutable_info();
}
inline void ListWBTResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListWBTResponse.info)
}

// -------------------------------------------------------------------

// ListQOSPolicyRequest_Param_Volume

// string volumeName = 1;
inline void ListQOSPolicyRequest_Param_Volume::clear_volumename() {
  volumename_.ClearToEmpty();
}
inline const std::string& ListQOSPolicyRequest_Param_Volume::volumename() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListQOSPolicyRequest.Param.Volume.volumeName)
  return _internal_volumename();
}
inline void ListQOSPolicyRequest_Param_Volume::set_volumename(const std::string& value) {
  _internal_set_volumename(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListQOSPolicyRequest.Param.Volume.volumeName)
}
inline std::string* ListQOSPolicyRequest_Param_Volume::mutable_volumename() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListQOSPolicyRequest.Param.Volume.volumeName)
  return _internal_mutable_volumename();
}
inline const std::string& ListQOSPolicyRequest_Param_Volume::_internal_volumename() const {
  return volumename_.Get();
}
inline void ListQOSPolicyRequest_Param_Volume::_internal_set_volumename(const std::string& value) {
  
  volumename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListQOSPolicyRequest_Param_Volume::set_volumename(std::string&& value) {
  
  volumename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListQOSPolicyRequest.Param.Volume.volumeName)
}
inline void ListQOSPolicyRequest_Param_Volume::set_volumename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  volumename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListQOSPolicyRequest.Param.Volume.volumeName)
}
inline void ListQOSPolicyRequest_Param_Volume::set_volumename(const char* value,
    size_t size) {
  
  volumename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListQOSPolicyRequest.Param.Volume.volumeName)
}
inline std::string* ListQOSPolicyRequest_Param_Volume::_internal_mutable_volumename() {
  
  return volumename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListQOSPolicyRequest_Param_Volume::release_volumename() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListQOSPolicyRequest.Param.Volume.volumeName)
  return volumename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListQOSPolicyRequest_Param_Volume::set_allocated_volumename(std::string* volumename) {
  if (volumename != nullptr) {
    
  } else {
    
  }
  volumename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), volumename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListQOSPolicyRequest.Param.Volume.volumeName)
}

// -------------------------------------------------------------------

// ListQOSPolicyRequest_Param

// string array = 1;
inline void ListQOSPolicyRequest_Param::clear_array() {
  array_.ClearToEmpty();
}
inline const std::string& ListQOSPolicyRequest_Param::array() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListQOSPolicyRequest.Param.array)
  return _internal_array();
}
inline void ListQOSPolicyRequest_Param::set_array(const std::string& value) {
  _internal_set_array(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListQOSPolicyRequest.Param.array)
}
inline std::string* ListQOSPolicyRequest_Param::mutable_array() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListQOSPolicyRequest.Param.array)
  return _internal_mutable_array();
}
inline const std::string& ListQOSPolicyRequest_Param::_internal_array() const {
  return array_.Get();
}
inline void ListQOSPolicyRequest_Param::_internal_set_array(const std::string& value) {
  
  array_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListQOSPolicyRequest_Param::set_array(std::string&& value) {
  
  array_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListQOSPolicyRequest.Param.array)
}
inline void ListQOSPolicyRequest_Param::set_array(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  array_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListQOSPolicyRequest.Param.array)
}
inline void ListQOSPolicyRequest_Param::set_array(const char* value,
    size_t size) {
  
  array_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListQOSPolicyRequest.Param.array)
}
inline std::string* ListQOSPolicyRequest_Param::_internal_mutable_array() {
  
  return array_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListQOSPolicyRequest_Param::release_array() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListQOSPolicyRequest.Param.array)
  return array_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListQOSPolicyRequest_Param::set_allocated_array(std::string* array) {
  if (array != nullptr) {
    
  } else {
    
  }
  array_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), array,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListQOSPolicyRequest.Param.array)
}

// repeated .grpc_cli.ListQOSPolicyRequest.Param.Volume vol = 2;
inline int ListQOSPolicyRequest_Param::_internal_vol_size() const {
  return vol_.size();
}
inline int ListQOSPolicyRequest_Param::vol_size() const {
  return _internal_vol_size();
}
inline void ListQOSPolicyRequest_Param::clear_vol() {
  vol_.Clear();
}
inline ::grpc_cli::ListQOSPolicyRequest_Param_Volume* ListQOSPolicyRequest_Param::mutable_vol(int index) {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListQOSPolicyRequest.Param.vol)
  return vol_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::ListQOSPolicyRequest_Param_Volume >*
ListQOSPolicyRequest_Param::mutable_vol() {
  // @@protoc_insertion_point(field_mutable_list:grpc_cli.ListQOSPolicyRequest.Param.vol)
  return &vol_;
}
inline const ::grpc_cli::ListQOSPolicyRequest_Param_Volume& ListQOSPolicyRequest_Param::_internal_vol(int index) const {
  return vol_.Get(index);
}
inline const ::grpc_cli::ListQOSPolicyRequest_Param_Volume& ListQOSPolicyRequest_Param::vol(int index) const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListQOSPolicyRequest.Param.vol)
  return _internal_vol(index);
}
inline ::grpc_cli::ListQOSPolicyRequest_Param_Volume* ListQOSPolicyRequest_Param::_internal_add_vol() {
  return vol_.Add();
}
inline ::grpc_cli::ListQOSPolicyRequest_Param_Volume* ListQOSPolicyRequest_Param::add_vol() {
  // @@protoc_insertion_point(field_add:grpc_cli.ListQOSPolicyRequest.Param.vol)
  return _internal_add_vol();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::ListQOSPolicyRequest_Param_Volume >&
ListQOSPolicyRequest_Param::vol() const {
  // @@protoc_insertion_point(field_list:grpc_cli.ListQOSPolicyRequest.Param.vol)
  return vol_;
}

// -------------------------------------------------------------------

// ListQOSPolicyRequest

// string command = 1;
inline void ListQOSPolicyRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& ListQOSPolicyRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListQOSPolicyRequest.command)
  return _internal_command();
}
inline void ListQOSPolicyRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListQOSPolicyRequest.command)
}
inline std::string* ListQOSPolicyRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListQOSPolicyRequest.command)
  return _internal_mutable_command();
}
inline const std::string& ListQOSPolicyRequest::_internal_command() const {
  return command_.Get();
}
inline void ListQOSPolicyRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListQOSPolicyRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListQOSPolicyRequest.command)
}
inline void ListQOSPolicyRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListQOSPolicyRequest.command)
}
inline void ListQOSPolicyRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListQOSPolicyRequest.command)
}
inline std::string* ListQOSPolicyRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListQOSPolicyRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListQOSPolicyRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListQOSPolicyRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListQOSPolicyRequest.command)
}

// string rid = 2;
inline void ListQOSPolicyRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& ListQOSPolicyRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListQOSPolicyRequest.rid)
  return _internal_rid();
}
inline void ListQOSPolicyRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListQOSPolicyRequest.rid)
}
inline std::string* ListQOSPolicyRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListQOSPolicyRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& ListQOSPolicyRequest::_internal_rid() const {
  return rid_.Get();
}
inline void ListQOSPolicyRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListQOSPolicyRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListQOSPolicyRequest.rid)
}
inline void ListQOSPolicyRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListQOSPolicyRequest.rid)
}
inline void ListQOSPolicyRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListQOSPolicyRequest.rid)
}
inline std::string* ListQOSPolicyRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListQOSPolicyRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListQOSPolicyRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListQOSPolicyRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListQOSPolicyRequest.rid)
}

// string requestor = 3;
inline void ListQOSPolicyRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& ListQOSPolicyRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListQOSPolicyRequest.requestor)
  return _internal_requestor();
}
inline void ListQOSPolicyRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListQOSPolicyRequest.requestor)
}
inline std::string* ListQOSPolicyRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListQOSPolicyRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& ListQOSPolicyRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void ListQOSPolicyRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListQOSPolicyRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListQOSPolicyRequest.requestor)
}
inline void ListQOSPolicyRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListQOSPolicyRequest.requestor)
}
inline void ListQOSPolicyRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListQOSPolicyRequest.requestor)
}
inline std::string* ListQOSPolicyRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListQOSPolicyRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListQOSPolicyRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListQOSPolicyRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListQOSPolicyRequest.requestor)
}

// .grpc_cli.ListQOSPolicyRequest.Param param = 4;
inline bool ListQOSPolicyRequest::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool ListQOSPolicyRequest::has_param() const {
  return _internal_has_param();
}
inline void ListQOSPolicyRequest::clear_param() {
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::grpc_cli::ListQOSPolicyRequest_Param& ListQOSPolicyRequest::_internal_param() const {
  const ::grpc_cli::ListQOSPolicyRequest_Param* p = param_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::ListQOSPolicyRequest_Param&>(
      ::grpc_cli::_ListQOSPolicyRequest_Param_default_instance_);
}
inline const ::grpc_cli::ListQOSPolicyRequest_Param& ListQOSPolicyRequest::param() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListQOSPolicyRequest.param)
  return _internal_param();
}
inline void ListQOSPolicyRequest::unsafe_arena_set_allocated_param(
    ::grpc_cli::ListQOSPolicyRequest_Param* param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ListQOSPolicyRequest.param)
}
inline ::grpc_cli::ListQOSPolicyRequest_Param* ListQOSPolicyRequest::release_param() {
  
  ::grpc_cli::ListQOSPolicyRequest_Param* temp = param_;
  param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::ListQOSPolicyRequest_Param* ListQOSPolicyRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListQOSPolicyRequest.param)
  
  ::grpc_cli::ListQOSPolicyRequest_Param* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::grpc_cli::ListQOSPolicyRequest_Param* ListQOSPolicyRequest::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::ListQOSPolicyRequest_Param>(GetArena());
    param_ = p;
  }
  return param_;
}
inline ::grpc_cli::ListQOSPolicyRequest_Param* ListQOSPolicyRequest::mutable_param() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListQOSPolicyRequest.param)
  return _internal_mutable_param();
}
inline void ListQOSPolicyRequest::set_allocated_param(::grpc_cli::ListQOSPolicyRequest_Param* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListQOSPolicyRequest.param)
}

// -------------------------------------------------------------------

// QOSResult_Arrays

// string ArrayName = 1;
inline void QOSResult_Arrays::clear_arrayname() {
  arrayname_.ClearToEmpty();
}
inline const std::string& QOSResult_Arrays::arrayname() const {
  // @@protoc_insertion_point(field_get:grpc_cli.QOSResult.Arrays.ArrayName)
  return _internal_arrayname();
}
inline void QOSResult_Arrays::set_arrayname(const std::string& value) {
  _internal_set_arrayname(value);
  // @@protoc_insertion_point(field_set:grpc_cli.QOSResult.Arrays.ArrayName)
}
inline std::string* QOSResult_Arrays::mutable_arrayname() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.QOSResult.Arrays.ArrayName)
  return _internal_mutable_arrayname();
}
inline const std::string& QOSResult_Arrays::_internal_arrayname() const {
  return arrayname_.Get();
}
inline void QOSResult_Arrays::_internal_set_arrayname(const std::string& value) {
  
  arrayname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void QOSResult_Arrays::set_arrayname(std::string&& value) {
  
  arrayname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.QOSResult.Arrays.ArrayName)
}
inline void QOSResult_Arrays::set_arrayname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  arrayname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.QOSResult.Arrays.ArrayName)
}
inline void QOSResult_Arrays::set_arrayname(const char* value,
    size_t size) {
  
  arrayname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.QOSResult.Arrays.ArrayName)
}
inline std::string* QOSResult_Arrays::_internal_mutable_arrayname() {
  
  return arrayname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* QOSResult_Arrays::release_arrayname() {
  // @@protoc_insertion_point(field_release:grpc_cli.QOSResult.Arrays.ArrayName)
  return arrayname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QOSResult_Arrays::set_allocated_arrayname(std::string* arrayname) {
  if (arrayname != nullptr) {
    
  } else {
    
  }
  arrayname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), arrayname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.QOSResult.Arrays.ArrayName)
}

// -------------------------------------------------------------------

// QOSResult_RebuildPolicy

// string rebuild = 1;
inline void QOSResult_RebuildPolicy::clear_rebuild() {
  rebuild_.ClearToEmpty();
}
inline const std::string& QOSResult_RebuildPolicy::rebuild() const {
  // @@protoc_insertion_point(field_get:grpc_cli.QOSResult.RebuildPolicy.rebuild)
  return _internal_rebuild();
}
inline void QOSResult_RebuildPolicy::set_rebuild(const std::string& value) {
  _internal_set_rebuild(value);
  // @@protoc_insertion_point(field_set:grpc_cli.QOSResult.RebuildPolicy.rebuild)
}
inline std::string* QOSResult_RebuildPolicy::mutable_rebuild() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.QOSResult.RebuildPolicy.rebuild)
  return _internal_mutable_rebuild();
}
inline const std::string& QOSResult_RebuildPolicy::_internal_rebuild() const {
  return rebuild_.Get();
}
inline void QOSResult_RebuildPolicy::_internal_set_rebuild(const std::string& value) {
  
  rebuild_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void QOSResult_RebuildPolicy::set_rebuild(std::string&& value) {
  
  rebuild_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.QOSResult.RebuildPolicy.rebuild)
}
inline void QOSResult_RebuildPolicy::set_rebuild(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rebuild_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.QOSResult.RebuildPolicy.rebuild)
}
inline void QOSResult_RebuildPolicy::set_rebuild(const char* value,
    size_t size) {
  
  rebuild_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.QOSResult.RebuildPolicy.rebuild)
}
inline std::string* QOSResult_RebuildPolicy::_internal_mutable_rebuild() {
  
  return rebuild_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* QOSResult_RebuildPolicy::release_rebuild() {
  // @@protoc_insertion_point(field_release:grpc_cli.QOSResult.RebuildPolicy.rebuild)
  return rebuild_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QOSResult_RebuildPolicy::set_allocated_rebuild(std::string* rebuild) {
  if (rebuild != nullptr) {
    
  } else {
    
  }
  rebuild_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rebuild,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.QOSResult.RebuildPolicy.rebuild)
}

// -------------------------------------------------------------------

// QOSResult_VolumePolicies

// int32 id = 1;
inline void QOSResult_VolumePolicies::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QOSResult_VolumePolicies::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QOSResult_VolumePolicies::id() const {
  // @@protoc_insertion_point(field_get:grpc_cli.QOSResult.VolumePolicies.id)
  return _internal_id();
}
inline void QOSResult_VolumePolicies::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void QOSResult_VolumePolicies::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:grpc_cli.QOSResult.VolumePolicies.id)
}

// string maxbw = 2;
inline void QOSResult_VolumePolicies::clear_maxbw() {
  maxbw_.ClearToEmpty();
}
inline const std::string& QOSResult_VolumePolicies::maxbw() const {
  // @@protoc_insertion_point(field_get:grpc_cli.QOSResult.VolumePolicies.maxbw)
  return _internal_maxbw();
}
inline void QOSResult_VolumePolicies::set_maxbw(const std::string& value) {
  _internal_set_maxbw(value);
  // @@protoc_insertion_point(field_set:grpc_cli.QOSResult.VolumePolicies.maxbw)
}
inline std::string* QOSResult_VolumePolicies::mutable_maxbw() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.QOSResult.VolumePolicies.maxbw)
  return _internal_mutable_maxbw();
}
inline const std::string& QOSResult_VolumePolicies::_internal_maxbw() const {
  return maxbw_.Get();
}
inline void QOSResult_VolumePolicies::_internal_set_maxbw(const std::string& value) {
  
  maxbw_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void QOSResult_VolumePolicies::set_maxbw(std::string&& value) {
  
  maxbw_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.QOSResult.VolumePolicies.maxbw)
}
inline void QOSResult_VolumePolicies::set_maxbw(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  maxbw_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.QOSResult.VolumePolicies.maxbw)
}
inline void QOSResult_VolumePolicies::set_maxbw(const char* value,
    size_t size) {
  
  maxbw_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.QOSResult.VolumePolicies.maxbw)
}
inline std::string* QOSResult_VolumePolicies::_internal_mutable_maxbw() {
  
  return maxbw_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* QOSResult_VolumePolicies::release_maxbw() {
  // @@protoc_insertion_point(field_release:grpc_cli.QOSResult.VolumePolicies.maxbw)
  return maxbw_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QOSResult_VolumePolicies::set_allocated_maxbw(std::string* maxbw) {
  if (maxbw != nullptr) {
    
  } else {
    
  }
  maxbw_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), maxbw,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.QOSResult.VolumePolicies.maxbw)
}

// string maxiops = 3;
inline void QOSResult_VolumePolicies::clear_maxiops() {
  maxiops_.ClearToEmpty();
}
inline const std::string& QOSResult_VolumePolicies::maxiops() const {
  // @@protoc_insertion_point(field_get:grpc_cli.QOSResult.VolumePolicies.maxiops)
  return _internal_maxiops();
}
inline void QOSResult_VolumePolicies::set_maxiops(const std::string& value) {
  _internal_set_maxiops(value);
  // @@protoc_insertion_point(field_set:grpc_cli.QOSResult.VolumePolicies.maxiops)
}
inline std::string* QOSResult_VolumePolicies::mutable_maxiops() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.QOSResult.VolumePolicies.maxiops)
  return _internal_mutable_maxiops();
}
inline const std::string& QOSResult_VolumePolicies::_internal_maxiops() const {
  return maxiops_.Get();
}
inline void QOSResult_VolumePolicies::_internal_set_maxiops(const std::string& value) {
  
  maxiops_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void QOSResult_VolumePolicies::set_maxiops(std::string&& value) {
  
  maxiops_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.QOSResult.VolumePolicies.maxiops)
}
inline void QOSResult_VolumePolicies::set_maxiops(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  maxiops_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.QOSResult.VolumePolicies.maxiops)
}
inline void QOSResult_VolumePolicies::set_maxiops(const char* value,
    size_t size) {
  
  maxiops_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.QOSResult.VolumePolicies.maxiops)
}
inline std::string* QOSResult_VolumePolicies::_internal_mutable_maxiops() {
  
  return maxiops_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* QOSResult_VolumePolicies::release_maxiops() {
  // @@protoc_insertion_point(field_release:grpc_cli.QOSResult.VolumePolicies.maxiops)
  return maxiops_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QOSResult_VolumePolicies::set_allocated_maxiops(std::string* maxiops) {
  if (maxiops != nullptr) {
    
  } else {
    
  }
  maxiops_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), maxiops,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.QOSResult.VolumePolicies.maxiops)
}

// string miniops = 4;
inline void QOSResult_VolumePolicies::clear_miniops() {
  miniops_.ClearToEmpty();
}
inline const std::string& QOSResult_VolumePolicies::miniops() const {
  // @@protoc_insertion_point(field_get:grpc_cli.QOSResult.VolumePolicies.miniops)
  return _internal_miniops();
}
inline void QOSResult_VolumePolicies::set_miniops(const std::string& value) {
  _internal_set_miniops(value);
  // @@protoc_insertion_point(field_set:grpc_cli.QOSResult.VolumePolicies.miniops)
}
inline std::string* QOSResult_VolumePolicies::mutable_miniops() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.QOSResult.VolumePolicies.miniops)
  return _internal_mutable_miniops();
}
inline const std::string& QOSResult_VolumePolicies::_internal_miniops() const {
  return miniops_.Get();
}
inline void QOSResult_VolumePolicies::_internal_set_miniops(const std::string& value) {
  
  miniops_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void QOSResult_VolumePolicies::set_miniops(std::string&& value) {
  
  miniops_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.QOSResult.VolumePolicies.miniops)
}
inline void QOSResult_VolumePolicies::set_miniops(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  miniops_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.QOSResult.VolumePolicies.miniops)
}
inline void QOSResult_VolumePolicies::set_miniops(const char* value,
    size_t size) {
  
  miniops_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.QOSResult.VolumePolicies.miniops)
}
inline std::string* QOSResult_VolumePolicies::_internal_mutable_miniops() {
  
  return miniops_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* QOSResult_VolumePolicies::release_miniops() {
  // @@protoc_insertion_point(field_release:grpc_cli.QOSResult.VolumePolicies.miniops)
  return miniops_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QOSResult_VolumePolicies::set_allocated_miniops(std::string* miniops) {
  if (miniops != nullptr) {
    
  } else {
    
  }
  miniops_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), miniops,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.QOSResult.VolumePolicies.miniops)
}

// string minbw = 5;
inline void QOSResult_VolumePolicies::clear_minbw() {
  minbw_.ClearToEmpty();
}
inline const std::string& QOSResult_VolumePolicies::minbw() const {
  // @@protoc_insertion_point(field_get:grpc_cli.QOSResult.VolumePolicies.minbw)
  return _internal_minbw();
}
inline void QOSResult_VolumePolicies::set_minbw(const std::string& value) {
  _internal_set_minbw(value);
  // @@protoc_insertion_point(field_set:grpc_cli.QOSResult.VolumePolicies.minbw)
}
inline std::string* QOSResult_VolumePolicies::mutable_minbw() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.QOSResult.VolumePolicies.minbw)
  return _internal_mutable_minbw();
}
inline const std::string& QOSResult_VolumePolicies::_internal_minbw() const {
  return minbw_.Get();
}
inline void QOSResult_VolumePolicies::_internal_set_minbw(const std::string& value) {
  
  minbw_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void QOSResult_VolumePolicies::set_minbw(std::string&& value) {
  
  minbw_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.QOSResult.VolumePolicies.minbw)
}
inline void QOSResult_VolumePolicies::set_minbw(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  minbw_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.QOSResult.VolumePolicies.minbw)
}
inline void QOSResult_VolumePolicies::set_minbw(const char* value,
    size_t size) {
  
  minbw_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.QOSResult.VolumePolicies.minbw)
}
inline std::string* QOSResult_VolumePolicies::_internal_mutable_minbw() {
  
  return minbw_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* QOSResult_VolumePolicies::release_minbw() {
  // @@protoc_insertion_point(field_release:grpc_cli.QOSResult.VolumePolicies.minbw)
  return minbw_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QOSResult_VolumePolicies::set_allocated_minbw(std::string* minbw) {
  if (minbw != nullptr) {
    
  } else {
    
  }
  minbw_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), minbw,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.QOSResult.VolumePolicies.minbw)
}

// string min_bw_guarantee = 6;
inline void QOSResult_VolumePolicies::clear_min_bw_guarantee() {
  min_bw_guarantee_.ClearToEmpty();
}
inline const std::string& QOSResult_VolumePolicies::min_bw_guarantee() const {
  // @@protoc_insertion_point(field_get:grpc_cli.QOSResult.VolumePolicies.min_bw_guarantee)
  return _internal_min_bw_guarantee();
}
inline void QOSResult_VolumePolicies::set_min_bw_guarantee(const std::string& value) {
  _internal_set_min_bw_guarantee(value);
  // @@protoc_insertion_point(field_set:grpc_cli.QOSResult.VolumePolicies.min_bw_guarantee)
}
inline std::string* QOSResult_VolumePolicies::mutable_min_bw_guarantee() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.QOSResult.VolumePolicies.min_bw_guarantee)
  return _internal_mutable_min_bw_guarantee();
}
inline const std::string& QOSResult_VolumePolicies::_internal_min_bw_guarantee() const {
  return min_bw_guarantee_.Get();
}
inline void QOSResult_VolumePolicies::_internal_set_min_bw_guarantee(const std::string& value) {
  
  min_bw_guarantee_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void QOSResult_VolumePolicies::set_min_bw_guarantee(std::string&& value) {
  
  min_bw_guarantee_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.QOSResult.VolumePolicies.min_bw_guarantee)
}
inline void QOSResult_VolumePolicies::set_min_bw_guarantee(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  min_bw_guarantee_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.QOSResult.VolumePolicies.min_bw_guarantee)
}
inline void QOSResult_VolumePolicies::set_min_bw_guarantee(const char* value,
    size_t size) {
  
  min_bw_guarantee_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.QOSResult.VolumePolicies.min_bw_guarantee)
}
inline std::string* QOSResult_VolumePolicies::_internal_mutable_min_bw_guarantee() {
  
  return min_bw_guarantee_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* QOSResult_VolumePolicies::release_min_bw_guarantee() {
  // @@protoc_insertion_point(field_release:grpc_cli.QOSResult.VolumePolicies.min_bw_guarantee)
  return min_bw_guarantee_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QOSResult_VolumePolicies::set_allocated_min_bw_guarantee(std::string* min_bw_guarantee) {
  if (min_bw_guarantee != nullptr) {
    
  } else {
    
  }
  min_bw_guarantee_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), min_bw_guarantee,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.QOSResult.VolumePolicies.min_bw_guarantee)
}

// string min_iops_guarantee = 7;
inline void QOSResult_VolumePolicies::clear_min_iops_guarantee() {
  min_iops_guarantee_.ClearToEmpty();
}
inline const std::string& QOSResult_VolumePolicies::min_iops_guarantee() const {
  // @@protoc_insertion_point(field_get:grpc_cli.QOSResult.VolumePolicies.min_iops_guarantee)
  return _internal_min_iops_guarantee();
}
inline void QOSResult_VolumePolicies::set_min_iops_guarantee(const std::string& value) {
  _internal_set_min_iops_guarantee(value);
  // @@protoc_insertion_point(field_set:grpc_cli.QOSResult.VolumePolicies.min_iops_guarantee)
}
inline std::string* QOSResult_VolumePolicies::mutable_min_iops_guarantee() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.QOSResult.VolumePolicies.min_iops_guarantee)
  return _internal_mutable_min_iops_guarantee();
}
inline const std::string& QOSResult_VolumePolicies::_internal_min_iops_guarantee() const {
  return min_iops_guarantee_.Get();
}
inline void QOSResult_VolumePolicies::_internal_set_min_iops_guarantee(const std::string& value) {
  
  min_iops_guarantee_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void QOSResult_VolumePolicies::set_min_iops_guarantee(std::string&& value) {
  
  min_iops_guarantee_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.QOSResult.VolumePolicies.min_iops_guarantee)
}
inline void QOSResult_VolumePolicies::set_min_iops_guarantee(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  min_iops_guarantee_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.QOSResult.VolumePolicies.min_iops_guarantee)
}
inline void QOSResult_VolumePolicies::set_min_iops_guarantee(const char* value,
    size_t size) {
  
  min_iops_guarantee_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.QOSResult.VolumePolicies.min_iops_guarantee)
}
inline std::string* QOSResult_VolumePolicies::_internal_mutable_min_iops_guarantee() {
  
  return min_iops_guarantee_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* QOSResult_VolumePolicies::release_min_iops_guarantee() {
  // @@protoc_insertion_point(field_release:grpc_cli.QOSResult.VolumePolicies.min_iops_guarantee)
  return min_iops_guarantee_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QOSResult_VolumePolicies::set_allocated_min_iops_guarantee(std::string* min_iops_guarantee) {
  if (min_iops_guarantee != nullptr) {
    
  } else {
    
  }
  min_iops_guarantee_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), min_iops_guarantee,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.QOSResult.VolumePolicies.min_iops_guarantee)
}

// string name = 8;
inline void QOSResult_VolumePolicies::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& QOSResult_VolumePolicies::name() const {
  // @@protoc_insertion_point(field_get:grpc_cli.QOSResult.VolumePolicies.name)
  return _internal_name();
}
inline void QOSResult_VolumePolicies::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:grpc_cli.QOSResult.VolumePolicies.name)
}
inline std::string* QOSResult_VolumePolicies::mutable_name() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.QOSResult.VolumePolicies.name)
  return _internal_mutable_name();
}
inline const std::string& QOSResult_VolumePolicies::_internal_name() const {
  return name_.Get();
}
inline void QOSResult_VolumePolicies::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void QOSResult_VolumePolicies::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.QOSResult.VolumePolicies.name)
}
inline void QOSResult_VolumePolicies::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.QOSResult.VolumePolicies.name)
}
inline void QOSResult_VolumePolicies::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.QOSResult.VolumePolicies.name)
}
inline std::string* QOSResult_VolumePolicies::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* QOSResult_VolumePolicies::release_name() {
  // @@protoc_insertion_point(field_release:grpc_cli.QOSResult.VolumePolicies.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QOSResult_VolumePolicies::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.QOSResult.VolumePolicies.name)
}

// -------------------------------------------------------------------

// QOSResult

// repeated .grpc_cli.QOSResult.Arrays arrayName = 1;
inline int QOSResult::_internal_arrayname_size() const {
  return arrayname_.size();
}
inline int QOSResult::arrayname_size() const {
  return _internal_arrayname_size();
}
inline void QOSResult::clear_arrayname() {
  arrayname_.Clear();
}
inline ::grpc_cli::QOSResult_Arrays* QOSResult::mutable_arrayname(int index) {
  // @@protoc_insertion_point(field_mutable:grpc_cli.QOSResult.arrayName)
  return arrayname_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::QOSResult_Arrays >*
QOSResult::mutable_arrayname() {
  // @@protoc_insertion_point(field_mutable_list:grpc_cli.QOSResult.arrayName)
  return &arrayname_;
}
inline const ::grpc_cli::QOSResult_Arrays& QOSResult::_internal_arrayname(int index) const {
  return arrayname_.Get(index);
}
inline const ::grpc_cli::QOSResult_Arrays& QOSResult::arrayname(int index) const {
  // @@protoc_insertion_point(field_get:grpc_cli.QOSResult.arrayName)
  return _internal_arrayname(index);
}
inline ::grpc_cli::QOSResult_Arrays* QOSResult::_internal_add_arrayname() {
  return arrayname_.Add();
}
inline ::grpc_cli::QOSResult_Arrays* QOSResult::add_arrayname() {
  // @@protoc_insertion_point(field_add:grpc_cli.QOSResult.arrayName)
  return _internal_add_arrayname();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::QOSResult_Arrays >&
QOSResult::arrayname() const {
  // @@protoc_insertion_point(field_list:grpc_cli.QOSResult.arrayName)
  return arrayname_;
}

// repeated .grpc_cli.QOSResult.RebuildPolicy rebuildPolicy = 2;
inline int QOSResult::_internal_rebuildpolicy_size() const {
  return rebuildpolicy_.size();
}
inline int QOSResult::rebuildpolicy_size() const {
  return _internal_rebuildpolicy_size();
}
inline void QOSResult::clear_rebuildpolicy() {
  rebuildpolicy_.Clear();
}
inline ::grpc_cli::QOSResult_RebuildPolicy* QOSResult::mutable_rebuildpolicy(int index) {
  // @@protoc_insertion_point(field_mutable:grpc_cli.QOSResult.rebuildPolicy)
  return rebuildpolicy_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::QOSResult_RebuildPolicy >*
QOSResult::mutable_rebuildpolicy() {
  // @@protoc_insertion_point(field_mutable_list:grpc_cli.QOSResult.rebuildPolicy)
  return &rebuildpolicy_;
}
inline const ::grpc_cli::QOSResult_RebuildPolicy& QOSResult::_internal_rebuildpolicy(int index) const {
  return rebuildpolicy_.Get(index);
}
inline const ::grpc_cli::QOSResult_RebuildPolicy& QOSResult::rebuildpolicy(int index) const {
  // @@protoc_insertion_point(field_get:grpc_cli.QOSResult.rebuildPolicy)
  return _internal_rebuildpolicy(index);
}
inline ::grpc_cli::QOSResult_RebuildPolicy* QOSResult::_internal_add_rebuildpolicy() {
  return rebuildpolicy_.Add();
}
inline ::grpc_cli::QOSResult_RebuildPolicy* QOSResult::add_rebuildpolicy() {
  // @@protoc_insertion_point(field_add:grpc_cli.QOSResult.rebuildPolicy)
  return _internal_add_rebuildpolicy();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::QOSResult_RebuildPolicy >&
QOSResult::rebuildpolicy() const {
  // @@protoc_insertion_point(field_list:grpc_cli.QOSResult.rebuildPolicy)
  return rebuildpolicy_;
}

// repeated .grpc_cli.QOSResult.VolumePolicies volumePolicies = 3;
inline int QOSResult::_internal_volumepolicies_size() const {
  return volumepolicies_.size();
}
inline int QOSResult::volumepolicies_size() const {
  return _internal_volumepolicies_size();
}
inline void QOSResult::clear_volumepolicies() {
  volumepolicies_.Clear();
}
inline ::grpc_cli::QOSResult_VolumePolicies* QOSResult::mutable_volumepolicies(int index) {
  // @@protoc_insertion_point(field_mutable:grpc_cli.QOSResult.volumePolicies)
  return volumepolicies_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::QOSResult_VolumePolicies >*
QOSResult::mutable_volumepolicies() {
  // @@protoc_insertion_point(field_mutable_list:grpc_cli.QOSResult.volumePolicies)
  return &volumepolicies_;
}
inline const ::grpc_cli::QOSResult_VolumePolicies& QOSResult::_internal_volumepolicies(int index) const {
  return volumepolicies_.Get(index);
}
inline const ::grpc_cli::QOSResult_VolumePolicies& QOSResult::volumepolicies(int index) const {
  // @@protoc_insertion_point(field_get:grpc_cli.QOSResult.volumePolicies)
  return _internal_volumepolicies(index);
}
inline ::grpc_cli::QOSResult_VolumePolicies* QOSResult::_internal_add_volumepolicies() {
  return volumepolicies_.Add();
}
inline ::grpc_cli::QOSResult_VolumePolicies* QOSResult::add_volumepolicies() {
  // @@protoc_insertion_point(field_add:grpc_cli.QOSResult.volumePolicies)
  return _internal_add_volumepolicies();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::QOSResult_VolumePolicies >&
QOSResult::volumepolicies() const {
  // @@protoc_insertion_point(field_list:grpc_cli.QOSResult.volumePolicies)
  return volumepolicies_;
}

// -------------------------------------------------------------------

// ListQOSPolicyResponse_Result_ListQOSResult

// repeated .grpc_cli.QOSResult qosresult = 1;
inline int ListQOSPolicyResponse_Result_ListQOSResult::_internal_qosresult_size() const {
  return qosresult_.size();
}
inline int ListQOSPolicyResponse_Result_ListQOSResult::qosresult_size() const {
  return _internal_qosresult_size();
}
inline void ListQOSPolicyResponse_Result_ListQOSResult::clear_qosresult() {
  qosresult_.Clear();
}
inline ::grpc_cli::QOSResult* ListQOSPolicyResponse_Result_ListQOSResult::mutable_qosresult(int index) {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListQOSPolicyResponse.Result.ListQOSResult.qosresult)
  return qosresult_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::QOSResult >*
ListQOSPolicyResponse_Result_ListQOSResult::mutable_qosresult() {
  // @@protoc_insertion_point(field_mutable_list:grpc_cli.ListQOSPolicyResponse.Result.ListQOSResult.qosresult)
  return &qosresult_;
}
inline const ::grpc_cli::QOSResult& ListQOSPolicyResponse_Result_ListQOSResult::_internal_qosresult(int index) const {
  return qosresult_.Get(index);
}
inline const ::grpc_cli::QOSResult& ListQOSPolicyResponse_Result_ListQOSResult::qosresult(int index) const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListQOSPolicyResponse.Result.ListQOSResult.qosresult)
  return _internal_qosresult(index);
}
inline ::grpc_cli::QOSResult* ListQOSPolicyResponse_Result_ListQOSResult::_internal_add_qosresult() {
  return qosresult_.Add();
}
inline ::grpc_cli::QOSResult* ListQOSPolicyResponse_Result_ListQOSResult::add_qosresult() {
  // @@protoc_insertion_point(field_add:grpc_cli.ListQOSPolicyResponse.Result.ListQOSResult.qosresult)
  return _internal_add_qosresult();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grpc_cli::QOSResult >&
ListQOSPolicyResponse_Result_ListQOSResult::qosresult() const {
  // @@protoc_insertion_point(field_list:grpc_cli.ListQOSPolicyResponse.Result.ListQOSResult.qosresult)
  return qosresult_;
}

// -------------------------------------------------------------------

// ListQOSPolicyResponse_Result

// .grpc_cli.Status status = 1;
inline bool ListQOSPolicyResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool ListQOSPolicyResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void ListQOSPolicyResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& ListQOSPolicyResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& ListQOSPolicyResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListQOSPolicyResponse.Result.status)
  return _internal_status();
}
inline void ListQOSPolicyResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ListQOSPolicyResponse.Result.status)
}
inline ::grpc_cli::Status* ListQOSPolicyResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* ListQOSPolicyResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListQOSPolicyResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* ListQOSPolicyResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* ListQOSPolicyResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListQOSPolicyResponse.Result.status)
  return _internal_mutable_status();
}
inline void ListQOSPolicyResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListQOSPolicyResponse.Result.status)
}

// .grpc_cli.ListQOSPolicyResponse.Result.ListQOSResult data = 2;
inline bool ListQOSPolicyResponse_Result::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool ListQOSPolicyResponse_Result::has_data() const {
  return _internal_has_data();
}
inline void ListQOSPolicyResponse_Result::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::grpc_cli::ListQOSPolicyResponse_Result_ListQOSResult& ListQOSPolicyResponse_Result::_internal_data() const {
  const ::grpc_cli::ListQOSPolicyResponse_Result_ListQOSResult* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::ListQOSPolicyResponse_Result_ListQOSResult&>(
      ::grpc_cli::_ListQOSPolicyResponse_Result_ListQOSResult_default_instance_);
}
inline const ::grpc_cli::ListQOSPolicyResponse_Result_ListQOSResult& ListQOSPolicyResponse_Result::data() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListQOSPolicyResponse.Result.data)
  return _internal_data();
}
inline void ListQOSPolicyResponse_Result::unsafe_arena_set_allocated_data(
    ::grpc_cli::ListQOSPolicyResponse_Result_ListQOSResult* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ListQOSPolicyResponse.Result.data)
}
inline ::grpc_cli::ListQOSPolicyResponse_Result_ListQOSResult* ListQOSPolicyResponse_Result::release_data() {
  
  ::grpc_cli::ListQOSPolicyResponse_Result_ListQOSResult* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::ListQOSPolicyResponse_Result_ListQOSResult* ListQOSPolicyResponse_Result::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListQOSPolicyResponse.Result.data)
  
  ::grpc_cli::ListQOSPolicyResponse_Result_ListQOSResult* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::grpc_cli::ListQOSPolicyResponse_Result_ListQOSResult* ListQOSPolicyResponse_Result::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::ListQOSPolicyResponse_Result_ListQOSResult>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::grpc_cli::ListQOSPolicyResponse_Result_ListQOSResult* ListQOSPolicyResponse_Result::mutable_data() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListQOSPolicyResponse.Result.data)
  return _internal_mutable_data();
}
inline void ListQOSPolicyResponse_Result::set_allocated_data(::grpc_cli::ListQOSPolicyResponse_Result_ListQOSResult* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListQOSPolicyResponse.Result.data)
}

// -------------------------------------------------------------------

// ListQOSPolicyResponse

// string command = 1;
inline void ListQOSPolicyResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& ListQOSPolicyResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListQOSPolicyResponse.command)
  return _internal_command();
}
inline void ListQOSPolicyResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListQOSPolicyResponse.command)
}
inline std::string* ListQOSPolicyResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListQOSPolicyResponse.command)
  return _internal_mutable_command();
}
inline const std::string& ListQOSPolicyResponse::_internal_command() const {
  return command_.Get();
}
inline void ListQOSPolicyResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListQOSPolicyResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListQOSPolicyResponse.command)
}
inline void ListQOSPolicyResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListQOSPolicyResponse.command)
}
inline void ListQOSPolicyResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListQOSPolicyResponse.command)
}
inline std::string* ListQOSPolicyResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListQOSPolicyResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListQOSPolicyResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListQOSPolicyResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListQOSPolicyResponse.command)
}

// string rid = 2;
inline void ListQOSPolicyResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& ListQOSPolicyResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListQOSPolicyResponse.rid)
  return _internal_rid();
}
inline void ListQOSPolicyResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ListQOSPolicyResponse.rid)
}
inline std::string* ListQOSPolicyResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListQOSPolicyResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& ListQOSPolicyResponse::_internal_rid() const {
  return rid_.Get();
}
inline void ListQOSPolicyResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListQOSPolicyResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ListQOSPolicyResponse.rid)
}
inline void ListQOSPolicyResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ListQOSPolicyResponse.rid)
}
inline void ListQOSPolicyResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ListQOSPolicyResponse.rid)
}
inline std::string* ListQOSPolicyResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListQOSPolicyResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListQOSPolicyResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListQOSPolicyResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListQOSPolicyResponse.rid)
}

// .grpc_cli.ListQOSPolicyResponse.Result result = 3;
inline bool ListQOSPolicyResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool ListQOSPolicyResponse::has_result() const {
  return _internal_has_result();
}
inline void ListQOSPolicyResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::ListQOSPolicyResponse_Result& ListQOSPolicyResponse::_internal_result() const {
  const ::grpc_cli::ListQOSPolicyResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::ListQOSPolicyResponse_Result&>(
      ::grpc_cli::_ListQOSPolicyResponse_Result_default_instance_);
}
inline const ::grpc_cli::ListQOSPolicyResponse_Result& ListQOSPolicyResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListQOSPolicyResponse.result)
  return _internal_result();
}
inline void ListQOSPolicyResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::ListQOSPolicyResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ListQOSPolicyResponse.result)
}
inline ::grpc_cli::ListQOSPolicyResponse_Result* ListQOSPolicyResponse::release_result() {
  
  ::grpc_cli::ListQOSPolicyResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::ListQOSPolicyResponse_Result* ListQOSPolicyResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListQOSPolicyResponse.result)
  
  ::grpc_cli::ListQOSPolicyResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::ListQOSPolicyResponse_Result* ListQOSPolicyResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::ListQOSPolicyResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::ListQOSPolicyResponse_Result* ListQOSPolicyResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListQOSPolicyResponse.result)
  return _internal_mutable_result();
}
inline void ListQOSPolicyResponse::set_allocated_result(::grpc_cli::ListQOSPolicyResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListQOSPolicyResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool ListQOSPolicyResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool ListQOSPolicyResponse::has_info() const {
  return _internal_has_info();
}
inline void ListQOSPolicyResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& ListQOSPolicyResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& ListQOSPolicyResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ListQOSPolicyResponse.info)
  return _internal_info();
}
inline void ListQOSPolicyResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ListQOSPolicyResponse.info)
}
inline ::grpc_cli::PosInfo* ListQOSPolicyResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* ListQOSPolicyResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.ListQOSPolicyResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* ListQOSPolicyResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* ListQOSPolicyResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ListQOSPolicyResponse.info)
  return _internal_mutable_info();
}
inline void ListQOSPolicyResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ListQOSPolicyResponse.info)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// WBTRequest_Param

// string testname = 1;
inline void WBTRequest_Param::clear_testname() {
  testname_.ClearToEmpty();
}
inline const std::string& WBTRequest_Param::testname() const {
  // @@protoc_insertion_point(field_get:grpc_cli.WBTRequest.Param.testname)
  return _internal_testname();
}
inline void WBTRequest_Param::set_testname(const std::string& value) {
  _internal_set_testname(value);
  // @@protoc_insertion_point(field_set:grpc_cli.WBTRequest.Param.testname)
}
inline std::string* WBTRequest_Param::mutable_testname() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.WBTRequest.Param.testname)
  return _internal_mutable_testname();
}
inline const std::string& WBTRequest_Param::_internal_testname() const {
  return testname_.Get();
}
inline void WBTRequest_Param::_internal_set_testname(const std::string& value) {
  
  testname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WBTRequest_Param::set_testname(std::string&& value) {
  
  testname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.WBTRequest.Param.testname)
}
inline void WBTRequest_Param::set_testname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  testname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.WBTRequest.Param.testname)
}
inline void WBTRequest_Param::set_testname(const char* value,
    size_t size) {
  
  testname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.WBTRequest.Param.testname)
}
inline std::string* WBTRequest_Param::_internal_mutable_testname() {
  
  return testname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WBTRequest_Param::release_testname() {
  // @@protoc_insertion_point(field_release:grpc_cli.WBTRequest.Param.testname)
  return testname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WBTRequest_Param::set_allocated_testname(std::string* testname) {
  if (testname != nullptr) {
    
  } else {
    
  }
  testname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), testname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.WBTRequest.Param.testname)
}

// map<string, string> argv = 2;
inline int WBTRequest_Param::_internal_argv_size() const {
  return argv_.size();
}
inline int WBTRequest_Param::argv_size() const {
  return _internal_argv_size();
}
inline void WBTRequest_Param::clear_argv() {
  argv_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
WBTRequest_Param::_internal_argv() const {
  return argv_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
WBTRequest_Param::argv() const {
  // @@protoc_insertion_point(field_map:grpc_cli.WBTRequest.Param.argv)
  return _internal_argv();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
WBTRequest_Param::_internal_mutable_argv() {
  return argv_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
WBTRequest_Param::mutable_argv() {
  // @@protoc_insertion_point(field_mutable_map:grpc_cli.WBTRequest.Param.argv)
  return _internal_mutable_argv();
}

// -------------------------------------------------------------------

// WBTRequest

// string command = 1;
inline void WBTRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& WBTRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.WBTRequest.command)
  return _internal_command();
}
inline void WBTRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.WBTRequest.command)
}
inline std::string* WBTRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.WBTRequest.command)
  return _internal_mutable_command();
}
inline const std::string& WBTRequest::_internal_command() const {
  return command_.Get();
}
inline void WBTRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WBTRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.WBTRequest.command)
}
inline void WBTRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.WBTRequest.command)
}
inline void WBTRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.WBTRequest.command)
}
inline std::string* WBTRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WBTRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.WBTRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WBTRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.WBTRequest.command)
}

// string rid = 2;
inline void WBTRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& WBTRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.WBTRequest.rid)
  return _internal_rid();
}
inline void WBTRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.WBTRequest.rid)
}
inline std::string* WBTRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.WBTRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& WBTRequest::_internal_rid() const {
  return rid_.Get();
}
inline void WBTRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WBTRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.WBTRequest.rid)
}
inline void WBTRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.WBTRequest.rid)
}
inline void WBTRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.WBTRequest.rid)
}
inline std::string* WBTRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WBTRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.WBTRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WBTRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.WBTRequest.rid)
}

// string requestor = 3;
inline void WBTRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& WBTRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.WBTRequest.requestor)
  return _internal_requestor();
}
inline void WBTRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.WBTRequest.requestor)
}
inline std::string* WBTRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.WBTRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& WBTRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void WBTRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WBTRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.WBTRequest.requestor)
}
inline void WBTRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.WBTRequest.requestor)
}
inline void WBTRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.WBTRequest.requestor)
}
inline std::string* WBTRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WBTRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.WBTRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WBTRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.WBTRequest.requestor)
}

// .grpc_cli.WBTRequest.Param param = 4;
inline bool WBTRequest::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool WBTRequest::has_param() const {
  return _internal_has_param();
}
inline void WBTRequest::clear_param() {
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::grpc_cli::WBTRequest_Param& WBTRequest::_internal_param() const {
  const ::grpc_cli::WBTRequest_Param* p = param_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::WBTRequest_Param&>(
      ::grpc_cli::_WBTRequest_Param_default_instance_);
}
inline const ::grpc_cli::WBTRequest_Param& WBTRequest::param() const {
  // @@protoc_insertion_point(field_get:grpc_cli.WBTRequest.param)
  return _internal_param();
}
inline void WBTRequest::unsafe_arena_set_allocated_param(
    ::grpc_cli::WBTRequest_Param* param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.WBTRequest.param)
}
inline ::grpc_cli::WBTRequest_Param* WBTRequest::release_param() {
  
  ::grpc_cli::WBTRequest_Param* temp = param_;
  param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::WBTRequest_Param* WBTRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:grpc_cli.WBTRequest.param)
  
  ::grpc_cli::WBTRequest_Param* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::grpc_cli::WBTRequest_Param* WBTRequest::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::WBTRequest_Param>(GetArena());
    param_ = p;
  }
  return param_;
}
inline ::grpc_cli::WBTRequest_Param* WBTRequest::mutable_param() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.WBTRequest.param)
  return _internal_mutable_param();
}
inline void WBTRequest::set_allocated_param(::grpc_cli::WBTRequest_Param* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.WBTRequest.param)
}

// -------------------------------------------------------------------

// WBTResponse_Result_TestData

// string testdata = 1;
inline void WBTResponse_Result_TestData::clear_testdata() {
  testdata_.ClearToEmpty();
}
inline const std::string& WBTResponse_Result_TestData::testdata() const {
  // @@protoc_insertion_point(field_get:grpc_cli.WBTResponse.Result.TestData.testdata)
  return _internal_testdata();
}
inline void WBTResponse_Result_TestData::set_testdata(const std::string& value) {
  _internal_set_testdata(value);
  // @@protoc_insertion_point(field_set:grpc_cli.WBTResponse.Result.TestData.testdata)
}
inline std::string* WBTResponse_Result_TestData::mutable_testdata() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.WBTResponse.Result.TestData.testdata)
  return _internal_mutable_testdata();
}
inline const std::string& WBTResponse_Result_TestData::_internal_testdata() const {
  return testdata_.Get();
}
inline void WBTResponse_Result_TestData::_internal_set_testdata(const std::string& value) {
  
  testdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WBTResponse_Result_TestData::set_testdata(std::string&& value) {
  
  testdata_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.WBTResponse.Result.TestData.testdata)
}
inline void WBTResponse_Result_TestData::set_testdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  testdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.WBTResponse.Result.TestData.testdata)
}
inline void WBTResponse_Result_TestData::set_testdata(const char* value,
    size_t size) {
  
  testdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.WBTResponse.Result.TestData.testdata)
}
inline std::string* WBTResponse_Result_TestData::_internal_mutable_testdata() {
  
  return testdata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WBTResponse_Result_TestData::release_testdata() {
  // @@protoc_insertion_point(field_release:grpc_cli.WBTResponse.Result.TestData.testdata)
  return testdata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WBTResponse_Result_TestData::set_allocated_testdata(std::string* testdata) {
  if (testdata != nullptr) {
    
  } else {
    
  }
  testdata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), testdata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.WBTResponse.Result.TestData.testdata)
}

// -------------------------------------------------------------------

// WBTResponse_Result

// .grpc_cli.Status status = 1;
inline bool WBTResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool WBTResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void WBTResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& WBTResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& WBTResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.WBTResponse.Result.status)
  return _internal_status();
}
inline void WBTResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.WBTResponse.Result.status)
}
inline ::grpc_cli::Status* WBTResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* WBTResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.WBTResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* WBTResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* WBTResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.WBTResponse.Result.status)
  return _internal_mutable_status();
}
inline void WBTResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.WBTResponse.Result.status)
}

// .grpc_cli.WBTResponse.Result.TestData data = 2;
inline bool WBTResponse_Result::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool WBTResponse_Result::has_data() const {
  return _internal_has_data();
}
inline void WBTResponse_Result::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::grpc_cli::WBTResponse_Result_TestData& WBTResponse_Result::_internal_data() const {
  const ::grpc_cli::WBTResponse_Result_TestData* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::WBTResponse_Result_TestData&>(
      ::grpc_cli::_WBTResponse_Result_TestData_default_instance_);
}
inline const ::grpc_cli::WBTResponse_Result_TestData& WBTResponse_Result::data() const {
  // @@protoc_insertion_point(field_get:grpc_cli.WBTResponse.Result.data)
  return _internal_data();
}
inline void WBTResponse_Result::unsafe_arena_set_allocated_data(
    ::grpc_cli::WBTResponse_Result_TestData* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.WBTResponse.Result.data)
}
inline ::grpc_cli::WBTResponse_Result_TestData* WBTResponse_Result::release_data() {
  
  ::grpc_cli::WBTResponse_Result_TestData* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::WBTResponse_Result_TestData* WBTResponse_Result::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:grpc_cli.WBTResponse.Result.data)
  
  ::grpc_cli::WBTResponse_Result_TestData* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::grpc_cli::WBTResponse_Result_TestData* WBTResponse_Result::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::WBTResponse_Result_TestData>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::grpc_cli::WBTResponse_Result_TestData* WBTResponse_Result::mutable_data() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.WBTResponse.Result.data)
  return _internal_mutable_data();
}
inline void WBTResponse_Result::set_allocated_data(::grpc_cli::WBTResponse_Result_TestData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.WBTResponse.Result.data)
}

// -------------------------------------------------------------------

// WBTResponse

// string command = 1;
inline void WBTResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& WBTResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.WBTResponse.command)
  return _internal_command();
}
inline void WBTResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.WBTResponse.command)
}
inline std::string* WBTResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.WBTResponse.command)
  return _internal_mutable_command();
}
inline const std::string& WBTResponse::_internal_command() const {
  return command_.Get();
}
inline void WBTResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WBTResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.WBTResponse.command)
}
inline void WBTResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.WBTResponse.command)
}
inline void WBTResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.WBTResponse.command)
}
inline std::string* WBTResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WBTResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.WBTResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WBTResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.WBTResponse.command)
}

// string rid = 2;
inline void WBTResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& WBTResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.WBTResponse.rid)
  return _internal_rid();
}
inline void WBTResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.WBTResponse.rid)
}
inline std::string* WBTResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.WBTResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& WBTResponse::_internal_rid() const {
  return rid_.Get();
}
inline void WBTResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WBTResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.WBTResponse.rid)
}
inline void WBTResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.WBTResponse.rid)
}
inline void WBTResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.WBTResponse.rid)
}
inline std::string* WBTResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WBTResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.WBTResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WBTResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.WBTResponse.rid)
}

// .grpc_cli.WBTResponse.Result result = 3;
inline bool WBTResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool WBTResponse::has_result() const {
  return _internal_has_result();
}
inline void WBTResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::WBTResponse_Result& WBTResponse::_internal_result() const {
  const ::grpc_cli::WBTResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::WBTResponse_Result&>(
      ::grpc_cli::_WBTResponse_Result_default_instance_);
}
inline const ::grpc_cli::WBTResponse_Result& WBTResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.WBTResponse.result)
  return _internal_result();
}
inline void WBTResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::WBTResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.WBTResponse.result)
}
inline ::grpc_cli::WBTResponse_Result* WBTResponse::release_result() {
  
  ::grpc_cli::WBTResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::WBTResponse_Result* WBTResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.WBTResponse.result)
  
  ::grpc_cli::WBTResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::WBTResponse_Result* WBTResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::WBTResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::WBTResponse_Result* WBTResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.WBTResponse.result)
  return _internal_mutable_result();
}
inline void WBTResponse::set_allocated_result(::grpc_cli::WBTResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.WBTResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool WBTResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool WBTResponse::has_info() const {
  return _internal_has_info();
}
inline void WBTResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& WBTResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& WBTResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.WBTResponse.info)
  return _internal_info();
}
inline void WBTResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.WBTResponse.info)
}
inline ::grpc_cli::PosInfo* WBTResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* WBTResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.WBTResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* WBTResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* WBTResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.WBTResponse.info)
  return _internal_mutable_info();
}
inline void WBTResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.WBTResponse.info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpc_cli

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cli_2eproto
