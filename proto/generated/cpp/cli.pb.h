// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cli.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cli_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cli_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cli_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cli_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[31]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cli_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_cli_2eproto_metadata_getter(int index);
namespace grpc_cli {
class GetSystemPropertyRequest;
struct GetSystemPropertyRequestDefaultTypeInternal;
extern GetSystemPropertyRequestDefaultTypeInternal _GetSystemPropertyRequest_default_instance_;
class GetSystemPropertyResponse;
struct GetSystemPropertyResponseDefaultTypeInternal;
extern GetSystemPropertyResponseDefaultTypeInternal _GetSystemPropertyResponse_default_instance_;
class GetSystemPropertyResponse_Result;
struct GetSystemPropertyResponse_ResultDefaultTypeInternal;
extern GetSystemPropertyResponse_ResultDefaultTypeInternal _GetSystemPropertyResponse_Result_default_instance_;
class GetSystemPropertyResponse_Result_Data;
struct GetSystemPropertyResponse_Result_DataDefaultTypeInternal;
extern GetSystemPropertyResponse_Result_DataDefaultTypeInternal _GetSystemPropertyResponse_Result_Data_default_instance_;
class PosInfo;
struct PosInfoDefaultTypeInternal;
extern PosInfoDefaultTypeInternal _PosInfo_default_instance_;
class ResetEventWrrRequest;
struct ResetEventWrrRequestDefaultTypeInternal;
extern ResetEventWrrRequestDefaultTypeInternal _ResetEventWrrRequest_default_instance_;
class ResetEventWrrResponse;
struct ResetEventWrrResponseDefaultTypeInternal;
extern ResetEventWrrResponseDefaultTypeInternal _ResetEventWrrResponse_default_instance_;
class ResetEventWrrResponse_Result;
struct ResetEventWrrResponse_ResultDefaultTypeInternal;
extern ResetEventWrrResponse_ResultDefaultTypeInternal _ResetEventWrrResponse_Result_default_instance_;
class ResetMbrRequest;
struct ResetMbrRequestDefaultTypeInternal;
extern ResetMbrRequestDefaultTypeInternal _ResetMbrRequest_default_instance_;
class ResetMbrResponse;
struct ResetMbrResponseDefaultTypeInternal;
extern ResetMbrResponseDefaultTypeInternal _ResetMbrResponse_default_instance_;
class ResetMbrResponse_Result;
struct ResetMbrResponse_ResultDefaultTypeInternal;
extern ResetMbrResponse_ResultDefaultTypeInternal _ResetMbrResponse_Result_default_instance_;
class SetSystemPropertyRequest;
struct SetSystemPropertyRequestDefaultTypeInternal;
extern SetSystemPropertyRequestDefaultTypeInternal _SetSystemPropertyRequest_default_instance_;
class SetSystemPropertyRequest_Param;
struct SetSystemPropertyRequest_ParamDefaultTypeInternal;
extern SetSystemPropertyRequest_ParamDefaultTypeInternal _SetSystemPropertyRequest_Param_default_instance_;
class SetSystemPropertyResponse;
struct SetSystemPropertyResponseDefaultTypeInternal;
extern SetSystemPropertyResponseDefaultTypeInternal _SetSystemPropertyResponse_default_instance_;
class SetSystemPropertyResponse_Result;
struct SetSystemPropertyResponse_ResultDefaultTypeInternal;
extern SetSystemPropertyResponse_ResultDefaultTypeInternal _SetSystemPropertyResponse_Result_default_instance_;
class Status;
struct StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
class StopRebuildingRequest;
struct StopRebuildingRequestDefaultTypeInternal;
extern StopRebuildingRequestDefaultTypeInternal _StopRebuildingRequest_default_instance_;
class StopRebuildingRequest_Param;
struct StopRebuildingRequest_ParamDefaultTypeInternal;
extern StopRebuildingRequest_ParamDefaultTypeInternal _StopRebuildingRequest_Param_default_instance_;
class StopRebuildingResponse;
struct StopRebuildingResponseDefaultTypeInternal;
extern StopRebuildingResponseDefaultTypeInternal _StopRebuildingResponse_default_instance_;
class StopRebuildingResponse_Result;
struct StopRebuildingResponse_ResultDefaultTypeInternal;
extern StopRebuildingResponse_ResultDefaultTypeInternal _StopRebuildingResponse_Result_default_instance_;
class SystemInfoRequest;
struct SystemInfoRequestDefaultTypeInternal;
extern SystemInfoRequestDefaultTypeInternal _SystemInfoRequest_default_instance_;
class SystemInfoResponse;
struct SystemInfoResponseDefaultTypeInternal;
extern SystemInfoResponseDefaultTypeInternal _SystemInfoResponse_default_instance_;
class SystemInfoResponse_Result;
struct SystemInfoResponse_ResultDefaultTypeInternal;
extern SystemInfoResponse_ResultDefaultTypeInternal _SystemInfoResponse_Result_default_instance_;
class SystemInfoResponse_Result_Data;
struct SystemInfoResponse_Result_DataDefaultTypeInternal;
extern SystemInfoResponse_Result_DataDefaultTypeInternal _SystemInfoResponse_Result_Data_default_instance_;
class SystemStopRequest;
struct SystemStopRequestDefaultTypeInternal;
extern SystemStopRequestDefaultTypeInternal _SystemStopRequest_default_instance_;
class SystemStopResponse;
struct SystemStopResponseDefaultTypeInternal;
extern SystemStopResponseDefaultTypeInternal _SystemStopResponse_default_instance_;
class SystemStopResponse_Result;
struct SystemStopResponse_ResultDefaultTypeInternal;
extern SystemStopResponse_ResultDefaultTypeInternal _SystemStopResponse_Result_default_instance_;
class UpdateEventWrrRequest;
struct UpdateEventWrrRequestDefaultTypeInternal;
extern UpdateEventWrrRequestDefaultTypeInternal _UpdateEventWrrRequest_default_instance_;
class UpdateEventWrrRequest_Param;
struct UpdateEventWrrRequest_ParamDefaultTypeInternal;
extern UpdateEventWrrRequest_ParamDefaultTypeInternal _UpdateEventWrrRequest_Param_default_instance_;
class UpdateEventWrrResponse;
struct UpdateEventWrrResponseDefaultTypeInternal;
extern UpdateEventWrrResponseDefaultTypeInternal _UpdateEventWrrResponse_default_instance_;
class UpdateEventWrrResponse_Result;
struct UpdateEventWrrResponse_ResultDefaultTypeInternal;
extern UpdateEventWrrResponse_ResultDefaultTypeInternal _UpdateEventWrrResponse_Result_default_instance_;
}  // namespace grpc_cli
PROTOBUF_NAMESPACE_OPEN
template<> ::grpc_cli::GetSystemPropertyRequest* Arena::CreateMaybeMessage<::grpc_cli::GetSystemPropertyRequest>(Arena*);
template<> ::grpc_cli::GetSystemPropertyResponse* Arena::CreateMaybeMessage<::grpc_cli::GetSystemPropertyResponse>(Arena*);
template<> ::grpc_cli::GetSystemPropertyResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::GetSystemPropertyResponse_Result>(Arena*);
template<> ::grpc_cli::GetSystemPropertyResponse_Result_Data* Arena::CreateMaybeMessage<::grpc_cli::GetSystemPropertyResponse_Result_Data>(Arena*);
template<> ::grpc_cli::PosInfo* Arena::CreateMaybeMessage<::grpc_cli::PosInfo>(Arena*);
template<> ::grpc_cli::ResetEventWrrRequest* Arena::CreateMaybeMessage<::grpc_cli::ResetEventWrrRequest>(Arena*);
template<> ::grpc_cli::ResetEventWrrResponse* Arena::CreateMaybeMessage<::grpc_cli::ResetEventWrrResponse>(Arena*);
template<> ::grpc_cli::ResetEventWrrResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::ResetEventWrrResponse_Result>(Arena*);
template<> ::grpc_cli::ResetMbrRequest* Arena::CreateMaybeMessage<::grpc_cli::ResetMbrRequest>(Arena*);
template<> ::grpc_cli::ResetMbrResponse* Arena::CreateMaybeMessage<::grpc_cli::ResetMbrResponse>(Arena*);
template<> ::grpc_cli::ResetMbrResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::ResetMbrResponse_Result>(Arena*);
template<> ::grpc_cli::SetSystemPropertyRequest* Arena::CreateMaybeMessage<::grpc_cli::SetSystemPropertyRequest>(Arena*);
template<> ::grpc_cli::SetSystemPropertyRequest_Param* Arena::CreateMaybeMessage<::grpc_cli::SetSystemPropertyRequest_Param>(Arena*);
template<> ::grpc_cli::SetSystemPropertyResponse* Arena::CreateMaybeMessage<::grpc_cli::SetSystemPropertyResponse>(Arena*);
template<> ::grpc_cli::SetSystemPropertyResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::SetSystemPropertyResponse_Result>(Arena*);
template<> ::grpc_cli::Status* Arena::CreateMaybeMessage<::grpc_cli::Status>(Arena*);
template<> ::grpc_cli::StopRebuildingRequest* Arena::CreateMaybeMessage<::grpc_cli::StopRebuildingRequest>(Arena*);
template<> ::grpc_cli::StopRebuildingRequest_Param* Arena::CreateMaybeMessage<::grpc_cli::StopRebuildingRequest_Param>(Arena*);
template<> ::grpc_cli::StopRebuildingResponse* Arena::CreateMaybeMessage<::grpc_cli::StopRebuildingResponse>(Arena*);
template<> ::grpc_cli::StopRebuildingResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::StopRebuildingResponse_Result>(Arena*);
template<> ::grpc_cli::SystemInfoRequest* Arena::CreateMaybeMessage<::grpc_cli::SystemInfoRequest>(Arena*);
template<> ::grpc_cli::SystemInfoResponse* Arena::CreateMaybeMessage<::grpc_cli::SystemInfoResponse>(Arena*);
template<> ::grpc_cli::SystemInfoResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::SystemInfoResponse_Result>(Arena*);
template<> ::grpc_cli::SystemInfoResponse_Result_Data* Arena::CreateMaybeMessage<::grpc_cli::SystemInfoResponse_Result_Data>(Arena*);
template<> ::grpc_cli::SystemStopRequest* Arena::CreateMaybeMessage<::grpc_cli::SystemStopRequest>(Arena*);
template<> ::grpc_cli::SystemStopResponse* Arena::CreateMaybeMessage<::grpc_cli::SystemStopResponse>(Arena*);
template<> ::grpc_cli::SystemStopResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::SystemStopResponse_Result>(Arena*);
template<> ::grpc_cli::UpdateEventWrrRequest* Arena::CreateMaybeMessage<::grpc_cli::UpdateEventWrrRequest>(Arena*);
template<> ::grpc_cli::UpdateEventWrrRequest_Param* Arena::CreateMaybeMessage<::grpc_cli::UpdateEventWrrRequest_Param>(Arena*);
template<> ::grpc_cli::UpdateEventWrrResponse* Arena::CreateMaybeMessage<::grpc_cli::UpdateEventWrrResponse>(Arena*);
template<> ::grpc_cli::UpdateEventWrrResponse_Result* Arena::CreateMaybeMessage<::grpc_cli::UpdateEventWrrResponse_Result>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpc_cli {

// ===================================================================

class Status PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.Status) */ {
 public:
  inline Status() : Status(nullptr) {}
  virtual ~Status();
  explicit constexpr Status(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Status(const Status& from);
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Status& default_instance() {
    return *internal_default_instance();
  }
  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }
  inline void Swap(Status* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Status* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Status* New() const final {
    return CreateMaybeMessage<Status>(nullptr);
  }

  Status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Status* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.Status";
  }
  protected:
  explicit Status(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kCauseFieldNumber = 4,
    kSolutionFieldNumber = 5,
    kCodeFieldNumber = 1,
  };
  // string event_name = 2;
  bool has_event_name() const;
  private:
  bool _internal_has_event_name() const;
  public:
  void clear_event_name();
  const std::string& event_name() const;
  void set_event_name(const std::string& value);
  void set_event_name(std::string&& value);
  void set_event_name(const char* value);
  void set_event_name(const char* value, size_t size);
  std::string* mutable_event_name();
  std::string* release_event_name();
  void set_allocated_event_name(std::string* event_name);
  private:
  const std::string& _internal_event_name() const;
  void _internal_set_event_name(const std::string& value);
  std::string* _internal_mutable_event_name();
  public:

  // string description = 3;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string cause = 4;
  bool has_cause() const;
  private:
  bool _internal_has_cause() const;
  public:
  void clear_cause();
  const std::string& cause() const;
  void set_cause(const std::string& value);
  void set_cause(std::string&& value);
  void set_cause(const char* value);
  void set_cause(const char* value, size_t size);
  std::string* mutable_cause();
  std::string* release_cause();
  void set_allocated_cause(std::string* cause);
  private:
  const std::string& _internal_cause() const;
  void _internal_set_cause(const std::string& value);
  std::string* _internal_mutable_cause();
  public:

  // string solution = 5;
  bool has_solution() const;
  private:
  bool _internal_has_solution() const;
  public:
  void clear_solution();
  const std::string& solution() const;
  void set_solution(const std::string& value);
  void set_solution(std::string&& value);
  void set_solution(const char* value);
  void set_solution(const char* value, size_t size);
  std::string* mutable_solution();
  std::string* release_solution();
  void set_allocated_solution(std::string* solution);
  private:
  const std::string& _internal_solution() const;
  void _internal_set_solution(const std::string& value);
  std::string* _internal_mutable_solution();
  public:

  // int32 code = 1;
  bool has_code() const;
  private:
  bool _internal_has_code() const;
  public:
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.Status)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cause_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr solution_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class PosInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.PosInfo) */ {
 public:
  inline PosInfo() : PosInfo(nullptr) {}
  virtual ~PosInfo();
  explicit constexpr PosInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PosInfo(const PosInfo& from);
  PosInfo(PosInfo&& from) noexcept
    : PosInfo() {
    *this = ::std::move(from);
  }

  inline PosInfo& operator=(const PosInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PosInfo& operator=(PosInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PosInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PosInfo* internal_default_instance() {
    return reinterpret_cast<const PosInfo*>(
               &_PosInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PosInfo& a, PosInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PosInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PosInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PosInfo* New() const final {
    return CreateMaybeMessage<PosInfo>(nullptr);
  }

  PosInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PosInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PosInfo& from);
  void MergeFrom(const PosInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PosInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.PosInfo";
  }
  protected:
  explicit PosInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.PosInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class SystemInfoRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.SystemInfoRequest) */ {
 public:
  inline SystemInfoRequest() : SystemInfoRequest(nullptr) {}
  virtual ~SystemInfoRequest();
  explicit constexpr SystemInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SystemInfoRequest(const SystemInfoRequest& from);
  SystemInfoRequest(SystemInfoRequest&& from) noexcept
    : SystemInfoRequest() {
    *this = ::std::move(from);
  }

  inline SystemInfoRequest& operator=(const SystemInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemInfoRequest& operator=(SystemInfoRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SystemInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SystemInfoRequest* internal_default_instance() {
    return reinterpret_cast<const SystemInfoRequest*>(
               &_SystemInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SystemInfoRequest& a, SystemInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemInfoRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemInfoRequest* New() const final {
    return CreateMaybeMessage<SystemInfoRequest>(nullptr);
  }

  SystemInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SystemInfoRequest& from);
  void MergeFrom(const SystemInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.SystemInfoRequest";
  }
  protected:
  explicit SystemInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.SystemInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class SystemInfoResponse_Result_Data PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.SystemInfoResponse.Result.Data) */ {
 public:
  inline SystemInfoResponse_Result_Data() : SystemInfoResponse_Result_Data(nullptr) {}
  virtual ~SystemInfoResponse_Result_Data();
  explicit constexpr SystemInfoResponse_Result_Data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SystemInfoResponse_Result_Data(const SystemInfoResponse_Result_Data& from);
  SystemInfoResponse_Result_Data(SystemInfoResponse_Result_Data&& from) noexcept
    : SystemInfoResponse_Result_Data() {
    *this = ::std::move(from);
  }

  inline SystemInfoResponse_Result_Data& operator=(const SystemInfoResponse_Result_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemInfoResponse_Result_Data& operator=(SystemInfoResponse_Result_Data&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SystemInfoResponse_Result_Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const SystemInfoResponse_Result_Data* internal_default_instance() {
    return reinterpret_cast<const SystemInfoResponse_Result_Data*>(
               &_SystemInfoResponse_Result_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SystemInfoResponse_Result_Data& a, SystemInfoResponse_Result_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemInfoResponse_Result_Data* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemInfoResponse_Result_Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemInfoResponse_Result_Data* New() const final {
    return CreateMaybeMessage<SystemInfoResponse_Result_Data>(nullptr);
  }

  SystemInfoResponse_Result_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemInfoResponse_Result_Data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SystemInfoResponse_Result_Data& from);
  void MergeFrom(const SystemInfoResponse_Result_Data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemInfoResponse_Result_Data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.SystemInfoResponse.Result.Data";
  }
  protected:
  explicit SystemInfoResponse_Result_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.SystemInfoResponse.Result.Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class SystemInfoResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.SystemInfoResponse.Result) */ {
 public:
  inline SystemInfoResponse_Result() : SystemInfoResponse_Result(nullptr) {}
  virtual ~SystemInfoResponse_Result();
  explicit constexpr SystemInfoResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SystemInfoResponse_Result(const SystemInfoResponse_Result& from);
  SystemInfoResponse_Result(SystemInfoResponse_Result&& from) noexcept
    : SystemInfoResponse_Result() {
    *this = ::std::move(from);
  }

  inline SystemInfoResponse_Result& operator=(const SystemInfoResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemInfoResponse_Result& operator=(SystemInfoResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SystemInfoResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const SystemInfoResponse_Result* internal_default_instance() {
    return reinterpret_cast<const SystemInfoResponse_Result*>(
               &_SystemInfoResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SystemInfoResponse_Result& a, SystemInfoResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemInfoResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemInfoResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemInfoResponse_Result* New() const final {
    return CreateMaybeMessage<SystemInfoResponse_Result>(nullptr);
  }

  SystemInfoResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemInfoResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SystemInfoResponse_Result& from);
  void MergeFrom(const SystemInfoResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemInfoResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.SystemInfoResponse.Result";
  }
  protected:
  explicit SystemInfoResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef SystemInfoResponse_Result_Data Data;

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // .grpc_cli.SystemInfoResponse.Result.Data data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::grpc_cli::SystemInfoResponse_Result_Data& data() const;
  ::grpc_cli::SystemInfoResponse_Result_Data* release_data();
  ::grpc_cli::SystemInfoResponse_Result_Data* mutable_data();
  void set_allocated_data(::grpc_cli::SystemInfoResponse_Result_Data* data);
  private:
  const ::grpc_cli::SystemInfoResponse_Result_Data& _internal_data() const;
  ::grpc_cli::SystemInfoResponse_Result_Data* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::grpc_cli::SystemInfoResponse_Result_Data* data);
  ::grpc_cli::SystemInfoResponse_Result_Data* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:grpc_cli.SystemInfoResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  ::grpc_cli::SystemInfoResponse_Result_Data* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class SystemInfoResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.SystemInfoResponse) */ {
 public:
  inline SystemInfoResponse() : SystemInfoResponse(nullptr) {}
  virtual ~SystemInfoResponse();
  explicit constexpr SystemInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SystemInfoResponse(const SystemInfoResponse& from);
  SystemInfoResponse(SystemInfoResponse&& from) noexcept
    : SystemInfoResponse() {
    *this = ::std::move(from);
  }

  inline SystemInfoResponse& operator=(const SystemInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemInfoResponse& operator=(SystemInfoResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SystemInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SystemInfoResponse* internal_default_instance() {
    return reinterpret_cast<const SystemInfoResponse*>(
               &_SystemInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SystemInfoResponse& a, SystemInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemInfoResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemInfoResponse* New() const final {
    return CreateMaybeMessage<SystemInfoResponse>(nullptr);
  }

  SystemInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SystemInfoResponse& from);
  void MergeFrom(const SystemInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.SystemInfoResponse";
  }
  protected:
  explicit SystemInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef SystemInfoResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.SystemInfoResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::SystemInfoResponse_Result& result() const;
  ::grpc_cli::SystemInfoResponse_Result* release_result();
  ::grpc_cli::SystemInfoResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::SystemInfoResponse_Result* result);
  private:
  const ::grpc_cli::SystemInfoResponse_Result& _internal_result() const;
  ::grpc_cli::SystemInfoResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::SystemInfoResponse_Result* result);
  ::grpc_cli::SystemInfoResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.SystemInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::SystemInfoResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class SystemStopRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.SystemStopRequest) */ {
 public:
  inline SystemStopRequest() : SystemStopRequest(nullptr) {}
  virtual ~SystemStopRequest();
  explicit constexpr SystemStopRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SystemStopRequest(const SystemStopRequest& from);
  SystemStopRequest(SystemStopRequest&& from) noexcept
    : SystemStopRequest() {
    *this = ::std::move(from);
  }

  inline SystemStopRequest& operator=(const SystemStopRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemStopRequest& operator=(SystemStopRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SystemStopRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SystemStopRequest* internal_default_instance() {
    return reinterpret_cast<const SystemStopRequest*>(
               &_SystemStopRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SystemStopRequest& a, SystemStopRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemStopRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemStopRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemStopRequest* New() const final {
    return CreateMaybeMessage<SystemStopRequest>(nullptr);
  }

  SystemStopRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemStopRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SystemStopRequest& from);
  void MergeFrom(const SystemStopRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemStopRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.SystemStopRequest";
  }
  protected:
  explicit SystemStopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.SystemStopRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class SystemStopResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.SystemStopResponse.Result) */ {
 public:
  inline SystemStopResponse_Result() : SystemStopResponse_Result(nullptr) {}
  virtual ~SystemStopResponse_Result();
  explicit constexpr SystemStopResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SystemStopResponse_Result(const SystemStopResponse_Result& from);
  SystemStopResponse_Result(SystemStopResponse_Result&& from) noexcept
    : SystemStopResponse_Result() {
    *this = ::std::move(from);
  }

  inline SystemStopResponse_Result& operator=(const SystemStopResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemStopResponse_Result& operator=(SystemStopResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SystemStopResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const SystemStopResponse_Result* internal_default_instance() {
    return reinterpret_cast<const SystemStopResponse_Result*>(
               &_SystemStopResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SystemStopResponse_Result& a, SystemStopResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemStopResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemStopResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemStopResponse_Result* New() const final {
    return CreateMaybeMessage<SystemStopResponse_Result>(nullptr);
  }

  SystemStopResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemStopResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SystemStopResponse_Result& from);
  void MergeFrom(const SystemStopResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemStopResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.SystemStopResponse.Result";
  }
  protected:
  explicit SystemStopResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:grpc_cli.SystemStopResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class SystemStopResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.SystemStopResponse) */ {
 public:
  inline SystemStopResponse() : SystemStopResponse(nullptr) {}
  virtual ~SystemStopResponse();
  explicit constexpr SystemStopResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SystemStopResponse(const SystemStopResponse& from);
  SystemStopResponse(SystemStopResponse&& from) noexcept
    : SystemStopResponse() {
    *this = ::std::move(from);
  }

  inline SystemStopResponse& operator=(const SystemStopResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemStopResponse& operator=(SystemStopResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SystemStopResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SystemStopResponse* internal_default_instance() {
    return reinterpret_cast<const SystemStopResponse*>(
               &_SystemStopResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SystemStopResponse& a, SystemStopResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemStopResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemStopResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemStopResponse* New() const final {
    return CreateMaybeMessage<SystemStopResponse>(nullptr);
  }

  SystemStopResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemStopResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SystemStopResponse& from);
  void MergeFrom(const SystemStopResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemStopResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.SystemStopResponse";
  }
  protected:
  explicit SystemStopResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef SystemStopResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.SystemStopResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::SystemStopResponse_Result& result() const;
  ::grpc_cli::SystemStopResponse_Result* release_result();
  ::grpc_cli::SystemStopResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::SystemStopResponse_Result* result);
  private:
  const ::grpc_cli::SystemStopResponse_Result& _internal_result() const;
  ::grpc_cli::SystemStopResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::SystemStopResponse_Result* result);
  ::grpc_cli::SystemStopResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.SystemStopResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::SystemStopResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class GetSystemPropertyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.GetSystemPropertyRequest) */ {
 public:
  inline GetSystemPropertyRequest() : GetSystemPropertyRequest(nullptr) {}
  virtual ~GetSystemPropertyRequest();
  explicit constexpr GetSystemPropertyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSystemPropertyRequest(const GetSystemPropertyRequest& from);
  GetSystemPropertyRequest(GetSystemPropertyRequest&& from) noexcept
    : GetSystemPropertyRequest() {
    *this = ::std::move(from);
  }

  inline GetSystemPropertyRequest& operator=(const GetSystemPropertyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSystemPropertyRequest& operator=(GetSystemPropertyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSystemPropertyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSystemPropertyRequest* internal_default_instance() {
    return reinterpret_cast<const GetSystemPropertyRequest*>(
               &_GetSystemPropertyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetSystemPropertyRequest& a, GetSystemPropertyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSystemPropertyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSystemPropertyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSystemPropertyRequest* New() const final {
    return CreateMaybeMessage<GetSystemPropertyRequest>(nullptr);
  }

  GetSystemPropertyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSystemPropertyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSystemPropertyRequest& from);
  void MergeFrom(const GetSystemPropertyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSystemPropertyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.GetSystemPropertyRequest";
  }
  protected:
  explicit GetSystemPropertyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.GetSystemPropertyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class GetSystemPropertyResponse_Result_Data PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.GetSystemPropertyResponse.Result.Data) */ {
 public:
  inline GetSystemPropertyResponse_Result_Data() : GetSystemPropertyResponse_Result_Data(nullptr) {}
  virtual ~GetSystemPropertyResponse_Result_Data();
  explicit constexpr GetSystemPropertyResponse_Result_Data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSystemPropertyResponse_Result_Data(const GetSystemPropertyResponse_Result_Data& from);
  GetSystemPropertyResponse_Result_Data(GetSystemPropertyResponse_Result_Data&& from) noexcept
    : GetSystemPropertyResponse_Result_Data() {
    *this = ::std::move(from);
  }

  inline GetSystemPropertyResponse_Result_Data& operator=(const GetSystemPropertyResponse_Result_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSystemPropertyResponse_Result_Data& operator=(GetSystemPropertyResponse_Result_Data&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSystemPropertyResponse_Result_Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSystemPropertyResponse_Result_Data* internal_default_instance() {
    return reinterpret_cast<const GetSystemPropertyResponse_Result_Data*>(
               &_GetSystemPropertyResponse_Result_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetSystemPropertyResponse_Result_Data& a, GetSystemPropertyResponse_Result_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSystemPropertyResponse_Result_Data* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSystemPropertyResponse_Result_Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSystemPropertyResponse_Result_Data* New() const final {
    return CreateMaybeMessage<GetSystemPropertyResponse_Result_Data>(nullptr);
  }

  GetSystemPropertyResponse_Result_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSystemPropertyResponse_Result_Data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSystemPropertyResponse_Result_Data& from);
  void MergeFrom(const GetSystemPropertyResponse_Result_Data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSystemPropertyResponse_Result_Data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.GetSystemPropertyResponse.Result.Data";
  }
  protected:
  explicit GetSystemPropertyResponse_Result_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRebuildPolicyFieldNumber = 1,
  };
  // string rebuild_policy = 1;
  void clear_rebuild_policy();
  const std::string& rebuild_policy() const;
  void set_rebuild_policy(const std::string& value);
  void set_rebuild_policy(std::string&& value);
  void set_rebuild_policy(const char* value);
  void set_rebuild_policy(const char* value, size_t size);
  std::string* mutable_rebuild_policy();
  std::string* release_rebuild_policy();
  void set_allocated_rebuild_policy(std::string* rebuild_policy);
  private:
  const std::string& _internal_rebuild_policy() const;
  void _internal_set_rebuild_policy(const std::string& value);
  std::string* _internal_mutable_rebuild_policy();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.GetSystemPropertyResponse.Result.Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rebuild_policy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class GetSystemPropertyResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.GetSystemPropertyResponse.Result) */ {
 public:
  inline GetSystemPropertyResponse_Result() : GetSystemPropertyResponse_Result(nullptr) {}
  virtual ~GetSystemPropertyResponse_Result();
  explicit constexpr GetSystemPropertyResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSystemPropertyResponse_Result(const GetSystemPropertyResponse_Result& from);
  GetSystemPropertyResponse_Result(GetSystemPropertyResponse_Result&& from) noexcept
    : GetSystemPropertyResponse_Result() {
    *this = ::std::move(from);
  }

  inline GetSystemPropertyResponse_Result& operator=(const GetSystemPropertyResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSystemPropertyResponse_Result& operator=(GetSystemPropertyResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSystemPropertyResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSystemPropertyResponse_Result* internal_default_instance() {
    return reinterpret_cast<const GetSystemPropertyResponse_Result*>(
               &_GetSystemPropertyResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetSystemPropertyResponse_Result& a, GetSystemPropertyResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSystemPropertyResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSystemPropertyResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSystemPropertyResponse_Result* New() const final {
    return CreateMaybeMessage<GetSystemPropertyResponse_Result>(nullptr);
  }

  GetSystemPropertyResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSystemPropertyResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSystemPropertyResponse_Result& from);
  void MergeFrom(const GetSystemPropertyResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSystemPropertyResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.GetSystemPropertyResponse.Result";
  }
  protected:
  explicit GetSystemPropertyResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetSystemPropertyResponse_Result_Data Data;

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // .grpc_cli.GetSystemPropertyResponse.Result.Data data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::grpc_cli::GetSystemPropertyResponse_Result_Data& data() const;
  ::grpc_cli::GetSystemPropertyResponse_Result_Data* release_data();
  ::grpc_cli::GetSystemPropertyResponse_Result_Data* mutable_data();
  void set_allocated_data(::grpc_cli::GetSystemPropertyResponse_Result_Data* data);
  private:
  const ::grpc_cli::GetSystemPropertyResponse_Result_Data& _internal_data() const;
  ::grpc_cli::GetSystemPropertyResponse_Result_Data* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::grpc_cli::GetSystemPropertyResponse_Result_Data* data);
  ::grpc_cli::GetSystemPropertyResponse_Result_Data* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:grpc_cli.GetSystemPropertyResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  ::grpc_cli::GetSystemPropertyResponse_Result_Data* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class GetSystemPropertyResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.GetSystemPropertyResponse) */ {
 public:
  inline GetSystemPropertyResponse() : GetSystemPropertyResponse(nullptr) {}
  virtual ~GetSystemPropertyResponse();
  explicit constexpr GetSystemPropertyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSystemPropertyResponse(const GetSystemPropertyResponse& from);
  GetSystemPropertyResponse(GetSystemPropertyResponse&& from) noexcept
    : GetSystemPropertyResponse() {
    *this = ::std::move(from);
  }

  inline GetSystemPropertyResponse& operator=(const GetSystemPropertyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSystemPropertyResponse& operator=(GetSystemPropertyResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSystemPropertyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSystemPropertyResponse* internal_default_instance() {
    return reinterpret_cast<const GetSystemPropertyResponse*>(
               &_GetSystemPropertyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetSystemPropertyResponse& a, GetSystemPropertyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSystemPropertyResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSystemPropertyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSystemPropertyResponse* New() const final {
    return CreateMaybeMessage<GetSystemPropertyResponse>(nullptr);
  }

  GetSystemPropertyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSystemPropertyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSystemPropertyResponse& from);
  void MergeFrom(const GetSystemPropertyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSystemPropertyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.GetSystemPropertyResponse";
  }
  protected:
  explicit GetSystemPropertyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetSystemPropertyResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.GetSystemPropertyResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::GetSystemPropertyResponse_Result& result() const;
  ::grpc_cli::GetSystemPropertyResponse_Result* release_result();
  ::grpc_cli::GetSystemPropertyResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::GetSystemPropertyResponse_Result* result);
  private:
  const ::grpc_cli::GetSystemPropertyResponse_Result& _internal_result() const;
  ::grpc_cli::GetSystemPropertyResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::GetSystemPropertyResponse_Result* result);
  ::grpc_cli::GetSystemPropertyResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.GetSystemPropertyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::GetSystemPropertyResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class SetSystemPropertyRequest_Param PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.SetSystemPropertyRequest.Param) */ {
 public:
  inline SetSystemPropertyRequest_Param() : SetSystemPropertyRequest_Param(nullptr) {}
  virtual ~SetSystemPropertyRequest_Param();
  explicit constexpr SetSystemPropertyRequest_Param(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetSystemPropertyRequest_Param(const SetSystemPropertyRequest_Param& from);
  SetSystemPropertyRequest_Param(SetSystemPropertyRequest_Param&& from) noexcept
    : SetSystemPropertyRequest_Param() {
    *this = ::std::move(from);
  }

  inline SetSystemPropertyRequest_Param& operator=(const SetSystemPropertyRequest_Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetSystemPropertyRequest_Param& operator=(SetSystemPropertyRequest_Param&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetSystemPropertyRequest_Param& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetSystemPropertyRequest_Param* internal_default_instance() {
    return reinterpret_cast<const SetSystemPropertyRequest_Param*>(
               &_SetSystemPropertyRequest_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SetSystemPropertyRequest_Param& a, SetSystemPropertyRequest_Param& b) {
    a.Swap(&b);
  }
  inline void Swap(SetSystemPropertyRequest_Param* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetSystemPropertyRequest_Param* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetSystemPropertyRequest_Param* New() const final {
    return CreateMaybeMessage<SetSystemPropertyRequest_Param>(nullptr);
  }

  SetSystemPropertyRequest_Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetSystemPropertyRequest_Param>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetSystemPropertyRequest_Param& from);
  void MergeFrom(const SetSystemPropertyRequest_Param& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetSystemPropertyRequest_Param* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.SetSystemPropertyRequest.Param";
  }
  protected:
  explicit SetSystemPropertyRequest_Param(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLevelFieldNumber = 1,
  };
  // string level = 1;
  void clear_level();
  const std::string& level() const;
  void set_level(const std::string& value);
  void set_level(std::string&& value);
  void set_level(const char* value);
  void set_level(const char* value, size_t size);
  std::string* mutable_level();
  std::string* release_level();
  void set_allocated_level(std::string* level);
  private:
  const std::string& _internal_level() const;
  void _internal_set_level(const std::string& value);
  std::string* _internal_mutable_level();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.SetSystemPropertyRequest.Param)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class SetSystemPropertyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.SetSystemPropertyRequest) */ {
 public:
  inline SetSystemPropertyRequest() : SetSystemPropertyRequest(nullptr) {}
  virtual ~SetSystemPropertyRequest();
  explicit constexpr SetSystemPropertyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetSystemPropertyRequest(const SetSystemPropertyRequest& from);
  SetSystemPropertyRequest(SetSystemPropertyRequest&& from) noexcept
    : SetSystemPropertyRequest() {
    *this = ::std::move(from);
  }

  inline SetSystemPropertyRequest& operator=(const SetSystemPropertyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetSystemPropertyRequest& operator=(SetSystemPropertyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetSystemPropertyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetSystemPropertyRequest* internal_default_instance() {
    return reinterpret_cast<const SetSystemPropertyRequest*>(
               &_SetSystemPropertyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SetSystemPropertyRequest& a, SetSystemPropertyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetSystemPropertyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetSystemPropertyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetSystemPropertyRequest* New() const final {
    return CreateMaybeMessage<SetSystemPropertyRequest>(nullptr);
  }

  SetSystemPropertyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetSystemPropertyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetSystemPropertyRequest& from);
  void MergeFrom(const SetSystemPropertyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetSystemPropertyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.SetSystemPropertyRequest";
  }
  protected:
  explicit SetSystemPropertyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef SetSystemPropertyRequest_Param Param;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
    kParamFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // .grpc_cli.SetSystemPropertyRequest.Param param = 4;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::grpc_cli::SetSystemPropertyRequest_Param& param() const;
  ::grpc_cli::SetSystemPropertyRequest_Param* release_param();
  ::grpc_cli::SetSystemPropertyRequest_Param* mutable_param();
  void set_allocated_param(::grpc_cli::SetSystemPropertyRequest_Param* param);
  private:
  const ::grpc_cli::SetSystemPropertyRequest_Param& _internal_param() const;
  ::grpc_cli::SetSystemPropertyRequest_Param* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::grpc_cli::SetSystemPropertyRequest_Param* param);
  ::grpc_cli::SetSystemPropertyRequest_Param* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:grpc_cli.SetSystemPropertyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  ::grpc_cli::SetSystemPropertyRequest_Param* param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class SetSystemPropertyResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.SetSystemPropertyResponse.Result) */ {
 public:
  inline SetSystemPropertyResponse_Result() : SetSystemPropertyResponse_Result(nullptr) {}
  virtual ~SetSystemPropertyResponse_Result();
  explicit constexpr SetSystemPropertyResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetSystemPropertyResponse_Result(const SetSystemPropertyResponse_Result& from);
  SetSystemPropertyResponse_Result(SetSystemPropertyResponse_Result&& from) noexcept
    : SetSystemPropertyResponse_Result() {
    *this = ::std::move(from);
  }

  inline SetSystemPropertyResponse_Result& operator=(const SetSystemPropertyResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetSystemPropertyResponse_Result& operator=(SetSystemPropertyResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetSystemPropertyResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetSystemPropertyResponse_Result* internal_default_instance() {
    return reinterpret_cast<const SetSystemPropertyResponse_Result*>(
               &_SetSystemPropertyResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SetSystemPropertyResponse_Result& a, SetSystemPropertyResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(SetSystemPropertyResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetSystemPropertyResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetSystemPropertyResponse_Result* New() const final {
    return CreateMaybeMessage<SetSystemPropertyResponse_Result>(nullptr);
  }

  SetSystemPropertyResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetSystemPropertyResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetSystemPropertyResponse_Result& from);
  void MergeFrom(const SetSystemPropertyResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetSystemPropertyResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.SetSystemPropertyResponse.Result";
  }
  protected:
  explicit SetSystemPropertyResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:grpc_cli.SetSystemPropertyResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class SetSystemPropertyResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.SetSystemPropertyResponse) */ {
 public:
  inline SetSystemPropertyResponse() : SetSystemPropertyResponse(nullptr) {}
  virtual ~SetSystemPropertyResponse();
  explicit constexpr SetSystemPropertyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetSystemPropertyResponse(const SetSystemPropertyResponse& from);
  SetSystemPropertyResponse(SetSystemPropertyResponse&& from) noexcept
    : SetSystemPropertyResponse() {
    *this = ::std::move(from);
  }

  inline SetSystemPropertyResponse& operator=(const SetSystemPropertyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetSystemPropertyResponse& operator=(SetSystemPropertyResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetSystemPropertyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetSystemPropertyResponse* internal_default_instance() {
    return reinterpret_cast<const SetSystemPropertyResponse*>(
               &_SetSystemPropertyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SetSystemPropertyResponse& a, SetSystemPropertyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetSystemPropertyResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetSystemPropertyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetSystemPropertyResponse* New() const final {
    return CreateMaybeMessage<SetSystemPropertyResponse>(nullptr);
  }

  SetSystemPropertyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetSystemPropertyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetSystemPropertyResponse& from);
  void MergeFrom(const SetSystemPropertyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetSystemPropertyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.SetSystemPropertyResponse";
  }
  protected:
  explicit SetSystemPropertyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef SetSystemPropertyResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.SetSystemPropertyResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::SetSystemPropertyResponse_Result& result() const;
  ::grpc_cli::SetSystemPropertyResponse_Result* release_result();
  ::grpc_cli::SetSystemPropertyResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::SetSystemPropertyResponse_Result* result);
  private:
  const ::grpc_cli::SetSystemPropertyResponse_Result& _internal_result() const;
  ::grpc_cli::SetSystemPropertyResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::SetSystemPropertyResponse_Result* result);
  ::grpc_cli::SetSystemPropertyResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.SetSystemPropertyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::SetSystemPropertyResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ResetEventWrrRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ResetEventWrrRequest) */ {
 public:
  inline ResetEventWrrRequest() : ResetEventWrrRequest(nullptr) {}
  virtual ~ResetEventWrrRequest();
  explicit constexpr ResetEventWrrRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResetEventWrrRequest(const ResetEventWrrRequest& from);
  ResetEventWrrRequest(ResetEventWrrRequest&& from) noexcept
    : ResetEventWrrRequest() {
    *this = ::std::move(from);
  }

  inline ResetEventWrrRequest& operator=(const ResetEventWrrRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResetEventWrrRequest& operator=(ResetEventWrrRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResetEventWrrRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResetEventWrrRequest* internal_default_instance() {
    return reinterpret_cast<const ResetEventWrrRequest*>(
               &_ResetEventWrrRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ResetEventWrrRequest& a, ResetEventWrrRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ResetEventWrrRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResetEventWrrRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResetEventWrrRequest* New() const final {
    return CreateMaybeMessage<ResetEventWrrRequest>(nullptr);
  }

  ResetEventWrrRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResetEventWrrRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResetEventWrrRequest& from);
  void MergeFrom(const ResetEventWrrRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetEventWrrRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ResetEventWrrRequest";
  }
  protected:
  explicit ResetEventWrrRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.ResetEventWrrRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ResetEventWrrResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ResetEventWrrResponse.Result) */ {
 public:
  inline ResetEventWrrResponse_Result() : ResetEventWrrResponse_Result(nullptr) {}
  virtual ~ResetEventWrrResponse_Result();
  explicit constexpr ResetEventWrrResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResetEventWrrResponse_Result(const ResetEventWrrResponse_Result& from);
  ResetEventWrrResponse_Result(ResetEventWrrResponse_Result&& from) noexcept
    : ResetEventWrrResponse_Result() {
    *this = ::std::move(from);
  }

  inline ResetEventWrrResponse_Result& operator=(const ResetEventWrrResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResetEventWrrResponse_Result& operator=(ResetEventWrrResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResetEventWrrResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResetEventWrrResponse_Result* internal_default_instance() {
    return reinterpret_cast<const ResetEventWrrResponse_Result*>(
               &_ResetEventWrrResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ResetEventWrrResponse_Result& a, ResetEventWrrResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(ResetEventWrrResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResetEventWrrResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResetEventWrrResponse_Result* New() const final {
    return CreateMaybeMessage<ResetEventWrrResponse_Result>(nullptr);
  }

  ResetEventWrrResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResetEventWrrResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResetEventWrrResponse_Result& from);
  void MergeFrom(const ResetEventWrrResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetEventWrrResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ResetEventWrrResponse.Result";
  }
  protected:
  explicit ResetEventWrrResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:grpc_cli.ResetEventWrrResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ResetEventWrrResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ResetEventWrrResponse) */ {
 public:
  inline ResetEventWrrResponse() : ResetEventWrrResponse(nullptr) {}
  virtual ~ResetEventWrrResponse();
  explicit constexpr ResetEventWrrResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResetEventWrrResponse(const ResetEventWrrResponse& from);
  ResetEventWrrResponse(ResetEventWrrResponse&& from) noexcept
    : ResetEventWrrResponse() {
    *this = ::std::move(from);
  }

  inline ResetEventWrrResponse& operator=(const ResetEventWrrResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResetEventWrrResponse& operator=(ResetEventWrrResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResetEventWrrResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResetEventWrrResponse* internal_default_instance() {
    return reinterpret_cast<const ResetEventWrrResponse*>(
               &_ResetEventWrrResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ResetEventWrrResponse& a, ResetEventWrrResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ResetEventWrrResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResetEventWrrResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResetEventWrrResponse* New() const final {
    return CreateMaybeMessage<ResetEventWrrResponse>(nullptr);
  }

  ResetEventWrrResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResetEventWrrResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResetEventWrrResponse& from);
  void MergeFrom(const ResetEventWrrResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetEventWrrResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ResetEventWrrResponse";
  }
  protected:
  explicit ResetEventWrrResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ResetEventWrrResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.ResetEventWrrResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::ResetEventWrrResponse_Result& result() const;
  ::grpc_cli::ResetEventWrrResponse_Result* release_result();
  ::grpc_cli::ResetEventWrrResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::ResetEventWrrResponse_Result* result);
  private:
  const ::grpc_cli::ResetEventWrrResponse_Result& _internal_result() const;
  ::grpc_cli::ResetEventWrrResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::ResetEventWrrResponse_Result* result);
  ::grpc_cli::ResetEventWrrResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.ResetEventWrrResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::ResetEventWrrResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ResetMbrRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ResetMbrRequest) */ {
 public:
  inline ResetMbrRequest() : ResetMbrRequest(nullptr) {}
  virtual ~ResetMbrRequest();
  explicit constexpr ResetMbrRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResetMbrRequest(const ResetMbrRequest& from);
  ResetMbrRequest(ResetMbrRequest&& from) noexcept
    : ResetMbrRequest() {
    *this = ::std::move(from);
  }

  inline ResetMbrRequest& operator=(const ResetMbrRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResetMbrRequest& operator=(ResetMbrRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResetMbrRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResetMbrRequest* internal_default_instance() {
    return reinterpret_cast<const ResetMbrRequest*>(
               &_ResetMbrRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ResetMbrRequest& a, ResetMbrRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ResetMbrRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResetMbrRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResetMbrRequest* New() const final {
    return CreateMaybeMessage<ResetMbrRequest>(nullptr);
  }

  ResetMbrRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResetMbrRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResetMbrRequest& from);
  void MergeFrom(const ResetMbrRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetMbrRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ResetMbrRequest";
  }
  protected:
  explicit ResetMbrRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.ResetMbrRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ResetMbrResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ResetMbrResponse.Result) */ {
 public:
  inline ResetMbrResponse_Result() : ResetMbrResponse_Result(nullptr) {}
  virtual ~ResetMbrResponse_Result();
  explicit constexpr ResetMbrResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResetMbrResponse_Result(const ResetMbrResponse_Result& from);
  ResetMbrResponse_Result(ResetMbrResponse_Result&& from) noexcept
    : ResetMbrResponse_Result() {
    *this = ::std::move(from);
  }

  inline ResetMbrResponse_Result& operator=(const ResetMbrResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResetMbrResponse_Result& operator=(ResetMbrResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResetMbrResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResetMbrResponse_Result* internal_default_instance() {
    return reinterpret_cast<const ResetMbrResponse_Result*>(
               &_ResetMbrResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ResetMbrResponse_Result& a, ResetMbrResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(ResetMbrResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResetMbrResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResetMbrResponse_Result* New() const final {
    return CreateMaybeMessage<ResetMbrResponse_Result>(nullptr);
  }

  ResetMbrResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResetMbrResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResetMbrResponse_Result& from);
  void MergeFrom(const ResetMbrResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetMbrResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ResetMbrResponse.Result";
  }
  protected:
  explicit ResetMbrResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:grpc_cli.ResetMbrResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class ResetMbrResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.ResetMbrResponse) */ {
 public:
  inline ResetMbrResponse() : ResetMbrResponse(nullptr) {}
  virtual ~ResetMbrResponse();
  explicit constexpr ResetMbrResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResetMbrResponse(const ResetMbrResponse& from);
  ResetMbrResponse(ResetMbrResponse&& from) noexcept
    : ResetMbrResponse() {
    *this = ::std::move(from);
  }

  inline ResetMbrResponse& operator=(const ResetMbrResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResetMbrResponse& operator=(ResetMbrResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResetMbrResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResetMbrResponse* internal_default_instance() {
    return reinterpret_cast<const ResetMbrResponse*>(
               &_ResetMbrResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ResetMbrResponse& a, ResetMbrResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ResetMbrResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResetMbrResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResetMbrResponse* New() const final {
    return CreateMaybeMessage<ResetMbrResponse>(nullptr);
  }

  ResetMbrResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResetMbrResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResetMbrResponse& from);
  void MergeFrom(const ResetMbrResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetMbrResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.ResetMbrResponse";
  }
  protected:
  explicit ResetMbrResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ResetMbrResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.ResetMbrResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::ResetMbrResponse_Result& result() const;
  ::grpc_cli::ResetMbrResponse_Result* release_result();
  ::grpc_cli::ResetMbrResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::ResetMbrResponse_Result* result);
  private:
  const ::grpc_cli::ResetMbrResponse_Result& _internal_result() const;
  ::grpc_cli::ResetMbrResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::ResetMbrResponse_Result* result);
  ::grpc_cli::ResetMbrResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.ResetMbrResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::ResetMbrResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class StopRebuildingRequest_Param PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.StopRebuildingRequest.Param) */ {
 public:
  inline StopRebuildingRequest_Param() : StopRebuildingRequest_Param(nullptr) {}
  virtual ~StopRebuildingRequest_Param();
  explicit constexpr StopRebuildingRequest_Param(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopRebuildingRequest_Param(const StopRebuildingRequest_Param& from);
  StopRebuildingRequest_Param(StopRebuildingRequest_Param&& from) noexcept
    : StopRebuildingRequest_Param() {
    *this = ::std::move(from);
  }

  inline StopRebuildingRequest_Param& operator=(const StopRebuildingRequest_Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopRebuildingRequest_Param& operator=(StopRebuildingRequest_Param&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopRebuildingRequest_Param& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopRebuildingRequest_Param* internal_default_instance() {
    return reinterpret_cast<const StopRebuildingRequest_Param*>(
               &_StopRebuildingRequest_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(StopRebuildingRequest_Param& a, StopRebuildingRequest_Param& b) {
    a.Swap(&b);
  }
  inline void Swap(StopRebuildingRequest_Param* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopRebuildingRequest_Param* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopRebuildingRequest_Param* New() const final {
    return CreateMaybeMessage<StopRebuildingRequest_Param>(nullptr);
  }

  StopRebuildingRequest_Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopRebuildingRequest_Param>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopRebuildingRequest_Param& from);
  void MergeFrom(const StopRebuildingRequest_Param& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopRebuildingRequest_Param* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.StopRebuildingRequest.Param";
  }
  protected:
  explicit StopRebuildingRequest_Param(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.StopRebuildingRequest.Param)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class StopRebuildingRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.StopRebuildingRequest) */ {
 public:
  inline StopRebuildingRequest() : StopRebuildingRequest(nullptr) {}
  virtual ~StopRebuildingRequest();
  explicit constexpr StopRebuildingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopRebuildingRequest(const StopRebuildingRequest& from);
  StopRebuildingRequest(StopRebuildingRequest&& from) noexcept
    : StopRebuildingRequest() {
    *this = ::std::move(from);
  }

  inline StopRebuildingRequest& operator=(const StopRebuildingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopRebuildingRequest& operator=(StopRebuildingRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopRebuildingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopRebuildingRequest* internal_default_instance() {
    return reinterpret_cast<const StopRebuildingRequest*>(
               &_StopRebuildingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(StopRebuildingRequest& a, StopRebuildingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StopRebuildingRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopRebuildingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopRebuildingRequest* New() const final {
    return CreateMaybeMessage<StopRebuildingRequest>(nullptr);
  }

  StopRebuildingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopRebuildingRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopRebuildingRequest& from);
  void MergeFrom(const StopRebuildingRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopRebuildingRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.StopRebuildingRequest";
  }
  protected:
  explicit StopRebuildingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef StopRebuildingRequest_Param Param;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
    kParamFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // .grpc_cli.StopRebuildingRequest.Param param = 4;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::grpc_cli::StopRebuildingRequest_Param& param() const;
  ::grpc_cli::StopRebuildingRequest_Param* release_param();
  ::grpc_cli::StopRebuildingRequest_Param* mutable_param();
  void set_allocated_param(::grpc_cli::StopRebuildingRequest_Param* param);
  private:
  const ::grpc_cli::StopRebuildingRequest_Param& _internal_param() const;
  ::grpc_cli::StopRebuildingRequest_Param* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::grpc_cli::StopRebuildingRequest_Param* param);
  ::grpc_cli::StopRebuildingRequest_Param* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:grpc_cli.StopRebuildingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  ::grpc_cli::StopRebuildingRequest_Param* param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class StopRebuildingResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.StopRebuildingResponse.Result) */ {
 public:
  inline StopRebuildingResponse_Result() : StopRebuildingResponse_Result(nullptr) {}
  virtual ~StopRebuildingResponse_Result();
  explicit constexpr StopRebuildingResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopRebuildingResponse_Result(const StopRebuildingResponse_Result& from);
  StopRebuildingResponse_Result(StopRebuildingResponse_Result&& from) noexcept
    : StopRebuildingResponse_Result() {
    *this = ::std::move(from);
  }

  inline StopRebuildingResponse_Result& operator=(const StopRebuildingResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopRebuildingResponse_Result& operator=(StopRebuildingResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopRebuildingResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopRebuildingResponse_Result* internal_default_instance() {
    return reinterpret_cast<const StopRebuildingResponse_Result*>(
               &_StopRebuildingResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(StopRebuildingResponse_Result& a, StopRebuildingResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(StopRebuildingResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopRebuildingResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopRebuildingResponse_Result* New() const final {
    return CreateMaybeMessage<StopRebuildingResponse_Result>(nullptr);
  }

  StopRebuildingResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopRebuildingResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopRebuildingResponse_Result& from);
  void MergeFrom(const StopRebuildingResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopRebuildingResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.StopRebuildingResponse.Result";
  }
  protected:
  explicit StopRebuildingResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:grpc_cli.StopRebuildingResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class StopRebuildingResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.StopRebuildingResponse) */ {
 public:
  inline StopRebuildingResponse() : StopRebuildingResponse(nullptr) {}
  virtual ~StopRebuildingResponse();
  explicit constexpr StopRebuildingResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopRebuildingResponse(const StopRebuildingResponse& from);
  StopRebuildingResponse(StopRebuildingResponse&& from) noexcept
    : StopRebuildingResponse() {
    *this = ::std::move(from);
  }

  inline StopRebuildingResponse& operator=(const StopRebuildingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopRebuildingResponse& operator=(StopRebuildingResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopRebuildingResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopRebuildingResponse* internal_default_instance() {
    return reinterpret_cast<const StopRebuildingResponse*>(
               &_StopRebuildingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(StopRebuildingResponse& a, StopRebuildingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StopRebuildingResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopRebuildingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopRebuildingResponse* New() const final {
    return CreateMaybeMessage<StopRebuildingResponse>(nullptr);
  }

  StopRebuildingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopRebuildingResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopRebuildingResponse& from);
  void MergeFrom(const StopRebuildingResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopRebuildingResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.StopRebuildingResponse";
  }
  protected:
  explicit StopRebuildingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef StopRebuildingResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.StopRebuildingResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::StopRebuildingResponse_Result& result() const;
  ::grpc_cli::StopRebuildingResponse_Result* release_result();
  ::grpc_cli::StopRebuildingResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::StopRebuildingResponse_Result* result);
  private:
  const ::grpc_cli::StopRebuildingResponse_Result& _internal_result() const;
  ::grpc_cli::StopRebuildingResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::StopRebuildingResponse_Result* result);
  ::grpc_cli::StopRebuildingResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.StopRebuildingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::StopRebuildingResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class UpdateEventWrrRequest_Param PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.UpdateEventWrrRequest.Param) */ {
 public:
  inline UpdateEventWrrRequest_Param() : UpdateEventWrrRequest_Param(nullptr) {}
  virtual ~UpdateEventWrrRequest_Param();
  explicit constexpr UpdateEventWrrRequest_Param(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateEventWrrRequest_Param(const UpdateEventWrrRequest_Param& from);
  UpdateEventWrrRequest_Param(UpdateEventWrrRequest_Param&& from) noexcept
    : UpdateEventWrrRequest_Param() {
    *this = ::std::move(from);
  }

  inline UpdateEventWrrRequest_Param& operator=(const UpdateEventWrrRequest_Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateEventWrrRequest_Param& operator=(UpdateEventWrrRequest_Param&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateEventWrrRequest_Param& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateEventWrrRequest_Param* internal_default_instance() {
    return reinterpret_cast<const UpdateEventWrrRequest_Param*>(
               &_UpdateEventWrrRequest_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(UpdateEventWrrRequest_Param& a, UpdateEventWrrRequest_Param& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateEventWrrRequest_Param* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateEventWrrRequest_Param* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateEventWrrRequest_Param* New() const final {
    return CreateMaybeMessage<UpdateEventWrrRequest_Param>(nullptr);
  }

  UpdateEventWrrRequest_Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateEventWrrRequest_Param>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateEventWrrRequest_Param& from);
  void MergeFrom(const UpdateEventWrrRequest_Param& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateEventWrrRequest_Param* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.UpdateEventWrrRequest.Param";
  }
  protected:
  explicit UpdateEventWrrRequest_Param(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kWeightFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 weight = 2;
  void clear_weight();
  ::PROTOBUF_NAMESPACE_ID::int64 weight() const;
  void set_weight(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_weight() const;
  void _internal_set_weight(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:grpc_cli.UpdateEventWrrRequest.Param)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int64 weight_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class UpdateEventWrrRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.UpdateEventWrrRequest) */ {
 public:
  inline UpdateEventWrrRequest() : UpdateEventWrrRequest(nullptr) {}
  virtual ~UpdateEventWrrRequest();
  explicit constexpr UpdateEventWrrRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateEventWrrRequest(const UpdateEventWrrRequest& from);
  UpdateEventWrrRequest(UpdateEventWrrRequest&& from) noexcept
    : UpdateEventWrrRequest() {
    *this = ::std::move(from);
  }

  inline UpdateEventWrrRequest& operator=(const UpdateEventWrrRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateEventWrrRequest& operator=(UpdateEventWrrRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateEventWrrRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateEventWrrRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateEventWrrRequest*>(
               &_UpdateEventWrrRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(UpdateEventWrrRequest& a, UpdateEventWrrRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateEventWrrRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateEventWrrRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateEventWrrRequest* New() const final {
    return CreateMaybeMessage<UpdateEventWrrRequest>(nullptr);
  }

  UpdateEventWrrRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateEventWrrRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateEventWrrRequest& from);
  void MergeFrom(const UpdateEventWrrRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateEventWrrRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.UpdateEventWrrRequest";
  }
  protected:
  explicit UpdateEventWrrRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef UpdateEventWrrRequest_Param Param;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kRequestorFieldNumber = 3,
    kParamFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string requestor = 3;
  void clear_requestor();
  const std::string& requestor() const;
  void set_requestor(const std::string& value);
  void set_requestor(std::string&& value);
  void set_requestor(const char* value);
  void set_requestor(const char* value, size_t size);
  std::string* mutable_requestor();
  std::string* release_requestor();
  void set_allocated_requestor(std::string* requestor);
  private:
  const std::string& _internal_requestor() const;
  void _internal_set_requestor(const std::string& value);
  std::string* _internal_mutable_requestor();
  public:

  // .grpc_cli.UpdateEventWrrRequest.Param param = 4;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::grpc_cli::UpdateEventWrrRequest_Param& param() const;
  ::grpc_cli::UpdateEventWrrRequest_Param* release_param();
  ::grpc_cli::UpdateEventWrrRequest_Param* mutable_param();
  void set_allocated_param(::grpc_cli::UpdateEventWrrRequest_Param* param);
  private:
  const ::grpc_cli::UpdateEventWrrRequest_Param& _internal_param() const;
  ::grpc_cli::UpdateEventWrrRequest_Param* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::grpc_cli::UpdateEventWrrRequest_Param* param);
  ::grpc_cli::UpdateEventWrrRequest_Param* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:grpc_cli.UpdateEventWrrRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestor_;
  ::grpc_cli::UpdateEventWrrRequest_Param* param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class UpdateEventWrrResponse_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.UpdateEventWrrResponse.Result) */ {
 public:
  inline UpdateEventWrrResponse_Result() : UpdateEventWrrResponse_Result(nullptr) {}
  virtual ~UpdateEventWrrResponse_Result();
  explicit constexpr UpdateEventWrrResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateEventWrrResponse_Result(const UpdateEventWrrResponse_Result& from);
  UpdateEventWrrResponse_Result(UpdateEventWrrResponse_Result&& from) noexcept
    : UpdateEventWrrResponse_Result() {
    *this = ::std::move(from);
  }

  inline UpdateEventWrrResponse_Result& operator=(const UpdateEventWrrResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateEventWrrResponse_Result& operator=(UpdateEventWrrResponse_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateEventWrrResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateEventWrrResponse_Result* internal_default_instance() {
    return reinterpret_cast<const UpdateEventWrrResponse_Result*>(
               &_UpdateEventWrrResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(UpdateEventWrrResponse_Result& a, UpdateEventWrrResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateEventWrrResponse_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateEventWrrResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateEventWrrResponse_Result* New() const final {
    return CreateMaybeMessage<UpdateEventWrrResponse_Result>(nullptr);
  }

  UpdateEventWrrResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateEventWrrResponse_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateEventWrrResponse_Result& from);
  void MergeFrom(const UpdateEventWrrResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateEventWrrResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.UpdateEventWrrResponse.Result";
  }
  protected:
  explicit UpdateEventWrrResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .grpc_cli.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::grpc_cli::Status& status() const;
  ::grpc_cli::Status* release_status();
  ::grpc_cli::Status* mutable_status();
  void set_allocated_status(::grpc_cli::Status* status);
  private:
  const ::grpc_cli::Status& _internal_status() const;
  ::grpc_cli::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::grpc_cli::Status* status);
  ::grpc_cli::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:grpc_cli.UpdateEventWrrResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc_cli::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// -------------------------------------------------------------------

class UpdateEventWrrResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_cli.UpdateEventWrrResponse) */ {
 public:
  inline UpdateEventWrrResponse() : UpdateEventWrrResponse(nullptr) {}
  virtual ~UpdateEventWrrResponse();
  explicit constexpr UpdateEventWrrResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateEventWrrResponse(const UpdateEventWrrResponse& from);
  UpdateEventWrrResponse(UpdateEventWrrResponse&& from) noexcept
    : UpdateEventWrrResponse() {
    *this = ::std::move(from);
  }

  inline UpdateEventWrrResponse& operator=(const UpdateEventWrrResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateEventWrrResponse& operator=(UpdateEventWrrResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateEventWrrResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateEventWrrResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateEventWrrResponse*>(
               &_UpdateEventWrrResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(UpdateEventWrrResponse& a, UpdateEventWrrResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateEventWrrResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateEventWrrResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateEventWrrResponse* New() const final {
    return CreateMaybeMessage<UpdateEventWrrResponse>(nullptr);
  }

  UpdateEventWrrResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateEventWrrResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateEventWrrResponse& from);
  void MergeFrom(const UpdateEventWrrResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateEventWrrResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_cli.UpdateEventWrrResponse";
  }
  protected:
  explicit UpdateEventWrrResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_cli_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef UpdateEventWrrResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRidFieldNumber = 2,
    kResultFieldNumber = 3,
    kInfoFieldNumber = 4,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string rid = 2;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // .grpc_cli.UpdateEventWrrResponse.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::grpc_cli::UpdateEventWrrResponse_Result& result() const;
  ::grpc_cli::UpdateEventWrrResponse_Result* release_result();
  ::grpc_cli::UpdateEventWrrResponse_Result* mutable_result();
  void set_allocated_result(::grpc_cli::UpdateEventWrrResponse_Result* result);
  private:
  const ::grpc_cli::UpdateEventWrrResponse_Result& _internal_result() const;
  ::grpc_cli::UpdateEventWrrResponse_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::grpc_cli::UpdateEventWrrResponse_Result* result);
  ::grpc_cli::UpdateEventWrrResponse_Result* unsafe_arena_release_result();

  // .grpc_cli.PosInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::grpc_cli::PosInfo& info() const;
  ::grpc_cli::PosInfo* release_info();
  ::grpc_cli::PosInfo* mutable_info();
  void set_allocated_info(::grpc_cli::PosInfo* info);
  private:
  const ::grpc_cli::PosInfo& _internal_info() const;
  ::grpc_cli::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::grpc_cli::PosInfo* info);
  ::grpc_cli::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:grpc_cli.UpdateEventWrrResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::grpc_cli::UpdateEventWrrResponse_Result* result_;
  ::grpc_cli::PosInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cli_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Status

// int32 code = 1;
inline bool Status::_internal_has_code() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Status::has_code() const {
  return _internal_has_code();
}
inline void Status::clear_code() {
  code_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Status::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Status::code() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Status.code)
  return _internal_code();
}
inline void Status::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  code_ = value;
}
inline void Status::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Status.code)
}

// string event_name = 2;
inline bool Status::_internal_has_event_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Status::has_event_name() const {
  return _internal_has_event_name();
}
inline void Status::clear_event_name() {
  event_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Status::event_name() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Status.event_name)
  return _internal_event_name();
}
inline void Status::set_event_name(const std::string& value) {
  _internal_set_event_name(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Status.event_name)
}
inline std::string* Status::mutable_event_name() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Status.event_name)
  return _internal_mutable_event_name();
}
inline const std::string& Status::_internal_event_name() const {
  return event_name_.Get();
}
inline void Status::_internal_set_event_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  event_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Status::set_event_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  event_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Status.event_name)
}
inline void Status::set_event_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  event_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Status.event_name)
}
inline void Status::set_event_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  event_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Status.event_name)
}
inline std::string* Status::_internal_mutable_event_name() {
  _has_bits_[0] |= 0x00000001u;
  return event_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Status::release_event_name() {
  // @@protoc_insertion_point(field_release:grpc_cli.Status.event_name)
  if (!_internal_has_event_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return event_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Status::set_allocated_event_name(std::string* event_name) {
  if (event_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  event_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Status.event_name)
}

// string description = 3;
inline bool Status::_internal_has_description() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Status::has_description() const {
  return _internal_has_description();
}
inline void Status::clear_description() {
  description_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Status::description() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Status.description)
  return _internal_description();
}
inline void Status::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Status.description)
}
inline std::string* Status::mutable_description() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Status.description)
  return _internal_mutable_description();
}
inline const std::string& Status::_internal_description() const {
  return description_.Get();
}
inline void Status::_internal_set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Status::set_description(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Status.description)
}
inline void Status::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Status.description)
}
inline void Status::set_description(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Status.description)
}
inline std::string* Status::_internal_mutable_description() {
  _has_bits_[0] |= 0x00000002u;
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Status::release_description() {
  // @@protoc_insertion_point(field_release:grpc_cli.Status.description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Status::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Status.description)
}

// string cause = 4;
inline bool Status::_internal_has_cause() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Status::has_cause() const {
  return _internal_has_cause();
}
inline void Status::clear_cause() {
  cause_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Status::cause() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Status.cause)
  return _internal_cause();
}
inline void Status::set_cause(const std::string& value) {
  _internal_set_cause(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Status.cause)
}
inline std::string* Status::mutable_cause() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Status.cause)
  return _internal_mutable_cause();
}
inline const std::string& Status::_internal_cause() const {
  return cause_.Get();
}
inline void Status::_internal_set_cause(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  cause_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Status::set_cause(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  cause_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Status.cause)
}
inline void Status::set_cause(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  cause_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Status.cause)
}
inline void Status::set_cause(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  cause_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Status.cause)
}
inline std::string* Status::_internal_mutable_cause() {
  _has_bits_[0] |= 0x00000004u;
  return cause_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Status::release_cause() {
  // @@protoc_insertion_point(field_release:grpc_cli.Status.cause)
  if (!_internal_has_cause()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return cause_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Status::set_allocated_cause(std::string* cause) {
  if (cause != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  cause_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cause,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Status.cause)
}

// string solution = 5;
inline bool Status::_internal_has_solution() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Status::has_solution() const {
  return _internal_has_solution();
}
inline void Status::clear_solution() {
  solution_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Status::solution() const {
  // @@protoc_insertion_point(field_get:grpc_cli.Status.solution)
  return _internal_solution();
}
inline void Status::set_solution(const std::string& value) {
  _internal_set_solution(value);
  // @@protoc_insertion_point(field_set:grpc_cli.Status.solution)
}
inline std::string* Status::mutable_solution() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.Status.solution)
  return _internal_mutable_solution();
}
inline const std::string& Status::_internal_solution() const {
  return solution_.Get();
}
inline void Status::_internal_set_solution(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  solution_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Status::set_solution(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  solution_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.Status.solution)
}
inline void Status::set_solution(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  solution_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.Status.solution)
}
inline void Status::set_solution(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  solution_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.Status.solution)
}
inline std::string* Status::_internal_mutable_solution() {
  _has_bits_[0] |= 0x00000008u;
  return solution_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Status::release_solution() {
  // @@protoc_insertion_point(field_release:grpc_cli.Status.solution)
  if (!_internal_has_solution()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return solution_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Status::set_allocated_solution(std::string* solution) {
  if (solution != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  solution_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), solution,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.Status.solution)
}

// -------------------------------------------------------------------

// PosInfo

// string version = 1;
inline void PosInfo::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& PosInfo::version() const {
  // @@protoc_insertion_point(field_get:grpc_cli.PosInfo.version)
  return _internal_version();
}
inline void PosInfo::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:grpc_cli.PosInfo.version)
}
inline std::string* PosInfo::mutable_version() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.PosInfo.version)
  return _internal_mutable_version();
}
inline const std::string& PosInfo::_internal_version() const {
  return version_.Get();
}
inline void PosInfo::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PosInfo::set_version(std::string&& value) {
  
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.PosInfo.version)
}
inline void PosInfo::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.PosInfo.version)
}
inline void PosInfo::set_version(const char* value,
    size_t size) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.PosInfo.version)
}
inline std::string* PosInfo::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PosInfo::release_version() {
  // @@protoc_insertion_point(field_release:grpc_cli.PosInfo.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PosInfo::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.PosInfo.version)
}

// -------------------------------------------------------------------

// SystemInfoRequest

// string command = 1;
inline void SystemInfoRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& SystemInfoRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemInfoRequest.command)
  return _internal_command();
}
inline void SystemInfoRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SystemInfoRequest.command)
}
inline std::string* SystemInfoRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemInfoRequest.command)
  return _internal_mutable_command();
}
inline const std::string& SystemInfoRequest::_internal_command() const {
  return command_.Get();
}
inline void SystemInfoRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SystemInfoRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SystemInfoRequest.command)
}
inline void SystemInfoRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SystemInfoRequest.command)
}
inline void SystemInfoRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SystemInfoRequest.command)
}
inline std::string* SystemInfoRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SystemInfoRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemInfoRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SystemInfoRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemInfoRequest.command)
}

// string rid = 2;
inline void SystemInfoRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& SystemInfoRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemInfoRequest.rid)
  return _internal_rid();
}
inline void SystemInfoRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SystemInfoRequest.rid)
}
inline std::string* SystemInfoRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemInfoRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& SystemInfoRequest::_internal_rid() const {
  return rid_.Get();
}
inline void SystemInfoRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SystemInfoRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SystemInfoRequest.rid)
}
inline void SystemInfoRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SystemInfoRequest.rid)
}
inline void SystemInfoRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SystemInfoRequest.rid)
}
inline std::string* SystemInfoRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SystemInfoRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemInfoRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SystemInfoRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemInfoRequest.rid)
}

// string requestor = 3;
inline void SystemInfoRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& SystemInfoRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemInfoRequest.requestor)
  return _internal_requestor();
}
inline void SystemInfoRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SystemInfoRequest.requestor)
}
inline std::string* SystemInfoRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemInfoRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& SystemInfoRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void SystemInfoRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SystemInfoRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SystemInfoRequest.requestor)
}
inline void SystemInfoRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SystemInfoRequest.requestor)
}
inline void SystemInfoRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SystemInfoRequest.requestor)
}
inline std::string* SystemInfoRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SystemInfoRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemInfoRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SystemInfoRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemInfoRequest.requestor)
}

// -------------------------------------------------------------------

// SystemInfoResponse_Result_Data

// string version = 1;
inline void SystemInfoResponse_Result_Data::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& SystemInfoResponse_Result_Data::version() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemInfoResponse.Result.Data.version)
  return _internal_version();
}
inline void SystemInfoResponse_Result_Data::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SystemInfoResponse.Result.Data.version)
}
inline std::string* SystemInfoResponse_Result_Data::mutable_version() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemInfoResponse.Result.Data.version)
  return _internal_mutable_version();
}
inline const std::string& SystemInfoResponse_Result_Data::_internal_version() const {
  return version_.Get();
}
inline void SystemInfoResponse_Result_Data::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SystemInfoResponse_Result_Data::set_version(std::string&& value) {
  
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SystemInfoResponse.Result.Data.version)
}
inline void SystemInfoResponse_Result_Data::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SystemInfoResponse.Result.Data.version)
}
inline void SystemInfoResponse_Result_Data::set_version(const char* value,
    size_t size) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SystemInfoResponse.Result.Data.version)
}
inline std::string* SystemInfoResponse_Result_Data::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SystemInfoResponse_Result_Data::release_version() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemInfoResponse.Result.Data.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SystemInfoResponse_Result_Data::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemInfoResponse.Result.Data.version)
}

// -------------------------------------------------------------------

// SystemInfoResponse_Result

// .grpc_cli.Status status = 1;
inline bool SystemInfoResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SystemInfoResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void SystemInfoResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& SystemInfoResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& SystemInfoResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemInfoResponse.Result.status)
  return _internal_status();
}
inline void SystemInfoResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.SystemInfoResponse.Result.status)
}
inline ::grpc_cli::Status* SystemInfoResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* SystemInfoResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemInfoResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* SystemInfoResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* SystemInfoResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemInfoResponse.Result.status)
  return _internal_mutable_status();
}
inline void SystemInfoResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemInfoResponse.Result.status)
}

// .grpc_cli.SystemInfoResponse.Result.Data data = 2;
inline bool SystemInfoResponse_Result::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool SystemInfoResponse_Result::has_data() const {
  return _internal_has_data();
}
inline void SystemInfoResponse_Result::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::grpc_cli::SystemInfoResponse_Result_Data& SystemInfoResponse_Result::_internal_data() const {
  const ::grpc_cli::SystemInfoResponse_Result_Data* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::SystemInfoResponse_Result_Data&>(
      ::grpc_cli::_SystemInfoResponse_Result_Data_default_instance_);
}
inline const ::grpc_cli::SystemInfoResponse_Result_Data& SystemInfoResponse_Result::data() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemInfoResponse.Result.data)
  return _internal_data();
}
inline void SystemInfoResponse_Result::unsafe_arena_set_allocated_data(
    ::grpc_cli::SystemInfoResponse_Result_Data* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.SystemInfoResponse.Result.data)
}
inline ::grpc_cli::SystemInfoResponse_Result_Data* SystemInfoResponse_Result::release_data() {
  
  ::grpc_cli::SystemInfoResponse_Result_Data* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::SystemInfoResponse_Result_Data* SystemInfoResponse_Result::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemInfoResponse.Result.data)
  
  ::grpc_cli::SystemInfoResponse_Result_Data* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::grpc_cli::SystemInfoResponse_Result_Data* SystemInfoResponse_Result::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::SystemInfoResponse_Result_Data>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::grpc_cli::SystemInfoResponse_Result_Data* SystemInfoResponse_Result::mutable_data() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemInfoResponse.Result.data)
  return _internal_mutable_data();
}
inline void SystemInfoResponse_Result::set_allocated_data(::grpc_cli::SystemInfoResponse_Result_Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemInfoResponse.Result.data)
}

// -------------------------------------------------------------------

// SystemInfoResponse

// string command = 1;
inline void SystemInfoResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& SystemInfoResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemInfoResponse.command)
  return _internal_command();
}
inline void SystemInfoResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SystemInfoResponse.command)
}
inline std::string* SystemInfoResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemInfoResponse.command)
  return _internal_mutable_command();
}
inline const std::string& SystemInfoResponse::_internal_command() const {
  return command_.Get();
}
inline void SystemInfoResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SystemInfoResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SystemInfoResponse.command)
}
inline void SystemInfoResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SystemInfoResponse.command)
}
inline void SystemInfoResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SystemInfoResponse.command)
}
inline std::string* SystemInfoResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SystemInfoResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemInfoResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SystemInfoResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemInfoResponse.command)
}

// string rid = 2;
inline void SystemInfoResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& SystemInfoResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemInfoResponse.rid)
  return _internal_rid();
}
inline void SystemInfoResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SystemInfoResponse.rid)
}
inline std::string* SystemInfoResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemInfoResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& SystemInfoResponse::_internal_rid() const {
  return rid_.Get();
}
inline void SystemInfoResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SystemInfoResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SystemInfoResponse.rid)
}
inline void SystemInfoResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SystemInfoResponse.rid)
}
inline void SystemInfoResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SystemInfoResponse.rid)
}
inline std::string* SystemInfoResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SystemInfoResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemInfoResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SystemInfoResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemInfoResponse.rid)
}

// .grpc_cli.SystemInfoResponse.Result result = 3;
inline bool SystemInfoResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool SystemInfoResponse::has_result() const {
  return _internal_has_result();
}
inline void SystemInfoResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::SystemInfoResponse_Result& SystemInfoResponse::_internal_result() const {
  const ::grpc_cli::SystemInfoResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::SystemInfoResponse_Result&>(
      ::grpc_cli::_SystemInfoResponse_Result_default_instance_);
}
inline const ::grpc_cli::SystemInfoResponse_Result& SystemInfoResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemInfoResponse.result)
  return _internal_result();
}
inline void SystemInfoResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::SystemInfoResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.SystemInfoResponse.result)
}
inline ::grpc_cli::SystemInfoResponse_Result* SystemInfoResponse::release_result() {
  
  ::grpc_cli::SystemInfoResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::SystemInfoResponse_Result* SystemInfoResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemInfoResponse.result)
  
  ::grpc_cli::SystemInfoResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::SystemInfoResponse_Result* SystemInfoResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::SystemInfoResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::SystemInfoResponse_Result* SystemInfoResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemInfoResponse.result)
  return _internal_mutable_result();
}
inline void SystemInfoResponse::set_allocated_result(::grpc_cli::SystemInfoResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemInfoResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool SystemInfoResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool SystemInfoResponse::has_info() const {
  return _internal_has_info();
}
inline void SystemInfoResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& SystemInfoResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& SystemInfoResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemInfoResponse.info)
  return _internal_info();
}
inline void SystemInfoResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.SystemInfoResponse.info)
}
inline ::grpc_cli::PosInfo* SystemInfoResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* SystemInfoResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemInfoResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* SystemInfoResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* SystemInfoResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemInfoResponse.info)
  return _internal_mutable_info();
}
inline void SystemInfoResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemInfoResponse.info)
}

// -------------------------------------------------------------------

// SystemStopRequest

// string command = 1;
inline void SystemStopRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& SystemStopRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemStopRequest.command)
  return _internal_command();
}
inline void SystemStopRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SystemStopRequest.command)
}
inline std::string* SystemStopRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemStopRequest.command)
  return _internal_mutable_command();
}
inline const std::string& SystemStopRequest::_internal_command() const {
  return command_.Get();
}
inline void SystemStopRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SystemStopRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SystemStopRequest.command)
}
inline void SystemStopRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SystemStopRequest.command)
}
inline void SystemStopRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SystemStopRequest.command)
}
inline std::string* SystemStopRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SystemStopRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemStopRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SystemStopRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemStopRequest.command)
}

// string rid = 2;
inline void SystemStopRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& SystemStopRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemStopRequest.rid)
  return _internal_rid();
}
inline void SystemStopRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SystemStopRequest.rid)
}
inline std::string* SystemStopRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemStopRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& SystemStopRequest::_internal_rid() const {
  return rid_.Get();
}
inline void SystemStopRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SystemStopRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SystemStopRequest.rid)
}
inline void SystemStopRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SystemStopRequest.rid)
}
inline void SystemStopRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SystemStopRequest.rid)
}
inline std::string* SystemStopRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SystemStopRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemStopRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SystemStopRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemStopRequest.rid)
}

// string requestor = 3;
inline void SystemStopRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& SystemStopRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemStopRequest.requestor)
  return _internal_requestor();
}
inline void SystemStopRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SystemStopRequest.requestor)
}
inline std::string* SystemStopRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemStopRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& SystemStopRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void SystemStopRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SystemStopRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SystemStopRequest.requestor)
}
inline void SystemStopRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SystemStopRequest.requestor)
}
inline void SystemStopRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SystemStopRequest.requestor)
}
inline std::string* SystemStopRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SystemStopRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemStopRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SystemStopRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemStopRequest.requestor)
}

// -------------------------------------------------------------------

// SystemStopResponse_Result

// .grpc_cli.Status status = 1;
inline bool SystemStopResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SystemStopResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void SystemStopResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& SystemStopResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& SystemStopResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemStopResponse.Result.status)
  return _internal_status();
}
inline void SystemStopResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.SystemStopResponse.Result.status)
}
inline ::grpc_cli::Status* SystemStopResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* SystemStopResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemStopResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* SystemStopResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* SystemStopResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemStopResponse.Result.status)
  return _internal_mutable_status();
}
inline void SystemStopResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemStopResponse.Result.status)
}

// -------------------------------------------------------------------

// SystemStopResponse

// string command = 1;
inline void SystemStopResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& SystemStopResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemStopResponse.command)
  return _internal_command();
}
inline void SystemStopResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SystemStopResponse.command)
}
inline std::string* SystemStopResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemStopResponse.command)
  return _internal_mutable_command();
}
inline const std::string& SystemStopResponse::_internal_command() const {
  return command_.Get();
}
inline void SystemStopResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SystemStopResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SystemStopResponse.command)
}
inline void SystemStopResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SystemStopResponse.command)
}
inline void SystemStopResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SystemStopResponse.command)
}
inline std::string* SystemStopResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SystemStopResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemStopResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SystemStopResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemStopResponse.command)
}

// string rid = 2;
inline void SystemStopResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& SystemStopResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemStopResponse.rid)
  return _internal_rid();
}
inline void SystemStopResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SystemStopResponse.rid)
}
inline std::string* SystemStopResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemStopResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& SystemStopResponse::_internal_rid() const {
  return rid_.Get();
}
inline void SystemStopResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SystemStopResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SystemStopResponse.rid)
}
inline void SystemStopResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SystemStopResponse.rid)
}
inline void SystemStopResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SystemStopResponse.rid)
}
inline std::string* SystemStopResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SystemStopResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemStopResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SystemStopResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemStopResponse.rid)
}

// .grpc_cli.SystemStopResponse.Result result = 3;
inline bool SystemStopResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool SystemStopResponse::has_result() const {
  return _internal_has_result();
}
inline void SystemStopResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::SystemStopResponse_Result& SystemStopResponse::_internal_result() const {
  const ::grpc_cli::SystemStopResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::SystemStopResponse_Result&>(
      ::grpc_cli::_SystemStopResponse_Result_default_instance_);
}
inline const ::grpc_cli::SystemStopResponse_Result& SystemStopResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemStopResponse.result)
  return _internal_result();
}
inline void SystemStopResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::SystemStopResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.SystemStopResponse.result)
}
inline ::grpc_cli::SystemStopResponse_Result* SystemStopResponse::release_result() {
  
  ::grpc_cli::SystemStopResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::SystemStopResponse_Result* SystemStopResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemStopResponse.result)
  
  ::grpc_cli::SystemStopResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::SystemStopResponse_Result* SystemStopResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::SystemStopResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::SystemStopResponse_Result* SystemStopResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemStopResponse.result)
  return _internal_mutable_result();
}
inline void SystemStopResponse::set_allocated_result(::grpc_cli::SystemStopResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemStopResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool SystemStopResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool SystemStopResponse::has_info() const {
  return _internal_has_info();
}
inline void SystemStopResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& SystemStopResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& SystemStopResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SystemStopResponse.info)
  return _internal_info();
}
inline void SystemStopResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.SystemStopResponse.info)
}
inline ::grpc_cli::PosInfo* SystemStopResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* SystemStopResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.SystemStopResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* SystemStopResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* SystemStopResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SystemStopResponse.info)
  return _internal_mutable_info();
}
inline void SystemStopResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SystemStopResponse.info)
}

// -------------------------------------------------------------------

// GetSystemPropertyRequest

// string command = 1;
inline void GetSystemPropertyRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& GetSystemPropertyRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetSystemPropertyRequest.command)
  return _internal_command();
}
inline void GetSystemPropertyRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.GetSystemPropertyRequest.command)
}
inline std::string* GetSystemPropertyRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetSystemPropertyRequest.command)
  return _internal_mutable_command();
}
inline const std::string& GetSystemPropertyRequest::_internal_command() const {
  return command_.Get();
}
inline void GetSystemPropertyRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetSystemPropertyRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.GetSystemPropertyRequest.command)
}
inline void GetSystemPropertyRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.GetSystemPropertyRequest.command)
}
inline void GetSystemPropertyRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.GetSystemPropertyRequest.command)
}
inline std::string* GetSystemPropertyRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetSystemPropertyRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetSystemPropertyRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSystemPropertyRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetSystemPropertyRequest.command)
}

// string rid = 2;
inline void GetSystemPropertyRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& GetSystemPropertyRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetSystemPropertyRequest.rid)
  return _internal_rid();
}
inline void GetSystemPropertyRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.GetSystemPropertyRequest.rid)
}
inline std::string* GetSystemPropertyRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetSystemPropertyRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& GetSystemPropertyRequest::_internal_rid() const {
  return rid_.Get();
}
inline void GetSystemPropertyRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetSystemPropertyRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.GetSystemPropertyRequest.rid)
}
inline void GetSystemPropertyRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.GetSystemPropertyRequest.rid)
}
inline void GetSystemPropertyRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.GetSystemPropertyRequest.rid)
}
inline std::string* GetSystemPropertyRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetSystemPropertyRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetSystemPropertyRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSystemPropertyRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetSystemPropertyRequest.rid)
}

// string requestor = 3;
inline void GetSystemPropertyRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& GetSystemPropertyRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetSystemPropertyRequest.requestor)
  return _internal_requestor();
}
inline void GetSystemPropertyRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.GetSystemPropertyRequest.requestor)
}
inline std::string* GetSystemPropertyRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetSystemPropertyRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& GetSystemPropertyRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void GetSystemPropertyRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetSystemPropertyRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.GetSystemPropertyRequest.requestor)
}
inline void GetSystemPropertyRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.GetSystemPropertyRequest.requestor)
}
inline void GetSystemPropertyRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.GetSystemPropertyRequest.requestor)
}
inline std::string* GetSystemPropertyRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetSystemPropertyRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetSystemPropertyRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSystemPropertyRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetSystemPropertyRequest.requestor)
}

// -------------------------------------------------------------------

// GetSystemPropertyResponse_Result_Data

// string rebuild_policy = 1;
inline void GetSystemPropertyResponse_Result_Data::clear_rebuild_policy() {
  rebuild_policy_.ClearToEmpty();
}
inline const std::string& GetSystemPropertyResponse_Result_Data::rebuild_policy() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetSystemPropertyResponse.Result.Data.rebuild_policy)
  return _internal_rebuild_policy();
}
inline void GetSystemPropertyResponse_Result_Data::set_rebuild_policy(const std::string& value) {
  _internal_set_rebuild_policy(value);
  // @@protoc_insertion_point(field_set:grpc_cli.GetSystemPropertyResponse.Result.Data.rebuild_policy)
}
inline std::string* GetSystemPropertyResponse_Result_Data::mutable_rebuild_policy() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetSystemPropertyResponse.Result.Data.rebuild_policy)
  return _internal_mutable_rebuild_policy();
}
inline const std::string& GetSystemPropertyResponse_Result_Data::_internal_rebuild_policy() const {
  return rebuild_policy_.Get();
}
inline void GetSystemPropertyResponse_Result_Data::_internal_set_rebuild_policy(const std::string& value) {
  
  rebuild_policy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetSystemPropertyResponse_Result_Data::set_rebuild_policy(std::string&& value) {
  
  rebuild_policy_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.GetSystemPropertyResponse.Result.Data.rebuild_policy)
}
inline void GetSystemPropertyResponse_Result_Data::set_rebuild_policy(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rebuild_policy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.GetSystemPropertyResponse.Result.Data.rebuild_policy)
}
inline void GetSystemPropertyResponse_Result_Data::set_rebuild_policy(const char* value,
    size_t size) {
  
  rebuild_policy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.GetSystemPropertyResponse.Result.Data.rebuild_policy)
}
inline std::string* GetSystemPropertyResponse_Result_Data::_internal_mutable_rebuild_policy() {
  
  return rebuild_policy_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetSystemPropertyResponse_Result_Data::release_rebuild_policy() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetSystemPropertyResponse.Result.Data.rebuild_policy)
  return rebuild_policy_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSystemPropertyResponse_Result_Data::set_allocated_rebuild_policy(std::string* rebuild_policy) {
  if (rebuild_policy != nullptr) {
    
  } else {
    
  }
  rebuild_policy_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rebuild_policy,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetSystemPropertyResponse.Result.Data.rebuild_policy)
}

// -------------------------------------------------------------------

// GetSystemPropertyResponse_Result

// .grpc_cli.Status status = 1;
inline bool GetSystemPropertyResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool GetSystemPropertyResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void GetSystemPropertyResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& GetSystemPropertyResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& GetSystemPropertyResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetSystemPropertyResponse.Result.status)
  return _internal_status();
}
inline void GetSystemPropertyResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.GetSystemPropertyResponse.Result.status)
}
inline ::grpc_cli::Status* GetSystemPropertyResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* GetSystemPropertyResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetSystemPropertyResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* GetSystemPropertyResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* GetSystemPropertyResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetSystemPropertyResponse.Result.status)
  return _internal_mutable_status();
}
inline void GetSystemPropertyResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetSystemPropertyResponse.Result.status)
}

// .grpc_cli.GetSystemPropertyResponse.Result.Data data = 2;
inline bool GetSystemPropertyResponse_Result::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool GetSystemPropertyResponse_Result::has_data() const {
  return _internal_has_data();
}
inline void GetSystemPropertyResponse_Result::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::grpc_cli::GetSystemPropertyResponse_Result_Data& GetSystemPropertyResponse_Result::_internal_data() const {
  const ::grpc_cli::GetSystemPropertyResponse_Result_Data* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::GetSystemPropertyResponse_Result_Data&>(
      ::grpc_cli::_GetSystemPropertyResponse_Result_Data_default_instance_);
}
inline const ::grpc_cli::GetSystemPropertyResponse_Result_Data& GetSystemPropertyResponse_Result::data() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetSystemPropertyResponse.Result.data)
  return _internal_data();
}
inline void GetSystemPropertyResponse_Result::unsafe_arena_set_allocated_data(
    ::grpc_cli::GetSystemPropertyResponse_Result_Data* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.GetSystemPropertyResponse.Result.data)
}
inline ::grpc_cli::GetSystemPropertyResponse_Result_Data* GetSystemPropertyResponse_Result::release_data() {
  
  ::grpc_cli::GetSystemPropertyResponse_Result_Data* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::GetSystemPropertyResponse_Result_Data* GetSystemPropertyResponse_Result::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetSystemPropertyResponse.Result.data)
  
  ::grpc_cli::GetSystemPropertyResponse_Result_Data* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::grpc_cli::GetSystemPropertyResponse_Result_Data* GetSystemPropertyResponse_Result::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::GetSystemPropertyResponse_Result_Data>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::grpc_cli::GetSystemPropertyResponse_Result_Data* GetSystemPropertyResponse_Result::mutable_data() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetSystemPropertyResponse.Result.data)
  return _internal_mutable_data();
}
inline void GetSystemPropertyResponse_Result::set_allocated_data(::grpc_cli::GetSystemPropertyResponse_Result_Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetSystemPropertyResponse.Result.data)
}

// -------------------------------------------------------------------

// GetSystemPropertyResponse

// string command = 1;
inline void GetSystemPropertyResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& GetSystemPropertyResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetSystemPropertyResponse.command)
  return _internal_command();
}
inline void GetSystemPropertyResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.GetSystemPropertyResponse.command)
}
inline std::string* GetSystemPropertyResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetSystemPropertyResponse.command)
  return _internal_mutable_command();
}
inline const std::string& GetSystemPropertyResponse::_internal_command() const {
  return command_.Get();
}
inline void GetSystemPropertyResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetSystemPropertyResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.GetSystemPropertyResponse.command)
}
inline void GetSystemPropertyResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.GetSystemPropertyResponse.command)
}
inline void GetSystemPropertyResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.GetSystemPropertyResponse.command)
}
inline std::string* GetSystemPropertyResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetSystemPropertyResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetSystemPropertyResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSystemPropertyResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetSystemPropertyResponse.command)
}

// string rid = 2;
inline void GetSystemPropertyResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& GetSystemPropertyResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetSystemPropertyResponse.rid)
  return _internal_rid();
}
inline void GetSystemPropertyResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.GetSystemPropertyResponse.rid)
}
inline std::string* GetSystemPropertyResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetSystemPropertyResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& GetSystemPropertyResponse::_internal_rid() const {
  return rid_.Get();
}
inline void GetSystemPropertyResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetSystemPropertyResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.GetSystemPropertyResponse.rid)
}
inline void GetSystemPropertyResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.GetSystemPropertyResponse.rid)
}
inline void GetSystemPropertyResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.GetSystemPropertyResponse.rid)
}
inline std::string* GetSystemPropertyResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetSystemPropertyResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetSystemPropertyResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSystemPropertyResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetSystemPropertyResponse.rid)
}

// .grpc_cli.GetSystemPropertyResponse.Result result = 3;
inline bool GetSystemPropertyResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool GetSystemPropertyResponse::has_result() const {
  return _internal_has_result();
}
inline void GetSystemPropertyResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::GetSystemPropertyResponse_Result& GetSystemPropertyResponse::_internal_result() const {
  const ::grpc_cli::GetSystemPropertyResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::GetSystemPropertyResponse_Result&>(
      ::grpc_cli::_GetSystemPropertyResponse_Result_default_instance_);
}
inline const ::grpc_cli::GetSystemPropertyResponse_Result& GetSystemPropertyResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetSystemPropertyResponse.result)
  return _internal_result();
}
inline void GetSystemPropertyResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::GetSystemPropertyResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.GetSystemPropertyResponse.result)
}
inline ::grpc_cli::GetSystemPropertyResponse_Result* GetSystemPropertyResponse::release_result() {
  
  ::grpc_cli::GetSystemPropertyResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::GetSystemPropertyResponse_Result* GetSystemPropertyResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetSystemPropertyResponse.result)
  
  ::grpc_cli::GetSystemPropertyResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::GetSystemPropertyResponse_Result* GetSystemPropertyResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::GetSystemPropertyResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::GetSystemPropertyResponse_Result* GetSystemPropertyResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetSystemPropertyResponse.result)
  return _internal_mutable_result();
}
inline void GetSystemPropertyResponse::set_allocated_result(::grpc_cli::GetSystemPropertyResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetSystemPropertyResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool GetSystemPropertyResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool GetSystemPropertyResponse::has_info() const {
  return _internal_has_info();
}
inline void GetSystemPropertyResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& GetSystemPropertyResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& GetSystemPropertyResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.GetSystemPropertyResponse.info)
  return _internal_info();
}
inline void GetSystemPropertyResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.GetSystemPropertyResponse.info)
}
inline ::grpc_cli::PosInfo* GetSystemPropertyResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* GetSystemPropertyResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.GetSystemPropertyResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* GetSystemPropertyResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* GetSystemPropertyResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.GetSystemPropertyResponse.info)
  return _internal_mutable_info();
}
inline void GetSystemPropertyResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.GetSystemPropertyResponse.info)
}

// -------------------------------------------------------------------

// SetSystemPropertyRequest_Param

// string level = 1;
inline void SetSystemPropertyRequest_Param::clear_level() {
  level_.ClearToEmpty();
}
inline const std::string& SetSystemPropertyRequest_Param::level() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetSystemPropertyRequest.Param.level)
  return _internal_level();
}
inline void SetSystemPropertyRequest_Param::set_level(const std::string& value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SetSystemPropertyRequest.Param.level)
}
inline std::string* SetSystemPropertyRequest_Param::mutable_level() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetSystemPropertyRequest.Param.level)
  return _internal_mutable_level();
}
inline const std::string& SetSystemPropertyRequest_Param::_internal_level() const {
  return level_.Get();
}
inline void SetSystemPropertyRequest_Param::_internal_set_level(const std::string& value) {
  
  level_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetSystemPropertyRequest_Param::set_level(std::string&& value) {
  
  level_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SetSystemPropertyRequest.Param.level)
}
inline void SetSystemPropertyRequest_Param::set_level(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  level_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SetSystemPropertyRequest.Param.level)
}
inline void SetSystemPropertyRequest_Param::set_level(const char* value,
    size_t size) {
  
  level_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SetSystemPropertyRequest.Param.level)
}
inline std::string* SetSystemPropertyRequest_Param::_internal_mutable_level() {
  
  return level_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetSystemPropertyRequest_Param::release_level() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetSystemPropertyRequest.Param.level)
  return level_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetSystemPropertyRequest_Param::set_allocated_level(std::string* level) {
  if (level != nullptr) {
    
  } else {
    
  }
  level_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), level,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetSystemPropertyRequest.Param.level)
}

// -------------------------------------------------------------------

// SetSystemPropertyRequest

// string command = 1;
inline void SetSystemPropertyRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& SetSystemPropertyRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetSystemPropertyRequest.command)
  return _internal_command();
}
inline void SetSystemPropertyRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SetSystemPropertyRequest.command)
}
inline std::string* SetSystemPropertyRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetSystemPropertyRequest.command)
  return _internal_mutable_command();
}
inline const std::string& SetSystemPropertyRequest::_internal_command() const {
  return command_.Get();
}
inline void SetSystemPropertyRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetSystemPropertyRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SetSystemPropertyRequest.command)
}
inline void SetSystemPropertyRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SetSystemPropertyRequest.command)
}
inline void SetSystemPropertyRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SetSystemPropertyRequest.command)
}
inline std::string* SetSystemPropertyRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetSystemPropertyRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetSystemPropertyRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetSystemPropertyRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetSystemPropertyRequest.command)
}

// string rid = 2;
inline void SetSystemPropertyRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& SetSystemPropertyRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetSystemPropertyRequest.rid)
  return _internal_rid();
}
inline void SetSystemPropertyRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SetSystemPropertyRequest.rid)
}
inline std::string* SetSystemPropertyRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetSystemPropertyRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& SetSystemPropertyRequest::_internal_rid() const {
  return rid_.Get();
}
inline void SetSystemPropertyRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetSystemPropertyRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SetSystemPropertyRequest.rid)
}
inline void SetSystemPropertyRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SetSystemPropertyRequest.rid)
}
inline void SetSystemPropertyRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SetSystemPropertyRequest.rid)
}
inline std::string* SetSystemPropertyRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetSystemPropertyRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetSystemPropertyRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetSystemPropertyRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetSystemPropertyRequest.rid)
}

// string requestor = 3;
inline void SetSystemPropertyRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& SetSystemPropertyRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetSystemPropertyRequest.requestor)
  return _internal_requestor();
}
inline void SetSystemPropertyRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SetSystemPropertyRequest.requestor)
}
inline std::string* SetSystemPropertyRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetSystemPropertyRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& SetSystemPropertyRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void SetSystemPropertyRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetSystemPropertyRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SetSystemPropertyRequest.requestor)
}
inline void SetSystemPropertyRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SetSystemPropertyRequest.requestor)
}
inline void SetSystemPropertyRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SetSystemPropertyRequest.requestor)
}
inline std::string* SetSystemPropertyRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetSystemPropertyRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetSystemPropertyRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetSystemPropertyRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetSystemPropertyRequest.requestor)
}

// .grpc_cli.SetSystemPropertyRequest.Param param = 4;
inline bool SetSystemPropertyRequest::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool SetSystemPropertyRequest::has_param() const {
  return _internal_has_param();
}
inline void SetSystemPropertyRequest::clear_param() {
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::grpc_cli::SetSystemPropertyRequest_Param& SetSystemPropertyRequest::_internal_param() const {
  const ::grpc_cli::SetSystemPropertyRequest_Param* p = param_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::SetSystemPropertyRequest_Param&>(
      ::grpc_cli::_SetSystemPropertyRequest_Param_default_instance_);
}
inline const ::grpc_cli::SetSystemPropertyRequest_Param& SetSystemPropertyRequest::param() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetSystemPropertyRequest.param)
  return _internal_param();
}
inline void SetSystemPropertyRequest::unsafe_arena_set_allocated_param(
    ::grpc_cli::SetSystemPropertyRequest_Param* param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.SetSystemPropertyRequest.param)
}
inline ::grpc_cli::SetSystemPropertyRequest_Param* SetSystemPropertyRequest::release_param() {
  
  ::grpc_cli::SetSystemPropertyRequest_Param* temp = param_;
  param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::SetSystemPropertyRequest_Param* SetSystemPropertyRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetSystemPropertyRequest.param)
  
  ::grpc_cli::SetSystemPropertyRequest_Param* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::grpc_cli::SetSystemPropertyRequest_Param* SetSystemPropertyRequest::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::SetSystemPropertyRequest_Param>(GetArena());
    param_ = p;
  }
  return param_;
}
inline ::grpc_cli::SetSystemPropertyRequest_Param* SetSystemPropertyRequest::mutable_param() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetSystemPropertyRequest.param)
  return _internal_mutable_param();
}
inline void SetSystemPropertyRequest::set_allocated_param(::grpc_cli::SetSystemPropertyRequest_Param* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetSystemPropertyRequest.param)
}

// -------------------------------------------------------------------

// SetSystemPropertyResponse_Result

// .grpc_cli.Status status = 1;
inline bool SetSystemPropertyResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SetSystemPropertyResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void SetSystemPropertyResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& SetSystemPropertyResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& SetSystemPropertyResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetSystemPropertyResponse.Result.status)
  return _internal_status();
}
inline void SetSystemPropertyResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.SetSystemPropertyResponse.Result.status)
}
inline ::grpc_cli::Status* SetSystemPropertyResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* SetSystemPropertyResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetSystemPropertyResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* SetSystemPropertyResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* SetSystemPropertyResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetSystemPropertyResponse.Result.status)
  return _internal_mutable_status();
}
inline void SetSystemPropertyResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetSystemPropertyResponse.Result.status)
}

// -------------------------------------------------------------------

// SetSystemPropertyResponse

// string command = 1;
inline void SetSystemPropertyResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& SetSystemPropertyResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetSystemPropertyResponse.command)
  return _internal_command();
}
inline void SetSystemPropertyResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SetSystemPropertyResponse.command)
}
inline std::string* SetSystemPropertyResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetSystemPropertyResponse.command)
  return _internal_mutable_command();
}
inline const std::string& SetSystemPropertyResponse::_internal_command() const {
  return command_.Get();
}
inline void SetSystemPropertyResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetSystemPropertyResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SetSystemPropertyResponse.command)
}
inline void SetSystemPropertyResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SetSystemPropertyResponse.command)
}
inline void SetSystemPropertyResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SetSystemPropertyResponse.command)
}
inline std::string* SetSystemPropertyResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetSystemPropertyResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetSystemPropertyResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetSystemPropertyResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetSystemPropertyResponse.command)
}

// string rid = 2;
inline void SetSystemPropertyResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& SetSystemPropertyResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetSystemPropertyResponse.rid)
  return _internal_rid();
}
inline void SetSystemPropertyResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.SetSystemPropertyResponse.rid)
}
inline std::string* SetSystemPropertyResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetSystemPropertyResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& SetSystemPropertyResponse::_internal_rid() const {
  return rid_.Get();
}
inline void SetSystemPropertyResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetSystemPropertyResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.SetSystemPropertyResponse.rid)
}
inline void SetSystemPropertyResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.SetSystemPropertyResponse.rid)
}
inline void SetSystemPropertyResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.SetSystemPropertyResponse.rid)
}
inline std::string* SetSystemPropertyResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetSystemPropertyResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetSystemPropertyResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetSystemPropertyResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetSystemPropertyResponse.rid)
}

// .grpc_cli.SetSystemPropertyResponse.Result result = 3;
inline bool SetSystemPropertyResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool SetSystemPropertyResponse::has_result() const {
  return _internal_has_result();
}
inline void SetSystemPropertyResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::SetSystemPropertyResponse_Result& SetSystemPropertyResponse::_internal_result() const {
  const ::grpc_cli::SetSystemPropertyResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::SetSystemPropertyResponse_Result&>(
      ::grpc_cli::_SetSystemPropertyResponse_Result_default_instance_);
}
inline const ::grpc_cli::SetSystemPropertyResponse_Result& SetSystemPropertyResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetSystemPropertyResponse.result)
  return _internal_result();
}
inline void SetSystemPropertyResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::SetSystemPropertyResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.SetSystemPropertyResponse.result)
}
inline ::grpc_cli::SetSystemPropertyResponse_Result* SetSystemPropertyResponse::release_result() {
  
  ::grpc_cli::SetSystemPropertyResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::SetSystemPropertyResponse_Result* SetSystemPropertyResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetSystemPropertyResponse.result)
  
  ::grpc_cli::SetSystemPropertyResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::SetSystemPropertyResponse_Result* SetSystemPropertyResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::SetSystemPropertyResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::SetSystemPropertyResponse_Result* SetSystemPropertyResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetSystemPropertyResponse.result)
  return _internal_mutable_result();
}
inline void SetSystemPropertyResponse::set_allocated_result(::grpc_cli::SetSystemPropertyResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetSystemPropertyResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool SetSystemPropertyResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool SetSystemPropertyResponse::has_info() const {
  return _internal_has_info();
}
inline void SetSystemPropertyResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& SetSystemPropertyResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& SetSystemPropertyResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.SetSystemPropertyResponse.info)
  return _internal_info();
}
inline void SetSystemPropertyResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.SetSystemPropertyResponse.info)
}
inline ::grpc_cli::PosInfo* SetSystemPropertyResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* SetSystemPropertyResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.SetSystemPropertyResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* SetSystemPropertyResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* SetSystemPropertyResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.SetSystemPropertyResponse.info)
  return _internal_mutable_info();
}
inline void SetSystemPropertyResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.SetSystemPropertyResponse.info)
}

// -------------------------------------------------------------------

// ResetEventWrrRequest

// string command = 1;
inline void ResetEventWrrRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& ResetEventWrrRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ResetEventWrrRequest.command)
  return _internal_command();
}
inline void ResetEventWrrRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ResetEventWrrRequest.command)
}
inline std::string* ResetEventWrrRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ResetEventWrrRequest.command)
  return _internal_mutable_command();
}
inline const std::string& ResetEventWrrRequest::_internal_command() const {
  return command_.Get();
}
inline void ResetEventWrrRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResetEventWrrRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ResetEventWrrRequest.command)
}
inline void ResetEventWrrRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ResetEventWrrRequest.command)
}
inline void ResetEventWrrRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ResetEventWrrRequest.command)
}
inline std::string* ResetEventWrrRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResetEventWrrRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.ResetEventWrrRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResetEventWrrRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ResetEventWrrRequest.command)
}

// string rid = 2;
inline void ResetEventWrrRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& ResetEventWrrRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ResetEventWrrRequest.rid)
  return _internal_rid();
}
inline void ResetEventWrrRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ResetEventWrrRequest.rid)
}
inline std::string* ResetEventWrrRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ResetEventWrrRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& ResetEventWrrRequest::_internal_rid() const {
  return rid_.Get();
}
inline void ResetEventWrrRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResetEventWrrRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ResetEventWrrRequest.rid)
}
inline void ResetEventWrrRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ResetEventWrrRequest.rid)
}
inline void ResetEventWrrRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ResetEventWrrRequest.rid)
}
inline std::string* ResetEventWrrRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResetEventWrrRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.ResetEventWrrRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResetEventWrrRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ResetEventWrrRequest.rid)
}

// string requestor = 3;
inline void ResetEventWrrRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& ResetEventWrrRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ResetEventWrrRequest.requestor)
  return _internal_requestor();
}
inline void ResetEventWrrRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ResetEventWrrRequest.requestor)
}
inline std::string* ResetEventWrrRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ResetEventWrrRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& ResetEventWrrRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void ResetEventWrrRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResetEventWrrRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ResetEventWrrRequest.requestor)
}
inline void ResetEventWrrRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ResetEventWrrRequest.requestor)
}
inline void ResetEventWrrRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ResetEventWrrRequest.requestor)
}
inline std::string* ResetEventWrrRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResetEventWrrRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.ResetEventWrrRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResetEventWrrRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ResetEventWrrRequest.requestor)
}

// -------------------------------------------------------------------

// ResetEventWrrResponse_Result

// .grpc_cli.Status status = 1;
inline bool ResetEventWrrResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool ResetEventWrrResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void ResetEventWrrResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& ResetEventWrrResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& ResetEventWrrResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ResetEventWrrResponse.Result.status)
  return _internal_status();
}
inline void ResetEventWrrResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ResetEventWrrResponse.Result.status)
}
inline ::grpc_cli::Status* ResetEventWrrResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* ResetEventWrrResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.ResetEventWrrResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* ResetEventWrrResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* ResetEventWrrResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ResetEventWrrResponse.Result.status)
  return _internal_mutable_status();
}
inline void ResetEventWrrResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ResetEventWrrResponse.Result.status)
}

// -------------------------------------------------------------------

// ResetEventWrrResponse

// string command = 1;
inline void ResetEventWrrResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& ResetEventWrrResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ResetEventWrrResponse.command)
  return _internal_command();
}
inline void ResetEventWrrResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ResetEventWrrResponse.command)
}
inline std::string* ResetEventWrrResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ResetEventWrrResponse.command)
  return _internal_mutable_command();
}
inline const std::string& ResetEventWrrResponse::_internal_command() const {
  return command_.Get();
}
inline void ResetEventWrrResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResetEventWrrResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ResetEventWrrResponse.command)
}
inline void ResetEventWrrResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ResetEventWrrResponse.command)
}
inline void ResetEventWrrResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ResetEventWrrResponse.command)
}
inline std::string* ResetEventWrrResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResetEventWrrResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.ResetEventWrrResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResetEventWrrResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ResetEventWrrResponse.command)
}

// string rid = 2;
inline void ResetEventWrrResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& ResetEventWrrResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ResetEventWrrResponse.rid)
  return _internal_rid();
}
inline void ResetEventWrrResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ResetEventWrrResponse.rid)
}
inline std::string* ResetEventWrrResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ResetEventWrrResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& ResetEventWrrResponse::_internal_rid() const {
  return rid_.Get();
}
inline void ResetEventWrrResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResetEventWrrResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ResetEventWrrResponse.rid)
}
inline void ResetEventWrrResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ResetEventWrrResponse.rid)
}
inline void ResetEventWrrResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ResetEventWrrResponse.rid)
}
inline std::string* ResetEventWrrResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResetEventWrrResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.ResetEventWrrResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResetEventWrrResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ResetEventWrrResponse.rid)
}

// .grpc_cli.ResetEventWrrResponse.Result result = 3;
inline bool ResetEventWrrResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool ResetEventWrrResponse::has_result() const {
  return _internal_has_result();
}
inline void ResetEventWrrResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::ResetEventWrrResponse_Result& ResetEventWrrResponse::_internal_result() const {
  const ::grpc_cli::ResetEventWrrResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::ResetEventWrrResponse_Result&>(
      ::grpc_cli::_ResetEventWrrResponse_Result_default_instance_);
}
inline const ::grpc_cli::ResetEventWrrResponse_Result& ResetEventWrrResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ResetEventWrrResponse.result)
  return _internal_result();
}
inline void ResetEventWrrResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::ResetEventWrrResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ResetEventWrrResponse.result)
}
inline ::grpc_cli::ResetEventWrrResponse_Result* ResetEventWrrResponse::release_result() {
  
  ::grpc_cli::ResetEventWrrResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::ResetEventWrrResponse_Result* ResetEventWrrResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.ResetEventWrrResponse.result)
  
  ::grpc_cli::ResetEventWrrResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::ResetEventWrrResponse_Result* ResetEventWrrResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::ResetEventWrrResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::ResetEventWrrResponse_Result* ResetEventWrrResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ResetEventWrrResponse.result)
  return _internal_mutable_result();
}
inline void ResetEventWrrResponse::set_allocated_result(::grpc_cli::ResetEventWrrResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ResetEventWrrResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool ResetEventWrrResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool ResetEventWrrResponse::has_info() const {
  return _internal_has_info();
}
inline void ResetEventWrrResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& ResetEventWrrResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& ResetEventWrrResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ResetEventWrrResponse.info)
  return _internal_info();
}
inline void ResetEventWrrResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ResetEventWrrResponse.info)
}
inline ::grpc_cli::PosInfo* ResetEventWrrResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* ResetEventWrrResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.ResetEventWrrResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* ResetEventWrrResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* ResetEventWrrResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ResetEventWrrResponse.info)
  return _internal_mutable_info();
}
inline void ResetEventWrrResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ResetEventWrrResponse.info)
}

// -------------------------------------------------------------------

// ResetMbrRequest

// string command = 1;
inline void ResetMbrRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& ResetMbrRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ResetMbrRequest.command)
  return _internal_command();
}
inline void ResetMbrRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ResetMbrRequest.command)
}
inline std::string* ResetMbrRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ResetMbrRequest.command)
  return _internal_mutable_command();
}
inline const std::string& ResetMbrRequest::_internal_command() const {
  return command_.Get();
}
inline void ResetMbrRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResetMbrRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ResetMbrRequest.command)
}
inline void ResetMbrRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ResetMbrRequest.command)
}
inline void ResetMbrRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ResetMbrRequest.command)
}
inline std::string* ResetMbrRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResetMbrRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.ResetMbrRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResetMbrRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ResetMbrRequest.command)
}

// string rid = 2;
inline void ResetMbrRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& ResetMbrRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ResetMbrRequest.rid)
  return _internal_rid();
}
inline void ResetMbrRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ResetMbrRequest.rid)
}
inline std::string* ResetMbrRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ResetMbrRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& ResetMbrRequest::_internal_rid() const {
  return rid_.Get();
}
inline void ResetMbrRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResetMbrRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ResetMbrRequest.rid)
}
inline void ResetMbrRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ResetMbrRequest.rid)
}
inline void ResetMbrRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ResetMbrRequest.rid)
}
inline std::string* ResetMbrRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResetMbrRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.ResetMbrRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResetMbrRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ResetMbrRequest.rid)
}

// string requestor = 3;
inline void ResetMbrRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& ResetMbrRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ResetMbrRequest.requestor)
  return _internal_requestor();
}
inline void ResetMbrRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ResetMbrRequest.requestor)
}
inline std::string* ResetMbrRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ResetMbrRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& ResetMbrRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void ResetMbrRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResetMbrRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ResetMbrRequest.requestor)
}
inline void ResetMbrRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ResetMbrRequest.requestor)
}
inline void ResetMbrRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ResetMbrRequest.requestor)
}
inline std::string* ResetMbrRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResetMbrRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.ResetMbrRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResetMbrRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ResetMbrRequest.requestor)
}

// -------------------------------------------------------------------

// ResetMbrResponse_Result

// .grpc_cli.Status status = 1;
inline bool ResetMbrResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool ResetMbrResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void ResetMbrResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& ResetMbrResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& ResetMbrResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ResetMbrResponse.Result.status)
  return _internal_status();
}
inline void ResetMbrResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ResetMbrResponse.Result.status)
}
inline ::grpc_cli::Status* ResetMbrResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* ResetMbrResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.ResetMbrResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* ResetMbrResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* ResetMbrResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ResetMbrResponse.Result.status)
  return _internal_mutable_status();
}
inline void ResetMbrResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ResetMbrResponse.Result.status)
}

// -------------------------------------------------------------------

// ResetMbrResponse

// string command = 1;
inline void ResetMbrResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& ResetMbrResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ResetMbrResponse.command)
  return _internal_command();
}
inline void ResetMbrResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ResetMbrResponse.command)
}
inline std::string* ResetMbrResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ResetMbrResponse.command)
  return _internal_mutable_command();
}
inline const std::string& ResetMbrResponse::_internal_command() const {
  return command_.Get();
}
inline void ResetMbrResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResetMbrResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ResetMbrResponse.command)
}
inline void ResetMbrResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ResetMbrResponse.command)
}
inline void ResetMbrResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ResetMbrResponse.command)
}
inline std::string* ResetMbrResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResetMbrResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.ResetMbrResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResetMbrResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ResetMbrResponse.command)
}

// string rid = 2;
inline void ResetMbrResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& ResetMbrResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ResetMbrResponse.rid)
  return _internal_rid();
}
inline void ResetMbrResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.ResetMbrResponse.rid)
}
inline std::string* ResetMbrResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ResetMbrResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& ResetMbrResponse::_internal_rid() const {
  return rid_.Get();
}
inline void ResetMbrResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResetMbrResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.ResetMbrResponse.rid)
}
inline void ResetMbrResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.ResetMbrResponse.rid)
}
inline void ResetMbrResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.ResetMbrResponse.rid)
}
inline std::string* ResetMbrResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResetMbrResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.ResetMbrResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResetMbrResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ResetMbrResponse.rid)
}

// .grpc_cli.ResetMbrResponse.Result result = 3;
inline bool ResetMbrResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool ResetMbrResponse::has_result() const {
  return _internal_has_result();
}
inline void ResetMbrResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::ResetMbrResponse_Result& ResetMbrResponse::_internal_result() const {
  const ::grpc_cli::ResetMbrResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::ResetMbrResponse_Result&>(
      ::grpc_cli::_ResetMbrResponse_Result_default_instance_);
}
inline const ::grpc_cli::ResetMbrResponse_Result& ResetMbrResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ResetMbrResponse.result)
  return _internal_result();
}
inline void ResetMbrResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::ResetMbrResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ResetMbrResponse.result)
}
inline ::grpc_cli::ResetMbrResponse_Result* ResetMbrResponse::release_result() {
  
  ::grpc_cli::ResetMbrResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::ResetMbrResponse_Result* ResetMbrResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.ResetMbrResponse.result)
  
  ::grpc_cli::ResetMbrResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::ResetMbrResponse_Result* ResetMbrResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::ResetMbrResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::ResetMbrResponse_Result* ResetMbrResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ResetMbrResponse.result)
  return _internal_mutable_result();
}
inline void ResetMbrResponse::set_allocated_result(::grpc_cli::ResetMbrResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ResetMbrResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool ResetMbrResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool ResetMbrResponse::has_info() const {
  return _internal_has_info();
}
inline void ResetMbrResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& ResetMbrResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& ResetMbrResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.ResetMbrResponse.info)
  return _internal_info();
}
inline void ResetMbrResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.ResetMbrResponse.info)
}
inline ::grpc_cli::PosInfo* ResetMbrResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* ResetMbrResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.ResetMbrResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* ResetMbrResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* ResetMbrResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.ResetMbrResponse.info)
  return _internal_mutable_info();
}
inline void ResetMbrResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.ResetMbrResponse.info)
}

// -------------------------------------------------------------------

// StopRebuildingRequest_Param

// string name = 1;
inline void StopRebuildingRequest_Param::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& StopRebuildingRequest_Param::name() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StopRebuildingRequest.Param.name)
  return _internal_name();
}
inline void StopRebuildingRequest_Param::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StopRebuildingRequest.Param.name)
}
inline std::string* StopRebuildingRequest_Param::mutable_name() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StopRebuildingRequest.Param.name)
  return _internal_mutable_name();
}
inline const std::string& StopRebuildingRequest_Param::_internal_name() const {
  return name_.Get();
}
inline void StopRebuildingRequest_Param::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StopRebuildingRequest_Param::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StopRebuildingRequest.Param.name)
}
inline void StopRebuildingRequest_Param::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StopRebuildingRequest.Param.name)
}
inline void StopRebuildingRequest_Param::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StopRebuildingRequest.Param.name)
}
inline std::string* StopRebuildingRequest_Param::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StopRebuildingRequest_Param::release_name() {
  // @@protoc_insertion_point(field_release:grpc_cli.StopRebuildingRequest.Param.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopRebuildingRequest_Param::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StopRebuildingRequest.Param.name)
}

// -------------------------------------------------------------------

// StopRebuildingRequest

// string command = 1;
inline void StopRebuildingRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& StopRebuildingRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StopRebuildingRequest.command)
  return _internal_command();
}
inline void StopRebuildingRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StopRebuildingRequest.command)
}
inline std::string* StopRebuildingRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StopRebuildingRequest.command)
  return _internal_mutable_command();
}
inline const std::string& StopRebuildingRequest::_internal_command() const {
  return command_.Get();
}
inline void StopRebuildingRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StopRebuildingRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StopRebuildingRequest.command)
}
inline void StopRebuildingRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StopRebuildingRequest.command)
}
inline void StopRebuildingRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StopRebuildingRequest.command)
}
inline std::string* StopRebuildingRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StopRebuildingRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.StopRebuildingRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopRebuildingRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StopRebuildingRequest.command)
}

// string rid = 2;
inline void StopRebuildingRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& StopRebuildingRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StopRebuildingRequest.rid)
  return _internal_rid();
}
inline void StopRebuildingRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StopRebuildingRequest.rid)
}
inline std::string* StopRebuildingRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StopRebuildingRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& StopRebuildingRequest::_internal_rid() const {
  return rid_.Get();
}
inline void StopRebuildingRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StopRebuildingRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StopRebuildingRequest.rid)
}
inline void StopRebuildingRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StopRebuildingRequest.rid)
}
inline void StopRebuildingRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StopRebuildingRequest.rid)
}
inline std::string* StopRebuildingRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StopRebuildingRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.StopRebuildingRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopRebuildingRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StopRebuildingRequest.rid)
}

// string requestor = 3;
inline void StopRebuildingRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& StopRebuildingRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StopRebuildingRequest.requestor)
  return _internal_requestor();
}
inline void StopRebuildingRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StopRebuildingRequest.requestor)
}
inline std::string* StopRebuildingRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StopRebuildingRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& StopRebuildingRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void StopRebuildingRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StopRebuildingRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StopRebuildingRequest.requestor)
}
inline void StopRebuildingRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StopRebuildingRequest.requestor)
}
inline void StopRebuildingRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StopRebuildingRequest.requestor)
}
inline std::string* StopRebuildingRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StopRebuildingRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.StopRebuildingRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopRebuildingRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StopRebuildingRequest.requestor)
}

// .grpc_cli.StopRebuildingRequest.Param param = 4;
inline bool StopRebuildingRequest::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool StopRebuildingRequest::has_param() const {
  return _internal_has_param();
}
inline void StopRebuildingRequest::clear_param() {
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::grpc_cli::StopRebuildingRequest_Param& StopRebuildingRequest::_internal_param() const {
  const ::grpc_cli::StopRebuildingRequest_Param* p = param_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::StopRebuildingRequest_Param&>(
      ::grpc_cli::_StopRebuildingRequest_Param_default_instance_);
}
inline const ::grpc_cli::StopRebuildingRequest_Param& StopRebuildingRequest::param() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StopRebuildingRequest.param)
  return _internal_param();
}
inline void StopRebuildingRequest::unsafe_arena_set_allocated_param(
    ::grpc_cli::StopRebuildingRequest_Param* param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.StopRebuildingRequest.param)
}
inline ::grpc_cli::StopRebuildingRequest_Param* StopRebuildingRequest::release_param() {
  
  ::grpc_cli::StopRebuildingRequest_Param* temp = param_;
  param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::StopRebuildingRequest_Param* StopRebuildingRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:grpc_cli.StopRebuildingRequest.param)
  
  ::grpc_cli::StopRebuildingRequest_Param* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::grpc_cli::StopRebuildingRequest_Param* StopRebuildingRequest::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::StopRebuildingRequest_Param>(GetArena());
    param_ = p;
  }
  return param_;
}
inline ::grpc_cli::StopRebuildingRequest_Param* StopRebuildingRequest::mutable_param() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StopRebuildingRequest.param)
  return _internal_mutable_param();
}
inline void StopRebuildingRequest::set_allocated_param(::grpc_cli::StopRebuildingRequest_Param* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StopRebuildingRequest.param)
}

// -------------------------------------------------------------------

// StopRebuildingResponse_Result

// .grpc_cli.Status status = 1;
inline bool StopRebuildingResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool StopRebuildingResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void StopRebuildingResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& StopRebuildingResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& StopRebuildingResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StopRebuildingResponse.Result.status)
  return _internal_status();
}
inline void StopRebuildingResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.StopRebuildingResponse.Result.status)
}
inline ::grpc_cli::Status* StopRebuildingResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* StopRebuildingResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.StopRebuildingResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* StopRebuildingResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* StopRebuildingResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StopRebuildingResponse.Result.status)
  return _internal_mutable_status();
}
inline void StopRebuildingResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StopRebuildingResponse.Result.status)
}

// -------------------------------------------------------------------

// StopRebuildingResponse

// string command = 1;
inline void StopRebuildingResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& StopRebuildingResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StopRebuildingResponse.command)
  return _internal_command();
}
inline void StopRebuildingResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StopRebuildingResponse.command)
}
inline std::string* StopRebuildingResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StopRebuildingResponse.command)
  return _internal_mutable_command();
}
inline const std::string& StopRebuildingResponse::_internal_command() const {
  return command_.Get();
}
inline void StopRebuildingResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StopRebuildingResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StopRebuildingResponse.command)
}
inline void StopRebuildingResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StopRebuildingResponse.command)
}
inline void StopRebuildingResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StopRebuildingResponse.command)
}
inline std::string* StopRebuildingResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StopRebuildingResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.StopRebuildingResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopRebuildingResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StopRebuildingResponse.command)
}

// string rid = 2;
inline void StopRebuildingResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& StopRebuildingResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StopRebuildingResponse.rid)
  return _internal_rid();
}
inline void StopRebuildingResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.StopRebuildingResponse.rid)
}
inline std::string* StopRebuildingResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StopRebuildingResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& StopRebuildingResponse::_internal_rid() const {
  return rid_.Get();
}
inline void StopRebuildingResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StopRebuildingResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.StopRebuildingResponse.rid)
}
inline void StopRebuildingResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.StopRebuildingResponse.rid)
}
inline void StopRebuildingResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.StopRebuildingResponse.rid)
}
inline std::string* StopRebuildingResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StopRebuildingResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.StopRebuildingResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopRebuildingResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StopRebuildingResponse.rid)
}

// .grpc_cli.StopRebuildingResponse.Result result = 3;
inline bool StopRebuildingResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool StopRebuildingResponse::has_result() const {
  return _internal_has_result();
}
inline void StopRebuildingResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::StopRebuildingResponse_Result& StopRebuildingResponse::_internal_result() const {
  const ::grpc_cli::StopRebuildingResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::StopRebuildingResponse_Result&>(
      ::grpc_cli::_StopRebuildingResponse_Result_default_instance_);
}
inline const ::grpc_cli::StopRebuildingResponse_Result& StopRebuildingResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StopRebuildingResponse.result)
  return _internal_result();
}
inline void StopRebuildingResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::StopRebuildingResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.StopRebuildingResponse.result)
}
inline ::grpc_cli::StopRebuildingResponse_Result* StopRebuildingResponse::release_result() {
  
  ::grpc_cli::StopRebuildingResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::StopRebuildingResponse_Result* StopRebuildingResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.StopRebuildingResponse.result)
  
  ::grpc_cli::StopRebuildingResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::StopRebuildingResponse_Result* StopRebuildingResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::StopRebuildingResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::StopRebuildingResponse_Result* StopRebuildingResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StopRebuildingResponse.result)
  return _internal_mutable_result();
}
inline void StopRebuildingResponse::set_allocated_result(::grpc_cli::StopRebuildingResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StopRebuildingResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool StopRebuildingResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool StopRebuildingResponse::has_info() const {
  return _internal_has_info();
}
inline void StopRebuildingResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& StopRebuildingResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& StopRebuildingResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.StopRebuildingResponse.info)
  return _internal_info();
}
inline void StopRebuildingResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.StopRebuildingResponse.info)
}
inline ::grpc_cli::PosInfo* StopRebuildingResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* StopRebuildingResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.StopRebuildingResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* StopRebuildingResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* StopRebuildingResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.StopRebuildingResponse.info)
  return _internal_mutable_info();
}
inline void StopRebuildingResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.StopRebuildingResponse.info)
}

// -------------------------------------------------------------------

// UpdateEventWrrRequest_Param

// string name = 1;
inline void UpdateEventWrrRequest_Param::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& UpdateEventWrrRequest_Param::name() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UpdateEventWrrRequest.Param.name)
  return _internal_name();
}
inline void UpdateEventWrrRequest_Param::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:grpc_cli.UpdateEventWrrRequest.Param.name)
}
inline std::string* UpdateEventWrrRequest_Param::mutable_name() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UpdateEventWrrRequest.Param.name)
  return _internal_mutable_name();
}
inline const std::string& UpdateEventWrrRequest_Param::_internal_name() const {
  return name_.Get();
}
inline void UpdateEventWrrRequest_Param::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateEventWrrRequest_Param::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.UpdateEventWrrRequest.Param.name)
}
inline void UpdateEventWrrRequest_Param::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.UpdateEventWrrRequest.Param.name)
}
inline void UpdateEventWrrRequest_Param::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.UpdateEventWrrRequest.Param.name)
}
inline std::string* UpdateEventWrrRequest_Param::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateEventWrrRequest_Param::release_name() {
  // @@protoc_insertion_point(field_release:grpc_cli.UpdateEventWrrRequest.Param.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateEventWrrRequest_Param::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UpdateEventWrrRequest.Param.name)
}

// int64 weight = 2;
inline void UpdateEventWrrRequest_Param::clear_weight() {
  weight_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateEventWrrRequest_Param::_internal_weight() const {
  return weight_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateEventWrrRequest_Param::weight() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UpdateEventWrrRequest.Param.weight)
  return _internal_weight();
}
inline void UpdateEventWrrRequest_Param::_internal_set_weight(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  weight_ = value;
}
inline void UpdateEventWrrRequest_Param::set_weight(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:grpc_cli.UpdateEventWrrRequest.Param.weight)
}

// -------------------------------------------------------------------

// UpdateEventWrrRequest

// string command = 1;
inline void UpdateEventWrrRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& UpdateEventWrrRequest::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UpdateEventWrrRequest.command)
  return _internal_command();
}
inline void UpdateEventWrrRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.UpdateEventWrrRequest.command)
}
inline std::string* UpdateEventWrrRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UpdateEventWrrRequest.command)
  return _internal_mutable_command();
}
inline const std::string& UpdateEventWrrRequest::_internal_command() const {
  return command_.Get();
}
inline void UpdateEventWrrRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateEventWrrRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.UpdateEventWrrRequest.command)
}
inline void UpdateEventWrrRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.UpdateEventWrrRequest.command)
}
inline void UpdateEventWrrRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.UpdateEventWrrRequest.command)
}
inline std::string* UpdateEventWrrRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateEventWrrRequest::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.UpdateEventWrrRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateEventWrrRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UpdateEventWrrRequest.command)
}

// string rid = 2;
inline void UpdateEventWrrRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& UpdateEventWrrRequest::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UpdateEventWrrRequest.rid)
  return _internal_rid();
}
inline void UpdateEventWrrRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.UpdateEventWrrRequest.rid)
}
inline std::string* UpdateEventWrrRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UpdateEventWrrRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& UpdateEventWrrRequest::_internal_rid() const {
  return rid_.Get();
}
inline void UpdateEventWrrRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateEventWrrRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.UpdateEventWrrRequest.rid)
}
inline void UpdateEventWrrRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.UpdateEventWrrRequest.rid)
}
inline void UpdateEventWrrRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.UpdateEventWrrRequest.rid)
}
inline std::string* UpdateEventWrrRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateEventWrrRequest::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.UpdateEventWrrRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateEventWrrRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UpdateEventWrrRequest.rid)
}

// string requestor = 3;
inline void UpdateEventWrrRequest::clear_requestor() {
  requestor_.ClearToEmpty();
}
inline const std::string& UpdateEventWrrRequest::requestor() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UpdateEventWrrRequest.requestor)
  return _internal_requestor();
}
inline void UpdateEventWrrRequest::set_requestor(const std::string& value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:grpc_cli.UpdateEventWrrRequest.requestor)
}
inline std::string* UpdateEventWrrRequest::mutable_requestor() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UpdateEventWrrRequest.requestor)
  return _internal_mutable_requestor();
}
inline const std::string& UpdateEventWrrRequest::_internal_requestor() const {
  return requestor_.Get();
}
inline void UpdateEventWrrRequest::_internal_set_requestor(const std::string& value) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateEventWrrRequest::set_requestor(std::string&& value) {
  
  requestor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.UpdateEventWrrRequest.requestor)
}
inline void UpdateEventWrrRequest::set_requestor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.UpdateEventWrrRequest.requestor)
}
inline void UpdateEventWrrRequest::set_requestor(const char* value,
    size_t size) {
  
  requestor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.UpdateEventWrrRequest.requestor)
}
inline std::string* UpdateEventWrrRequest::_internal_mutable_requestor() {
  
  return requestor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateEventWrrRequest::release_requestor() {
  // @@protoc_insertion_point(field_release:grpc_cli.UpdateEventWrrRequest.requestor)
  return requestor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateEventWrrRequest::set_allocated_requestor(std::string* requestor) {
  if (requestor != nullptr) {
    
  } else {
    
  }
  requestor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UpdateEventWrrRequest.requestor)
}

// .grpc_cli.UpdateEventWrrRequest.Param param = 4;
inline bool UpdateEventWrrRequest::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool UpdateEventWrrRequest::has_param() const {
  return _internal_has_param();
}
inline void UpdateEventWrrRequest::clear_param() {
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::grpc_cli::UpdateEventWrrRequest_Param& UpdateEventWrrRequest::_internal_param() const {
  const ::grpc_cli::UpdateEventWrrRequest_Param* p = param_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::UpdateEventWrrRequest_Param&>(
      ::grpc_cli::_UpdateEventWrrRequest_Param_default_instance_);
}
inline const ::grpc_cli::UpdateEventWrrRequest_Param& UpdateEventWrrRequest::param() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UpdateEventWrrRequest.param)
  return _internal_param();
}
inline void UpdateEventWrrRequest::unsafe_arena_set_allocated_param(
    ::grpc_cli::UpdateEventWrrRequest_Param* param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.UpdateEventWrrRequest.param)
}
inline ::grpc_cli::UpdateEventWrrRequest_Param* UpdateEventWrrRequest::release_param() {
  
  ::grpc_cli::UpdateEventWrrRequest_Param* temp = param_;
  param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::UpdateEventWrrRequest_Param* UpdateEventWrrRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:grpc_cli.UpdateEventWrrRequest.param)
  
  ::grpc_cli::UpdateEventWrrRequest_Param* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::grpc_cli::UpdateEventWrrRequest_Param* UpdateEventWrrRequest::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::UpdateEventWrrRequest_Param>(GetArena());
    param_ = p;
  }
  return param_;
}
inline ::grpc_cli::UpdateEventWrrRequest_Param* UpdateEventWrrRequest::mutable_param() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UpdateEventWrrRequest.param)
  return _internal_mutable_param();
}
inline void UpdateEventWrrRequest::set_allocated_param(::grpc_cli::UpdateEventWrrRequest_Param* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UpdateEventWrrRequest.param)
}

// -------------------------------------------------------------------

// UpdateEventWrrResponse_Result

// .grpc_cli.Status status = 1;
inline bool UpdateEventWrrResponse_Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool UpdateEventWrrResponse_Result::has_status() const {
  return _internal_has_status();
}
inline void UpdateEventWrrResponse_Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grpc_cli::Status& UpdateEventWrrResponse_Result::_internal_status() const {
  const ::grpc_cli::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::Status&>(
      ::grpc_cli::_Status_default_instance_);
}
inline const ::grpc_cli::Status& UpdateEventWrrResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UpdateEventWrrResponse.Result.status)
  return _internal_status();
}
inline void UpdateEventWrrResponse_Result::unsafe_arena_set_allocated_status(
    ::grpc_cli::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.UpdateEventWrrResponse.Result.status)
}
inline ::grpc_cli::Status* UpdateEventWrrResponse_Result::release_status() {
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::Status* UpdateEventWrrResponse_Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:grpc_cli.UpdateEventWrrResponse.Result.status)
  
  ::grpc_cli::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grpc_cli::Status* UpdateEventWrrResponse_Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::grpc_cli::Status* UpdateEventWrrResponse_Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UpdateEventWrrResponse.Result.status)
  return _internal_mutable_status();
}
inline void UpdateEventWrrResponse_Result::set_allocated_status(::grpc_cli::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UpdateEventWrrResponse.Result.status)
}

// -------------------------------------------------------------------

// UpdateEventWrrResponse

// string command = 1;
inline void UpdateEventWrrResponse::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& UpdateEventWrrResponse::command() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UpdateEventWrrResponse.command)
  return _internal_command();
}
inline void UpdateEventWrrResponse::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:grpc_cli.UpdateEventWrrResponse.command)
}
inline std::string* UpdateEventWrrResponse::mutable_command() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UpdateEventWrrResponse.command)
  return _internal_mutable_command();
}
inline const std::string& UpdateEventWrrResponse::_internal_command() const {
  return command_.Get();
}
inline void UpdateEventWrrResponse::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateEventWrrResponse::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.UpdateEventWrrResponse.command)
}
inline void UpdateEventWrrResponse::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.UpdateEventWrrResponse.command)
}
inline void UpdateEventWrrResponse::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.UpdateEventWrrResponse.command)
}
inline std::string* UpdateEventWrrResponse::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateEventWrrResponse::release_command() {
  // @@protoc_insertion_point(field_release:grpc_cli.UpdateEventWrrResponse.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateEventWrrResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UpdateEventWrrResponse.command)
}

// string rid = 2;
inline void UpdateEventWrrResponse::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& UpdateEventWrrResponse::rid() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UpdateEventWrrResponse.rid)
  return _internal_rid();
}
inline void UpdateEventWrrResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:grpc_cli.UpdateEventWrrResponse.rid)
}
inline std::string* UpdateEventWrrResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UpdateEventWrrResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& UpdateEventWrrResponse::_internal_rid() const {
  return rid_.Get();
}
inline void UpdateEventWrrResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateEventWrrResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_cli.UpdateEventWrrResponse.rid)
}
inline void UpdateEventWrrResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_cli.UpdateEventWrrResponse.rid)
}
inline void UpdateEventWrrResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_cli.UpdateEventWrrResponse.rid)
}
inline std::string* UpdateEventWrrResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateEventWrrResponse::release_rid() {
  // @@protoc_insertion_point(field_release:grpc_cli.UpdateEventWrrResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateEventWrrResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UpdateEventWrrResponse.rid)
}

// .grpc_cli.UpdateEventWrrResponse.Result result = 3;
inline bool UpdateEventWrrResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool UpdateEventWrrResponse::has_result() const {
  return _internal_has_result();
}
inline void UpdateEventWrrResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::grpc_cli::UpdateEventWrrResponse_Result& UpdateEventWrrResponse::_internal_result() const {
  const ::grpc_cli::UpdateEventWrrResponse_Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::UpdateEventWrrResponse_Result&>(
      ::grpc_cli::_UpdateEventWrrResponse_Result_default_instance_);
}
inline const ::grpc_cli::UpdateEventWrrResponse_Result& UpdateEventWrrResponse::result() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UpdateEventWrrResponse.result)
  return _internal_result();
}
inline void UpdateEventWrrResponse::unsafe_arena_set_allocated_result(
    ::grpc_cli::UpdateEventWrrResponse_Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.UpdateEventWrrResponse.result)
}
inline ::grpc_cli::UpdateEventWrrResponse_Result* UpdateEventWrrResponse::release_result() {
  
  ::grpc_cli::UpdateEventWrrResponse_Result* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::UpdateEventWrrResponse_Result* UpdateEventWrrResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:grpc_cli.UpdateEventWrrResponse.result)
  
  ::grpc_cli::UpdateEventWrrResponse_Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::grpc_cli::UpdateEventWrrResponse_Result* UpdateEventWrrResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::UpdateEventWrrResponse_Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::grpc_cli::UpdateEventWrrResponse_Result* UpdateEventWrrResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UpdateEventWrrResponse.result)
  return _internal_mutable_result();
}
inline void UpdateEventWrrResponse::set_allocated_result(::grpc_cli::UpdateEventWrrResponse_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UpdateEventWrrResponse.result)
}

// .grpc_cli.PosInfo info = 4;
inline bool UpdateEventWrrResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool UpdateEventWrrResponse::has_info() const {
  return _internal_has_info();
}
inline void UpdateEventWrrResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::grpc_cli::PosInfo& UpdateEventWrrResponse::_internal_info() const {
  const ::grpc_cli::PosInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_cli::PosInfo&>(
      ::grpc_cli::_PosInfo_default_instance_);
}
inline const ::grpc_cli::PosInfo& UpdateEventWrrResponse::info() const {
  // @@protoc_insertion_point(field_get:grpc_cli.UpdateEventWrrResponse.info)
  return _internal_info();
}
inline void UpdateEventWrrResponse::unsafe_arena_set_allocated_info(
    ::grpc_cli::PosInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_cli.UpdateEventWrrResponse.info)
}
inline ::grpc_cli::PosInfo* UpdateEventWrrResponse::release_info() {
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_cli::PosInfo* UpdateEventWrrResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:grpc_cli.UpdateEventWrrResponse.info)
  
  ::grpc_cli::PosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::grpc_cli::PosInfo* UpdateEventWrrResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_cli::PosInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::grpc_cli::PosInfo* UpdateEventWrrResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:grpc_cli.UpdateEventWrrResponse.info)
  return _internal_mutable_info();
}
inline void UpdateEventWrrResponse::set_allocated_info(::grpc_cli::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:grpc_cli.UpdateEventWrrResponse.info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpc_cli

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cli_2eproto
