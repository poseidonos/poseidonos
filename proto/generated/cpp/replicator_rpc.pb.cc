// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: replicator_rpc.proto

#include "replicator_rpc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace replicator_rpc {
constexpr Chunk::Chunk(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : content_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ChunkDefaultTypeInternal {
  constexpr ChunkDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChunkDefaultTypeInternal() {}
  union {
    Chunk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChunkDefaultTypeInternal _Chunk_default_instance_;
constexpr CompleteReadRequest::CompleteReadRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_()
  , array_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , volume_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lsn_(PROTOBUF_ULONGLONG(0)){}
struct CompleteReadRequestDefaultTypeInternal {
  constexpr CompleteReadRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CompleteReadRequestDefaultTypeInternal() {}
  union {
    CompleteReadRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CompleteReadRequestDefaultTypeInternal _CompleteReadRequest_default_instance_;
constexpr CompleteReadResponse::CompleteReadResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reason_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_(0)
{}
struct CompleteReadResponseDefaultTypeInternal {
  constexpr CompleteReadResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CompleteReadResponseDefaultTypeInternal() {}
  union {
    CompleteReadResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CompleteReadResponseDefaultTypeInternal _CompleteReadResponse_default_instance_;
constexpr CompleteWriteRequest::CompleteWriteRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : array_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , volume_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lsn_(PROTOBUF_ULONGLONG(0)){}
struct CompleteWriteRequestDefaultTypeInternal {
  constexpr CompleteWriteRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CompleteWriteRequestDefaultTypeInternal() {}
  union {
    CompleteWriteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CompleteWriteRequestDefaultTypeInternal _CompleteWriteRequest_default_instance_;
constexpr CompleteWriteResponse::CompleteWriteResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reason_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_(0)
{}
struct CompleteWriteResponseDefaultTypeInternal {
  constexpr CompleteWriteResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CompleteWriteResponseDefaultTypeInternal() {}
  union {
    CompleteWriteResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CompleteWriteResponseDefaultTypeInternal _CompleteWriteResponse_default_instance_;
constexpr PushHostWriteRequest::PushHostWriteRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_()
  , array_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , volume_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , rba_(PROTOBUF_ULONGLONG(0))
  , num_blocks_(PROTOBUF_ULONGLONG(0)){}
struct PushHostWriteRequestDefaultTypeInternal {
  constexpr PushHostWriteRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PushHostWriteRequestDefaultTypeInternal() {}
  union {
    PushHostWriteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PushHostWriteRequestDefaultTypeInternal _PushHostWriteRequest_default_instance_;
constexpr PushHostWriteResponse::PushHostWriteResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reason_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lsn_(PROTOBUF_ULONGLONG(0))
  , result_(0)
{}
struct PushHostWriteResponseDefaultTypeInternal {
  constexpr PushHostWriteResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PushHostWriteResponseDefaultTypeInternal() {}
  union {
    PushHostWriteResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PushHostWriteResponseDefaultTypeInternal _PushHostWriteResponse_default_instance_;
constexpr PushDirtyLogRequest::PushDirtyLogRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : array_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , volume_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , rba_(PROTOBUF_ULONGLONG(0))
  , num_blocks_(PROTOBUF_ULONGLONG(0)){}
struct PushDirtyLogRequestDefaultTypeInternal {
  constexpr PushDirtyLogRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PushDirtyLogRequestDefaultTypeInternal() {}
  union {
    PushDirtyLogRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PushDirtyLogRequestDefaultTypeInternal _PushDirtyLogRequest_default_instance_;
constexpr PushDirtyLogResponse::PushDirtyLogResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reason_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , successful_(false){}
struct PushDirtyLogResponseDefaultTypeInternal {
  constexpr PushDirtyLogResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PushDirtyLogResponseDefaultTypeInternal() {}
  union {
    PushDirtyLogResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PushDirtyLogResponseDefaultTypeInternal _PushDirtyLogResponse_default_instance_;
constexpr TransferDirtyLogRequest::TransferDirtyLogRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : array_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , volume_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , rba_(PROTOBUF_ULONGLONG(0))
  , num_blocks_(PROTOBUF_ULONGLONG(0)){}
struct TransferDirtyLogRequestDefaultTypeInternal {
  constexpr TransferDirtyLogRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransferDirtyLogRequestDefaultTypeInternal() {}
  union {
    TransferDirtyLogRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransferDirtyLogRequestDefaultTypeInternal _TransferDirtyLogRequest_default_instance_;
constexpr TransferDirtyLogResponse::TransferDirtyLogResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reason_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , successful_(false){}
struct TransferDirtyLogResponseDefaultTypeInternal {
  constexpr TransferDirtyLogResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransferDirtyLogResponseDefaultTypeInternal() {}
  union {
    TransferDirtyLogResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransferDirtyLogResponseDefaultTypeInternal _TransferDirtyLogResponse_default_instance_;
constexpr TransferHostWriteRequest::TransferHostWriteRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : array_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , volume_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , rba_(PROTOBUF_ULONGLONG(0))
  , num_blocks_(PROTOBUF_ULONGLONG(0)){}
struct TransferHostWriteRequestDefaultTypeInternal {
  constexpr TransferHostWriteRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransferHostWriteRequestDefaultTypeInternal() {}
  union {
    TransferHostWriteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransferHostWriteRequestDefaultTypeInternal _TransferHostWriteRequest_default_instance_;
constexpr TransferHostWriteResponse::TransferHostWriteResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reason_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , successful_(false){}
struct TransferHostWriteResponseDefaultTypeInternal {
  constexpr TransferHostWriteResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransferHostWriteResponseDefaultTypeInternal() {}
  union {
    TransferHostWriteResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransferHostWriteResponseDefaultTypeInternal _TransferHostWriteResponse_default_instance_;
}  // namespace replicator_rpc
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_replicator_5frpc_2eproto[13];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_replicator_5frpc_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_replicator_5frpc_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_replicator_5frpc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::replicator_rpc::Chunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::replicator_rpc::Chunk, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::replicator_rpc::CompleteReadRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::replicator_rpc::CompleteReadRequest, array_name_),
  PROTOBUF_FIELD_OFFSET(::replicator_rpc::CompleteReadRequest, volume_name_),
  PROTOBUF_FIELD_OFFSET(::replicator_rpc::CompleteReadRequest, lsn_),
  PROTOBUF_FIELD_OFFSET(::replicator_rpc::CompleteReadRequest, data_),
  PROTOBUF_FIELD_OFFSET(::replicator_rpc::CompleteReadResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::replicator_rpc::CompleteReadResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::replicator_rpc::CompleteReadResponse, result_),
  PROTOBUF_FIELD_OFFSET(::replicator_rpc::CompleteReadResponse, reason_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::replicator_rpc::CompleteWriteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::replicator_rpc::CompleteWriteRequest, array_name_),
  PROTOBUF_FIELD_OFFSET(::replicator_rpc::CompleteWriteRequest, volume_name_),
  PROTOBUF_FIELD_OFFSET(::replicator_rpc::CompleteWriteRequest, lsn_),
  PROTOBUF_FIELD_OFFSET(::replicator_rpc::CompleteWriteResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::replicator_rpc::CompleteWriteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::replicator_rpc::CompleteWriteResponse, result_),
  PROTOBUF_FIELD_OFFSET(::replicator_rpc::CompleteWriteResponse, reason_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::replicator_rpc::PushHostWriteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::replicator_rpc::PushHostWriteRequest, array_name_),
  PROTOBUF_FIELD_OFFSET(::replicator_rpc::PushHostWriteRequest, volume_name_),
  PROTOBUF_FIELD_OFFSET(::replicator_rpc::PushHostWriteRequest, rba_),
  PROTOBUF_FIELD_OFFSET(::replicator_rpc::PushHostWriteRequest, num_blocks_),
  PROTOBUF_FIELD_OFFSET(::replicator_rpc::PushHostWriteRequest, data_),
  PROTOBUF_FIELD_OFFSET(::replicator_rpc::PushHostWriteResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::replicator_rpc::PushHostWriteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::replicator_rpc::PushHostWriteResponse, result_),
  PROTOBUF_FIELD_OFFSET(::replicator_rpc::PushHostWriteResponse, reason_),
  PROTOBUF_FIELD_OFFSET(::replicator_rpc::PushHostWriteResponse, lsn_),
  ~0u,
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::replicator_rpc::PushDirtyLogRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::replicator_rpc::PushDirtyLogRequest, array_name_),
  PROTOBUF_FIELD_OFFSET(::replicator_rpc::PushDirtyLogRequest, volume_name_),
  PROTOBUF_FIELD_OFFSET(::replicator_rpc::PushDirtyLogRequest, rba_),
  PROTOBUF_FIELD_OFFSET(::replicator_rpc::PushDirtyLogRequest, num_blocks_),
  PROTOBUF_FIELD_OFFSET(::replicator_rpc::PushDirtyLogResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::replicator_rpc::PushDirtyLogResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::replicator_rpc::PushDirtyLogResponse, successful_),
  PROTOBUF_FIELD_OFFSET(::replicator_rpc::PushDirtyLogResponse, reason_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::replicator_rpc::TransferDirtyLogRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::replicator_rpc::TransferDirtyLogRequest, array_name_),
  PROTOBUF_FIELD_OFFSET(::replicator_rpc::TransferDirtyLogRequest, volume_name_),
  PROTOBUF_FIELD_OFFSET(::replicator_rpc::TransferDirtyLogRequest, rba_),
  PROTOBUF_FIELD_OFFSET(::replicator_rpc::TransferDirtyLogRequest, num_blocks_),
  PROTOBUF_FIELD_OFFSET(::replicator_rpc::TransferDirtyLogResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::replicator_rpc::TransferDirtyLogResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::replicator_rpc::TransferDirtyLogResponse, successful_),
  PROTOBUF_FIELD_OFFSET(::replicator_rpc::TransferDirtyLogResponse, reason_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::replicator_rpc::TransferHostWriteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::replicator_rpc::TransferHostWriteRequest, array_name_),
  PROTOBUF_FIELD_OFFSET(::replicator_rpc::TransferHostWriteRequest, volume_name_),
  PROTOBUF_FIELD_OFFSET(::replicator_rpc::TransferHostWriteRequest, rba_),
  PROTOBUF_FIELD_OFFSET(::replicator_rpc::TransferHostWriteRequest, num_blocks_),
  PROTOBUF_FIELD_OFFSET(::replicator_rpc::TransferHostWriteResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::replicator_rpc::TransferHostWriteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::replicator_rpc::TransferHostWriteResponse, successful_),
  PROTOBUF_FIELD_OFFSET(::replicator_rpc::TransferHostWriteResponse, reason_),
  ~0u,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::replicator_rpc::Chunk)},
  { 6, -1, sizeof(::replicator_rpc::CompleteReadRequest)},
  { 15, 22, sizeof(::replicator_rpc::CompleteReadResponse)},
  { 24, -1, sizeof(::replicator_rpc::CompleteWriteRequest)},
  { 32, 39, sizeof(::replicator_rpc::CompleteWriteResponse)},
  { 41, -1, sizeof(::replicator_rpc::PushHostWriteRequest)},
  { 51, 59, sizeof(::replicator_rpc::PushHostWriteResponse)},
  { 62, -1, sizeof(::replicator_rpc::PushDirtyLogRequest)},
  { 71, 78, sizeof(::replicator_rpc::PushDirtyLogResponse)},
  { 80, -1, sizeof(::replicator_rpc::TransferDirtyLogRequest)},
  { 89, 96, sizeof(::replicator_rpc::TransferDirtyLogResponse)},
  { 98, -1, sizeof(::replicator_rpc::TransferHostWriteRequest)},
  { 107, 114, sizeof(::replicator_rpc::TransferHostWriteResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::replicator_rpc::_Chunk_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::replicator_rpc::_CompleteReadRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::replicator_rpc::_CompleteReadResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::replicator_rpc::_CompleteWriteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::replicator_rpc::_CompleteWriteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::replicator_rpc::_PushHostWriteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::replicator_rpc::_PushHostWriteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::replicator_rpc::_PushDirtyLogRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::replicator_rpc::_PushDirtyLogResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::replicator_rpc::_TransferDirtyLogRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::replicator_rpc::_TransferDirtyLogResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::replicator_rpc::_TransferHostWriteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::replicator_rpc::_TransferHostWriteResponse_default_instance_),
};

const char descriptor_table_protodef_replicator_5frpc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024replicator_rpc.proto\022\016replicator_rpc\"\030"
  "\n\005Chunk\022\017\n\007content\030\001 \001(\014\"p\n\023CompleteRead"
  "Request\022\022\n\narray_name\030\001 \001(\t\022\023\n\013volume_na"
  "me\030\002 \001(\t\022\013\n\003lsn\030\003 \001(\004\022#\n\004data\030\004 \003(\0132\025.re"
  "plicator_rpc.Chunk\"a\n\024CompleteReadRespon"
  "se\022)\n\006result\030\001 \001(\0162\031.replicator_rpc.PosR"
  "esult\022\023\n\006reason\030\002 \001(\tH\000\210\001\001B\t\n\007_reason\"L\n"
  "\024CompleteWriteRequest\022\022\n\narray_name\030\001 \001("
  "\t\022\023\n\013volume_name\030\002 \001(\t\022\013\n\003lsn\030\003 \001(\004\"b\n\025C"
  "ompleteWriteResponse\022)\n\006result\030\001 \001(\0162\031.r"
  "eplicator_rpc.PosResult\022\023\n\006reason\030\002 \001(\tH"
  "\000\210\001\001B\t\n\007_reason\"\205\001\n\024PushHostWriteRequest"
  "\022\022\n\narray_name\030\001 \001(\t\022\023\n\013volume_name\030\002 \001("
  "\t\022\013\n\003rba\030\003 \001(\004\022\022\n\nnum_blocks\030\004 \001(\004\022#\n\004da"
  "ta\030\005 \003(\0132\025.replicator_rpc.Chunk\"o\n\025PushH"
  "ostWriteResponse\022)\n\006result\030\001 \001(\0162\031.repli"
  "cator_rpc.PosResult\022\023\n\006reason\030\002 \001(\tH\000\210\001\001"
  "\022\013\n\003lsn\030\003 \001(\004B\t\n\007_reason\"_\n\023PushDirtyLog"
  "Request\022\022\n\narray_name\030\001 \001(\t\022\023\n\013volume_na"
  "me\030\002 \001(\t\022\013\n\003rba\030\003 \001(\004\022\022\n\nnum_blocks\030\004 \001("
  "\004\"J\n\024PushDirtyLogResponse\022\022\n\nsuccessful\030"
  "\001 \001(\010\022\023\n\006reason\030\002 \001(\tH\000\210\001\001B\t\n\007_reason\"c\n"
  "\027TransferDirtyLogRequest\022\022\n\narray_name\030\001"
  " \001(\t\022\023\n\013volume_name\030\002 \001(\t\022\013\n\003rba\030\003 \001(\004\022\022"
  "\n\nnum_blocks\030\004 \001(\004\"N\n\030TransferDirtyLogRe"
  "sponse\022\022\n\nsuccessful\030\001 \001(\010\022\023\n\006reason\030\002 \001"
  "(\tH\000\210\001\001B\t\n\007_reason\"d\n\030TransferHostWriteR"
  "equest\022\022\n\narray_name\030\001 \001(\t\022\023\n\013volume_nam"
  "e\030\002 \001(\t\022\013\n\003rba\030\003 \001(\004\022\022\n\nnum_blocks\030\004 \001(\004"
  "\"O\n\031TransferHostWriteResponse\022\022\n\nsuccess"
  "ful\030\001 \001(\010\022\023\n\006reason\030\002 \001(\tH\000\210\001\001B\t\n\007_reaso"
  "n*\"\n\tPosResult\022\013\n\007SUCCESS\020\000\022\010\n\004FAIL\020\0012\335\004"
  "\n\014ReplicatorIo\022[\n\014CompleteRead\022#.replica"
  "tor_rpc.CompleteReadRequest\032$.replicator"
  "_rpc.CompleteReadResponse\"\000\022^\n\rCompleteW"
  "rite\022$.replicator_rpc.CompleteWriteReque"
  "st\032%.replicator_rpc.CompleteWriteRespons"
  "e\"\000\022^\n\rPushHostWrite\022$.replicator_rpc.Pu"
  "shHostWriteRequest\032%.replicator_rpc.Push"
  "HostWriteResponse\"\000\022[\n\014PushDirtyLog\022#.re"
  "plicator_rpc.PushDirtyLogRequest\032$.repli"
  "cator_rpc.PushDirtyLogResponse\"\000\022g\n\020Tran"
  "sferDirtyLog\022\'.replicator_rpc.TransferDi"
  "rtyLogRequest\032(.replicator_rpc.TransferD"
  "irtyLogResponse\"\000\022j\n\021TransferHostWrite\022("
  ".replicator_rpc.TransferHostWriteRequest"
  "\032).replicator_rpc.TransferHostWriteRespo"
  "nse\"\000b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_replicator_5frpc_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_replicator_5frpc_2eproto = {
  false, false, 1893, descriptor_table_protodef_replicator_5frpc_2eproto, "replicator_rpc.proto", 
  &descriptor_table_replicator_5frpc_2eproto_once, nullptr, 0, 13,
  schemas, file_default_instances, TableStruct_replicator_5frpc_2eproto::offsets,
  file_level_metadata_replicator_5frpc_2eproto, file_level_enum_descriptors_replicator_5frpc_2eproto, file_level_service_descriptors_replicator_5frpc_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_replicator_5frpc_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_replicator_5frpc_2eproto);
  return descriptor_table_replicator_5frpc_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_replicator_5frpc_2eproto(&descriptor_table_replicator_5frpc_2eproto);
namespace replicator_rpc {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PosResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_replicator_5frpc_2eproto);
  return file_level_enum_descriptors_replicator_5frpc_2eproto[0];
}
bool PosResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Chunk::_Internal {
 public:
};

Chunk::Chunk(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:replicator_rpc.Chunk)
}
Chunk::Chunk(const Chunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_content(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:replicator_rpc.Chunk)
}

void Chunk::SharedCtor() {
content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Chunk::~Chunk() {
  // @@protoc_insertion_point(destructor:replicator_rpc.Chunk)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Chunk::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Chunk::ArenaDtor(void* object) {
  Chunk* _this = reinterpret_cast< Chunk* >(object);
  (void)_this;
}
void Chunk::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Chunk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Chunk::Clear() {
// @@protoc_insertion_point(message_clear_start:replicator_rpc.Chunk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Chunk::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes content = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Chunk::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:replicator_rpc.Chunk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes content = 1;
  if (this->content().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:replicator_rpc.Chunk)
  return target;
}

size_t Chunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:replicator_rpc.Chunk)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes content = 1;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_content());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Chunk::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:replicator_rpc.Chunk)
  GOOGLE_DCHECK_NE(&from, this);
  const Chunk* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Chunk>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:replicator_rpc.Chunk)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:replicator_rpc.Chunk)
    MergeFrom(*source);
  }
}

void Chunk::MergeFrom(const Chunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:replicator_rpc.Chunk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.content().size() > 0) {
    _internal_set_content(from._internal_content());
  }
}

void Chunk::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:replicator_rpc.Chunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Chunk::CopyFrom(const Chunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:replicator_rpc.Chunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chunk::IsInitialized() const {
  return true;
}

void Chunk::InternalSwap(Chunk* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Chunk::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CompleteReadRequest::_Internal {
 public:
};

CompleteReadRequest::CompleteReadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:replicator_rpc.CompleteReadRequest)
}
CompleteReadRequest::CompleteReadRequest(const CompleteReadRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  array_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_array_name().empty()) {
    array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_array_name(), 
      GetArena());
  }
  volume_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_volume_name().empty()) {
    volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_volume_name(), 
      GetArena());
  }
  lsn_ = from.lsn_;
  // @@protoc_insertion_point(copy_constructor:replicator_rpc.CompleteReadRequest)
}

void CompleteReadRequest::SharedCtor() {
array_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
volume_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
lsn_ = PROTOBUF_ULONGLONG(0);
}

CompleteReadRequest::~CompleteReadRequest() {
  // @@protoc_insertion_point(destructor:replicator_rpc.CompleteReadRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CompleteReadRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  array_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  volume_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CompleteReadRequest::ArenaDtor(void* object) {
  CompleteReadRequest* _this = reinterpret_cast< CompleteReadRequest* >(object);
  (void)_this;
}
void CompleteReadRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CompleteReadRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CompleteReadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:replicator_rpc.CompleteReadRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  array_name_.ClearToEmpty();
  volume_name_.ClearToEmpty();
  lsn_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompleteReadRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string array_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_array_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "replicator_rpc.CompleteReadRequest.array_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string volume_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_volume_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "replicator_rpc.CompleteReadRequest.volume_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 lsn = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          lsn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .replicator_rpc.Chunk data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CompleteReadRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:replicator_rpc.CompleteReadRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string array_name = 1;
  if (this->array_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_array_name().data(), static_cast<int>(this->_internal_array_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "replicator_rpc.CompleteReadRequest.array_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_array_name(), target);
  }

  // string volume_name = 2;
  if (this->volume_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_volume_name().data(), static_cast<int>(this->_internal_volume_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "replicator_rpc.CompleteReadRequest.volume_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_volume_name(), target);
  }

  // uint64 lsn = 3;
  if (this->lsn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_lsn(), target);
  }

  // repeated .replicator_rpc.Chunk data = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:replicator_rpc.CompleteReadRequest)
  return target;
}

size_t CompleteReadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:replicator_rpc.CompleteReadRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .replicator_rpc.Chunk data = 4;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string array_name = 1;
  if (this->array_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_array_name());
  }

  // string volume_name = 2;
  if (this->volume_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_volume_name());
  }

  // uint64 lsn = 3;
  if (this->lsn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_lsn());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompleteReadRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:replicator_rpc.CompleteReadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CompleteReadRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CompleteReadRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:replicator_rpc.CompleteReadRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:replicator_rpc.CompleteReadRequest)
    MergeFrom(*source);
  }
}

void CompleteReadRequest::MergeFrom(const CompleteReadRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:replicator_rpc.CompleteReadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.array_name().size() > 0) {
    _internal_set_array_name(from._internal_array_name());
  }
  if (from.volume_name().size() > 0) {
    _internal_set_volume_name(from._internal_volume_name());
  }
  if (from.lsn() != 0) {
    _internal_set_lsn(from._internal_lsn());
  }
}

void CompleteReadRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:replicator_rpc.CompleteReadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompleteReadRequest::CopyFrom(const CompleteReadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:replicator_rpc.CompleteReadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompleteReadRequest::IsInitialized() const {
  return true;
}

void CompleteReadRequest::InternalSwap(CompleteReadRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  array_name_.Swap(&other->array_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  volume_name_.Swap(&other->volume_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(lsn_, other->lsn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompleteReadRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CompleteReadResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CompleteReadResponse>()._has_bits_);
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CompleteReadResponse::CompleteReadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:replicator_rpc.CompleteReadResponse)
}
CompleteReadResponse::CompleteReadResponse(const CompleteReadResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_reason()) {
    reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reason(), 
      GetArena());
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:replicator_rpc.CompleteReadResponse)
}

void CompleteReadResponse::SharedCtor() {
reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
result_ = 0;
}

CompleteReadResponse::~CompleteReadResponse() {
  // @@protoc_insertion_point(destructor:replicator_rpc.CompleteReadResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CompleteReadResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CompleteReadResponse::ArenaDtor(void* object) {
  CompleteReadResponse* _this = reinterpret_cast< CompleteReadResponse* >(object);
  (void)_this;
}
void CompleteReadResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CompleteReadResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CompleteReadResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:replicator_rpc.CompleteReadResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    reason_.ClearNonDefaultToEmpty();
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompleteReadResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .replicator_rpc.PosResult result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::replicator_rpc::PosResult>(val));
        } else goto handle_unusual;
        continue;
      // string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "replicator_rpc.CompleteReadResponse.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CompleteReadResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:replicator_rpc.CompleteReadResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .replicator_rpc.PosResult result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // string reason = 2;
  if (_internal_has_reason()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "replicator_rpc.CompleteReadResponse.reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:replicator_rpc.CompleteReadResponse)
  return target;
}

size_t CompleteReadResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:replicator_rpc.CompleteReadResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reason = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // .replicator_rpc.PosResult result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompleteReadResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:replicator_rpc.CompleteReadResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CompleteReadResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CompleteReadResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:replicator_rpc.CompleteReadResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:replicator_rpc.CompleteReadResponse)
    MergeFrom(*source);
  }
}

void CompleteReadResponse::MergeFrom(const CompleteReadResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:replicator_rpc.CompleteReadResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_reason()) {
    _internal_set_reason(from._internal_reason());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void CompleteReadResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:replicator_rpc.CompleteReadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompleteReadResponse::CopyFrom(const CompleteReadResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:replicator_rpc.CompleteReadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompleteReadResponse::IsInitialized() const {
  return true;
}

void CompleteReadResponse::InternalSwap(CompleteReadResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompleteReadResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CompleteWriteRequest::_Internal {
 public:
};

CompleteWriteRequest::CompleteWriteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:replicator_rpc.CompleteWriteRequest)
}
CompleteWriteRequest::CompleteWriteRequest(const CompleteWriteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  array_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_array_name().empty()) {
    array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_array_name(), 
      GetArena());
  }
  volume_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_volume_name().empty()) {
    volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_volume_name(), 
      GetArena());
  }
  lsn_ = from.lsn_;
  // @@protoc_insertion_point(copy_constructor:replicator_rpc.CompleteWriteRequest)
}

void CompleteWriteRequest::SharedCtor() {
array_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
volume_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
lsn_ = PROTOBUF_ULONGLONG(0);
}

CompleteWriteRequest::~CompleteWriteRequest() {
  // @@protoc_insertion_point(destructor:replicator_rpc.CompleteWriteRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CompleteWriteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  array_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  volume_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CompleteWriteRequest::ArenaDtor(void* object) {
  CompleteWriteRequest* _this = reinterpret_cast< CompleteWriteRequest* >(object);
  (void)_this;
}
void CompleteWriteRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CompleteWriteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CompleteWriteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:replicator_rpc.CompleteWriteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  array_name_.ClearToEmpty();
  volume_name_.ClearToEmpty();
  lsn_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompleteWriteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string array_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_array_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "replicator_rpc.CompleteWriteRequest.array_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string volume_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_volume_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "replicator_rpc.CompleteWriteRequest.volume_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 lsn = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          lsn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CompleteWriteRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:replicator_rpc.CompleteWriteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string array_name = 1;
  if (this->array_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_array_name().data(), static_cast<int>(this->_internal_array_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "replicator_rpc.CompleteWriteRequest.array_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_array_name(), target);
  }

  // string volume_name = 2;
  if (this->volume_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_volume_name().data(), static_cast<int>(this->_internal_volume_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "replicator_rpc.CompleteWriteRequest.volume_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_volume_name(), target);
  }

  // uint64 lsn = 3;
  if (this->lsn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_lsn(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:replicator_rpc.CompleteWriteRequest)
  return target;
}

size_t CompleteWriteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:replicator_rpc.CompleteWriteRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string array_name = 1;
  if (this->array_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_array_name());
  }

  // string volume_name = 2;
  if (this->volume_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_volume_name());
  }

  // uint64 lsn = 3;
  if (this->lsn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_lsn());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompleteWriteRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:replicator_rpc.CompleteWriteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CompleteWriteRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CompleteWriteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:replicator_rpc.CompleteWriteRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:replicator_rpc.CompleteWriteRequest)
    MergeFrom(*source);
  }
}

void CompleteWriteRequest::MergeFrom(const CompleteWriteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:replicator_rpc.CompleteWriteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.array_name().size() > 0) {
    _internal_set_array_name(from._internal_array_name());
  }
  if (from.volume_name().size() > 0) {
    _internal_set_volume_name(from._internal_volume_name());
  }
  if (from.lsn() != 0) {
    _internal_set_lsn(from._internal_lsn());
  }
}

void CompleteWriteRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:replicator_rpc.CompleteWriteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompleteWriteRequest::CopyFrom(const CompleteWriteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:replicator_rpc.CompleteWriteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompleteWriteRequest::IsInitialized() const {
  return true;
}

void CompleteWriteRequest::InternalSwap(CompleteWriteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  array_name_.Swap(&other->array_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  volume_name_.Swap(&other->volume_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(lsn_, other->lsn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompleteWriteRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CompleteWriteResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CompleteWriteResponse>()._has_bits_);
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CompleteWriteResponse::CompleteWriteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:replicator_rpc.CompleteWriteResponse)
}
CompleteWriteResponse::CompleteWriteResponse(const CompleteWriteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_reason()) {
    reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reason(), 
      GetArena());
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:replicator_rpc.CompleteWriteResponse)
}

void CompleteWriteResponse::SharedCtor() {
reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
result_ = 0;
}

CompleteWriteResponse::~CompleteWriteResponse() {
  // @@protoc_insertion_point(destructor:replicator_rpc.CompleteWriteResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CompleteWriteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CompleteWriteResponse::ArenaDtor(void* object) {
  CompleteWriteResponse* _this = reinterpret_cast< CompleteWriteResponse* >(object);
  (void)_this;
}
void CompleteWriteResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CompleteWriteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CompleteWriteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:replicator_rpc.CompleteWriteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    reason_.ClearNonDefaultToEmpty();
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompleteWriteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .replicator_rpc.PosResult result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::replicator_rpc::PosResult>(val));
        } else goto handle_unusual;
        continue;
      // string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "replicator_rpc.CompleteWriteResponse.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CompleteWriteResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:replicator_rpc.CompleteWriteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .replicator_rpc.PosResult result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // string reason = 2;
  if (_internal_has_reason()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "replicator_rpc.CompleteWriteResponse.reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:replicator_rpc.CompleteWriteResponse)
  return target;
}

size_t CompleteWriteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:replicator_rpc.CompleteWriteResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reason = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // .replicator_rpc.PosResult result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompleteWriteResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:replicator_rpc.CompleteWriteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CompleteWriteResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CompleteWriteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:replicator_rpc.CompleteWriteResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:replicator_rpc.CompleteWriteResponse)
    MergeFrom(*source);
  }
}

void CompleteWriteResponse::MergeFrom(const CompleteWriteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:replicator_rpc.CompleteWriteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_reason()) {
    _internal_set_reason(from._internal_reason());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void CompleteWriteResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:replicator_rpc.CompleteWriteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompleteWriteResponse::CopyFrom(const CompleteWriteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:replicator_rpc.CompleteWriteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompleteWriteResponse::IsInitialized() const {
  return true;
}

void CompleteWriteResponse::InternalSwap(CompleteWriteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompleteWriteResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PushHostWriteRequest::_Internal {
 public:
};

PushHostWriteRequest::PushHostWriteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:replicator_rpc.PushHostWriteRequest)
}
PushHostWriteRequest::PushHostWriteRequest(const PushHostWriteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  array_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_array_name().empty()) {
    array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_array_name(), 
      GetArena());
  }
  volume_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_volume_name().empty()) {
    volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_volume_name(), 
      GetArena());
  }
  ::memcpy(&rba_, &from.rba_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_blocks_) -
    reinterpret_cast<char*>(&rba_)) + sizeof(num_blocks_));
  // @@protoc_insertion_point(copy_constructor:replicator_rpc.PushHostWriteRequest)
}

void PushHostWriteRequest::SharedCtor() {
array_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
volume_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&rba_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_blocks_) -
    reinterpret_cast<char*>(&rba_)) + sizeof(num_blocks_));
}

PushHostWriteRequest::~PushHostWriteRequest() {
  // @@protoc_insertion_point(destructor:replicator_rpc.PushHostWriteRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PushHostWriteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  array_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  volume_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PushHostWriteRequest::ArenaDtor(void* object) {
  PushHostWriteRequest* _this = reinterpret_cast< PushHostWriteRequest* >(object);
  (void)_this;
}
void PushHostWriteRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PushHostWriteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PushHostWriteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:replicator_rpc.PushHostWriteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  array_name_.ClearToEmpty();
  volume_name_.ClearToEmpty();
  ::memset(&rba_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_blocks_) -
      reinterpret_cast<char*>(&rba_)) + sizeof(num_blocks_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PushHostWriteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string array_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_array_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "replicator_rpc.PushHostWriteRequest.array_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string volume_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_volume_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "replicator_rpc.PushHostWriteRequest.volume_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 rba = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          rba_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 num_blocks = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          num_blocks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .replicator_rpc.Chunk data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PushHostWriteRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:replicator_rpc.PushHostWriteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string array_name = 1;
  if (this->array_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_array_name().data(), static_cast<int>(this->_internal_array_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "replicator_rpc.PushHostWriteRequest.array_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_array_name(), target);
  }

  // string volume_name = 2;
  if (this->volume_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_volume_name().data(), static_cast<int>(this->_internal_volume_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "replicator_rpc.PushHostWriteRequest.volume_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_volume_name(), target);
  }

  // uint64 rba = 3;
  if (this->rba() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_rba(), target);
  }

  // uint64 num_blocks = 4;
  if (this->num_blocks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_num_blocks(), target);
  }

  // repeated .replicator_rpc.Chunk data = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:replicator_rpc.PushHostWriteRequest)
  return target;
}

size_t PushHostWriteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:replicator_rpc.PushHostWriteRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .replicator_rpc.Chunk data = 5;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string array_name = 1;
  if (this->array_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_array_name());
  }

  // string volume_name = 2;
  if (this->volume_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_volume_name());
  }

  // uint64 rba = 3;
  if (this->rba() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_rba());
  }

  // uint64 num_blocks = 4;
  if (this->num_blocks() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_num_blocks());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PushHostWriteRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:replicator_rpc.PushHostWriteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PushHostWriteRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PushHostWriteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:replicator_rpc.PushHostWriteRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:replicator_rpc.PushHostWriteRequest)
    MergeFrom(*source);
  }
}

void PushHostWriteRequest::MergeFrom(const PushHostWriteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:replicator_rpc.PushHostWriteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.array_name().size() > 0) {
    _internal_set_array_name(from._internal_array_name());
  }
  if (from.volume_name().size() > 0) {
    _internal_set_volume_name(from._internal_volume_name());
  }
  if (from.rba() != 0) {
    _internal_set_rba(from._internal_rba());
  }
  if (from.num_blocks() != 0) {
    _internal_set_num_blocks(from._internal_num_blocks());
  }
}

void PushHostWriteRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:replicator_rpc.PushHostWriteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushHostWriteRequest::CopyFrom(const PushHostWriteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:replicator_rpc.PushHostWriteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushHostWriteRequest::IsInitialized() const {
  return true;
}

void PushHostWriteRequest::InternalSwap(PushHostWriteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  array_name_.Swap(&other->array_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  volume_name_.Swap(&other->volume_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PushHostWriteRequest, num_blocks_)
      + sizeof(PushHostWriteRequest::num_blocks_)
      - PROTOBUF_FIELD_OFFSET(PushHostWriteRequest, rba_)>(
          reinterpret_cast<char*>(&rba_),
          reinterpret_cast<char*>(&other->rba_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PushHostWriteRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PushHostWriteResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<PushHostWriteResponse>()._has_bits_);
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PushHostWriteResponse::PushHostWriteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:replicator_rpc.PushHostWriteResponse)
}
PushHostWriteResponse::PushHostWriteResponse(const PushHostWriteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_reason()) {
    reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reason(), 
      GetArena());
  }
  ::memcpy(&lsn_, &from.lsn_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&lsn_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:replicator_rpc.PushHostWriteResponse)
}

void PushHostWriteResponse::SharedCtor() {
reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lsn_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&lsn_)) + sizeof(result_));
}

PushHostWriteResponse::~PushHostWriteResponse() {
  // @@protoc_insertion_point(destructor:replicator_rpc.PushHostWriteResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PushHostWriteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PushHostWriteResponse::ArenaDtor(void* object) {
  PushHostWriteResponse* _this = reinterpret_cast< PushHostWriteResponse* >(object);
  (void)_this;
}
void PushHostWriteResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PushHostWriteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PushHostWriteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:replicator_rpc.PushHostWriteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    reason_.ClearNonDefaultToEmpty();
  }
  ::memset(&lsn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&lsn_)) + sizeof(result_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PushHostWriteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .replicator_rpc.PosResult result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::replicator_rpc::PosResult>(val));
        } else goto handle_unusual;
        continue;
      // string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "replicator_rpc.PushHostWriteResponse.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 lsn = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          lsn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PushHostWriteResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:replicator_rpc.PushHostWriteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .replicator_rpc.PosResult result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // string reason = 2;
  if (_internal_has_reason()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "replicator_rpc.PushHostWriteResponse.reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reason(), target);
  }

  // uint64 lsn = 3;
  if (this->lsn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_lsn(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:replicator_rpc.PushHostWriteResponse)
  return target;
}

size_t PushHostWriteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:replicator_rpc.PushHostWriteResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reason = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // uint64 lsn = 3;
  if (this->lsn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_lsn());
  }

  // .replicator_rpc.PosResult result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PushHostWriteResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:replicator_rpc.PushHostWriteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PushHostWriteResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PushHostWriteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:replicator_rpc.PushHostWriteResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:replicator_rpc.PushHostWriteResponse)
    MergeFrom(*source);
  }
}

void PushHostWriteResponse::MergeFrom(const PushHostWriteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:replicator_rpc.PushHostWriteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_reason()) {
    _internal_set_reason(from._internal_reason());
  }
  if (from.lsn() != 0) {
    _internal_set_lsn(from._internal_lsn());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void PushHostWriteResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:replicator_rpc.PushHostWriteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushHostWriteResponse::CopyFrom(const PushHostWriteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:replicator_rpc.PushHostWriteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushHostWriteResponse::IsInitialized() const {
  return true;
}

void PushHostWriteResponse::InternalSwap(PushHostWriteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PushHostWriteResponse, result_)
      + sizeof(PushHostWriteResponse::result_)
      - PROTOBUF_FIELD_OFFSET(PushHostWriteResponse, lsn_)>(
          reinterpret_cast<char*>(&lsn_),
          reinterpret_cast<char*>(&other->lsn_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PushHostWriteResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PushDirtyLogRequest::_Internal {
 public:
};

PushDirtyLogRequest::PushDirtyLogRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:replicator_rpc.PushDirtyLogRequest)
}
PushDirtyLogRequest::PushDirtyLogRequest(const PushDirtyLogRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  array_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_array_name().empty()) {
    array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_array_name(), 
      GetArena());
  }
  volume_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_volume_name().empty()) {
    volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_volume_name(), 
      GetArena());
  }
  ::memcpy(&rba_, &from.rba_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_blocks_) -
    reinterpret_cast<char*>(&rba_)) + sizeof(num_blocks_));
  // @@protoc_insertion_point(copy_constructor:replicator_rpc.PushDirtyLogRequest)
}

void PushDirtyLogRequest::SharedCtor() {
array_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
volume_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&rba_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_blocks_) -
    reinterpret_cast<char*>(&rba_)) + sizeof(num_blocks_));
}

PushDirtyLogRequest::~PushDirtyLogRequest() {
  // @@protoc_insertion_point(destructor:replicator_rpc.PushDirtyLogRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PushDirtyLogRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  array_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  volume_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PushDirtyLogRequest::ArenaDtor(void* object) {
  PushDirtyLogRequest* _this = reinterpret_cast< PushDirtyLogRequest* >(object);
  (void)_this;
}
void PushDirtyLogRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PushDirtyLogRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PushDirtyLogRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:replicator_rpc.PushDirtyLogRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  array_name_.ClearToEmpty();
  volume_name_.ClearToEmpty();
  ::memset(&rba_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_blocks_) -
      reinterpret_cast<char*>(&rba_)) + sizeof(num_blocks_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PushDirtyLogRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string array_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_array_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "replicator_rpc.PushDirtyLogRequest.array_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string volume_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_volume_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "replicator_rpc.PushDirtyLogRequest.volume_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 rba = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          rba_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 num_blocks = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          num_blocks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PushDirtyLogRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:replicator_rpc.PushDirtyLogRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string array_name = 1;
  if (this->array_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_array_name().data(), static_cast<int>(this->_internal_array_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "replicator_rpc.PushDirtyLogRequest.array_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_array_name(), target);
  }

  // string volume_name = 2;
  if (this->volume_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_volume_name().data(), static_cast<int>(this->_internal_volume_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "replicator_rpc.PushDirtyLogRequest.volume_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_volume_name(), target);
  }

  // uint64 rba = 3;
  if (this->rba() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_rba(), target);
  }

  // uint64 num_blocks = 4;
  if (this->num_blocks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_num_blocks(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:replicator_rpc.PushDirtyLogRequest)
  return target;
}

size_t PushDirtyLogRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:replicator_rpc.PushDirtyLogRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string array_name = 1;
  if (this->array_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_array_name());
  }

  // string volume_name = 2;
  if (this->volume_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_volume_name());
  }

  // uint64 rba = 3;
  if (this->rba() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_rba());
  }

  // uint64 num_blocks = 4;
  if (this->num_blocks() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_num_blocks());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PushDirtyLogRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:replicator_rpc.PushDirtyLogRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PushDirtyLogRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PushDirtyLogRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:replicator_rpc.PushDirtyLogRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:replicator_rpc.PushDirtyLogRequest)
    MergeFrom(*source);
  }
}

void PushDirtyLogRequest::MergeFrom(const PushDirtyLogRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:replicator_rpc.PushDirtyLogRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.array_name().size() > 0) {
    _internal_set_array_name(from._internal_array_name());
  }
  if (from.volume_name().size() > 0) {
    _internal_set_volume_name(from._internal_volume_name());
  }
  if (from.rba() != 0) {
    _internal_set_rba(from._internal_rba());
  }
  if (from.num_blocks() != 0) {
    _internal_set_num_blocks(from._internal_num_blocks());
  }
}

void PushDirtyLogRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:replicator_rpc.PushDirtyLogRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushDirtyLogRequest::CopyFrom(const PushDirtyLogRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:replicator_rpc.PushDirtyLogRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushDirtyLogRequest::IsInitialized() const {
  return true;
}

void PushDirtyLogRequest::InternalSwap(PushDirtyLogRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  array_name_.Swap(&other->array_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  volume_name_.Swap(&other->volume_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PushDirtyLogRequest, num_blocks_)
      + sizeof(PushDirtyLogRequest::num_blocks_)
      - PROTOBUF_FIELD_OFFSET(PushDirtyLogRequest, rba_)>(
          reinterpret_cast<char*>(&rba_),
          reinterpret_cast<char*>(&other->rba_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PushDirtyLogRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PushDirtyLogResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<PushDirtyLogResponse>()._has_bits_);
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PushDirtyLogResponse::PushDirtyLogResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:replicator_rpc.PushDirtyLogResponse)
}
PushDirtyLogResponse::PushDirtyLogResponse(const PushDirtyLogResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_reason()) {
    reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reason(), 
      GetArena());
  }
  successful_ = from.successful_;
  // @@protoc_insertion_point(copy_constructor:replicator_rpc.PushDirtyLogResponse)
}

void PushDirtyLogResponse::SharedCtor() {
reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
successful_ = false;
}

PushDirtyLogResponse::~PushDirtyLogResponse() {
  // @@protoc_insertion_point(destructor:replicator_rpc.PushDirtyLogResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PushDirtyLogResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PushDirtyLogResponse::ArenaDtor(void* object) {
  PushDirtyLogResponse* _this = reinterpret_cast< PushDirtyLogResponse* >(object);
  (void)_this;
}
void PushDirtyLogResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PushDirtyLogResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PushDirtyLogResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:replicator_rpc.PushDirtyLogResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    reason_.ClearNonDefaultToEmpty();
  }
  successful_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PushDirtyLogResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool successful = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          successful_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "replicator_rpc.PushDirtyLogResponse.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PushDirtyLogResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:replicator_rpc.PushDirtyLogResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool successful = 1;
  if (this->successful() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_successful(), target);
  }

  // string reason = 2;
  if (_internal_has_reason()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "replicator_rpc.PushDirtyLogResponse.reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:replicator_rpc.PushDirtyLogResponse)
  return target;
}

size_t PushDirtyLogResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:replicator_rpc.PushDirtyLogResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reason = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // bool successful = 1;
  if (this->successful() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PushDirtyLogResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:replicator_rpc.PushDirtyLogResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PushDirtyLogResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PushDirtyLogResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:replicator_rpc.PushDirtyLogResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:replicator_rpc.PushDirtyLogResponse)
    MergeFrom(*source);
  }
}

void PushDirtyLogResponse::MergeFrom(const PushDirtyLogResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:replicator_rpc.PushDirtyLogResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_reason()) {
    _internal_set_reason(from._internal_reason());
  }
  if (from.successful() != 0) {
    _internal_set_successful(from._internal_successful());
  }
}

void PushDirtyLogResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:replicator_rpc.PushDirtyLogResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushDirtyLogResponse::CopyFrom(const PushDirtyLogResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:replicator_rpc.PushDirtyLogResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushDirtyLogResponse::IsInitialized() const {
  return true;
}

void PushDirtyLogResponse::InternalSwap(PushDirtyLogResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(successful_, other->successful_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PushDirtyLogResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TransferDirtyLogRequest::_Internal {
 public:
};

TransferDirtyLogRequest::TransferDirtyLogRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:replicator_rpc.TransferDirtyLogRequest)
}
TransferDirtyLogRequest::TransferDirtyLogRequest(const TransferDirtyLogRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  array_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_array_name().empty()) {
    array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_array_name(), 
      GetArena());
  }
  volume_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_volume_name().empty()) {
    volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_volume_name(), 
      GetArena());
  }
  ::memcpy(&rba_, &from.rba_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_blocks_) -
    reinterpret_cast<char*>(&rba_)) + sizeof(num_blocks_));
  // @@protoc_insertion_point(copy_constructor:replicator_rpc.TransferDirtyLogRequest)
}

void TransferDirtyLogRequest::SharedCtor() {
array_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
volume_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&rba_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_blocks_) -
    reinterpret_cast<char*>(&rba_)) + sizeof(num_blocks_));
}

TransferDirtyLogRequest::~TransferDirtyLogRequest() {
  // @@protoc_insertion_point(destructor:replicator_rpc.TransferDirtyLogRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransferDirtyLogRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  array_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  volume_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransferDirtyLogRequest::ArenaDtor(void* object) {
  TransferDirtyLogRequest* _this = reinterpret_cast< TransferDirtyLogRequest* >(object);
  (void)_this;
}
void TransferDirtyLogRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransferDirtyLogRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransferDirtyLogRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:replicator_rpc.TransferDirtyLogRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  array_name_.ClearToEmpty();
  volume_name_.ClearToEmpty();
  ::memset(&rba_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_blocks_) -
      reinterpret_cast<char*>(&rba_)) + sizeof(num_blocks_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransferDirtyLogRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string array_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_array_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "replicator_rpc.TransferDirtyLogRequest.array_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string volume_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_volume_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "replicator_rpc.TransferDirtyLogRequest.volume_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 rba = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          rba_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 num_blocks = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          num_blocks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransferDirtyLogRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:replicator_rpc.TransferDirtyLogRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string array_name = 1;
  if (this->array_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_array_name().data(), static_cast<int>(this->_internal_array_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "replicator_rpc.TransferDirtyLogRequest.array_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_array_name(), target);
  }

  // string volume_name = 2;
  if (this->volume_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_volume_name().data(), static_cast<int>(this->_internal_volume_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "replicator_rpc.TransferDirtyLogRequest.volume_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_volume_name(), target);
  }

  // uint64 rba = 3;
  if (this->rba() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_rba(), target);
  }

  // uint64 num_blocks = 4;
  if (this->num_blocks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_num_blocks(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:replicator_rpc.TransferDirtyLogRequest)
  return target;
}

size_t TransferDirtyLogRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:replicator_rpc.TransferDirtyLogRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string array_name = 1;
  if (this->array_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_array_name());
  }

  // string volume_name = 2;
  if (this->volume_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_volume_name());
  }

  // uint64 rba = 3;
  if (this->rba() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_rba());
  }

  // uint64 num_blocks = 4;
  if (this->num_blocks() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_num_blocks());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferDirtyLogRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:replicator_rpc.TransferDirtyLogRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferDirtyLogRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransferDirtyLogRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:replicator_rpc.TransferDirtyLogRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:replicator_rpc.TransferDirtyLogRequest)
    MergeFrom(*source);
  }
}

void TransferDirtyLogRequest::MergeFrom(const TransferDirtyLogRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:replicator_rpc.TransferDirtyLogRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.array_name().size() > 0) {
    _internal_set_array_name(from._internal_array_name());
  }
  if (from.volume_name().size() > 0) {
    _internal_set_volume_name(from._internal_volume_name());
  }
  if (from.rba() != 0) {
    _internal_set_rba(from._internal_rba());
  }
  if (from.num_blocks() != 0) {
    _internal_set_num_blocks(from._internal_num_blocks());
  }
}

void TransferDirtyLogRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:replicator_rpc.TransferDirtyLogRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferDirtyLogRequest::CopyFrom(const TransferDirtyLogRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:replicator_rpc.TransferDirtyLogRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferDirtyLogRequest::IsInitialized() const {
  return true;
}

void TransferDirtyLogRequest::InternalSwap(TransferDirtyLogRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  array_name_.Swap(&other->array_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  volume_name_.Swap(&other->volume_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransferDirtyLogRequest, num_blocks_)
      + sizeof(TransferDirtyLogRequest::num_blocks_)
      - PROTOBUF_FIELD_OFFSET(TransferDirtyLogRequest, rba_)>(
          reinterpret_cast<char*>(&rba_),
          reinterpret_cast<char*>(&other->rba_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferDirtyLogRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TransferDirtyLogResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<TransferDirtyLogResponse>()._has_bits_);
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TransferDirtyLogResponse::TransferDirtyLogResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:replicator_rpc.TransferDirtyLogResponse)
}
TransferDirtyLogResponse::TransferDirtyLogResponse(const TransferDirtyLogResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_reason()) {
    reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reason(), 
      GetArena());
  }
  successful_ = from.successful_;
  // @@protoc_insertion_point(copy_constructor:replicator_rpc.TransferDirtyLogResponse)
}

void TransferDirtyLogResponse::SharedCtor() {
reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
successful_ = false;
}

TransferDirtyLogResponse::~TransferDirtyLogResponse() {
  // @@protoc_insertion_point(destructor:replicator_rpc.TransferDirtyLogResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransferDirtyLogResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransferDirtyLogResponse::ArenaDtor(void* object) {
  TransferDirtyLogResponse* _this = reinterpret_cast< TransferDirtyLogResponse* >(object);
  (void)_this;
}
void TransferDirtyLogResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransferDirtyLogResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransferDirtyLogResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:replicator_rpc.TransferDirtyLogResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    reason_.ClearNonDefaultToEmpty();
  }
  successful_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransferDirtyLogResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool successful = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          successful_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "replicator_rpc.TransferDirtyLogResponse.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransferDirtyLogResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:replicator_rpc.TransferDirtyLogResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool successful = 1;
  if (this->successful() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_successful(), target);
  }

  // string reason = 2;
  if (_internal_has_reason()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "replicator_rpc.TransferDirtyLogResponse.reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:replicator_rpc.TransferDirtyLogResponse)
  return target;
}

size_t TransferDirtyLogResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:replicator_rpc.TransferDirtyLogResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reason = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // bool successful = 1;
  if (this->successful() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferDirtyLogResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:replicator_rpc.TransferDirtyLogResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferDirtyLogResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransferDirtyLogResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:replicator_rpc.TransferDirtyLogResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:replicator_rpc.TransferDirtyLogResponse)
    MergeFrom(*source);
  }
}

void TransferDirtyLogResponse::MergeFrom(const TransferDirtyLogResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:replicator_rpc.TransferDirtyLogResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_reason()) {
    _internal_set_reason(from._internal_reason());
  }
  if (from.successful() != 0) {
    _internal_set_successful(from._internal_successful());
  }
}

void TransferDirtyLogResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:replicator_rpc.TransferDirtyLogResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferDirtyLogResponse::CopyFrom(const TransferDirtyLogResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:replicator_rpc.TransferDirtyLogResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferDirtyLogResponse::IsInitialized() const {
  return true;
}

void TransferDirtyLogResponse::InternalSwap(TransferDirtyLogResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(successful_, other->successful_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferDirtyLogResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TransferHostWriteRequest::_Internal {
 public:
};

TransferHostWriteRequest::TransferHostWriteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:replicator_rpc.TransferHostWriteRequest)
}
TransferHostWriteRequest::TransferHostWriteRequest(const TransferHostWriteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  array_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_array_name().empty()) {
    array_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_array_name(), 
      GetArena());
  }
  volume_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_volume_name().empty()) {
    volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_volume_name(), 
      GetArena());
  }
  ::memcpy(&rba_, &from.rba_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_blocks_) -
    reinterpret_cast<char*>(&rba_)) + sizeof(num_blocks_));
  // @@protoc_insertion_point(copy_constructor:replicator_rpc.TransferHostWriteRequest)
}

void TransferHostWriteRequest::SharedCtor() {
array_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
volume_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&rba_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_blocks_) -
    reinterpret_cast<char*>(&rba_)) + sizeof(num_blocks_));
}

TransferHostWriteRequest::~TransferHostWriteRequest() {
  // @@protoc_insertion_point(destructor:replicator_rpc.TransferHostWriteRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransferHostWriteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  array_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  volume_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransferHostWriteRequest::ArenaDtor(void* object) {
  TransferHostWriteRequest* _this = reinterpret_cast< TransferHostWriteRequest* >(object);
  (void)_this;
}
void TransferHostWriteRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransferHostWriteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransferHostWriteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:replicator_rpc.TransferHostWriteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  array_name_.ClearToEmpty();
  volume_name_.ClearToEmpty();
  ::memset(&rba_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_blocks_) -
      reinterpret_cast<char*>(&rba_)) + sizeof(num_blocks_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransferHostWriteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string array_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_array_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "replicator_rpc.TransferHostWriteRequest.array_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string volume_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_volume_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "replicator_rpc.TransferHostWriteRequest.volume_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 rba = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          rba_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 num_blocks = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          num_blocks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransferHostWriteRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:replicator_rpc.TransferHostWriteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string array_name = 1;
  if (this->array_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_array_name().data(), static_cast<int>(this->_internal_array_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "replicator_rpc.TransferHostWriteRequest.array_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_array_name(), target);
  }

  // string volume_name = 2;
  if (this->volume_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_volume_name().data(), static_cast<int>(this->_internal_volume_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "replicator_rpc.TransferHostWriteRequest.volume_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_volume_name(), target);
  }

  // uint64 rba = 3;
  if (this->rba() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_rba(), target);
  }

  // uint64 num_blocks = 4;
  if (this->num_blocks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_num_blocks(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:replicator_rpc.TransferHostWriteRequest)
  return target;
}

size_t TransferHostWriteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:replicator_rpc.TransferHostWriteRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string array_name = 1;
  if (this->array_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_array_name());
  }

  // string volume_name = 2;
  if (this->volume_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_volume_name());
  }

  // uint64 rba = 3;
  if (this->rba() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_rba());
  }

  // uint64 num_blocks = 4;
  if (this->num_blocks() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_num_blocks());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferHostWriteRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:replicator_rpc.TransferHostWriteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferHostWriteRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransferHostWriteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:replicator_rpc.TransferHostWriteRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:replicator_rpc.TransferHostWriteRequest)
    MergeFrom(*source);
  }
}

void TransferHostWriteRequest::MergeFrom(const TransferHostWriteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:replicator_rpc.TransferHostWriteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.array_name().size() > 0) {
    _internal_set_array_name(from._internal_array_name());
  }
  if (from.volume_name().size() > 0) {
    _internal_set_volume_name(from._internal_volume_name());
  }
  if (from.rba() != 0) {
    _internal_set_rba(from._internal_rba());
  }
  if (from.num_blocks() != 0) {
    _internal_set_num_blocks(from._internal_num_blocks());
  }
}

void TransferHostWriteRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:replicator_rpc.TransferHostWriteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferHostWriteRequest::CopyFrom(const TransferHostWriteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:replicator_rpc.TransferHostWriteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferHostWriteRequest::IsInitialized() const {
  return true;
}

void TransferHostWriteRequest::InternalSwap(TransferHostWriteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  array_name_.Swap(&other->array_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  volume_name_.Swap(&other->volume_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransferHostWriteRequest, num_blocks_)
      + sizeof(TransferHostWriteRequest::num_blocks_)
      - PROTOBUF_FIELD_OFFSET(TransferHostWriteRequest, rba_)>(
          reinterpret_cast<char*>(&rba_),
          reinterpret_cast<char*>(&other->rba_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferHostWriteRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TransferHostWriteResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<TransferHostWriteResponse>()._has_bits_);
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TransferHostWriteResponse::TransferHostWriteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:replicator_rpc.TransferHostWriteResponse)
}
TransferHostWriteResponse::TransferHostWriteResponse(const TransferHostWriteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_reason()) {
    reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reason(), 
      GetArena());
  }
  successful_ = from.successful_;
  // @@protoc_insertion_point(copy_constructor:replicator_rpc.TransferHostWriteResponse)
}

void TransferHostWriteResponse::SharedCtor() {
reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
successful_ = false;
}

TransferHostWriteResponse::~TransferHostWriteResponse() {
  // @@protoc_insertion_point(destructor:replicator_rpc.TransferHostWriteResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransferHostWriteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransferHostWriteResponse::ArenaDtor(void* object) {
  TransferHostWriteResponse* _this = reinterpret_cast< TransferHostWriteResponse* >(object);
  (void)_this;
}
void TransferHostWriteResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransferHostWriteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransferHostWriteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:replicator_rpc.TransferHostWriteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    reason_.ClearNonDefaultToEmpty();
  }
  successful_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransferHostWriteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool successful = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          successful_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "replicator_rpc.TransferHostWriteResponse.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransferHostWriteResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:replicator_rpc.TransferHostWriteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool successful = 1;
  if (this->successful() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_successful(), target);
  }

  // string reason = 2;
  if (_internal_has_reason()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "replicator_rpc.TransferHostWriteResponse.reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:replicator_rpc.TransferHostWriteResponse)
  return target;
}

size_t TransferHostWriteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:replicator_rpc.TransferHostWriteResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reason = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // bool successful = 1;
  if (this->successful() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferHostWriteResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:replicator_rpc.TransferHostWriteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferHostWriteResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransferHostWriteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:replicator_rpc.TransferHostWriteResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:replicator_rpc.TransferHostWriteResponse)
    MergeFrom(*source);
  }
}

void TransferHostWriteResponse::MergeFrom(const TransferHostWriteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:replicator_rpc.TransferHostWriteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_reason()) {
    _internal_set_reason(from._internal_reason());
  }
  if (from.successful() != 0) {
    _internal_set_successful(from._internal_successful());
  }
}

void TransferHostWriteResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:replicator_rpc.TransferHostWriteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferHostWriteResponse::CopyFrom(const TransferHostWriteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:replicator_rpc.TransferHostWriteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferHostWriteResponse::IsInitialized() const {
  return true;
}

void TransferHostWriteResponse::InternalSwap(TransferHostWriteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(successful_, other->successful_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferHostWriteResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace replicator_rpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::replicator_rpc::Chunk* Arena::CreateMaybeMessage< ::replicator_rpc::Chunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::replicator_rpc::Chunk >(arena);
}
template<> PROTOBUF_NOINLINE ::replicator_rpc::CompleteReadRequest* Arena::CreateMaybeMessage< ::replicator_rpc::CompleteReadRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::replicator_rpc::CompleteReadRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::replicator_rpc::CompleteReadResponse* Arena::CreateMaybeMessage< ::replicator_rpc::CompleteReadResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::replicator_rpc::CompleteReadResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::replicator_rpc::CompleteWriteRequest* Arena::CreateMaybeMessage< ::replicator_rpc::CompleteWriteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::replicator_rpc::CompleteWriteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::replicator_rpc::CompleteWriteResponse* Arena::CreateMaybeMessage< ::replicator_rpc::CompleteWriteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::replicator_rpc::CompleteWriteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::replicator_rpc::PushHostWriteRequest* Arena::CreateMaybeMessage< ::replicator_rpc::PushHostWriteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::replicator_rpc::PushHostWriteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::replicator_rpc::PushHostWriteResponse* Arena::CreateMaybeMessage< ::replicator_rpc::PushHostWriteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::replicator_rpc::PushHostWriteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::replicator_rpc::PushDirtyLogRequest* Arena::CreateMaybeMessage< ::replicator_rpc::PushDirtyLogRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::replicator_rpc::PushDirtyLogRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::replicator_rpc::PushDirtyLogResponse* Arena::CreateMaybeMessage< ::replicator_rpc::PushDirtyLogResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::replicator_rpc::PushDirtyLogResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::replicator_rpc::TransferDirtyLogRequest* Arena::CreateMaybeMessage< ::replicator_rpc::TransferDirtyLogRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::replicator_rpc::TransferDirtyLogRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::replicator_rpc::TransferDirtyLogResponse* Arena::CreateMaybeMessage< ::replicator_rpc::TransferDirtyLogResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::replicator_rpc::TransferDirtyLogResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::replicator_rpc::TransferHostWriteRequest* Arena::CreateMaybeMessage< ::replicator_rpc::TransferHostWriteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::replicator_rpc::TransferHostWriteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::replicator_rpc::TransferHostWriteResponse* Arena::CreateMaybeMessage< ::replicator_rpc::TransferHostWriteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::replicator_rpc::TransferHostWriteResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
